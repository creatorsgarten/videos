WEBVTT

00:00:00.600 --> 00:00:02.200
ก็เริ่มกันเลยดีกว่านะครับ

00:00:02.200 --> 00:00:04.800
สวัสดีครับผม ผมชื่อไทนะครับ

00:00:04.800 --> 00:00:08.200
ตอนนี้เป็น Software Engineer อยู่ที่ Eventpop ครับ

00:00:08.200 --> 00:00:10.000
อยู่ใต้ Opn นะครับ

00:00:10.000 --> 00:00:12.400
สำหรับวันนี้ผมอยากจะมาแชร์แนวคิด

00:00:12.400 --> 00:00:14.000
วิธีที่ผมกำลังลองใช้

00:00:14.000 --> 00:00:15.600
อยู่กับโปรเจคต่างๆ นะครับ

00:00:15.600 --> 00:00:18.200
ทั้งโปรเจคส่วนตัวแล้วก็โปรเจคที่ทำงานนะครับ

00:00:18.200 --> 00:00:21.300
เพื่อที่จะทำให้ผมสามารถพัฒนา Software ได้อย่างรวดเร็ว

00:00:21.300 --> 00:00:23.200
โดยยังคงคุณภาพอยู่นะครับ

00:00:23.200 --> 00:00:24.200
ก็หัวข้อนี้นะครับ

00:00:24.200 --> 00:00:25.900
เราจะ move fast ตามชื่อเลยนะครับ

00:00:25.900 --> 00:00:28.900
เพราะว่า สไลด์ผมเยอะนะครับ

00:00:28.900 --> 00:00:30.400
ก่อนอื่นต้องขอบอกก่อนนะครับว่า

00:00:30.400 --> 00:00:31.400
เนื้อหาในหัวข้อนี้

00:00:31.400 --> 00:00:32.900
ส่วนมากจะเป็นความคิดส่วนตัว

00:00:32.900 --> 00:00:34.000
จากประสบการณ์นะครับ

00:00:34.000 --> 00:00:36.000
อาจจะไม่ได้มี fact มา back แบบแน่นๆ

00:00:36.000 --> 00:00:37.500
นะครับ แล้วก็อาจจะมีช่องโหว่

00:00:37.500 --> 00:00:38.600
เต็มไปหมดเลยนะครับ

00:00:38.600 --> 00:00:40.300
ฉะนั้นก็อย่าเพิ่งเชื่อ 100% นะครับ

00:00:40.300 --> 00:00:41.700
เพราะว่า opinion ของผมเนี่ย

00:00:41.700 --> 00:00:42.500
พอผมเรียนรู้

00:00:42.500 --> 00:00:44.800
ผมก็เปลี่ยนความคิดตัวเองไป เรื่อยๆ นะครับ

00:00:44.800 --> 00:00:46.000
วันนี้ผมมองแบบนี้ เดือนหน้า

00:00:46.000 --> 00:00:47.600
ผมอาจจะมองอีกแบบนึงก็ได้นะครับ

00:00:47.600 --> 00:00:50.300
แต่ว่าอย่างน้อยก็หวังว่าจะได้มุมมองอะไรสักอย่าง

00:00:50.300 --> 00:00:51.800
กลับไปประยุกต์ใช้หรือ

00:00:51.800 --> 00:00:54.300
กลับไปคิดเล่นกันต่อนะครับ

00:00:54.300 --> 00:00:56.100
ก็ ที่ผมอยากมาพูดหัวข้อนี้

00:00:56.100 --> 00:00:57.600
เพราะว่ามันก็จะมีบางทีที่

00:00:57.600 --> 00:01:00.400
ผมเข้าไปลองทำโปรเจคบางโปรเจคนะครับ

00:01:00.400 --> 00:01:02.800
แล้วก็พบว่า ผมไม่ค่อยกล้าแก้โค้ดเลยครับ

00:01:02.800 --> 00:01:04.500
ไม่ค่อยกล้าปรับปรุงโค้ดเลย

00:01:04.500 --> 00:01:05.700
แล้วความรู้สึกนั้นมันทำให้

00:01:05.700 --> 00:01:07.900
ผมรู้สึกว่าผมทำงานได้ช้าครับ

00:01:07.900 --> 00:01:10.900
ซึ่งผมก็ไม่ค่อยชอบความรู้สึกนั้นเท่าไหร่นะ

00:01:10.900 --> 00:01:12.500
อย่างเคยมีรอบนึงครับ

00:01:12.500 --> 00:01:16.700
ที่มันมีระบบนึงที่อยู่ๆ มันทำงานช้าครับ

00:01:16.700 --> 00:01:19.500
คนที่เข้าเว็บผ่านมือถือ รู้สึกว่าโปรแกรมมันทำงานกระตุก

00:01:19.500 --> 00:01:20.900
ผมก็เลยเข้าไป optimize มัน

00:01:20.900 --> 00:01:22.200
ก็เป็น app React นะ

00:01:22.200 --> 00:01:24.100
ก็ optimize ให้มันทำงานเร็วขึ้น

00:01:24.100 --> 00:01:25.600
ซึ่งเวลา optimize บางทีผมต้อง

00:01:25.600 --> 00:01:27.300
รื้อโค้ดหลายส่วนครับ

00:01:27.300 --> 00:01:28.400
ผมก็ทำเสร็จแล้วแหละ

00:01:28.400 --> 00:01:31.000
แต่ว่าไม่กล้า merge ไม่กล้าปล่อยขึ้น production

00:01:31.000 --> 00:01:32.900
เพราะผมกลัวว่าจะไปทำอะไรพังนะ

00:01:32.900 --> 00:01:34.200
ก็ต้องเสียเวลามา test feature

00:01:34.200 --> 00:01:36.700
ต่างๆ นะครับ เพื่อให้เกิดความมั่นใจนะครับ

00:01:36.700 --> 00:01:38.500
ยิ่งถ้า project เริ่มใหญ่เนี่ย

00:01:38.500 --> 00:01:40.100
ก็จะยิ่งใช้เวลาในการ test นาน

00:01:40.100 --> 00:01:41.700
ถึงจะมั่นใจได้นะครับ

00:01:41.700 --> 00:01:42.700
ซึ่งสิ่งที่มันจะมาช่วยก็คือ

00:01:42.700 --> 00:01:44.500
automated testing ใช่ไหมครับ

00:01:44.500 --> 00:01:46.500
ทุกคนรู้ว่าควรเขียน automated test นะครับ

00:01:46.500 --> 00:01:49.300
บางครั้งผมก็คุยกับ dev คนอื่นๆ ดูนะครับ

00:01:49.300 --> 00:01:50.900
ถามว่าเขียน test กันหรือเปล่า

00:01:50.900 --> 00:01:52.700
บางคนที่ทำงานใน startup นะครับ

00:01:52.700 --> 00:01:54.900
ก็บอกว่าไม่มีเวลามาเขียน unit test เลย

00:01:54.900 --> 00:01:57.100
เพราะว่าต้องรีบปั่นของให้เสร็จทันเวลาเนอะ

00:01:57.100 --> 00:01:59.400
แต่พอเขียน code แบบไม่มี unit test เนี่ย

00:01:59.400 --> 00:02:01.900
code มันก็มีโอกาสที่จะพันกันมั่วไปหมดใช่ไหม

00:02:01.900 --> 00:02:03.600
พอกลับมาเขียน unit test เนี่ย

00:02:03.600 --> 00:02:04.400
กลับมาเขียนเพิ่มทีหลังแทบ

00:02:04.400 --> 00:02:05.900
จะเขียนไม่ได้เลย

00:02:05.900 --> 00:02:08.300
ถ้าเราไม่รื้อโค้ดให้มันกลับมา test ได้

00:02:08.300 --> 00:02:11.500
แต่พอจะรื้อโค้ดเราก็ไม่กล้ารื้อ เพราะไม่มี test ใช่ไหม

00:02:11.500 --> 00:02:13.800
นอกจากไม่มี unit test แล้วเนี่ย

00:02:13.800 --> 00:02:15.300
พวก test ระดับสูงกว่า

00:02:15.300 --> 00:02:16.700
พวก API test, UI test

00:02:16.700 --> 00:02:18.400
ก็อาจจะไม่ได้เขียนนะครับ

00:02:18.400 --> 00:02:19.700
แล้วเวลาจะปล่อยของขึ้น

00:02:19.700 --> 00:02:21.200
production ทีนี้ทำยังไงนะครับ

00:02:21.200 --> 00:02:23.200
ถ้าไม่ปล่อยๆ แบบ YOLO ไปเลยนะครับ

00:02:23.200 --> 00:02:25.300
ก็อาจจะต้องไล่ทดสอบแบบ manual

00:02:25.300 --> 00:02:27.500
หรือไม่ก็โยนให้อีกทีมหนึ่งทำนะครับ

00:02:27.500 --> 00:02:29.100
เช่นทีม QA นะครับ

00:02:29.100 --> 00:02:30.500
แล้วถ้าโชคดีหน่อยนะครับ

00:02:30.500 --> 00:02:32.500
ก็ทีม QA เนี่ย ก็จะเขียน

00:02:32.500 --> 00:02:33.700
automated test ให้นะครับ

00:02:33.700 --> 00:02:35.900
แต่บางที automate test เนี่ย

00:02:35.900 --> 00:02:38.400
มัน run ได้แค่บน environment QA

00:02:38.400 --> 00:02:40.400
เราเอามา run ใน localhost มันก็ run ไม่ได้นะครับ

00:02:40.400 --> 00:02:42.700
ฉะนั้นกว่าเราจะรู้ว่า

00:02:42.700 --> 00:02:44.200
กว่าเราจะรู้ว่าที่เราแก้ไป

00:02:44.200 --> 00:02:45.500
มันทำอะไรพัง

00:02:45.500 --> 00:02:47.000
บางที feedback loop มันก็ช้าครับ

00:02:47.000 --> 00:02:50.400
ถ้าไม่มี automate test คอยช่วยนะครับ

00:02:50.400 --> 00:02:51.800
ซึ่งที่ผมเคยอ่านมาเนี่ย

00:02:51.800 --> 00:02:53.800
เขาบอกว่าทีมที่แบบ high performing

00:02:53.800 --> 00:02:55.100
high performing มากๆ เนี่ย

00:02:55.100 --> 00:02:57.000
feedback loop มันควรจะสั้น

00:02:57.000 --> 00:02:58.800
เขาบอกว่าทีมควรจะสามารถ

00:02:58.800 --> 00:03:00.400
เอา code ที่พัฒนาเสร็จ

00:03:00.400 --> 00:03:02.000
ขึ้น production ได้

00:03:02.000 --> 00:03:03.900
ภายในเวลาประมาณ 15 นาทีนะครับ

00:03:03.900 --> 00:03:05.700
อันนี้ก็กลายเป็นคำพูดว่า

00:03:05.700 --> 00:03:08.000
15 Minutes or Bust นะครับ

00:03:08.000 --> 00:03:11.800
ซึ่งผมก็ค่อยๆ หาทางที่จะไปใกล้จุดนั้น

00:03:11.800 --> 00:03:13.100
มากขึ้นเรื่อยๆ นะครับ

00:03:13.100 --> 00:03:15.900
ถ้าเราอยู่ในทีมที่แบ่งมี mindset เกี่ยวกับ TDD ครับ

00:03:15.900 --> 00:03:16.900
ว่าแบบไม่ว่ายังไง

00:03:16.900 --> 00:03:19.900
ไม่ว่าการเขียน test มันจะเป็นยังไงเนี่ย

00:03:19.900 --> 00:03:22.500
ยังไงเราก็ต้องมี test เพื่ออนาคตที่ยั่งยืนนะ

00:03:22.500 --> 00:03:24.600
มันก็อาจจะไปถึงจุดนั้นง่ายหน่อยนะครับ

00:03:24.600 --> 00:03:27.000
แต่ว่าแค่การจะ TDD เนี่ย

00:03:27.000 --> 00:03:29.500
ผมว่ามันก็ต้องลงทุนหาศาลเลยครับ

00:03:29.500 --> 00:03:31.700
ตั้งแต่เรื่องการศึกษาเลย

00:03:31.700 --> 00:03:33.400
ตั้งแต่สมัยที่เรียนมหาวิทยาลัยเนี่ย

00:03:33.400 --> 00:03:35.200
เรื่อง test ผมก็ได้เรียนแค่ทฤษฎี

00:03:35.200 --> 00:03:39.500
แล้วก็ภาคปฏิบัติก็ได้ทำกับตัวอย่างเบสิคๆ ครับ

00:03:39.500 --> 00:03:40.700
พอต้องมาทดสอบโค้ดจริงๆ

00:03:40.700 --> 00:03:42.000
ก็พบว่า component นึงเนี่ย

00:03:42.000 --> 00:03:44.200
render component ย่อยอีก 100 อันนะครับ

00:03:44.200 --> 00:03:45.600
ต้องเตรียม environment ให้ component

00:03:45.600 --> 00:03:48.500
มันสามารถ run ในตัว test environment เราได้

00:03:48.500 --> 00:03:51.400
หรือไม่ก็ต้องไปจัดการแก้ให้ component แต่ละตัว

00:03:51.400 --> 00:03:54.700
สามารถ mock ส่วนประกอบย่อยๆ อีกได้เนี่ย

00:03:54.700 --> 00:03:57.000
เอาเป็นว่าไม่ว่าไปทางไหนมันก็เหนื่อยหมดเลยครับ

00:03:57.000 --> 00:03:58.400
ขนาดผมเขียน test เองยังเหนื่อยเลย

00:03:58.400 --> 00:04:01.500
จะชวนคนในทีมมาเขียนด้วยเนี่ย ก็น่าจะยากครับ

00:04:01.500 --> 00:04:02.600
แล้วมันก็ไม่ใช่ว่า

00:04:02.600 --> 00:04:04.500
เราเรียนแค่แบบชั่วโมง 2 ชั่วโมง

00:04:04.500 --> 00:04:05.900
จะเขียน test เป็นใช่ไหม

00:04:05.900 --> 00:04:07.100
ผมมองว่ามันเป็นศาสตร์และศิลป์

00:04:07.100 --> 00:04:09.900
เลยครับเรื่องการทำ TDD เนี่ย

00:04:09.900 --> 00:04:11.200
ตอนที่ผมเริ่มทำนะ speed ผมตก

00:04:11.200 --> 00:04:13.400
แบบ drop มากๆ เลย

00:04:13.400 --> 00:04:14.400
เพราะต้องคอยคำนึงตลอดว่า

00:04:14.400 --> 00:04:15.800
ไอ้เนี่ยจะ test ยังไงดี

00:04:15.800 --> 00:04:17.700
แถมบางทีเนี่ยผมเขียน test ที่ไม่ดี

00:04:17.700 --> 00:04:18.700
มันกลับทำให้ผมช้าลง

00:04:18.700 --> 00:04:19.899
แทนที่จะเร็วขึ้นครับ

00:04:19.899 --> 00:04:21.200
เพราะนอกจากมันจับ bug

00:04:21.200 --> 00:04:23.100
อะไรไม่ได้เลยจริงๆ แล้วเนี่ย

00:04:23.100 --> 00:04:25.300
มันยังทำให้เวลาผม refactor เนี่ย

00:04:25.300 --> 00:04:27.900
จะแก้โค้ดนิดแก้โค้ดหน่อย มันก็ fail

00:04:27.900 --> 00:04:30.000
ก็ต้องมาแก้ test ตามอะไรแบบนี้ครับ

00:04:30.000 --> 00:04:31.900
กว่าจะมาอยู่ในจุดที่รู้สึกว่า

00:04:31.900 --> 00:04:34.400
เขียน test แล้วทำให้เร็วขึ้นเนี่ยก็ใช้เวลาเป็นปีครับ

00:04:34.400 --> 00:04:35.500
ซึ่งก็นั่นแหละครับ

00:04:35.500 --> 00:04:36.900
บางทีไม่มีทรัพยากรพอ

00:04:36.900 --> 00:04:38.800
ที่จะแบบมาลงทุนกับเรื่องพวกนี้

00:04:38.800 --> 00:04:40.000
บางทีผมเองก็ไม่มีเวลา

00:04:40.000 --> 00:04:41.100
เขียน unit test เหมือนกัน

00:04:41.100 --> 00:04:43.300
โดยเฉพาะงานที่มันแบบรีบมากๆ นะครับ

00:04:43.300 --> 00:04:45.400
มันก็เลยเหมือนว่าเราต้องเลือกเอาอ่ะ

00:04:45.400 --> 00:04:47.900
ว่าถ้าไม่ยอมลงทุนเรื่อง testing, CI/CD

00:04:47.900 --> 00:04:49.300
ก็ต้องอยู่กันแบบช้าๆ กลัวๆ

00:04:49.300 --> 00:04:50.400
จะทำอะไรทีก็ต้องรอรีวิว

00:04:50.400 --> 00:04:53.500
รอ test รอ approve นะครับ

00:04:53.500 --> 00:04:54.500
แต่ถึงแม้จะก้าวข้ามจุดนั้นมาได้

00:04:54.500 --> 00:04:57.300
เราก็จะเมื่อเจอด่านต่อไปครับ คือ framework นะครับ

00:04:57.300 --> 00:04:58.600
บางทีถ้าเราเขียนโค้ดตาม

00:04:58.600 --> 00:05:01.000
ท่ามาตรฐานปกติของ framework นะ

00:05:01.000 --> 00:05:02.700
มันได้ code ที่ unit test ไม่ได้ครับ

00:05:02.700 --> 00:05:04.300
ก็ต้องเปลี่ยนไป integration test แทน

00:05:04.300 --> 00:05:05.900
เราก็ต้องมาสร้าง environment

00:05:05.900 --> 00:05:07.300
สำหรับการ test นะครับ

00:05:07.300 --> 00:05:09.300
หรือไม่ ก็ต้อง refactor code

00:05:09.300 --> 00:05:10.700
ให้มัน unit test ง่ายขึ้น

00:05:10.700 --> 00:05:13.400
เช่น เอา hexagonal architecture มาใช้นะครับ

00:05:13.400 --> 00:05:14.400
แต่พอเอามาใช้เนี่ย จากเดิม

00:05:14.400 --> 00:05:16.300
code ที่อ่านง่ายๆ ตรงไปตรงมานะ

00:05:16.300 --> 00:05:18.800
เดิมมีแค่ 2 class แล้วมี controller กับ model

00:05:18.800 --> 00:05:20.600
ก็แตกเป็น 5 class ครับ

00:05:20.600 --> 00:05:23.500
break ออกจาก pattern เดิมของ framework นั้นครับ

00:05:23.500 --> 00:05:24.400
คนอื่นเข้ามาอ่านเนี่ย

00:05:24.400 --> 00:05:25.300
ก็ไม่เข้าใจแล้ว

00:05:25.300 --> 00:05:27.100
ต้องกระโดดไปกระโดดมา 5 ไฟล์

00:05:27.100 --> 00:05:29.100
แต่ว่าทุกอย่างเนี่ย unit test ได้หมดเลยนะ

00:05:29.100 --> 00:05:30.600
แต่คุ้มหรือเปล่า ไม่รู้นะครับ

00:05:30.600 --> 00:05:32.400
ก็เอาเป็นว่า trade-off มันเยอะมากครับ

00:05:32.400 --> 00:05:36.400
แล้วก็เกิดแนวคิดต่างๆ ที่มันขัดแย้งกันมากมายนะครับ

00:05:36.400 --> 00:05:37.900
บ้างก็แนะนำ Testing Pyramid

00:05:37.900 --> 00:05:39.300
บ้างก็บอกว่า Pyramid มัน out ไปแล้ว

00:05:39.300 --> 00:05:41.300
แนะนำ Testing Trophy แทนนะครับ

00:05:41.300 --> 00:05:43.400
บ้างก็บอกว่าการทำ end-to-end test เนี่ย

00:05:43.400 --> 00:05:46.000
เป็นไอเดียที่ไม่ค่อยดีเท่าไหร่ ก็ให้ระวังนะครับ

00:05:46.000 --> 00:05:48.400
บ้างก็บอกว่า unit test เนี่ยมันไม่ค่อยมีประโยชน์

00:05:48.400 --> 00:05:50.400
ก็เลยไม่ค่อยเขียน

00:05:50.400 --> 00:05:53.900
แต่อย่างน้อยก็จะดูเห็นด้วยกันหมดนะครับว่า

00:05:53.900 --> 00:05:57.100
การเขียน test มันเป็นเรื่องปวดหัวมากเลยครับ

00:05:57.100 --> 00:05:58.300
สำหรับ session นี้นะครับ

00:05:58.300 --> 00:05:59.800
ผมก็จะมาพูดเกี่ยวกับ

00:05:59.800 --> 00:06:01.200
แนวทางในการ

00:06:01.200 --> 00:06:02.500
พัฒนาและทดสอบ software ที่

00:06:02.500 --> 00:06:03.400
ผมใช้อยู่ตอนนี้นะ

00:06:03.400 --> 00:06:05.300
สำหรับผมเนี่ย มีด้วยกัน 2 ข้อ

00:06:05.300 --> 00:06:07.900
1. คือทำ software ของเราให้มัน test ง่ายๆ ครับ

00:06:07.900 --> 00:06:10.100
เราลองสวมหมวก tester แล้ว

00:06:10.100 --> 00:06:11.400
ดูว่าตรงไหนเนี่ย

00:06:11.400 --> 00:06:12.400
ถ้าเรารู้สึกว่าตรงนั้น

00:06:12.400 --> 00:06:13.300
มัน test ยาก เราก็ไปแก้

00:06:13.300 --> 00:06:15.600
software ของเราให้มัน test ตรงนั้นง่ายขึ้น

00:06:15.600 --> 00:06:18.100
พอทำแบบนั้นแล้วการเขียน test มันก็จะง่ายขึ้น

00:06:18.100 --> 00:06:19.600
แล้วพอเราไปถึงจุดที่

00:06:19.600 --> 00:06:21.900
การเขียน test เนี่ย มันง่ายกว่าการทดสอบด้วยมือ

00:06:21.900 --> 00:06:24.700
ผมก็เชื่อว่าคนจะเริ่มเขียน test กันเองนะครับ

00:06:24.700 --> 00:06:27.000
อย่างที่ 2 คือถ้าเจอ bug เนี่ย

00:06:27.000 --> 00:06:29.800
ก่อนแก้ ให้เขียน test ครอบก่อนนะครับ

00:06:29.800 --> 00:06:31.200
คราวนี้สิ่งที่มันตอบโจทย์

00:06:31.200 --> 00:06:32.900
ผมได้แบบมากๆ เลยเนี่ย

00:06:32.900 --> 00:06:34.800
มันกลับไม่ใช่การทำ unit test ครับ

00:06:34.800 --> 00:06:37.600
ผมพบว่ามันคือ black box testing นะครับ

00:06:37.600 --> 00:06:39.200
คืออะไรครับ ปกติโปรแกรมของเราเนี่ย

00:06:39.200 --> 00:06:40.600
ก็จะประกอบไปด้วยส่วนย่อยๆ

00:06:40.600 --> 00:06:42.300
ต่างๆ ใช่มั้ยครับ พวก controller

00:06:42.300 --> 00:06:44.800
components utility อะไรต่างๆ นะ

00:06:44.800 --> 00:06:46.600
การ test แบบ white box เนี่ย คือ

00:06:46.600 --> 00:06:48.200
เราเอาส่วนประกอบย่อยๆ

00:06:48.200 --> 00:06:50.500
มาแยก test กันแบบแยกๆ ชิ้นใช่มั้ยครับ

00:06:50.500 --> 00:06:52.200
แต่การ test แบบ black box คือ

00:06:52.200 --> 00:06:53.700
เราไม่สนใจเลยว่าข้างในมีอะไรนะครับ

00:06:53.700 --> 00:06:55.800
เรา test จากข้างนอกอย่างเดียวเลย

00:06:55.800 --> 00:06:58.300
ถามว่าแบบนี้ไม่ยากเหรอ ก็กลับไปที่ข้อ 1 ครับ

00:06:58.300 --> 00:06:59.900
ก็ทำให้มัน test ง่ายนะครับ

00:06:59.900 --> 00:07:02.500
เราไปดูที่ test pyramid กันก่อนนะครับ

00:07:02.500 --> 00:07:05.100
ซึ่งจริงๆ pyramid มันก็มีหลายเวอร์ชั่นมากครับ

00:07:05.100 --> 00:07:06.200
มาดูรูปนี้กันก่อน

00:07:06.200 --> 00:07:08.500
ส่วนมากเนี่ย black box test มัน

00:07:08.500 --> 00:07:09.900
จะคลุมด้านบนของ pyramid นะ

00:07:09.900 --> 00:07:12.300
คือพวก end-to-end test กับ integration test ครับ

00:07:12.300 --> 00:07:14.300
ส่วนด้านบนของ pyramid เนี่ย

00:07:14.300 --> 00:07:16.300
มักจะถูกมองในแง่ลบนะครับ

00:07:16.300 --> 00:07:17.700
เพราะว่ามันทั้งช้า ทั้งพังง่าย

00:07:17.700 --> 00:07:21.000
test flaky ง่าย แล้วเวลาพังทีเนี่ย

00:07:21.000 --> 00:07:22.500
เราก็ไม่รู้ว่ามันพังที่จุดไหน

00:07:22.500 --> 00:07:23.500
เราก็ต้องไปคอยขุด code

00:07:23.500 --> 00:07:26.400
ไปคอย debug อีกทีอะ ก็เลยกลายเป็นคำแนะนำ

00:07:26.400 --> 00:07:27.600
ว่าให้เขียนกันน้อยๆ นะ

00:07:27.600 --> 00:07:29.900
แล้วก็ให้ไปทำ unit test เยอะๆ แทน

00:07:29.900 --> 00:07:31.800
แต่ว่าหลายครั้งเนี่ย ก็กลายเป็นว่า developer ก็

00:07:31.800 --> 00:07:34.300
เขียนกันแต่ unit test แล้วไม่มี test ระดับ UI เลย

00:07:34.300 --> 00:07:35.300
หรือถ้ายิ่งไปกว่านั้นหน่อยเนี่ย

00:07:35.300 --> 00:07:37.400
มี unit test แล้ว test ผ่านหมดนะ

00:07:37.400 --> 00:07:39.600
แต่พอโปรแกรมพังบน production มันไม่มี log อะไรเลย

00:07:39.600 --> 00:07:42.400
เพราะว่าเชื่อ unit test กันจนเกินไปนะครับ

00:07:42.400 --> 00:07:44.000
อ่า ปัจจุบันเนี่ย เวลา

00:07:44.000 --> 00:07:47.000
ที่ผมเข้าไปใน codebase แล้วพบว่ามันไม่มี test เนี่ย

00:07:47.000 --> 00:07:48.600
เดี๋ยวนี้สิ่งที่ผมพยายามทำนะ

00:07:48.600 --> 00:07:50.800
ก็ไม่ได้เริ่มจากการเขียน unit test อีกต่อไปครับ

00:07:50.800 --> 00:07:54.600
เดี๋ยวนี้ผมจะลอง test จาก UI ลงไปก่อนนะครับ

00:07:54.600 --> 00:07:58.100
ซึ่งบางคนเห็นผมทำแบบนี้ก็สงสัยว่าทำไมผมถึงเลือกไปทางนี้

00:07:58.100 --> 00:07:59.200
คือแบบ unit test เนี่ย

00:07:59.200 --> 00:08:02.400
มันเร็วจริง มันเสถียรจริง มันละเอียดจริง

00:08:02.400 --> 00:08:04.600
แต่มันไม่ใช่สิ่งที่ผมต้องการตอนนั้นนะครับ

00:08:04.600 --> 00:08:06.400
ที่ผมต้องการคือไอ้นี่ครับ confidence

00:08:06.400 --> 00:08:08.000
คือเราต้องการมั่นใจว่าแก้ code ไปแล้ว

00:08:08.000 --> 00:08:10.400
มันไม่มีอะไรพังนะ

00:08:10.400 --> 00:08:12.300
เรามาดูตัวอย่าง code กันดีกว่านะครับ

00:08:12.300 --> 00:08:13.300
เราเริ่มจาก unit test ก่อนละกัน

00:08:13.300 --> 00:08:15.400
อันนี้เอามาจาก NestJS นะครับ

00:08:15.400 --> 00:08:17.400
คือเวลาเราจะเขียน unit test ให้ NestJS เนี่ย

00:08:17.400 --> 00:08:19.400
ก่อนอื่นเราต้องรู้จักพวก API testing

00:08:19.400 --> 00:08:21.800
เช่นพวก createTestingModule นะครับ

00:08:21.800 --> 00:08:24.400
ที่เป็นของที่เราต้องเรียนรู้เพิ่มนะ

00:08:24.400 --> 00:08:26.200
แล้วเราก็ต้องรู้ว่า controller ของเรา

00:08:26.200 --> 00:08:27.400
ไปเรียก service อะไรบ้าง

00:08:27.400 --> 00:08:29.400
เราจะได้ mock ได้ถูก method นะครับ

00:08:29.400 --> 00:08:31.400
ซึ่งอันนี้เรายังไม่พูดถึงข้อดีข้อเสียของมันละกัน

00:08:31.400 --> 00:08:34.400
มาเทียบกับ black box API test นะครับ

00:08:34.400 --> 00:08:37.799
อันนี้ผมยิง status ยิง API เช็ค

00:08:37.799 --> 00:08:41.100
status แล้วก็เช็ค response แล้วก็จบละครับ

00:08:41.100 --> 00:08:42.400
มันก็ดูง่ายกว่าเนอะ

00:08:42.400 --> 00:08:45.400
แต่ถ้าใครที่ช่างสังเกตหน่อยก็จะเกิดคำถามว่า

00:08:45.400 --> 00:08:46.800
อ้าว แบบนี้ตอนแรกเนี่ย

00:08:46.800 --> 00:08:49.400
database เราเป็น database เปล่า test ก็พังสิ

00:08:49.400 --> 00:08:51.000
หรือถ้าข้อมูลที่ใช้ใน test เนี่ย

00:08:51.000 --> 00:08:54.600
มันมีข้อมูลอื่นๆ อยู่ด้วยเนี่ย ก็พังสิ ใช่ไหมครับ

00:08:54.600 --> 00:08:56.400
ก็ใช่ครับ ก็ต้องแก้

00:08:56.400 --> 00:08:58.400
วิธีที่ผมแก้คือผมเปิด API เพิ่มครับ

00:08:58.400 --> 00:09:00.400
เอาไว้เตรียมข้อมูลใน database

00:09:00.400 --> 00:09:02.000
พอเรายิง API เนี่ย

00:09:02.000 --> 00:09:04.400
database ก็จะมีข้อมูลที่พร้อม test นะครับ

00:09:04.400 --> 00:09:07.400
คราวนี้ถ้าใครช่างสังเกตอีกหน่อยเนี่ย ก็จะแย้งมาว่า

00:09:07.400 --> 00:09:08.700
อ้าว แบบนี้เวลาเรายิง API ทีเนี่ย

00:09:08.700 --> 00:09:10.900
ข้อมูลเก่าก็หายหมดเลยสิ

00:09:10.900 --> 00:09:12.800
หรือถ้า API มันไม่เคลียร์ข้อมูล

00:09:12.800 --> 00:09:14.400
ข้อมูลต่างๆ มันก็ปนกันหมดเลยใช่ไหม

00:09:14.400 --> 00:09:15.800
ถ้ารันหลายๆ test พร้อมกันเนี่ย

00:09:15.800 --> 00:09:17.400
มันก็ชนกันพังเลย

00:09:17.400 --> 00:09:19.400
ซึ่งใช่ครับ ก็ต้องแก้เหมือนกัน

00:09:19.400 --> 00:09:21.400
ผมแก้โดยการทำให้ระบบของผมเนี่ย

00:09:21.400 --> 00:09:23.400
รองรับได้หลายๆ environment

00:09:23.400 --> 00:09:25.400
ใน instance เดียวนะครับ

00:09:25.400 --> 00:09:26.900
โดยแต่ละ environment เนี่ยก็จะมี

00:09:26.900 --> 00:09:29.400
มันก็จะแยกจากกันนะครับ

00:09:29.400 --> 00:09:31.400
ก็คือระบบก็จะเป็น multi-tenant

00:09:31.400 --> 00:09:33.500
นะครับ ตอนที่เรายิง API เนี่ย

00:09:33.500 --> 00:09:35.400
ตัว API มันก็จะสร้าง environment

00:09:35.400 --> 00:09:38.400
ขึ้นมา แล้วก็เอา environment ID เนี่ย

00:09:38.400 --> 00:09:39.400
ไปใช้ใน test นะครับ

00:09:39.400 --> 00:09:41.300
ทีเนี่ย test ทุกข้อก็จะมี

00:09:41.300 --> 00:09:43.400
environment ของตัวเองนะครับ

00:09:43.400 --> 00:09:46.000
ทำให้ข้อมูลไม่ยุ่งกับข้อมูลอื่นๆ

00:09:46.000 --> 00:09:47.600
นะครับ นอกจากนี้มันก็จะทำให้

00:09:47.600 --> 00:09:50.400
เราสามารถ run test หลายๆ test พร้อมกันได้ด้วย

00:09:50.400 --> 00:09:53.400
อ่า เนี่ยครับ ถ้าเราทำให้ app ของเรา test ง่ายนะ

00:09:53.400 --> 00:09:55.400
มันก็น่าจะเขียน test ได้ง่ายขึ้นนะครับ

00:09:55.400 --> 00:09:58.000
ผมมักจะได้ยินเขาพูดกันว่า

00:09:58.000 --> 00:09:59.500
UI test หรือ end-to-end test เนี่ย

00:09:59.500 --> 00:10:00.400
เป็นอะไรที่เขียนยาก

00:10:00.400 --> 00:10:02.000
แล้วก็ ซึ่งมันก็ถูกครับ

00:10:02.000 --> 00:10:04.400
ถ้าเราไม่แก้ app ของเราให้มัน test ง่าย

00:10:04.400 --> 00:10:06.400
การ test ก็ย่อมเป็นเรื่องยาก

00:10:06.400 --> 00:10:09.400
ยิ่งถ้าคนเขียน app กับคนเขียน test เป็นคนละคน

00:10:09.400 --> 00:10:11.200
หรือว่าอยู่กันคนละทีม

00:10:11.200 --> 00:10:12.100
หรือว่าอยู่กันคนละบริษัท

00:10:12.100 --> 00:10:13.200
แล้วไม่ยอมมา sync กันดีๆ เนี่ย

00:10:13.200 --> 00:10:15.400
มันก็จะค่อนข้างยากนิดนึงนะครับ

00:10:15.400 --> 00:10:16.900
แต่ถ้าระหว่างที่เรา dev อยู่เนี่ย

00:10:16.900 --> 00:10:18.400
เราสวมหมวก tester ไปด้วย

00:10:18.400 --> 00:10:20.100
หรือทำงานใกล้ชิดกับคนที่

00:10:20.100 --> 00:10:22.400
ทำพวก testing หรือ QA เนี่ย

00:10:22.400 --> 00:10:24.400
มันก็จะง่ายกันทั้งสองฝั่งนะครับ

00:10:24.400 --> 00:10:26.400
อย่างบางที่เนี่ย ผมเห็นว่า QA กับ dev เนี่ย

00:10:26.400 --> 00:10:28.700
นั่ง pair programming กันแบบเป็นเรื่องปกติ

00:10:28.700 --> 00:10:30.800
เลยนะครับ หรืออย่างในวงการอื่น

00:10:30.800 --> 00:10:32.400
นะครับ อย่างตู้เกมเนี่ย

00:10:32.400 --> 00:10:34.200
ถ้าเราเอากุญแจไปไขตรงที่หยอดเหรียญเนี่ย

00:10:34.200 --> 00:10:36.200
ข้างหลังมันก็จะมี ปุ่ม service นะครับ

00:10:36.200 --> 00:10:38.400
พอกดไปแล้วเราก็จะเจอพวก test menu ต่างๆ เนอะ

00:10:38.400 --> 00:10:40.400
ก็ทำให้ทดสอบอะไรต่างๆ ง่าย

00:10:40.400 --> 00:10:44.400
ไม่ต้องขนตู้กลับมาที่โรงงานแล้วมาแก้ใหม่เนอะ

00:10:44.400 --> 00:10:46.400
หรือพวกโทรศัพท์หลายๆ รุ่นเนี่ยมันก็จะมีเบอร์ลับอยู่

00:10:46.400 --> 00:10:48.500
พอเรากดเบอร์นี้ไปเราก็จะเจอ

00:10:48.500 --> 00:10:50.400
test menu นะ ซึ่งเราก็ทำแบบเดียวกัน

00:10:50.400 --> 00:10:51.400
กับแอปเราได้นะครับ

00:10:51.400 --> 00:10:53.000
ก็คือเราสามารถใส่พวก

00:10:53.000 --> 00:10:54.700
developer tool หรือ testing tool

00:10:54.700 --> 00:10:55.700
เข้าไปในแอปของเรานะครับ

00:10:55.700 --> 00:10:57.400
mobile app ก็ทำได้เหมือนกันนะ

00:10:57.400 --> 00:11:00.200
แล้วก็ใส่พวก test page, test endpoint ต่างๆ

00:11:00.200 --> 00:11:01.400
เข้าไปนะครับ

00:11:01.400 --> 00:11:03.400
แล้วก็อย่าลืมป้องกัน endpoint พวกนั้นดีๆ นะครับ

00:11:03.400 --> 00:11:05.400
อย่างในแอปที่ผม develop เนี่ย

00:11:05.400 --> 00:11:07.100
บางทีผมก็ใส่ test menu เข้าไป

00:11:07.100 --> 00:11:08.400
เป็นหน้าลับอยู่ในแอปนะครับ

00:11:08.400 --> 00:11:10.000
ทำให้ผมสามารถทดสอบ components

00:11:10.000 --> 00:11:11.600
ส่วนต่างๆ ได้โดยที่ไม่ต้องเปิด

00:11:11.600 --> 00:11:14.400
storybook แยกอีก process นึง

00:11:14.400 --> 00:11:17.400
แล้วก็อย่างอันนี้ผมทำเป็นเกมนะ

00:11:17.400 --> 00:11:20.000
เกมผมก็ใส่เพิ่มอีกหน้านึงเข้าไป

00:11:20.000 --> 00:11:21.400
ที่พอกดเข้าไปแล้วเนี่ย

00:11:21.400 --> 00:11:23.400
มันจะขึ้นหน้า result ทันที

00:11:23.400 --> 00:11:24.600
แล้วก็ทำให้สามารถ develop

00:11:24.600 --> 00:11:27.400
หน้านั้นได้โดยไม่ต้องเล่นเกมเองใหม่ทุกรอบครับ

00:11:27.400 --> 00:11:29.900
ซึ่งหน้านี้มันก็ connect กับ backend จริงๆ นะ

00:11:29.900 --> 00:11:33.500
แต่ว่าก็จะเป็น test environment นะครับ

00:11:33.500 --> 00:11:35.400
นอกจากนี้ผมก็มี route ที่เอาไว้

00:11:35.400 --> 00:11:38.300
รัน unit test ใส่เข้าไปในแอปด้วยครับ

00:11:38.300 --> 00:11:40.500
ก็ทำให้ผมสามารถรัน unit test ได้

00:11:40.500 --> 00:11:42.400
โดยไม่ต้องรันอีก command เพิ่มนะครับ

00:11:42.400 --> 00:11:45.100
ก็ปัจจุบันผมก็ยังเขียน unit test อยู่นะครับ

00:11:45.100 --> 00:11:46.300
แต่ผมก็จะเขียนเฉพาะกับพวก

00:11:46.300 --> 00:11:48.400
ชิ้นส่วน ที่มันอยู่ได้ด้วยตัวของมันเอง

00:11:48.400 --> 00:11:50.400
และสามารถ test ได้ โดยที่ไม่ต้อง

00:11:50.400 --> 00:11:52.600
ไป mock ไป stub ชาวบ้านเขานะครับ

00:11:52.600 --> 00:11:55.600
ผมเลิกพยายามที่จะ unit test มันทุกอย่างแล้วนะครับ

00:11:55.600 --> 00:11:57.600
และอีกอย่างหนึ่งที่ผมอยากจะแนะนำมากๆ ก็คือ

00:11:57.600 --> 00:11:59.300
พยายามให้เครื่องมือการ test

00:11:59.300 --> 00:12:00.900
มันอยู่ใกล้ๆ มือเราเข้าไว้นะครับ

00:12:00.900 --> 00:12:02.300
เราจะได้เรียกใช้ง่ายๆ

00:12:02.300 --> 00:12:04.300
ซึ่งสิ่งที่ตอบโจทย์ผมมาก ๆ

00:12:04.300 --> 00:12:06.300
คือ Playwright นะครับ

00:12:06.300 --> 00:12:07.500
เดี๋ยวผมโชว์ตัวอย่างให้ดูนะครับ

00:12:07.500 --> 00:12:10.100
ผมลง extension Playwright ไว้นะครับ

00:12:10.100 --> 00:12:11.700
ด้านขวาผมก็เขียนโค้ดตามปกติเลย

00:12:11.700 --> 00:12:15.100
ส่วนด้านซ้ายมันจะมีรายชื่อ test ต่างๆ

00:12:15.100 --> 00:12:16.800
พอผมกด run test มันก็จะเปิด

00:12:16.800 --> 00:12:18.500
browser แล้วก็ run test ทุกข้อเลย

00:12:18.500 --> 00:12:21.600
แล้วก็ test มันก็ควรจะ run เร็ว ๆ นะครับ

00:12:21.600 --> 00:12:23.000
คราวนี้มันก็ค่อนข้างเร็วนะ

00:12:23.000 --> 00:12:26.100
แต่ว่า Playwright ถ้าเรากด show browser ออก

00:12:26.100 --> 00:12:28.100
แล้วกด run test อีกที

00:12:28.100 --> 00:12:29.600
Playwright มันจะ run test

00:12:29.600 --> 00:12:31.700
หลาย ๆ ข้อพร้อม ๆ กันนะครับ

00:12:31.700 --> 00:12:33.500
ก็จริงอยู่ที่การ test ระดับ UI

00:12:33.500 --> 00:12:36.100
มันช้ากว่า unit test นะ

00:12:36.100 --> 00:12:37.400
แต่ว่าเราสามารถ scale มันได้

00:12:37.400 --> 00:12:39.600
ถ้าระบบของเราอนุญาตให้

00:12:39.600 --> 00:12:42.600
สามารถ test หลายๆ ข้อ พร้อมกันได้นะครับ

00:12:42.600 --> 00:12:45.600
แค่นี้ผมก็ไม่ต้องเปิด terminal หลายๆ อันแล้วนะครับ

00:12:45.600 --> 00:12:47.900
คราวนี้มาดูตัวอย่างจาก project จริงๆ ดีกว่านะครับ

00:12:47.900 --> 00:12:49.600
อันนี้มีคนส่ง bug report มาครับ

00:12:49.600 --> 00:12:52.200
บอกว่ามีหน้าเว็บหนึ่งที่พอกดเข้าไปแล้วเข้าไม่ได้

00:12:52.200 --> 00:12:54.600
ผมกดเข้าไป ตู้ม พังจริงด้วย

00:12:54.600 --> 00:12:56.700
ก็มาข้อ 2 นะครับ ถ้าเจอ bug

00:12:56.700 --> 00:12:59.500
ให้เขียน test ครอบก่อนแล้วค่อยแก้

00:12:59.500 --> 00:13:01.800
ผมลองไป debug ดูนะ ผมก็พบว่า

00:13:01.800 --> 00:13:03.900
service worker ผมมันมี bug

00:13:03.900 --> 00:13:05.200
แล้วทีนี้ผมก็ไม่รู้เหมือนกันว่า

00:13:05.200 --> 00:13:07.900
ถ้าผมจะเขียน test ครอบ service worker จะทำยังไง

00:13:07.900 --> 00:13:11.500
จะ import มายังไง แล้วจะ test behavior มันยังไง

00:13:11.500 --> 00:13:12.900
แต่ถ้าให้ผมเขียน test แบบ

00:13:12.900 --> 00:13:14.900
Playwright นะ ผมเขียนได้ทันทีเลยครับ

00:13:14.900 --> 00:13:17.000
1. ไปที่หน้าแรก

00:13:17.000 --> 00:13:20.000
2. รอจนกว่า service worker มันจะ activate

00:13:20.000 --> 00:13:22.300
3. ไปหน้าที่มีปัญหา

00:13:22.300 --> 00:13:25.600
4. เช็คว่าหน้านั้นต้อง load ขึ้น

00:13:25.600 --> 00:13:27.000
อันนี้ผมก็ลอง run test ดูนะครับ

00:13:27.000 --> 00:13:29.200
ก่อนแก้มันควรจะ fail

00:13:29.200 --> 00:13:31.200
อันนี้ครับ คือ test fail นะครับ

00:13:31.200 --> 00:13:33.000
ขึ้นสีแดงเลย

00:13:33.000 --> 00:13:34.900
ส่วนหลังจากที่ผมแก้

00:13:34.900 --> 00:13:36.500
ผมก็กด run ดูอีกที

00:13:36.500 --> 00:13:38.900
นี่ครับ test ผ่านแล้ว ฉะนั้น

00:13:38.900 --> 00:13:41.700
เวลาเราเจอ bug แล้วถ้าเราสามารถเขียน test

00:13:41.700 --> 00:13:43.200
ครอบได้เกือบทุกครั้ง

00:13:43.200 --> 00:13:45.900
ผมถือว่าเราอยู่ในจุดที่ดีมาก ๆ เลย

00:13:45.900 --> 00:13:48.500
โดยที่แทบไม่ต้องสนเรื่อง code coverage ด้วยซ้ำ

00:13:48.500 --> 00:13:51.800
ยิ่งถ้าเรามองว่า feature ที่เรายังไม่มีเนี่ย เป็น bug นะ

00:13:51.800 --> 00:13:54.000
ทุกครั้งที่เรา implement feature ใหม่ เราก็จะมี test

00:13:54.000 --> 00:13:56.100
มาครอบอย่างน้อย 1 อันนะครับ

00:13:56.100 --> 00:13:57.800
ซึ่งสิ่งที่มันช่วยให้ผมทำได้นะ

00:13:57.800 --> 00:14:00.900
ก็คือ มันทำให้ผมมีความมั่นใจมากขึ้น

00:14:00.900 --> 00:14:03.000
แล้วทำให้ผมสามารถปรับปรุงซอฟต์แวร์

00:14:03.000 --> 00:14:04.900
ได้อย่างไม่ยั้งมือเลยครับ

00:14:04.900 --> 00:14:06.500
อันนี้ตัวอย่างนะครับ

00:14:06.500 --> 00:14:09.300
ผม- PR เนี่ย ผมย้ายโปรเจค

00:14:09.300 --> 00:14:12.000
จาก Nuxt.js ไปเป็น Next.js นะครับ

00:14:12.600 --> 00:14:14.000
โปรแกรม UI เหมือนกันเลยครับ

00:14:14.000 --> 00:14:15.200
ต่างกันแค่นิดเดียว

00:14:15.200 --> 00:14:17.400
เดิม components ทั้งหมดเขียนด้วย Vue

00:14:17.400 --> 00:14:19.400
ตอนนี้เขียนด้วย React

00:14:19.400 --> 00:14:21.100
ส่วนที่ผมทำแบบนี้ได้เนี่ย

00:14:21.100 --> 00:14:23.900
เพราะว่าผมมี UI test ทั้งนั้นเลย

00:14:23.900 --> 00:14:25.600
ส่วนพวก test ระดับ components เนี่ย

00:14:25.600 --> 00:14:27.200
ถ้าไม่โยนทิ้งก็ต้องเขียนใหม่หมดใช่ไหม

00:14:27.200 --> 00:14:28.900
เพราะมันเปลี่ยน framework น่ะครับ

00:14:28.900 --> 00:14:31.800
อีกเรื่องหนึ่งที่ผมคิดว่าทำให้ระบบมัน test ได้ง่ายนะครับ

00:14:31.800 --> 00:14:34.900
คือการออกแบบให้ service ของเราเป็น multi-tenant เนาะ

00:14:34.900 --> 00:14:36.900
นอกจากทำให้มัน test ง่ายแล้วเนี่ย

00:14:36.900 --> 00:14:39.900
มันยังช่วยลดปัญหาเวลาเราต้อง test ข้าม service ด้วย

00:14:39.900 --> 00:14:43.100
เพราะว่าถ้ามันไม่เป็น multi-tenant เนี่ย เวลาเราจะ

00:14:43.100 --> 00:14:45.800
ทดสอบที เราก็ต้อง deploy ทั้ง cluster

00:14:45.800 --> 00:14:48.900
ทุกๆ service เข้าไปบน environment นึงถึงจะ test ด้วยกันได้

00:14:48.900 --> 00:14:52.700
แต่พอ service เราเป็น tenant แยก environment กันได้แล้วเนี่ย

00:14:52.700 --> 00:14:56.500
เราสามารถมองว่า staging ของแต่ละ service

00:14:56.500 --> 00:14:57.900
ถือว่าเป็น private

00:14:57.900 --> 00:15:00.400
คนอื่นห้ามมายุ่ง ถ้าจะ test เนี่ย

00:15:00.400 --> 00:15:03.400
ไป test กับ staging environment

00:15:03.400 --> 00:15:06.900
ของ service ที่รันอยู่บน production แทนนะครับ

00:15:06.900 --> 00:15:09.500
แล้วก็- คือผม- อีกอย่างหนึ่งเนี่ย

00:15:09.500 --> 00:15:11.100
ถ้าไม่มี multi-tenant นะ

00:15:11.100 --> 00:15:13.900
การที่จะ run test พร้อมๆ กันได้เป็นเรื่องยาก

00:15:13.900 --> 00:15:15.200
เพราะผมเห็นบ่อยมากในหลายๆ

00:15:15.200 --> 00:15:17.300
project นะ เวลาจะ run test แต่ละข้อ

00:15:17.300 --> 00:15:18.900
เราต้อง clear database ก่อน

00:15:18.900 --> 00:15:21.900
แล้วมันเลยทำให้เรา run test หลายๆ อันพร้อมกันไม่ได้ครับ

00:15:21.900 --> 00:15:23.500
แต่ถ้าระบบเราเป็น multi-tenant นะ

00:15:23.500 --> 00:15:26.200
เราสามารถให้ test แต่ละข้อเนี่ย

00:15:26.200 --> 00:15:27.900
มี environment ของตัวเองนะครับ

00:15:27.900 --> 00:15:31.700
แล้วก็เอา test แต่ละตัวเนี่ย ให้มัน run พร้อมๆ กัน

00:15:31.700 --> 00:15:33.800
แล้วเราค่อยไป clear test data

00:15:33.800 --> 00:15:35.900
ทิ้งจาก database ตอนท้ายสุดนะครับ

00:15:35.900 --> 00:15:37.700
ซึ่งขั้นถัดไปนะครับ

00:15:37.700 --> 00:15:40.300
ก็คือ เราอาจจะเอา test ที่เราเขียนเนี่ย

00:15:40.300 --> 00:15:41.900
ไป run บน production ได้ด้วย

00:15:41.900 --> 00:15:43.700
คือสิ่งที่มันน่ากลัวกว่า

00:15:43.700 --> 00:15:45.600
It works on my machine นะครับ

00:15:45.600 --> 00:15:47.400
คือ It works on staging นะครับ

00:15:47.400 --> 00:15:48.900
แล้วไปพังบน Production นะครับ

00:15:48.900 --> 00:15:51.600
คือ คุณ Michael Bryzek นะครับ พูด

00:15:51.600 --> 00:15:54.200
ในหัวข้อ Testing in Production ว่ามี-

00:15:54.200 --> 00:15:56.900
บริษัทที่เขาทำอยู่เนี่ย เขาเลิกใช้ staging ไปแล้ว

00:15:56.900 --> 00:15:58.800
เพราะเขาพบว่ามันสิ้นเปลืองมาก

00:15:58.800 --> 00:16:00.600
ก็เลยไป test บน production แทนนะครับ

00:16:00.600 --> 00:16:02.900
เขาก็ยกตัวอย่างว่า ตลอดทั้งวันเนี่ย

00:16:02.900 --> 00:16:05.900
จะมี bot คอยไปซื้อสินค้า จากร้านค้าจริงๆ เลย

00:16:05.900 --> 00:16:09.500
เสร็จแล้วเขาก็ใส่โค้ดเพิ่มเข้าไป 3 บรรทัดเท่านั้น

00:16:09.500 --> 00:16:12.900
ว่า ถ้าคนที่ซื้อเป็น test user อีเมลลงท้ายด้วยเนี่ย

00:16:12.900 --> 00:16:15.100
ก็ถือว่าเป็น test user นะ

00:16:15.100 --> 00:16:17.100
แล้วก็ให้ cancel order ทิ้ง

00:16:17.100 --> 00:16:19.700
อันนี้ก็เป็นตัวอย่างหนึ่งของการ Test in Production

00:16:19.700 --> 00:16:20.900
แบบมีระบบนะครับ

00:16:20.900 --> 00:16:24.000
สำหรับคนที่อยากจะลองเขียนพวก black box test เนี่ย

00:16:24.000 --> 00:16:25.900
ผมก็อยากจะฝากไว้อย่างหนึ่งว่า

00:16:25.900 --> 00:16:27.100
อย่าใช้พวก waitForTimeout หรือ

00:16:27.100 --> 00:16:28.400
sleep หรือ delay นะครับ เพราะว่า

00:16:28.400 --> 00:16:30.900
ข้อยกเว้นเนี่ยมันน้อยมาก

00:16:30.900 --> 00:16:33.600
คือไม่ว่าเราจะสั่งให้มันรอกี่วินาทีเนี่ย

00:16:33.600 --> 00:16:36.100
ตัวเลขนั้น ถ้ามันไม่น้อยไป มันก็เยอะไปเสมอ

00:16:36.100 --> 00:16:37.200
เยอะไปเราก็รอฟรี

00:16:37.200 --> 00:16:38.900
น้อยไป test เราก็พังเนอะ

00:16:38.900 --> 00:16:40.900
ให้เปลี่ยนมาใช้วิธี

00:16:40.900 --> 00:16:44.900
เช็คซ้ำๆ ว่า test ของเรา พร้อมรันต่อหรือยังนะครับ

00:16:44.900 --> 00:16:47.000
แล้วก็ถ้ามันไม่มีตัวให้เช็คนะ

00:16:47.000 --> 00:16:49.100
ก็ ข้อหนึ่งฮะ เรากลับไปแก้แอปของเรา

00:16:49.100 --> 00:16:50.900
ให้มันเช็คได้นะครับ

00:16:50.900 --> 00:16:54.600
ก็โอเค ผมหมดเวลาแล้วก็อยากจะฝากไว้ว่า

00:16:54.600 --> 00:16:56.000
ปัจจุบันเนี่ย เครื่องมือในการทำ

00:16:56.000 --> 00:16:58.200
black box testing เดี๋ยวนี้มันก็ดีขึ้นมากๆ ครับ

00:16:58.200 --> 00:16:59.900
แล้วก็การ debug UI test เนี่ย

00:16:59.900 --> 00:17:01.900
ในหลายๆ case มันไม่ยากเท่าเมื่อก่อนแล้ว

00:17:01.900 --> 00:17:04.500
แล้วถ้าเรา run test แบบ black box

00:17:04.500 --> 00:17:06.599
แล้วมัน debug ยากเนี่ย ผมก็มองว่า

00:17:06.599 --> 00:17:07.900
มันก็เป็นปัญหาของแอปเรานะ

00:17:07.900 --> 00:17:10.900
แอปเราควรจะ debug ง่ายๆ ด้วย เราก็กลับไปแก้แอปเรา

00:17:10.900 --> 00:17:13.500
ฉะนั้นผมก็ฝากไว้แล้วกันนะครับ ข้อหนึ่งนะครับ

00:17:13.500 --> 00:17:15.599
ทำ software ให้มัน test ได้ง่ายๆ

00:17:15.599 --> 00:17:18.400
โดยเฉพาะอย่างยิ่งถ้างานของเรามีหลาย service

00:17:18.400 --> 00:17:21.099
ก็อยากจะแนะนำว่าให้แต่ละ service เนี่ย

00:17:21.099 --> 00:17:23.900
สามารถ test ได้โดยไม่ต้องเชื่อมกับ service อื่นนะครับ

00:17:23.900 --> 00:17:25.700
อันนี้ผมเลยใช้คำว่า black box testing นะ

00:17:25.700 --> 00:17:27.900
ไม่ได้ใช้คำว่า end-to-end นะครับ

00:17:27.900 --> 00:17:30.700
แล้วก็อย่างที่สองเนี่ย ถ้าเจอ bug

00:17:30.700 --> 00:17:34.900
ก็ให้ครอบด้วย test ก่อนที่จะซ่อมนะครับ

00:17:34.900 --> 00:17:38.400
ก็หวังว่าเนื้อหาในวันนี้นะครับ

00:17:38.400 --> 00:17:41.400
หวังว่าจะมีไอเดียอะไรที่น่าสนใจ

00:17:41.400 --> 00:17:43.900
แล้วเราลองไปคิดเล่นกันต่อนะครับ

00:17:43.900 --> 00:17:45.900
สำหรับวันนี้ก็ขอบคุณมากครับ
