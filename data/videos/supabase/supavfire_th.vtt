WEBVTT

00:00:02.500 --> 00:00:05.433
สวัสดีครับ

00:00:05.500 --> 00:00:07.433
ขอบคุณทุกท่านที่มาในวันนี้นะครับ

00:00:08.800 --> 00:00:12.133
ยินดีที่ได้มาอยู่ตรงนี้ครับ และหวังว่าเราจะสามารถสอน

00:00:12.200 --> 00:00:15.833
เกี่ยวกับ Supabase ให้ทุกคนได้บ้างในวันนี้ครับ เราคิดว่าน่าจะเป็น

00:00:15.900 --> 00:00:21.133
ไอเดียที่ดีที่จะเปรียบเทียบ Supabase กับ Firebase เพราะประเทศไทย

00:00:21.200 --> 00:00:28.033
ดูเหมือนจะเป็นประเทศที่ใช้ Firebase เยอะครับ เราอาจจะลองเปลี่ยนแปลงตรงนั้นดู

00:00:28.100 --> 00:00:31.633
ผมอยากจะถามผู้ใช้ Firebase หน่อยครับ ใครที่ใช้ Firebase บ้าง

00:00:31.700 --> 00:00:35.433
ยกมือขึ้นหน่อยครับ โอเค ดูเหมือนจะเยอะกว่า Supabase เยอะเลย

00:00:35.500 --> 00:00:38.533
โอเค เราจะพยายามครับ เราเลยจัดให้มันเหมือน

00:00:38.600 --> 00:00:43.433
การต่อสู้กันหน่อย และพยายามทำให้สนุก แต่ก็จะสั้นๆ เพื่อให้

00:00:43.500 --> 00:00:47.433
ทุกคนเห็นภาพรวมของฟีเจอร์ต่างๆ และเปรียบเทียบกันครับ

00:00:47.500 --> 00:00:50.433
และเราจะมีเวลาสำหรับคำถามด้วยครับ ยินดีที่จะตอบทุกคำถาม

00:00:50.500 --> 00:00:53.633
ที่ทุกคนมีนะครับ คุณอาจจะมีโอกาสได้รับ

00:00:53.700 --> 00:01:00.033
เสื้อยืด เสื้อยืด Supabase ครับ ขออภัยด้วยครับ ไม่มีเสื้อ Firebase

00:01:00.100 --> 00:01:04.733
แต่เรามาเริ่มกันเลยดีกว่าครับ รอบแรก

00:01:04.800 --> 00:01:07.633
เราทุกคนเป็นวิศวกร รอบที่ศูนย์ ใช่ครับ เราเริ่มที่ศูนย์

00:01:07.700 --> 00:01:10.933
งั้นแนะนำตัวก่อนเลยครับ ผมขอเริ่มก่อนเลย

00:01:11.000 --> 00:01:16.133
ครับ ผมเป็นตัวแทนของ Firebase ในวันนี้ สำหรับรอบที่ศูนย์ของผม

00:01:16.200 --> 00:01:20.633
แค่อยากจะแนะนำเผื่อใครไม่เคยใช้ Firebase มาก่อนครับ

00:01:20.700 --> 00:01:24.733
ไปสไลด์ต่อไปได้เลยครับ Firebase คือ ecosystem ของ

00:01:24.800 --> 00:01:29.433
NoSQL จาก Google Cloud ครับ ผมแค่อยากจะแสดงให้เห็นว่า

00:01:29.500 --> 00:01:32.433
Firebase ecosystem เป็นยังไงบ้างครับ มันสามารถทำอะไรได้หลายอย่าง

00:01:32.500 --> 00:01:36.433
ตั้งแต่ storage, database ไปจนถึง analytics

00:01:36.500 --> 00:01:38.633
คุณสามารถเพิ่มสิ่งเหล่านี้ลงในแอปของคุณภายใน Firebase ได้ครับ

00:01:38.700 --> 00:01:43.433
และมีหลายอย่างที่เป็น all-in-one kit สำหรับ NoSQL database ครับ

00:01:43.500 --> 00:01:46.733
สไลด์ต่อไปครับ จุดสำคัญหลักๆ

00:01:46.800 --> 00:01:50.532
ของ Firebase สำหรับผมคือ มันถูก integrated กับ

00:01:50.600 --> 00:01:53.532
ระบบ Google Cloud ครับ ถ้าคุณมาจาก

00:01:53.600 --> 00:01:57.933
Google Cloud มันก็เป็นอะไรที่ง่ายมากที่จะเลือกใช้ Firebase

00:01:58.000 --> 00:02:02.833
สำหรับแอปหลักของคุณ ไม่ใช่แค่แอปหลัก แต่มัน

00:02:02.900 --> 00:02:06.133
อาจจะเป็นตัวเลือกที่ง่ายกว่าสำหรับคุณ ถ้า infrastructure เดิมของคุณ

00:02:06.200 --> 00:02:10.333
อยู่บน Google Cloud อยู่แล้ว คุณสามารถย้ายและ integrate เข้ากับ

00:02:10.400 --> 00:02:14.632
ระบบหลักและเป็นส่วนหนึ่งของ Firebase ได้ครับ มี Cloud Functions ซึ่งเป็น

00:02:14.700 --> 00:02:17.533
ตัวเชื่อมของทุกระบบ ดังนั้นเมื่อคุณจัดการข้อมูล

00:02:17.600 --> 00:02:20.833
ด้วย Firebase คุณสามารถใช้ Cloud Function เป็น logic หลักในการเชื่อม

00:02:20.900 --> 00:02:25.132
ระบบของคุณจากหลายๆ ระบบ จาก Firebase ไปยัง Cloud Server จาก

00:02:25.200 --> 00:02:35.433
Google Cloud ครับ สไลด์ต่อไปครับ โอเค และมีหลายอย่าง

00:02:35.500 --> 00:02:37.833
Ecosystem ของ Firebase นั้นใหญ่มากครับ

00:02:37.900 --> 00:02:41.132
คุณสามารถมี extension ได้จากการติดตั้งเพียงคลิกเดียว

00:02:41.200 --> 00:02:43.733
คุณสามารถ integrate เข้ากับ Firebase ของคุณได้เลย

00:02:43.800 --> 00:02:47.933
เมื่อ event ถูก trigger มันจะ execute หนึ่งใน function เหล่านี้

00:02:48.000 --> 00:02:50.233
และคุณสามารถมีแบบสำเร็จรูปได้

00:02:50.300 --> 00:02:53.733
นอกจากนี้ยังมีความสามารถด้าน GenAI

00:02:53.800 --> 00:02:57.033
มีทั้ง Vertex AI และ GenKit เป็นตัวใหม่

00:02:57.100 --> 00:02:59.733
และ Gemini for Firebase คุณสามารถใช้ Gemini ภายใน

00:02:59.800 --> 00:03:05.433
Firebase ได้ง่ายขึ้นครับ และสิ่งที่อยากจะพูดถึง Firebase คือ

00:03:05.500 --> 00:03:08.733
เมื่อคุณมี traditional backend service ส่วนใหญ่

00:03:08.800 --> 00:03:11.632
เวลาที่คุณมี backend คุณจะมี server และคุณจะ

00:03:11.700 --> 00:03:15.233
สร้าง API เพื่อเรียก database และเมื่อคุณมี Firebase

00:03:15.300 --> 00:03:18.632
มันไม่ได้กำจัด backend ไป แต่ทำให้ชีวิตคุณง่ายขึ้น

00:03:18.700 --> 00:03:20.733
คุณไม่จำเป็นต้องสร้าง backend API ตลอดเวลา

00:03:20.800 --> 00:03:25.132
คุณสามารถใช้ client app เรียกมันจาก SDK และเชื่อมต่อ

00:03:25.200 --> 00:03:29.033
กับ Firebase ได้ง่ายขึ้น คุณสามารถทำ CRUD ได้ง่ายขึ้น

00:03:29.100 --> 00:03:32.632
และนั่นสามารถลดงานในการสร้าง backend ของคุณได้

00:03:32.700 --> 00:03:36.632
ครับ และจุดเด่นอีกอย่างของ Firebase คือ real-time feature

00:03:36.700 --> 00:03:39.632
คุณสามารถสร้าง real-time subscription เมื่อ database

00:03:39.700 --> 00:03:42.433
อัปเดต แอปของคุณทั้งหมด แอป client ของคุณทั้งหมดจะ

00:03:42.500 --> 00:03:46.733
ถูกอัปเดตโดยไม่ต้อง refresh หน้าเว็บหรือ reload แอป

00:03:46.800 --> 00:03:49.533
และเมื่อมีคนอัปเดต มันก็จะ sync กันทั้งหมดครับ

00:03:51.100 --> 00:03:56.333
สรุป Firebase เป็น 3 ข้อหลักๆ สำหรับผมนะครับ

00:03:56.400 --> 00:04:00.433
ข้อแรกคือ real-time feature และข้อที่สองคือ event driven

00:04:00.500 --> 00:04:03.433
เมื่อคุณอัปเดต database มันจะ trigger cloud function

00:04:03.500 --> 00:04:07.632
คุณสามารถ listen และ subscribe event ได้ง่ายขึ้น

00:04:07.700 --> 00:04:11.933
และ NoSQL ฟีเจอร์หลักคือถูกสร้างมาเพื่อการอ่านที่ optimized

00:04:12.000 --> 00:04:17.033
ถ้าคุณต้องการประสิทธิภาพการอ่านที่ดี

00:04:17.100 --> 00:04:22.332
มันจะทำให้แอปของคุณเร็วขึ้น ทีนี้เรามาต่อกันที่ Supabase ครับ

00:04:23.000 --> 00:04:27.633
โอเค ขอบคุณครับภูมิ! ลองดูนะครับ
เรามาดูกันว่า Supabase มีอะไรบ้าง

00:04:28.600 --> 00:04:32.733
Supabase พวกเขาเคลมตัวเองว่าเป็น

00:04:32.800 --> 00:04:36.933
open source alternative ของ Firebase ดังนั้นคุณอาจจะได้ยินว่า

00:04:37.000 --> 00:04:40.233
มีฟีเจอร์บางอย่างที่ซ้อนทับกับ Firebase

00:04:40.300 --> 00:04:45.133
และนั่นก็เป็นเรื่องจริง Firebase เองก็มี database เหมือนกัน

00:04:45.200 --> 00:04:48.832
เช่นเดียวกับ Supabase ซึ่งสร้างบนฐานของ Postgres database

00:04:48.900 --> 00:04:50.832
ใช่ไหมครับ และฟีเจอร์ทั้งหมด

00:04:50.900 --> 00:04:53.933
สามารถ implement ได้ ไม่ต่างจากการใช้งาน Postgres database ทั่วไป

00:04:54.000 --> 00:04:57.933
ดังนั้น extension หรืออาจจะถูกสร้างเป็น API

00:04:58.000 --> 00:05:01.832
มีฟีเจอร์ต่างๆ เช่น authentication, API

00:05:01.900 --> 00:05:05.233
มี edge function และเราจะลงลึก

00:05:05.300 --> 00:05:10.733
ในฟีเจอร์ต่างๆ ในภายหลัง ฟีเจอร์หลักๆ ของ

00:05:10.800 --> 00:05:15.433
Supabase ถ้าคุณถามใครสักคน หรือถามผม คุณสามารถ

00:05:15.500 --> 00:05:21.332
ทำงานได้เร็วมากจนสามารถสร้างความประทับใจให้กับ CEO ของคุณได้ บางทีคุณอาจจะเป็น startup เล็กๆ

00:05:21.400 --> 00:05:24.832
และต้องการพัฒนาอย่างรวดเร็ว Supabase อาจเป็นตัวเลือกที่ดี

00:05:24.900 --> 00:05:28.533
เพราะคุณสามารถ ทำงานได้เร็วขึ้น เพราะคุณจะได้รับ

00:05:28.600 --> 00:05:32.733
ฟีเจอร์มากมายพร้อมใช้งาน และคุณสามารถสร้างความประทับใจให้กับหัวหน้าของคุณได้

00:05:32.800 --> 00:05:39.033
ใช่ไหมครับ ดังนั้นมันจึงมีประโยชน์มาก ไปต่อเลยครับ โอเค

00:05:39.100 --> 00:05:44.933
Supabase นั้นใช้ Docker เป็นพื้นฐาน มันจะ expose API หลายๆ ตัว

00:05:45.000 --> 00:05:48.133
API สำหรับบริการและฟีเจอร์ต่างๆ ที่เรา

00:05:48.200 --> 00:05:52.733
จะพูดถึงในภายหลัง มันใช้ Kong และ

00:05:52.800 --> 00:05:56.332
Kong จะ route ไปยัง service ต่างๆ ที่ทำงานใน Docker

00:05:56.400 --> 00:06:01.133
ดังนั้นพวกมันจึงเป็น container ที่แตกต่างกัน และทั้งหมดใช้ Postgres

00:06:01.200 --> 00:06:06.233
เชื่อมต่อกับ database ใน Postgres
Supabase เป็น open source

00:06:06.300 --> 00:06:08.533
ผมคิดว่านั่นเป็นข้อแตกต่างหลักๆ กับ Firebase

00:06:08.600 --> 00:06:12.033
มันเป็น open source อย่างสมบูรณ์ ทุกอย่างที่ Supabase ทำ

00:06:12.100 --> 00:06:15.033
เป็น open source เว็บไซต์ของพวกเขา สิ่งที่พวกเขาทำ

00:06:15.100 --> 00:06:17.832
เกมที่พวกเขาทำ meetup ที่พวกเขาทำ ทุกอย่างเป็น open source

00:06:17.900 --> 00:06:20.733
ดังนั้นคุณสามารถตรวจสอบได้ คุณสามารถไปที่ Supabase

00:06:20.800 --> 00:06:23.633
organization ใน GitHub และดูได้เลย

00:06:23.700 --> 00:06:28.133
และผมได้คุยกับไทวันนี้ เขาบอกผมว่าถ้าคุณติดปัญหา Supabase

00:06:28.200 --> 00:06:30.433
บางทีคุณก็แค่อ่านโค้ด

00:06:30.500 --> 00:06:34.733
บางครั้งมันค่อนข้างมีประโยชน์ในการหาคำตอบและรับความช่วยเหลือ

00:06:34.800 --> 00:06:38.133
คุณสามารถอ่านโค้ดด้วยตัวเอง และอาจจะหาวิธีปรับปรุง

00:06:38.200 --> 00:06:44.633
หรือแก้ไขได้ โอเค ต่อไป Supabase ทำงานกับ

00:06:44.700 --> 00:06:46.933
framework หลายๆ ตัว ไม่ใช่แค่ JavaScript framework

00:06:47.000 --> 00:06:49.933
แต่ยังมี framework อื่นๆ เช่น Flutter

00:06:50.000 --> 00:06:53.733
และอื่นๆ อีกมากมาย ดังนั้นคุณสามารถใช้ Supabase และ

00:06:53.800 --> 00:06:59.332
ใช้ SDK ของพวกเขาเพื่อเชื่อมต่อและใช้งานได้
พวกเขามี community ที่แข็งแกร่ง

00:06:59.400 --> 00:07:02.133
คุณจะเห็นว่าพวกเขามี contributor มากกว่า 1000 คน

00:07:02.200 --> 00:07:05.733
มีคนจำนวนมาก contribute ให้กับ

00:07:05.800 --> 00:07:08.433
repository ทุกวัน ดังนั้นมันจึงเป็นการพัฒนาที่ขับเคลื่อนโดย community

00:07:08.500 --> 00:07:10.933
และพวกเขามีโครงการที่เรียกว่า

00:07:11.000 --> 00:07:13.033
Supasquad คุณอาจจะลองพิจารณา

00:07:13.100 --> 00:07:15.033
เข้าร่วม ดูที่เว็บไซต์ของพวกเขา

00:07:15.100 --> 00:07:17.733
และไปที่ Supasquad บางทีคุณอาจจะเป็น

00:07:17.800 --> 00:07:20.733
contributor ครั้งแรก หรือเป็นส่วนหนึ่งของ event ที่พวกเขาจัด

00:07:20.800 --> 00:07:26.433
เป็นโอกาสสำหรับคุณที่จะเป็นส่วนหนึ่งของ community นี้ โอเค

00:07:26.500 --> 00:07:31.433
รอบต่อไป รอบที่หนึ่ง รอบต่อไปจะเป็น

00:07:31.500 --> 00:07:33.832
เกี่ยวกับ data modeling เราจะพูดถึง database

00:07:33.900 --> 00:07:36.733
ผมจะส่งต่อให้ภูมิครับ เราจะเปรียบเทียบแบบ

00:07:36.800 --> 00:07:38.832
สั้นๆ ให้คุณดู เราจะแสดง

00:07:38.900 --> 00:07:40.933
โค้ดและ screenshot ของ data model

00:07:41.000 --> 00:07:45.633
Database ของ Firebase อย่างที่เรารู้กัน มันไม่ใช่แค่ SQL

00:07:45.700 --> 00:07:49.233
เราใช้โครงสร้างข้อมูลแบบ key-value

00:07:49.300 --> 00:07:52.233
ดังนั้นมันจึงเป็นข้อมูล JSON ใน Firebase

00:07:52.300 --> 00:07:55.533
แต่มันก็มีอะไรมากกว่านั้น เรามี collection และ

00:07:55.600 --> 00:07:58.832
สิ่งต่างๆ ที่รองรับฟีเจอร์ รองรับ filter

00:07:58.900 --> 00:08:02.733
สิ่งสำคัญคือ real-time database

00:08:02.800 --> 00:08:06.133
มันง่ายมาก เมื่อคุณเก็บข้อมูล JSON คุณจะมี

00:08:06.200 --> 00:08:10.033
node ที่ซ้อนกันได้ และอื่นๆ และคุณสามารถตัดสินใจได้ว่า

00:08:10.100 --> 00:08:11.933
คุณต้องการ structured data ใน

00:08:12.000 --> 00:08:15.033
รูปแบบ JSON แบบง่ายๆ หรือฟีเจอร์ขั้นสูงจาก Firebase

00:08:15.100 --> 00:08:19.733
พวกเขามี Firestore ไปสไลด์ต่อไป Firestore นั้น

00:08:19.800 --> 00:08:21.832
ขั้นสูงกว่า มันเก็บข้อมูลใน collection

00:08:21.900 --> 00:08:24.332
และคุณสามารถมี sub-collection

00:08:24.400 --> 00:08:26.933
และคุณสามารถจัดการข้อมูลได้มากขึ้นด้วยฟีเจอร์ขั้นสูง

00:08:27.000 --> 00:08:31.533
อันนี้คล้ายกับ MongoDB ในแง่ของ Firestore

00:08:31.600 --> 00:08:36.633
ดังนั้นคุณสามารถทำ filter ที่ซับซ้อนมากขึ้น และยังคงมี

00:08:36.700 --> 00:08:43.133
ความสามารถด้าน real-time เช่นกัน
ไปต่อที่ Supabase ครับ

00:08:43.200 --> 00:08:46.233
Supabase อย่างที่ผมได้กล่าวไป มันใช้ Postgres เป็นพื้นฐาน

00:08:46.300 --> 00:08:51.233
ถ้าคุณเคยทำงานกับ Postgres หรือ SQL database มาก่อน อันนี้จะคุ้นเคย

00:08:51.300 --> 00:08:54.833
ผมเชื่อว่าอันนี้อาจจะเล็กไปหน่อย แต่ทางซ้ายมือ

00:08:54.900 --> 00:08:57.233
พวกเขามี dashboard ดังนั้นเมื่อใดก็ตามที่คุณรัน Supabase

00:08:57.300 --> 00:09:02.333
แม้แต่แบบ local พวกเขาจะให้ dashboard และ UI ดังนั้นแม้แต่ no code

00:09:02.400 --> 00:09:06.233
สมมติว่าคุณไม่ชอบการเขียนโค้ด ผมไม่แน่ใจ บางทีคุณอาจจะชอบ

00:09:06.300 --> 00:09:09.133
คุณจะใช้ UI ในการสร้าง table

00:09:09.200 --> 00:09:12.633
คุณสามารถกำหนด database schema คุณสามารถใช้ dashboard ของพวกเขา

00:09:12.700 --> 00:09:16.433
หรือคุณสามารถใช้โค้ด ซึ่งใช้ SQL migration

00:09:16.500 --> 00:09:19.933
ถ้าคุณเคยทำงานกับ SQL คุณอาจจะรู้ว่าคุณสามารถสร้าง table

00:09:20.000 --> 00:09:24.033
คุณสามารถเปลี่ยนแปลง schema ของคุณได้ คุณจะใช้ migration

00:09:24.100 --> 00:09:27.433
คุณสามารถใช้ SQL ธรรมดาได้ แน่นอนว่ามันเป็นแค่ Postgres

00:09:28.000 --> 00:09:32.533
หรือคุณใช้ Prisma หรือ library อื่นๆ ที่คุณ

00:09:32.600 --> 00:09:36.933
ชอบในการจัดการ database หรือ Postgres migration ของคุณ

00:09:39.100 --> 00:09:43.033
โอเค แล้วคุณก็สร้าง schema แล้วคุณต้องอธิบายมันใช่ไหม

00:09:43.100 --> 00:09:48.433
ปกติคุณจะจบลงด้วย SQL schema ที่ปกติจะใช้

00:09:48.500 --> 00:09:52.433
foreign key และ relationship และนี่คือสิ่งที่แตกต่าง

00:09:52.500 --> 00:09:56.433
ถ้าเราเปรียบเทียบกับ Firebase ซึ่งเป็น NoSQL database

00:09:56.500 --> 00:09:59.033
แนวคิดอาจจะแตกต่างกันมากในแง่ของวิธีที่คุณ

00:09:59.100 --> 00:10:02.433
สร้างแอปพลิเคชัน ดังนั้นนี่เป็นเพียงตัวอย่างเล็กๆ น้อยๆ

00:10:02.500 --> 00:10:07.433
ว่า database schema ของคุณอาจมีลักษณะอย่างไร

00:10:07.500 --> 00:10:10.533
สรุปแนวคิด ผมคิดว่า Supabase มาจาก

00:10:10.600 --> 00:10:13.233
โลกของ normalization ดังนั้นคุณต้องการ data integrity

00:10:13.300 --> 00:10:15.133
คุณไม่ต้องการ duplicate ข้อมูลของคุณ

00:10:15.200 --> 00:10:18.333
แต่ในทางกลับกัน Firebase เป็น NoSQL

00:10:18.400 --> 00:10:21.133
บางครั้งคุณต้อง duplicate ข้อมูล

00:10:21.200 --> 00:10:25.333
คุณต้องการ optimize สำหรับการอ่าน แต่สำหรับการเขียน คุณต้อง

00:10:25.400 --> 00:10:28.533
เขียนหลายครั้ง บางครั้งคุณต้องใช้ cloud

00:10:28.600 --> 00:10:31.633
function เพื่อเขียนข้อมูลลงในหลายๆ ที่

00:10:31.700 --> 00:10:35.433
นั่นคือความยืดหยุ่นของโครงสร้างข้อมูลนี้

00:10:35.500 --> 00:10:39.033
แต่มันอาจมีข้อจำกัดในความสามารถในการ query

00:10:39.100 --> 00:10:41.733
ดังนั้นเมื่อคุณต้องการทำ complex query

00:10:41.800 --> 00:10:45.733
Supabase สามารถทำได้มากกว่าโดยการใช้ภาษา SQL

00:10:45.800 --> 00:10:48.833
แต่ถ้าคุณต้องการใช้ NoSQL คุณต้อง

00:10:48.900 --> 00:10:52.333
คิดให้ดีก่อนที่จะตัดสินใจเลือกโครงสร้างข้อมูลของคุณ

00:10:52.400 --> 00:10:57.833
ใน NoSQL และสิ่งหนึ่งที่ผมอยากจะแสดงให้เห็น

00:10:57.900 --> 00:11:00.833
คือบางคนยังคงใช้ SQL ใช่ไหมครับ

00:11:00.900 --> 00:11:04.733
แต่บางคนอาจยังคงเก็บ JSON ใน SQL

00:11:04.800 --> 00:11:08.133
ดังนั้นผมคิดว่า บางครั้งเราอาจจะผสมผสาน

00:11:08.200 --> 00:11:12.133
สองอย่างนี้เข้าด้วยกัน และอยากจะแนะนำสิ่งใหม่

00:11:12.200 --> 00:11:17.833
Firebase ไม่ได้มีแค่ SQL แต่เรามี

00:11:17.900 --> 00:11:22.033
สไลด์ต่อไปครับ ตอนนี้เรามี SQL feature แล้ว

00:11:22.100 --> 00:11:27.133
คุณสามารถใช้ได้ เพราะ Google Cloud มี Cloud SQL ใช่ไหมครับ

00:11:27.200 --> 00:11:30.233
ดังนั้นพวกเขาจึงแนะนำฟีเจอร์ใหม่ที่เรียกว่า Firebase Data Connect

00:11:30.300 --> 00:11:33.933
คุณสามารถเชื่อมต่อ Firebase ของคุณกับ Cloud SQL ที่รองรับ

00:11:34.000 --> 00:11:37.133
Postgres ใน backend แต่พวกเขาสร้างมันให้

00:11:37.200 --> 00:11:40.833
เป็นแพลตฟอร์มเดียวกัน ดังนั้นตอนนี้มันมีอยู่ใน

00:11:40.900 --> 00:11:44.033
Firebase ในโหมด preview ไปสไลด์ต่อไปได้เลยครับ

00:11:44.100 --> 00:11:47.233
อันนี้แค่อยากจะแสดงภาพรวมคร่าวๆ ของ

00:11:47.300 --> 00:11:51.033
Firebase SQL Data Connect คุณกำหนดวิธีการเชื่อมต่อ

00:11:51.100 --> 00:11:53.933
สร้างข้อมูลของคุณ และมันจะเปลี่ยนอันนี้เป็น

00:11:54.000 --> 00:11:56.933
DDL schema โดยอัตโนมัติ และ

00:11:57.000 --> 00:12:00.933
มันจะมี type-safe SDK สำหรับคุณในการสร้าง

00:12:01.000 --> 00:12:06.833
database คล้ายกับ GraphQL ครับ

00:12:07.600 --> 00:12:11.933
แค่นั้นแหละครับ โอเค
รอบสอง CRUD

00:12:12.600 --> 00:12:15.433
เรามี database แล้ว งั้นมาทำ CRUD ต่อเลย

00:12:16.700 --> 00:12:21.133
ครับ ไปต่อเลยครับ อันนี้จาก Firebase

00:12:21.200 --> 00:12:23.733
ผมคิดว่าฟีเจอร์หลักๆ ของ Supabase และ Firebase

00:12:23.800 --> 00:12:26.233
ฟีเจอร์นี้ส่วนใหญ่จะเหมือนกัน

00:12:26.300 --> 00:12:29.933
ในแง่ที่คุณไม่ต้องเขียน API ไปยัง backend

00:12:30.000 --> 00:12:34.133
และคุณสามารถใช้ SDK จากฝั่ง client ได้ คุณสามารถใช้แค่ DB collection

00:12:34.200 --> 00:12:37.333
อย่างในตัวอย่างนี้ คุณสามารถเรียกใช้งาน cities แล้วดึง doc ของ SF ออกมาได้

00:12:37.400 --> 00:12:40.233
และอันนี้สามารถทำได้ทั้งหมดในฝั่ง client

00:12:40.300 --> 00:12:43.733
ดังนั้นมันจึงสะดวกสำหรับคุณในการอ่านและเขียน

00:12:43.800 --> 00:12:47.733
ข้อมูลไปยัง database ด้วยวิธีนี้ และ

00:12:47.800 --> 00:12:51.333
พวกเขายังมี UI ให้ด้วย ดังนั้นเมื่อคุณมี collection แบบนี้

00:12:51.400 --> 00:12:55.433
คุณสามารถใช้ filter และลองเงื่อนไขต่างๆ ได้

00:12:55.500 --> 00:12:59.133
พวกเขาจะให้ code snippet แก่คุณ และถ้าไม่มี

00:12:59.200 --> 00:13:04.533
พวกเขาสามารถให้ code snippet แก่คุณเพื่อลองใช้ได้ โอเค

00:13:04.600 --> 00:13:07.133
Supabase ก็มีวิธีการที่คล้ายกัน

00:13:07.200 --> 00:13:09.933
พวกเขามี SDK ในภาษาต่างๆ

00:13:10.000 --> 00:13:15.833
อันนี้เป็น JavaScript ทางซ้ายมือ คุณจะเห็นวิธี read

00:13:15.900 --> 00:13:21.333
มันเป็น functional ใช่ไหมครับ คุณอาจจะคุ้นเคยกับ

00:13:21.400 --> 00:13:25.433
Prisma หรือ SDK หรือ ORM อื่นๆ พวกมันทำงานคล้ายกันมาก

00:13:25.500 --> 00:13:28.433
คุณกำหนด table ของคุณ คุณจะเลือก field

00:13:28.500 --> 00:13:31.733
หรือ column ที่คุณต้องการ แล้วคุณก็มี filter

00:13:31.800 --> 00:13:35.433
คุณสามารถใช้ equals หรือ filter อื่นๆ ที่คุณต้องการ

00:13:35.500 --> 00:13:40.133
คุณสามารถใช้มันใน SDK ได้ เช่นเดียวกับการอัปเดต

00:13:40.200 --> 00:13:43.433
มันเป็นวิธีการที่คล้ายกันมาก แทนที่จะใช้ select คุณจะ

00:13:43.500 --> 00:13:46.633
ใช้ update function และคุณสามารถ interact กับ database ได้

00:13:46.700 --> 00:13:50.633
อีกครั้ง อันนี้คล้ายกับ Firebase คุณสามารถใช้มันในฝั่ง client ได้

00:13:50.700 --> 00:13:54.933
หรือถ้าคุณใช้ React ซึ่งเป็นที่นิยมในตอนนี้

00:13:55.000 --> 00:13:58.933
คุณสามารถใช้มันได้โดยตรงใน React บน server

00:13:59.000 --> 00:14:02.533
component เช่น พวกเขายังมี managed

00:14:02.600 --> 00:14:04.533
connection อยู่แล้ว ดังนั้นคุณจะได้ connection

00:14:04.600 --> 00:14:08.533
pooling เช่น กับ Postgres และสามารถทำ HTTP connection

00:14:08.600 --> 00:14:12.533
ไปยัง Postgres database ของคุณได้ ดังนั้นมันจึงยืดหยุ่นมาก

00:14:12.600 --> 00:14:15.233
ที่คุณต้องการใช้ ดังนั้นนั่นคือวิธีที่คุณสามารถ interact

00:14:15.300 --> 00:14:18.733
กับ Supabase database ได้ ผมเห็น JSON ตรงนี้

00:14:18.800 --> 00:14:22.633
สไลด์ก่อนหน้านี้ โอ้ใช่ นั่นเป็นตัวอย่าง

00:14:22.700 --> 00:14:25.433
วิธีการอ่าน JSON มันเป็น nested field ตรงนี้

00:14:25.500 --> 00:14:30.833
ที่อยู่และรหัสไปรษณีย์ เราสามารถทำ JSON ใน SQL ได้ใช่ไหม

00:14:30.900 --> 00:14:37.133
ใช่ครับ ถูกต้องๆ งั้นมาพูดถึง compound query กัน

00:14:37.200 --> 00:14:40.033
ผมได้พูดถึงความสามารถของ SQL ไปแล้ว

00:14:40.100 --> 00:14:45.433
ดังนั้นเมื่อคุณจัดการข้อมูลในรูปแบบ structured มันจะ advanced กว่า

00:14:45.500 --> 00:14:49.533
คุณสามารถทำ advanced query ได้ แต่สำหรับ Firebase มันมีข้อจำกัด

00:14:49.600 --> 00:14:55.133
ที่ filter ได้แค่ตาม key กับ value ข้อจำกัดหลักๆ ของ Firebase

00:14:55.200 --> 00:14:58.933
คือคุณไม่สามารถทำ query ที่ใช้การคำนวณได้

00:14:59.000 --> 00:15:03.633
เช่น หาร้านอาหารที่มี rating หารด้วยราคา มากกว่า

00:15:03.700 --> 00:15:08.133
1.5 นี่คือ SQL query คุณไม่สามารถทำแบบนี้

00:15:08.200 --> 00:15:11.533
ใน Firebase ได้ คุณต้องการคำนวณค่าล่วงหน้า

00:15:11.600 --> 00:15:14.133
เพื่อที่คุณจะสามารถ query ค่านี้ได้

00:15:14.200 --> 00:15:16.433
ในอนาคต ดังนั้นมันจะมี

00:15:16.500 --> 00:15:20.233
ในสไลด์ถัดไป สำหรับ Supabase คุณ

00:15:20.300 --> 00:15:23.133
สามารถทำ query แบบนี้ได้

00:15:23.200 --> 00:15:27.933
แต่ใน Firebase คุณต้องคำนวณค่า ratio นี้ล่วงหน้า

00:15:28.000 --> 00:15:32.333
และคุณสามารถ filter อันนี้ได้อีกครั้งในอนาคต

00:15:32.400 --> 00:15:36.733
ดังนั้นมันจึง optimize สำหรับความเร็ว และคุณสามารถ

00:15:36.800 --> 00:15:39.133
ลดความซับซ้อนของ query ของคุณได้ คุณไม่ต้อง

00:15:39.200 --> 00:15:42.933
จัดการอันนี้ในฝั่ง client แต่มันต้องแลกมาด้วย

00:15:43.000 --> 00:15:46.233
ความซับซ้อนในการเขียนข้อมูล ใช่ครับ

00:15:47.800 --> 00:15:51.433
มีหลายวิธีในการจัดระเบียบข้อมูลของคุณใน NoSQL

00:15:51.500 --> 00:15:54.433
คุณสามารถทำเป็น nested แบบนี้ หรือเป็น flat data

00:15:54.500 --> 00:15:58.133
แต่คุณต้องคิดถึง composite index ด้วย เพราะ

00:15:58.200 --> 00:16:00.733
เนื่องจากเราไม่มี SQL query เราไม่มี relation

00:16:00.800 --> 00:16:03.533
คุณต้องคิดถึงวิธีที่คุณจะ index

00:16:03.600 --> 00:16:08.233
key ของคุณ และวิธีที่คุณจะ ทำให้ key สามารถ sort และ

00:16:08.300 --> 00:16:13.733
filter ได้ ผมคิดว่า Firebase ก็มีฟีเจอร์

00:16:13.800 --> 00:16:21.033
ที่คุณสามารถสร้าง composite key บน dashboard ของคุณได้

00:16:21.100 --> 00:16:26.933
ไปต่อกันที่ authentication ครับ โอเค Firebase

00:16:27.000 --> 00:16:31.033
ผมคิดว่าทุกคนน่าจะรู้ว่า Firebase ทำ authentication ได้ง่ายมาก

00:16:31.100 --> 00:16:33.733
เรื่อง authentication พวกเขาเป็นที่รู้จักกันดี

00:16:33.800 --> 00:16:35.533
มานานแล้ว พวกเขามี Google

00:16:35.600 --> 00:16:38.833
Sign In with Google เป็นวิธีที่ใช้กันมากที่สุด เมื่อคุณ sign in คุณจะ

00:16:38.900 --> 00:16:41.933
เห็นรายชื่อผู้ใช้ใน UI dashboard

00:16:42.000 --> 00:16:45.933
คุณจะมี user ID และเมื่อคน sign in คุณจะ

00:16:46.000 --> 00:16:51.433
มี metadata ของผู้ใช้นั้นด้วย

00:16:51.500 --> 00:16:55.233
โค้ดง่ายมาก คุณสามารถ sign in ด้วย

00:16:55.300 --> 00:16:58.633
provider และคุณสามารถ sign in และ sign out ได้

00:16:58.700 --> 00:17:04.032
จาก frontend โอเค เรามาดู Supabase

00:17:04.099 --> 00:17:07.233
authentication กันบ้าง ผมคิดว่ามันคล้ายกับ

00:17:07.300 --> 00:17:10.333
Firebase มาก มันง่ายมาก คุณสามารถใช้ function เพื่อ sign in

00:17:10.400 --> 00:17:14.633
คุณสามารถใช้ provider ต่างๆ ได้ เช่น email, password, OTP

00:17:14.700 --> 00:17:22.032
คุณสามารถมี MFA, anonymous login และสิ่งใหม่ที่คุณสามารถใช้ได้คือ

00:17:22.099 --> 00:17:26.433
Firebase Authentication ใน Supabase เย้ โอเค

00:17:26.500 --> 00:17:32.833
บางทีอาจจะเป็นลูกค้า Firebase ใช่ไหมครับ ไม่แน่ใจ โอเค

00:17:32.900 --> 00:17:36.633
รอบต่อไป authorization คุณจัดการ security หรือ

00:17:36.700 --> 00:17:41.033
การเข้าถึงข้อมูลของคุณอย่างไร ผมคิดว่า Firebase

00:17:41.100 --> 00:17:44.833
มีจุดแข็งในเรื่องนี้ เมื่อคุณเริ่มต้น คุณกำหนด

00:17:44.900 --> 00:17:49.333
ข้อมูลของคุณใน JSON ใช่ไหมครับ คุณสามารถใช้

00:17:49.400 --> 00:17:53.333
common expression language คุณสามารถกำหนดได้ว่าผู้ใช้

00:17:53.400 --> 00:17:57.633
สามารถเข้าถึง node นี้ได้อย่างไร ในระดับใดก็ตามที่คุณต้องการ

00:17:57.700 --> 00:18:03.333
ข้อมูลของคุณตรงนี้ field ตรงนี้ มันช่วย

00:18:03.400 --> 00:18:05.833
จัดการการเข้าถึงได้อย่างดี ผมจะแสดงให้คุณเห็นในสไลด์ถัดไป

00:18:05.900 --> 00:18:11.833
ตัวอย่างเช่น อันนี้ก่อนเลย ถ้าคุณมี

00:18:11.900 --> 00:18:16.333
ข้อมูลใน user และ user ID คุณสามารถใช้ request.auth

00:18:16.400 --> 00:18:20.133
มันเหมือนกับ auth ที่คุณได้รับจาก Firebase Authentication

00:18:20.200 --> 00:18:24.933
และคุณสามารถบอกได้ว่าผู้ใช้สามารถอ่านได้ก็ต่อเมื่อ

00:18:25.000 --> 00:18:28.133
ถ้า user ID ตรงกับอันนี้ นั่นหมายความว่าผู้ใช้สามารถ

00:18:28.200 --> 00:18:33.133
เข้าถึง node นี้ได้เฉพาะเมื่อพวกเขาเป็นเจ้าของมัน

00:18:33.200 --> 00:18:37.633
และสำหรับการสร้างก็ได้เช่นกัน คุณสามารถมี rule ใดๆ ก็ได้

00:18:37.700 --> 00:18:41.833
ที่กำหนดในโครงสร้างนี้ มันสามารถเป็น

00:18:41.900 --> 00:18:45.133
โครงสร้างใดๆ ที่คุณต้องการ field ใดๆ node ใดๆ

00:18:45.200 --> 00:18:50.033
collection ใดๆ และอันต่อไป ตัวอย่างเช่น เมื่อคุณต้องการ

00:18:50.100 --> 00:18:56.433
ให้คนสร้าง stories เมื่อ story.published == true ถึงจะอ่านได้

00:18:56.500 --> 00:19:01.833
แปลว่าถ้า story ถูกเผยแพร่แล้ว คุณก็จะสามารถอ่านได้ และถ้า user ID

00:19:01.900 --> 00:19:04.733
เป็นผู้เขียน story นี้ ผู้ใช้คนนั้นก็สามารถอ่านได้เช่นกัน

00:19:04.800 --> 00:19:08.033
นั่นคือวิธีที่คุณสามารถกำหนดได้ และคุณไม่ต้องกังวล

00:19:08.100 --> 00:19:10.733
เกี่ยวกับ security ใน backend และคุณสามารถกำหนด security

00:19:10.800 --> 00:19:15.233
ได้ตรงนี้ นี่คือ dashboard ของวิธีที่คุณ

00:19:15.300 --> 00:19:18.933
จัดการ security ของ Firebase คุณมี version control

00:19:19.000 --> 00:19:22.733
และสไลด์ถัดไป คุณสามารถทดสอบ logic ของคุณก่อนที่จะ deploy

00:19:22.800 --> 00:19:26.933
คุณสามารถใส่ location ตรงนี้ database path

00:19:27.000 --> 00:19:31.433
และคุณสามารถดูได้ว่าอันนี้ถูกต้องหรือไม่

00:19:31.500 --> 00:19:36.833
คุณสามารถทดสอบ security logic ของคุณได้ตรงนี้
โอเค Supabase

00:19:36.900 --> 00:19:41.533
วิธีที่แนะนำสำหรับ authorization คือ row level security

00:19:41.600 --> 00:19:44.733
คุณอาจจะคุ้นเคยกับสิ่งนี้ แต่สิ่งที่คุณสามารถทำได้คือ

00:19:44.800 --> 00:19:49.433
เขียน function และใน function คุณสามารถมี

00:19:49.500 --> 00:19:53.433
logic บางอย่างใน database บางทีคุณอาจจะมี multi-tenant system

00:19:53.500 --> 00:20:00.233
บางทีคุณอาจจะมี creator หรือ owner ID แล้วคุณ

00:20:00.300 --> 00:20:03.733
สามารถใช้สิ่งนั้นเป็น function และคุณสามารถใช้ policy

00:20:03.800 --> 00:20:07.433
คุณสามารถเห็นสิ่งนี้ได้ด้านล่าง คุณสามารถใช้ policy กับ table

00:20:07.500 --> 00:20:11.733
ดังนั้นโดยอิงจาก policy คุณสามารถจัดการ authorization ได้

00:20:11.800 --> 00:20:17.233
วิธีการทำคืออิงจาก action มันสามารถเป็น read, update

00:20:17.300 --> 00:20:20.833
ตัวอย่างเช่น คุณสามารถตรวจสอบผลลัพธ์ของ function

00:20:20.900 --> 00:20:25.433
มันเกือบจะเหมือน JavaScript ใช่ไหมครับ ดังนั้นคุณสามารถเขียน

00:20:25.500 --> 00:20:29.333
JavaScript ใน function และ return ผลลัพธ์ได้

00:20:29.400 --> 00:20:33.833
คุณสามารถใช้ custom JWT claims ได้เช่นกัน

00:20:33.900 --> 00:20:35.833
หรือคุณสามารถใช้กับ Postgres roles ก็ได้

00:20:35.900 --> 00:20:39.233
มันค่อนข้างยืดหยุ่น แต่มันก็อาจจะซับซ้อน

00:20:39.300 --> 00:20:42.733
และมันอยู่ใน database โดยตรง ดังนั้นคุณต้องคิดถึง

00:20:42.800 --> 00:20:45.833
optimization ด้วย ถ้าคุณใช้ row level security

00:20:45.900 --> 00:20:51.133
คิดถึง performance ด้วย โอเค ต่อไป รอบที่ห้า

00:20:51.200 --> 00:20:55.133
Business logic และ function โอเค

00:20:55.200 --> 00:20:58.833
Firebase เป็น event driven

00:20:58.900 --> 00:21:03.933
ดังนั้นอย่างเช่น เมื่อผู้ใช้อัปเดตข้อมูล คุณอาจ

00:21:04.000 --> 00:21:07.033
ต้องการมี logic เพิ่มเติมเพื่อแก้ไขข้อมูลจากอันนี้

00:21:07.100 --> 00:21:12.333
ย้ายข้อมูลไปยัง node อื่น นั่นคือที่ที่ Firebase Cloud

00:21:12.400 --> 00:21:18.333
Function เข้ามา ดังนั้น พวกเขากำจัดความจำเป็น

00:21:18.400 --> 00:21:20.433
ในการสร้าง backend monolithic system ทั้งหมด

00:21:20.500 --> 00:21:24.333
คุณสามารถสร้างแค่ function และคุณสามารถ deploy function ใหม่ได้

00:21:24.400 --> 00:21:28.533
สิ่งสำคัญคือ Firebase Functions รองรับ

00:21:28.600 --> 00:21:32.033
JavaScript และ Python ในตอนนี้ และพวกเขามี auto scaling

00:21:32.100 --> 00:21:34.933
และคุณสามารถเรียก function โดยตรงได้

00:21:35.000 --> 00:21:38.033
ไม่ต้องรอ event trigger function สามารถทำหน้าที่เป็น

00:21:38.100 --> 00:21:44.133
API endpoint ให้คุณได้เช่นกัน ตัวอย่างเช่น เมื่อผู้ใช้อัปเดต

00:21:44.200 --> 00:21:47.233
คุณ watch ดูค่าที่เขียนสำหรับ user ID

00:21:47.300 --> 00:21:51.433
ดังนั้นเมื่อค่า JSON ของผู้ใช้ถูกอัปเดต มันเกิดการ trigger

00:21:51.500 --> 00:21:54.233
function นี้ อันนี้จาก Python และ

00:21:54.300 --> 00:21:58.033
อันนี้จาก JavaScript และคุณสามารถ monitor

00:21:58.100 --> 00:22:01.033
function ของคุณใน dashboard ได้ เช่น จำนวนการเรียกใช้

00:22:01.100 --> 00:22:05.333
และคุณสามารถเปิด log เพิ่มเติมใน Google Cloud

00:22:06.200 --> 00:22:11.233
Cloud log service เช่นกัน ที่คุณสามารถ monitor ใน Google Cloud

00:22:11.300 --> 00:22:17.233
ในบริการอื่น
โอเค Supabase ใช่ พวกเขาก็มี function เช่นกัน

00:22:17.300 --> 00:22:20.933
พวกเขาเรียกมันว่า edge function แน่นอนว่าเราต้องการรันมันบน edge

00:22:22.200 --> 00:22:28.033
สิ่งพิเศษอย่างนึงคือมันใช้ deno runtime

00:22:28.100 --> 00:22:31.533
คุณอาจจะคุ้นๆ ไดโนเสาร์ตัวนี้

00:22:31.600 --> 00:22:35.033
และคุณสามารถเขียน function สำหรับอะไรก็ได้

00:22:35.100 --> 00:22:39.233
จัดการ HTTP request คุณสามารถโต้ตอบกับ database

00:22:39.300 --> 00:22:45.033
โดยใช้ Supabase SDK หรือคุณสามารถ serve REST

00:22:45.100 --> 00:22:48.333
server เล็กๆ ได้ คุณสามารถใช้ function สำหรับอะไรก็ได้ที่คุณต้องการ

00:22:48.400 --> 00:22:53.833
มันค่อนข้างยืดหยุ่น ไปต่อกัน รอบที่หก Storage

00:22:55.000 --> 00:22:56.933
อันนี้ง่ายมากสำหรับ Firebase

00:22:57.000 --> 00:23:01.433
คุณสามารถเก็บรูปภาพ ข้อความ หรือไฟล์ CSV ใดๆ ก็ได้

00:23:01.500 --> 00:23:05.133
มันเหมือนกับการกำหนด rule สำหรับ storage

00:23:05.200 --> 00:23:08.033
เหมือนกับที่คุณกำหนด rule ใน real-time database

00:23:08.100 --> 00:23:12.433
และคุณสามารถเห็น metadata ของไฟล์นั้น

00:23:12.500 --> 00:23:15.033
พวกเขายังมี extension สำหรับ

00:23:15.100 --> 00:23:18.433
คุณในการแก้ไขข้อมูลจากไฟล์ที่เขียน

00:23:18.500 --> 00:23:22.633
ดังนั้น ก่อนอื่นเลย ถ้าผู้ใช้อัปโหลดไฟล์นี้ คุณสามารถมี extension อื่น

00:23:22.700 --> 00:23:28.133
ที่พร้อมใช้งานเพื่อลดขนาดไฟล์ให้เป็น thumbnail

00:23:28.200 --> 00:23:34.133
อันนี้สามารถทำได้โดยอัตโนมัติ โอเค

00:23:34.200 --> 00:23:37.933
สำหรับ Supabase พวกเขาก็มี SDK ที่คุณสามารถโต้ตอบกับ storage ได้

00:23:38.000 --> 00:23:42.933
มันใช้ S3 บริการของ AWS มันใช้

00:23:43.000 --> 00:23:45.233
bucket และ file ถ้าคุณเคยทำงานกับสิ่งนี้

00:23:45.300 --> 00:23:48.133
มันเหมือนกับ folder แล้วคุณสามารถใส่ไฟล์ลงใน

00:23:48.200 --> 00:23:52.733
folder ที่สามารถเป็น public หรือ private และมันสามารถ serve จาก CDN ได้

00:23:52.800 --> 00:23:55.833
ดังนั้นคุณสามารถทำ transformation บางอย่างที่คุณรวมเข้าด้วยกัน

00:23:55.900 --> 00:23:59.033
ตัวอย่างเช่น กับ edge function คุณสามารถทำ

00:23:59.100 --> 00:24:03.133
image transformation ได้เช่นกัน Authorization จัดการด้วย

00:24:03.200 --> 00:24:08.033
JWT หรือคุณจัดการโดยตรงกับ S3 เพราะพวกเขาจัดการ

00:24:08.100 --> 00:24:12.133
S3 bucket ให้คุณ ดังนั้นคุณสามารถใช้

00:24:12.200 --> 00:24:16.433
S3 client ที่คุณเห็นด้านล่าง ดังนั้น ใช้ SDK หรือ

00:24:16.500 --> 00:24:21.833
ใช้ S3 โดยตรงก็ได้ ถ้าคุณกลัวเรื่อง lock-in โอเค ไปต่อกัน

00:24:22.900 --> 00:24:26.833
แน่นอนว่าพวกเราทุกคนมาที่นี่เพื่อ AI ใช่ไหมครับ งั้นหัวข้อต่อไป

00:24:29.000 --> 00:24:32.833
เนื่องจาก Firebase อยู่ใน ecosystem ของ Google Cloud

00:24:32.900 --> 00:24:37.433
พวกเขามีหลายสิ่งหลายอย่างเพื่อให้ทันกับ OpenAI และ AWS

00:24:37.500 --> 00:24:40.933
พวกเขามีระบบ UI ของตัวเองที่คุณสามารถจัดการ prompt ได้

00:24:41.000 --> 00:24:43.933
และพวกเขามี แค่อยากจะแสดงให้ดูคร่าวๆ

00:24:44.000 --> 00:24:48.333
ไปสไลด์ต่อไปเลยครับ คุณสามารถใช้ Vertex AI ใน

00:24:48.400 --> 00:24:52.333
Firebase ได้ Vertex AI เป็นฟีเจอร์ ML

00:24:52.400 --> 00:24:56.233
ของ Google Cloud คุณสามารถสร้างระบบ RAG ใน

00:24:56.300 --> 00:24:59.333
Vertex และคุณสามารถทำ vector search ได้

00:24:59.400 --> 00:25:01.833
และมันสามารถ integrate เข้ากับ Firebase ได้

00:25:03.400 --> 00:25:06.933
อันนี้เพิ่งเปิดตัวใหม่ GenKit

00:25:07.000 --> 00:25:10.633
คุณสามารถสร้าง GenAI ใน

00:25:10.700 --> 00:25:13.833
ฝั่ง client ได้ พวกเขามี

00:25:13.900 --> 00:25:18.033
wrapper ให้คุณ interact กับ AI

00:25:18.100 --> 00:25:22.933
ได้รวดเร็วยิ่งขึ้น
และพวกเขายังมีฟีเจอร์ embedding ด้วย

00:25:23.000 --> 00:25:32.233
นั่นคือทั้งหมด
สำหรับ Supabase ผมจะพูดถึง

00:25:32.300 --> 00:25:38.033
สองสิ่ง สิ่งแรกคือ vector คุณสามารถสร้าง column

00:25:38.100 --> 00:25:43.333
โดยใช้ pgvector ทำให้เก็บข้อมูล embedding ได้

00:25:43.400 --> 00:25:46.933
มีตัวอย่างหนึ่งตรงนี้ และสิ่งที่สองคือพวกเขามี

00:25:47.000 --> 00:25:50.633
integration กับ model ที่คุณสามารถใช้ได้

00:25:50.700 --> 00:25:54.733
บางครั้งก็ pre-installed ใน edge function ดังนั้นคุณสามารถ

00:25:54.800 --> 00:25:57.933
ใช้ model เล็กๆ ได้โดยตรงใน function และสามารถ interact ได้

00:25:58.000 --> 00:25:59.533
คล้ายกับที่ภูมิแสดงให้เห็น

00:25:59.600 --> 00:26:03.133
คุณสามารถสลับระหว่าง model ได้ และคุณสามารถสร้าง

00:26:03.200 --> 00:26:07.333
embedding และเก็บมันเป็นส่วนหนึ่งของ data schema ปกติของคุณได้

00:26:07.400 --> 00:26:14.033
คุณเพิ่มอีกหนึ่ง column สำหรับ embedding ของคุณ โอเค ใกล้เสร็จแล้ว

00:26:14.100 --> 00:26:17.533
รอบที่แปด real-time ผมคิดว่าเราสามารถทำ

00:26:17.600 --> 00:26:19.833
อันนี้ได้อย่างรวดเร็ว ผมได้พูดถึง real-time

00:26:19.900 --> 00:26:23.233
feature หลายครั้งสำหรับ Firebase นี่เป็นเพียงการแสดง

00:26:23.300 --> 00:26:26.433
dashboard อีกอันสำหรับ Firebase นี่คือวิธีที่คุณเก็บข้อมูล

00:26:26.500 --> 00:26:30.633
ใน nested JSON value และนี่คือสำหรับ Firebase

00:26:30.700 --> 00:26:35.533
โอเคๆๆ คุณทำให้ผมสับสน Supabase

00:26:35.600 --> 00:26:39.833
โอเคๆ Supabase มีสองวิธีในการทำ

00:26:39.900 --> 00:26:42.833
อย่างแรกคือ channel
channel คล้ายกับ

00:26:42.900 --> 00:26:45.433
table และสิ่งที่คุณสามารถใช้คือ

00:26:45.500 --> 00:26:48.833
broadcast broadcast คุณกำลัง listen

00:26:48.900 --> 00:26:52.733
event ใน database และคุณสามารถเขียน logic ตาม

00:26:52.800 --> 00:26:56.833
event ใน database หรือ presence ซึ่งคล้ายกับ online presence หรือ

00:26:56.900 --> 00:27:01.133
เวลาที่โปรแกรมโชว์ว่าใครกำลังแก้ไฟล์นี้อยู่บ้าง คุณสามารถใช้ authorization

00:27:01.200 --> 00:27:04.833
ผ่าน row level security ได้เช่นกัน เพราะทุกอย่างใช้ Postgres เป็นพื้นฐาน

00:27:04.900 --> 00:27:11.033
ดังนั้น real-time ก็ใช้ Postgres เป็นพื้นฐานเช่นกัน โอเค อันสุดท้าย

00:27:11.100 --> 00:27:15.233
น่าสนใจที่สุด
คือราคา

00:27:15.300 --> 00:27:19.233
โอเค ผมคิดว่าเราสามารถข้ามอันนี้ไปได้
SDK โอเค

00:27:19.800 --> 00:27:23.433
คุณต้องการไปต่อที่ SDK ก่อนไหม
ไปต่อที่ SDK เลยครับ ขอโทษครับ

00:27:23.500 --> 00:27:29.033
หัวข้อผิด โอเค ดู SDK ของ Firebase กัน

00:27:29.100 --> 00:27:35.933
คุณมี JS และ Python ตรงนี้ แค่อยากจะแสดง snippet

00:27:36.000 --> 00:27:38.933
ของโค้ด มันใช้งานง่ายมากสำหรับผู้ใช้ Python

00:27:39.000 --> 00:27:42.633
คุณสามารถ pip install และ import firebase_admin

00:27:42.700 --> 00:27:48.033
และจัดการข้อมูลของคุณได้ เช่นเดียวกับ JavaScript โอเค

00:27:48.100 --> 00:27:52.433
Supabase ก็คล้ายกัน คุณมี SDK สำหรับฝั่ง client

00:27:52.500 --> 00:27:55.433
ที่สามารถรันบน server ได้เช่นกัน และปกติแล้วจะ scoped

00:27:55.500 --> 00:28:00.333
คุณมี authorization ขอโทษครับ authentication, storage admin

00:28:00.400 --> 00:28:04.633
และคุณมี CLI เพื่อรัน Supabase แบบ local

00:28:04.700 --> 00:28:09.933
ดังนั้นคุณสามารถ interact และรัน Docker container ทั้งหมดจาก Supabase แบบ local ด้วย CLI ได้

00:28:10.900 --> 00:28:18.133
ราคา โอเค เนื่องจาก Firebase มีสอง product

00:28:18.200 --> 00:28:22.133
real-time database และ Firestore
use case ส่วนใหญ่สำหรับ real-time

00:28:22.200 --> 00:28:25.633
database พวกเขาจะไม่คิดค่าบริการสำหรับการอ่านและเขียน

00:28:25.700 --> 00:28:28.033
พวกเขาจะคิดค่าบริการเฉพาะ database data store

00:28:28.100 --> 00:28:33.333
ดังนั้นมันจะเป็น $5 ต่อ gigabyte ที่เก็บ

00:28:33.400 --> 00:28:37.833
ดังนั้นถ้าคุณไม่มีข้อมูลมาก และแอปพลิเคชันของคุณ

00:28:37.900 --> 00:28:41.933
ต้องการการอ่านและเขียนมาก มันจะง่ายกว่าสำหรับคุณที่จะใช้

00:28:42.000 --> 00:28:45.533
real-time database แต่สำหรับอันนี้ ผมคิดว่า

00:28:45.600 --> 00:28:47.933
คนส่วนใหญ่จะบอกว่าเป็นตัวเลือกที่ดีที่สุด

00:28:48.000 --> 00:28:51.633
ตัวเลือกมาตรฐานถ้าคุณต้องการใช้ Firebase และพวกเขาจะคิดค่าบริการ

00:28:51.700 --> 00:28:54.433
คุณสำหรับการอ่านและเขียน document การอ่านและเขียน

00:28:54.500 --> 00:29:00.233
ดังนั้น free tier คือ 20,000 ครั้งต่อวันสำหรับการเขียน และ 50,000 ครั้งต่อวันสำหรับการอ่าน

00:29:00.300 --> 00:29:04.733
แต่ราคาก็ถูกมาก นี่คือ free tier

00:29:05.300 --> 00:29:09.133
ไปสไลด์ต่อไป อันนี้สำหรับ

00:29:10.000 --> 00:29:18.033
มันแค่ $0.03 ต่อ 100,000 document

00:29:18.100 --> 00:29:21.333
ดังนั้นมันจึงไม่น่ากังวลมากนัก

00:29:21.400 --> 00:29:25.933
เรามีคำกล่าวว่าถ้าคุณพบว่าราคามันแพง

00:29:26.000 --> 00:29:29.433
นั่นหมายความว่าแอปของคุณประสบความสำเร็จ ดังนั้นคุณไม่ต้องกังวล

00:29:29.500 --> 00:29:33.733
เกี่ยวกับราคามากนัก ราคาจะเพิ่มขึ้นตาม

00:29:33.800 --> 00:29:41.333
การใช้งานแอปของคุณ โอเค มาดูราคาของ Supabase กัน

00:29:41.400 --> 00:29:43.933
นี่คือราคา cloud แน่นอนว่าคุณสามารถใช้

00:29:44.000 --> 00:29:46.133
cloud offering ของพวกเขาได้ พวกเขามี free tier

00:29:46.200 --> 00:29:51.333
ซึ่งค่อนข้างใจกว้าง มันขึ้นอยู่กับจำนวนผู้ใช้รายเดือน

00:29:51.400 --> 00:29:55.033
พื้นที่ database และพื้นที่จัดเก็บไฟล์ของคุณ

00:29:55.100 --> 00:29:59.133
ดังนั้นแต่ละ function จะมีข้อจำกัดที่แตกต่างกัน

00:29:59.200 --> 00:30:02.633
ที่คุณต้องระวัง ผมคิดว่าคุณต้องระวัง

00:30:02.700 --> 00:30:05.933
สิ่งที่อิงตามการใช้งานเป็นหลัก

00:30:06.000 --> 00:30:09.533
ดังนั้นถ้าเราพูดถึง network ถ้าเราพูดถึง database storage

00:30:09.600 --> 00:30:12.433
คุณจะต้องคำนวณด้วยตัวคุณเองว่าคุณใช้ไปเท่าไหร่

00:30:12.500 --> 00:30:15.833
คุณต้องสังเกต คุณต้องระมัดระวังเกี่ยวกับเรื่องนี้

00:30:15.900 --> 00:30:20.433
แต่คุณสามารถ self-host ได้ คุณสามารถรันมันได้ฟรี

00:30:20.500 --> 00:30:25.233
แน่นอนว่าคุณสามารถรันมันแบบ local หรือรันมันบน VPS เล็กๆ

00:30:25.800 --> 00:30:27.733
แน่นอนว่ามันจะถูกกว่า

00:30:27.800 --> 00:30:31.233
cloud version มาก แต่คุณต้องจัดการมันด้วยตัวคุณเอง

00:30:31.300 --> 00:30:35.733
ดังนั้นนี่คือราคา cloud ผมคิดว่ามันอาจจะคล้ายกับ

00:30:35.800 --> 00:30:40.933
Firebase ในแง่ของราคา แต่มันก็ scale ตาม

00:30:41.000 --> 00:30:43.833
network request ของคุณหรือพื้นที่จัดเก็บที่คุณมีใน database ของคุณ

00:30:43.900 --> 00:30:50.333
ดังนั้นตรวจสอบให้แน่ใจก่อน
โอเค ดูเหมือนว่าเราจะจบแล้ว

00:30:51.000 --> 00:31:04.233
ใครเป็นผู้ชนะครับ มีความคิดเห็นอะไรไหมครับ
โอเค มีคำถามไหมครับ

00:31:06.600 --> 00:31:12.833
(ผู้ฟัง: “Google เก็บข้อมูล incognito ของคุณ และ Firebase ไม่ใช่ open source”)

00:31:12.900 --> 00:31:17.833
ผมชอบความคิดเห็นของคุณครับ

00:31:19.500 --> 00:31:23.633
งานนี้งาน Supabase meetup ใช่ไหมครับ ผมก็ไม่รู้เหมือนกัน

00:31:23.700 --> 00:31:30.133
มาดูกันว่าใครเป็นผู้ชนะ โอเค “It depends”

00:31:30.200 --> 00:31:36.633
ขึ้นอยู่กับหลายอย่างครับ โอเค งั้นเรามาดูอีกครั้ง

00:31:38.700 --> 00:31:40.833
- คุณไปก่อนก็ได้ครับ
- โอเค ผมไปก่อนก็ได้

00:31:40.900 --> 00:31:45.033
นี่คือ TLDR ใช่ไหมครับ ถ้าคุณชอบ open source

00:31:45.100 --> 00:31:49.433
คุณอาจจะชอบ Supabase ถ้าคุณชอบ self-hosting และ

00:31:49.500 --> 00:31:54.533
ชอบการปรับแต่งระบบ Supabase เป็นตัวเลือกที่ดีสำหรับคุณ

00:31:54.600 --> 00:31:59.133
ราคาถูกมากในการเริ่มต้น Supabase ยังเป็นตัวเลือกที่ดี

00:31:59.200 --> 00:32:04.933
ถ้าคุณชอบ meme หรือหัวข้อที่กำลังเป็นที่นิยม Supabase เหมาะสำหรับคุณ

00:32:05.000 --> 00:32:07.233
พวกเขามี documentation ที่ดีมาก จริงๆ นะ

00:32:07.300 --> 00:32:10.233
ผมจะบอกว่านี่เป็นหนึ่งใน documentation ที่ดีที่สุด

00:32:10.300 --> 00:32:13.133
และ community ที่ยอดเยี่ยม คุณอยู่ที่นี่ใช่ไหมครับ

00:32:13.200 --> 00:32:16.633
ผมคิดว่า community ของ Supabase ดีมาก

00:32:16.700 --> 00:32:20.633
ถ้าคุณมีคำถามเพิ่มเติมเกี่ยวกับการเลือก Supabase คุณสามารถมาคุย

00:32:20.700 --> 00:32:24.333
กับผมได้ มาดู Firebase กันครับ สรุปสั้นๆ

00:32:24.400 --> 00:32:27.533
ถ้า infrastructure หลักของคุณมาจาก Google Cloud

00:32:27.600 --> 00:32:31.133
การเลือก Firebase แทน Supabase เป็นเรื่องง่ายมาก

00:32:31.200 --> 00:32:34.933
และพวกเขามีฟีเจอร์ที่ดี คุณสามารถมีผู้ใช้ได้ถึง

00:32:35.000 --> 00:32:39.933
10,000 monthly active users โดยไม่ต้องถึงขีดจำกัดของ free tier

00:32:40.000 --> 00:32:45.033
ดังนั้น free tier ของพวกเขาจึงสูงมาก และถ้าคุณชอบ NoSQL

00:32:45.100 --> 00:32:48.433
มากกว่า SQL อันนี้ก็เหมาะสำหรับคุณเช่นกัน และความสามารถด้าน real-time

00:32:48.500 --> 00:32:51.233
มันเร็วมากสำหรับคุณ

00:32:51.300 --> 00:32:54.833
ในการอัปเดตแบบเรียลไทม์ และก็ดีมาก เช่นเดียวกับ Supabase

00:32:54.900 --> 00:32:59.333
พวกเขามี CLI, SDK และคุณสามารถใช้ Google Cloud CLI ได้เช่นกัน

00:32:59.400 --> 00:33:03.033
ดังนั้นมันจึงสามารถ integrate และ deploy ได้ง่าย

00:33:03.100 --> 00:33:07.933
และสุดท้าย Vertex AI มันมีฟีเจอร์ที่แข็งแกร่งมาก

00:33:08.000 --> 00:33:11.733
ในด้าน AI infrastructure พวกเขามี

00:33:11.800 --> 00:33:15.633
แพลตฟอร์มที่สามารถจัดการฟีเจอร์ AI ได้มากมาย

00:33:15.700 --> 00:33:22.833
ในอนาคต ครับ โอเค และนี่คือ reference สำหรับคุณ

00:33:22.900 --> 00:33:27.833
เกี่ยวกับ Supabase และ Firebase ครับ

00:33:27.900 --> 00:33:31.233
และทั้งหมดนี้ก็คือการเปรียบเทียบ

00:33:31.300 --> 00:33:34.033
อยากจะแนะนำตัวเราเองสักหน่อย

00:33:34.100 --> 00:33:36.233
เรายังไม่ได้แนะนำตัวกันเลย

00:33:36.300 --> 00:33:40.533
สำหรับผม ผมมาจาก datascale เรามี SQL analyzer

00:33:40.600 --> 00:33:43.033
เราช่วยคุณ reverse engineering data model

00:33:43.100 --> 00:33:46.433
ถ้าคุณมี SQL query จำนวนมาก คุณไม่รู้ว่า data model

00:33:46.500 --> 00:33:49.033
ของคุณเป็นอย่างไร คุณไม่รู้ metadata จาก

00:33:49.100 --> 00:33:51.333
query ของคุณ คุณสามารถ automate ได้

00:33:51.400 --> 00:33:54.833
จาก SQL query ไปยังแพลตฟอร์มของเรา และเราจะวิเคราะห์

00:33:54.900 --> 00:33:58.633
มัน สร้าง diagram ให้คุณโดยอัตโนมัติ และนี่เป็น shared workspace ที่

00:33:58.700 --> 00:34:02.433
ทีมของคุณสามารถแชร์ SQL query และทุกอย่างร่วมกันได้

00:34:04.600 --> 00:34:07.733
เยี่ยมเลย ขอบคุณครับภูมิ ไปลองดู datascale กันนะครับ

00:34:07.800 --> 00:34:11.733
และผมเป็น co-founder ที่ hubql เรากำลังสร้าง

00:34:11.800 --> 00:34:13.833
เครื่องมือทางเลือกสำหรับ Postman ถ้าคุณไม่ชอบ Postman

00:34:13.900 --> 00:34:16.632
หรือรำคาญ Postman โปรดมาคุยกับผม

00:34:18.699 --> 00:34:23.233
API client ของเราทำงานร่วมกับ JavaScript framework ต่างๆ รวมถึง

00:34:23.300 --> 00:34:27.733
Elysia บางทีคุณอาจจะชอบ เรากำลังมองหา feedback

00:34:27.800 --> 00:34:32.433
ลองดูที่ hubql.com หรือมาคุยกับผม ยินดีที่จะพูดคุย

00:34:32.500 --> 00:34:37.233
เกี่ยวกับ Supabase ด้วยแน่นอน และผมคิดว่าทั้งหมดนี้ก็คือหัวข้อนี้ ขอบคุณครับ

00:34:37.300 --> 00:34:38.632
ขอบคุณมากครับ ขอบคุณครับ
