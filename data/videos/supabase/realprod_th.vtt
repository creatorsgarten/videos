WEBVTT

00:00:01.100 --> 00:00:04.233
ขอบคุณมากครับทุกคน ผมดีใจมากที่ได้มาอยู่ที่นี่

00:00:04.300 --> 00:00:09.333
วันนี้ผมอยากจะมาพูดคุยเกี่ยวกับการที่ผมใช้ Supabase ในโปรเจกต์

00:00:09.400 --> 00:00:13.933
จริงๆ ไม่ใช่แค่ทฤษฎี

00:00:14.000 --> 00:00:16.433
แต่เราจะมาพูดถึงการใช้งานจริง

00:00:16.500 --> 00:00:23.433
ผมเป็น full stack developer ทำงานส่วนใหญ่เกี่ยวกับ CRM และ AI systems

00:00:23.500 --> 00:00:29.533
ให้กับบริษัทใน UK และ Israel และผมก็ contribute โอเพ่นซอร์สเยอะมาก

00:00:29.600 --> 00:00:32.232
ยกตัวอย่างเช่น มี front-end library

00:00:32.299 --> 00:00:36.833
ที่ค่อนข้างเป็นที่นิยมบน GitHub มี 27,000 ดาวบน GitHub

00:00:36.900 --> 00:00:40.833
และมีคนดาวน์โหลดมากกว่า 6 ล้านครั้งต่อเดือน

00:00:40.900 --> 00:00:44.233
และคุณสามารถหาผมเจอในรายชื่อ top contributors

00:00:44.300 --> 00:00:48.333
เมื่อไม่กี่เดือนที่ผ่านมา ผมตัดสินใจเปลี่ยน

00:00:48.400 --> 00:00:52.733
ไปทำโปรเจกต์ของตัวเอง ผมเชื่อว่านักพัฒนา

00:00:52.800 --> 00:00:56.733
ทุกคนควรลองสร้างโปรเจกต์ของตัวเองอย่างน้อยหนึ่งครั้งในชีวิต

00:00:56.800 --> 00:01:01.433
เพราะมันจะทำให้คุณเห็นภาพรวมมากขึ้น

00:01:01.500 --> 00:01:06.233
มันจะทำให้คุณเห็นอะไรที่มากกว่าโค้ด เพื่อทำความเข้าใจความต้องการทางธุรกิจได้ดีขึ้น

00:01:06.300 --> 00:01:10.133
และผมเชื่อว่า Supabase เป็นแพลตฟอร์มที่ดีมากสำหรับสิ่งนั้น

00:01:10.200 --> 00:01:14.433
เพราะมันสามารถแทนที่ทีม back-end engineers

00:01:14.500 --> 00:01:18.833
DevOps engineers และ database engineers ได้

00:01:18.900 --> 00:01:23.032
คุณสามารถมีทุกอย่างในแพลตฟอร์มเดียว และรันโปรเจกต์

00:01:23.100 --> 00:01:28.032
ได้ด้วยตัวคุณเอง ในหัวข้อนี้ ผมจะพูดถึง

00:01:28.100 --> 00:01:30.333
โปรเจกต์คร่าวๆ เพื่อให้คุณเข้าใจบริบท

00:01:30.400 --> 00:01:35.133
จากนั้นเราจะเปลี่ยนไปพูดถึงฟีเจอร์ของ Supabase ที่ผมคิดว่ามีประโยชน์

00:01:35.200 --> 00:01:37.933
และผมเชื่อว่าคุณก็จะคิดว่ามันมีประโยชน์เช่นกัน

00:01:40.500 --> 00:01:45.233
เพื่อให้คุณเข้าใจพื้นฐาน ตอนนี้

00:01:45.300 --> 00:01:51.233
Supabase dashboard แสดงให้เห็นว่ามีประมาณ 10,000 database

00:01:51.300 --> 00:01:56.933
requests ต่อวัน และมีประมาณ 6,000 monthly active users

00:01:57.000 --> 00:02:01.933
ดังนั้นคุณจะเข้าใจได้ว่าเป็นโปรเจกต์ที่ถูกใช้งาน

00:02:02.000 --> 00:02:07.733
โดยผู้ใช้จริง และเรามาพูดถึงโปรเจกต์

00:02:07.800 --> 00:02:12.233
คร่าวๆ ก่อน คุณรู้ไหมว่า 60%

00:02:12.300 --> 00:02:18.333
ของข้อมูลที่เราได้รับ จะถูกลืมภายในหนึ่งชั่วโมง

00:02:18.400 --> 00:02:23.833
และในหนึ่งสัปดาห์ เราจะจำมันได้เพียงแค่ 10% เท่านั้น

00:02:23.900 --> 00:02:29.933
กฎนี้ถูกค้นพบโดยนักวิทยาศาสตร์ชาวเยอรมัน Hermann Ebbinghaus

00:02:30.000 --> 00:02:33.632
จริงๆ แล้วมันก็ค่อนข้างดี เพราะ

00:02:33.700 --> 00:02:37.433
เราไม่จำเป็นต้องเก็บทุกอย่างที่เกิดขึ้นกับเราไว้ในสมอง

00:02:37.500 --> 00:02:42.933
แต่ในกรณีที่คุณเรียนภาษา ทฤษฎีดนตรี หรือประวัติศาสตร์ คุณ

00:02:43.000 --> 00:02:47.733
ต้องการให้ข้อมูลที่คุณเรียนรู้คงอยู่ในสมองของคุณ

00:02:47.800 --> 00:02:54.033
เพื่อให้บรรลุเป้าหมายนั้น คุณต้องทบทวนความจำ และคุณไม่

00:02:54.100 --> 00:03:01.733
จำเป็นต้องทบทวนความจำเหล่านั้นทุกวัน แต่คุณสามารถใช้

00:03:01.800 --> 00:03:04.132
เทคนิค spaced repetition แทนได้ ตัวอย่างเช่น คุณสามารถทบทวน

00:03:04.200 --> 00:03:08.132
ข้อมูลในวันแรก จากนั้นในวันที่สาม จากนั้นใน

00:03:08.200 --> 00:03:12.333
วันที่หก จากนั้น 25 และอื่นๆ แนวคิดคือคุณไม่

00:03:12.400 --> 00:03:16.632
จำเป็นต้องใช้เวลามากในการทบทวนข้อมูลซ้ำๆ

00:03:16.700 --> 00:03:22.233
คุณสามารถใช้เวลาน้อยลง แต่ยังคง

00:03:22.300 --> 00:03:27.233
จดจำทุกอย่างได้อย่างมีประสิทธิภาพ และผมสร้างแอปพลิเคชัน

00:03:27.300 --> 00:03:35.433
โดยอิงตามพื้นฐานนี้ ตัวอย่างง่ายๆ คุณเรียนภาษาอังกฤษ

00:03:35.500 --> 00:03:37.632
และคุณต้องการจำวลี “get ahead”

00:03:37.700 --> 00:03:40.533
คุณเพิ่มการ์ดที่มีข้อมูลนี้

00:03:40.600 --> 00:03:46.933
และถ้าคุณตอบถูก แอปจะกำหนดเวลา

00:03:47.000 --> 00:03:50.333
ให้ทบทวนคำนี้ในหนึ่งวัน สามวัน หกวัน

00:03:50.400 --> 00:03:53.833
ฯลฯ แต่ถ้าคุณทบทวนไม่สำเร็จ

00:03:53.900 --> 00:04:02.033
คุณจำไม่ได้ ช่วงเวลาจะสั้นลง และคุณจะได้รับ

00:04:02.100 --> 00:04:07.233
การแจ้งเตือนอัจฉริยะ
ทั้งหมดนี้สร้างขึ้นโดยใช้ Supabase

00:04:07.300 --> 00:04:12.733
และมันเริ่มต้นอย่างไร ก่อนอื่นคุณต้องสร้าง

00:04:12.800 --> 00:04:18.733
ตารางจำนวนมาก และ Supabase มีวิธีที่

00:04:18.800 --> 00:04:24.133
ใช้งานง่ายที่สุดในการสร้าง database schema คุณเพียงแค่ใช้

00:04:24.200 --> 00:04:27.433
GUI ในการสร้างตารางทั้งหมดของคุณ ตัวอย่างเช่น ในกรณีของผม ผมมีตาราง

00:04:27.500 --> 00:04:33.832
สำหรับ users, แต่ละ user มีหลาย decks, deck ก็เหมือนกลุ่มของการ์ด

00:04:33.900 --> 00:04:38.332
จากนั้นแต่ละ deck มีการ์ดจำนวนมาก และแต่ละการ์ดมี review จำนวนมาก

00:04:38.400 --> 00:04:43.033
ดังนั้นการ์ดเดียวกันสามารถนำกลับมาใช้ใหม่ได้หลายครั้งโดย user เดียวกัน

00:04:43.100 --> 00:04:47.533
หรือโดย user คนอื่น และเมื่อคุณเสร็จสิ้น

00:04:47.600 --> 00:04:52.533
คุณพร้อมที่จะ export มันไปยัง database จริง

00:04:52.600 --> 00:04:56.332
ที่สามารถเข้าถึงได้ทางอินเทอร์เน็ต คุณเพียงแค่สร้างบางอย่างบน

00:04:56.400 --> 00:05:00.133
อินเทอร์เน็ต จากนั้น Supabase จะช่วยให้คุณแปลงเป็น

00:05:00.200 --> 00:05:03.933
database ที่คุณสามารถใช้ในโค้ดของคุณที่สามารถเข้าถึงได้แบบสาธารณะ

00:05:09.200 --> 00:05:13.733
และวิธีการใช้งาน คุณมี SDK พื้นฐาน

00:05:13.800 --> 00:05:17.733
ผมจะแสดงตัวอย่างใน JavaScript แต่คุณสามารถใช้

00:05:17.800 --> 00:05:21.233
ภาษาใดก็ได้ที่คุณต้องการ และที่นี่เราแค่ต้องเข้าถึง

00:05:21.300 --> 00:05:24.533
Supabase เราระบุตาราง จากนั้น

00:05:24.600 --> 00:05:28.633
การดำเนินการ ถ้าคุณต้องการ query บางอย่าง หรือสร้าง record ใหม่

00:05:28.700 --> 00:05:33.133
เราระบุฟิลด์ทั้งหมด จากนั้นเราระบุสิ่งที่ต้องการเลือก

00:05:36.600 --> 00:05:40.733
ฟีเจอร์ที่ดีจริงๆ ที่ผมชอบคือ Supabase ช่วยให้คุณ

00:05:40.800 --> 00:05:47.332
สร้าง type ทั้งหมดใน DB คุณให้ ดังนั้นคุณไม่จำเป็นต้อง

00:05:47.400 --> 00:05:51.533
เขียน type ให้ตารางและฟิลด์ทั้งหมดในโค้ดของคุณด้วยตนเอง

00:05:51.600 --> 00:05:55.533
คุณเพียงแค่รันคำสั่ง supabase คำสั่งเดียว และคุณจะได้รับ

00:05:55.600 --> 00:06:00.233
โครงสร้างทั้งหมดนี้ในโค้ดของคุณ ดังนั้นในกรณีของผม สำหรับ

00:06:00.300 --> 00:06:05.533
แอปพลิเคชันที่มี users จำนวนมาก Supabase สร้างโค้ดให้ผมประมาณ

00:06:05.600 --> 00:06:09.933
2,000 บรรทัด และมันจะอัปเดตโดยอัตโนมัติ

00:06:10.000 --> 00:06:14.233
สมมติว่าผมตัดสินใจลบฟิลด์บางฟิลด์ หรือเปลี่ยนชื่อฟิลด์บางฟิลด์

00:06:14.300 --> 00:06:19.332
เมื่อผมทำสิ่งนี้ใน database ผมสามารถรันคำสั่งได้

00:06:19.400 --> 00:06:23.233
และฟิลด์เหล่านี้จะถูกลบออกจาก schema นี้

00:06:23.300 --> 00:06:27.733
และขอบคุณ TypeScript มันสามารถชี้ให้ผมเห็นส่วนของ

00:06:27.800 --> 00:06:33.233
โค้ดที่ใช้ฟิลด์เหล่านี้ มันจะแจ้งเตือน

00:06:33.300 --> 00:06:36.533
ข้อผิดพลาดในการคอมไพล์ TypeScript ดังนั้นจนกว่าคุณจะแก้ไขปัญหาเหล่านั้นทั้งหมด

00:06:36.600 --> 00:06:39.933
คุณจะไม่สามารถคอมไพล์โปรเจกต์ของคุณได้

00:06:40.000 --> 00:06:43.933
และผมเชื่อว่ามันดีมาก เพราะมันช่วยให้คุณพัฒนาอย่างต่อเนื่องได้เร็วขึ้น

00:06:44.000 --> 00:06:47.733
มันช่วยให้คุณมี bugs น้อยลงใน production

00:06:48.400 --> 00:06:56.533
ผมใช้ฟีเจอร์นี้บ่อยมาก หนึ่งในเหตุผลหลักที่ทำให้ผม

00:06:56.600 --> 00:07:02.433
เลือก Supabase แทน Firebase คือ

00:07:02.500 --> 00:07:08.533
ผมสามารถเขียน SQL query ของตัวเองได้ และข้อมูลเชิงสัมพันธ์ของ SQL

00:07:08.600 --> 00:07:13.433
ได้รับการ optimize ให้เหมาะสมกับ query ทั้งหมดแล้ว

00:07:13.500 --> 00:07:16.733
การรวมกันของข้อมูลทั้งหมดที่คุณอาจต้องการใช้

00:07:16.800 --> 00:07:20.233
ข้อมูลถูกจัดเก็บในลักษณะที่คุณสามารถรัน

00:07:20.300 --> 00:07:24.033
analytical query ได้ และมันจะ

00:07:24.100 --> 00:07:27.633
ง่ายมากในการ implement
คุณสามารถไปที่

00:07:27.700 --> 00:07:32.533
dashboard ของ Supabase และเลือก SQL editor

00:07:32.600 --> 00:07:39.533
ตัวอย่างเช่น เขียน SQL query ที่จัดกลุ่ม users ทั้งหมดตามภาษา

00:07:39.600 --> 00:07:42.233
และนี่คือผลลัพธ์

00:07:42.300 --> 00:07:47.533
คุณสามารถเห็นจำนวน users และเปอร์เซ็นต์

00:07:47.600 --> 00:07:52.533
มันเป็นสิ่งที่ PostgreSQL อนุญาตให้ทำ เรียกว่า

00:07:52.600 --> 00:07:55.832
window function และคุณสามารถใช้มันสำหรับ

00:07:55.900 --> 00:07:59.933
analytical query ขั้นสูง มันเป็นสิ่งที่ไม่ค่อยมีให้ใช้

00:08:00.000 --> 00:08:05.033
ใน NoSQL database ยิ่งไปกว่านั้น คุณสามารถใช้

00:08:05.100 --> 00:08:10.233
AI เพื่อสร้าง query ให้คุณ ในกรณีที่คุณคิดว่า ทำไม

00:08:10.300 --> 00:08:13.933
ทำไมผมต้องเสียเวลากับการทำแบบนั้น ให้ AI ทำงานแทน

00:08:14.000 --> 00:08:19.832
ผมจะแสดงวิธีการให้ดู ผมถามว่า แสดงจำนวน

00:08:19.900 --> 00:08:23.933
active users ในเดือนที่แล้ว และผมระบุว่า active คือ

00:08:24.000 --> 00:08:28.133
คนที่ล็อกอินภายในเดือนปัจจุบัน

00:08:28.200 --> 00:08:32.633
AI assistant จะ

00:08:32.700 --> 00:08:38.433
ให้ SQL query ที่ถูกต้องโดยอัตโนมัติ และฟีเจอร์ที่ยอดเยี่ยมสำหรับผมคือ

00:08:38.500 --> 00:08:44.333
Supabase รู้จักโครงสร้างทั้งหมดของคุณ ดังนั้นมันจึงสามารถ

00:08:44.400 --> 00:08:49.133
สร้าง query ที่ถูกต้องตามข้อมูลของคุณ เพราะมันรู้ทุกอย่าง

00:08:49.200 --> 00:08:52.333
เกี่ยวกับ database ของคุณทั้งหมด และคุณอาจสงสัยว่า

00:08:52.400 --> 00:08:57.633
ผมจะใช้งานมันในโค้ดอย่างไร คุณสามารถขอให้มัน

00:08:57.700 --> 00:09:02.333
แปลงเป็น PostgreSQL function ตอนนี้คุณจะเห็นว่าผมใช้

00:09:02.400 --> 00:09:08.533
function เดียวกัน แต่มันถูกห่อด้วย expression ที่แปลงเป็น

00:09:08.600 --> 00:09:13.433
function และ function นั้นเรียกว่า get_active_users_last_month

00:09:13.500 --> 00:09:17.433
มันกำหนด type ทั้งหมดให้โดยอัตโนมัติ

00:09:17.500 --> 00:09:25.633
ดังนั้นมันจึง return integer เป็นผลลัพธ์ และเมื่อมันพร้อมใช้งาน คุณสามารถ

00:09:25.700 --> 00:09:29.933
เรียกมันในโค้ดของคุณได้ คุณเพียงแค่อ้างอิงถึง supabase.rpc

00:09:30.000 --> 00:09:33.433
จากนั้นคุณระบุชื่อของ

00:09:33.500 --> 00:09:37.133
function และอีกครั้ง เพราะ Supabase

00:09:37.200 --> 00:09:43.033
สร้าง type ทั้งหมดให้คุณ ในนี้ไม่ได้มีเพียงตารางเท่านั้น

00:09:43.100 --> 00:09:48.533
แต่มี function ต่างๆ ด้วย ดังนั้น function ทั้งหมด

00:09:48.600 --> 00:09:53.733
signature หรือ return type ที่ถูกต้อง ทุกอย่างจะถูก

00:09:53.800 --> 00:09:57.933
กำหนด type อย่างสมบูรณ์ใน TypeScript และมันดีมากๆ

00:10:01.400 --> 00:10:04.733
ผมยังใช้ Supabase ในการจัดเก็บไฟล์ด้วย

00:10:04.800 --> 00:10:09.933
ตัวอย่างเช่น ถ้าผมตัดสินใจเรียนภาษาไทย นี่คือวิธีที่ผมเรียนภาษาไทย

00:10:10.000 --> 00:10:14.033
ผมสามารถสร้างไฟล์เสียง

00:10:14.100 --> 00:10:19.933
ที่พูดว่า "สวัสดีครับ" เป็นภาษาไทย

00:10:20.000 --> 00:10:26.133
โดยใช้ OpenAI สร้าง หลังจากนั้น ผมสามารถจัดเก็บไว้ใน Supabase ได้

00:10:26.200 --> 00:10:30.533
ผมเพียงแค่ใช้ storage ระบุ bucket ID ซึ่งเป็นเหมือนโฟลเดอร์สำหรับไฟล์

00:10:30.600 --> 00:10:35.633
จากนั้นผมระบุชื่อไฟล์ เนื้อหาของไฟล์ และแค่นั้นก็เพียงพอแล้ว

00:10:35.700 --> 00:10:41.933
จากนั้นคุณจะได้รับ URL ซึ่งคุณสามารถแนบไปกับการ์ดนี้ ซึ่งใน

00:10:42.000 --> 00:10:47.333
กรณีของผม การ์ดคือ "สวัสดีครับ" ผมสามารถแนบเสียงนี้และ

00:10:47.400 --> 00:10:54.633
จัดเก็บไว้ใน Supabase ขั้นตอนสุดท้ายคือวิธี

00:10:54.700 --> 00:10:57.933
ปรับแต่ง database การ optimize database เป็น

00:10:58.000 --> 00:11:02.333
หัวข้อที่กว้าง และผมจะพูดถึงเฉพาะ index

00:11:02.400 --> 00:11:07.433
เพราะมันมีเยอะมาก และเมื่อเราคิดถึงวิธี

00:11:07.500 --> 00:11:11.633
ปรับแต่ง database เราต้อง

00:11:11.700 --> 00:11:16.933
นำรูปแบบพื้นฐานที่เราใช้ในชีวิตจริงมาประยุกต์ใช้ ตัวอย่างเช่น สมมติว่าเรามี

00:11:17.000 --> 00:11:22.933
หนังสือ และเราต้องการหาคำว่า "apple"

00:11:23.000 --> 00:11:25.333
มีคำว่า "apple" อยู่ที่ไหนสักแห่ง

00:11:25.400 --> 00:11:30.233
แต่เรารู้ว่าถ้าหนังสือเล่มนี้เรียงตามตัวอักษรจาก A ถึง Z

00:11:30.300 --> 00:11:33.333
คำว่า "apple" ควรจะอยู่ที่ไหนสักแห่งในตอนต้น

00:11:33.400 --> 00:11:37.333
วิธีนี้คุณสามารถประหยัดเวลาในการค้นหาได้

00:11:37.400 --> 00:11:43.833
นี่คือวิธีการทำงานของ index ต่างๆ ใน database query นี้

00:11:44.400 --> 00:11:48.433
ผมต้องการหาการ์ดทั้งหมดที่สร้างโดย user ที่ระบุ

00:11:48.500 --> 00:11:55.033
ดังนั้น "apple" ที่นี่คือ user ID เราต้องสร้าง index สำหรับ

00:11:55.100 --> 00:12:01.133
ฟิลด์นี้และสำหรับ query นี้ และ Supabase อนุญาตให้เราทำเช่นนั้นได้

00:12:01.200 --> 00:12:07.333
ใน dashboard คุณสามารถไปที่แท็บ indexes

00:12:07.400 --> 00:12:11.733
และจากนั้นคุณระบุตาราง deck และคอลัมน์ที่คุณต้องการ

00:12:11.800 --> 00:12:17.033
ให้ถูก index
คุณอาจสงสัยว่าทำไม

00:12:17.100 --> 00:12:22.033
ทำไม Supabase หรือ PostgreSQL ไม่สามารถสร้าง index ทั้งหมดได้เอง

00:12:22.100 --> 00:12:26.833
ปัญหาคือการสร้าง index มีผลกระทบต่อประสิทธิภาพ

00:12:26.900 --> 00:12:31.533
มันทำให้การอ่านง่ายขึ้น ดังนั้นการอ่านจึงเร็วขึ้น

00:12:31.600 --> 00:12:36.133
แต่เมื่อคุณสร้าง index จำนวนมาก การเขียนจะช้าลง

00:12:36.200 --> 00:12:40.833
เพราะสมมติว่าคุณมีตารางที่มี 10 ฟิลด์ แล้วคุณ insert

00:12:40.900 --> 00:12:45.433
หนึ่ง record ที่มี 10 index และเมื่อคุณสร้าง record นี้

00:12:45.500 --> 00:12:47.633
คุณต้องสร้าง index ดังนั้นมันจึงทำให้การ insert ช้าลง

00:12:47.700 --> 00:12:52.433
ในขณะที่ทำให้การอ่านเร็วขึ้น

00:12:52.500 --> 00:12:55.833
ดังนั้นคุณจึงต้องควบคุมมันเองอย่างเต็มที่

00:13:01.000 --> 00:13:06.033
เพื่อหาว่าฟิลด์ใดต้องการ index

00:13:06.100 --> 00:13:11.933
มี PostgreSQL extension ที่สร้างขึ้นภายใน Supabase และคุณ

00:13:12.000 --> 00:13:17.433
สามารถรัน query ต่างๆ ที่คุณมี ซึ่งซับซ้อนได้เท่าที่คุณต้องการ

00:13:17.500 --> 00:13:22.933
และจากนั้นมันจะแสดงให้คุณเห็นว่าฟิลด์ใดต้องการ index ใน

00:13:23.000 --> 00:13:27.933
query นี้ หรือแทนที่จะใช้ CLI คุณสามารถไปที่

00:13:28.000 --> 00:13:33.533
dashboard ของ indexes และดู query ที่ใช้เวลามากที่สุด

00:13:33.600 --> 00:13:38.333
query ที่พบบ่อยที่สุด และ query ที่มีการดำเนินการช้าที่สุด

00:13:38.400 --> 00:13:43.933
ด้วยวิธีนี้ มันจะให้รายการ index ที่ต้อง

00:13:44.000 --> 00:13:48.533
ถูกสร้างขึ้น ซึ่งภายในใช้เครื่องมือ index advisor

00:13:50.300 --> 00:13:54.933
สรุป เราได้เรียนรู้วิธีสร้าง database structure ผ่าน

00:13:55.000 --> 00:13:59.533
user interface แทน CLI, วิธีสร้างไฟล์ TypeScript โดยอัตโนมัติ

00:13:59.600 --> 00:14:04.033
คุณไม่จำเป็นต้องถ่ายโอนฟิลด์ทั้งหมดจาก

00:14:04.100 --> 00:14:09.233
database ของคุณไปยังโค้ดของคุณด้วยตนเอง วิธีเขียน SQL ของคุณเองสำหรับ query

00:14:09.300 --> 00:14:14.233
และวิธีใช้ AI เพื่อทำแทนคุณ วิธีอัปโหลดไฟล์

00:14:14.300 --> 00:14:17.633
เพราะ Supabase ไม่ใช่แค่ cloud platform แต่เป็น full stack

00:14:17.700 --> 00:14:22.233
platform ที่สามารถแทนที่ทีมนักพัฒนา และสุดท้าย วิธีปรับแต่ง

00:14:22.300 --> 00:14:26.833
database ของคุณเมื่อมันใหญ่ขึ้นเมื่อโปรเจกต์ของคุณเติบโตขึ้น

00:14:28.300 --> 00:14:32.233
ขอบคุณมากที่รับฟังผม

00:14:32.300 --> 00:14:39.433
และในกรณีที่คุณสนใจโปรเจกต์นี้
