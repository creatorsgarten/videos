WEBVTT

00:00:03.584 --> 00:00:04.480
Okay.

00:00:06.272 --> 00:00:06.944
Good evening.

00:00:08.672 --> 00:00:10.752
I hope you can see this.

00:00:11.104 --> 00:00:14.560
Let's start with the question. We're going to talk about pull requests.

00:00:15.424 --> 00:00:18.208
I think you all like pull requests, right?

00:00:18.848 --> 00:00:19.840
Your favorite topic.

00:00:20.352 --> 00:00:22.304
Let's find out a bit.

00:00:22.784 --> 00:00:24.736
How is it going for you and your teams with

00:00:24.768 --> 00:00:26.720
pull requests? I want to find out.

00:00:27.424 --> 00:00:30.944
So there's like a guideline in general how you should do

00:00:31.008 --> 00:00:33.664
pull requests and what is a good statistic.

00:00:34.016 --> 00:00:38.400
And it says review time should be less than one hour.

00:00:39.232 --> 00:00:40.928
Is that the case for you? Anybody?

00:00:41.856 --> 00:00:45.024
You normally take less than one hour to review a pull request?

00:00:46.112 --> 00:00:46.272
Huh.

00:00:47.008 --> 00:00:48.224
You take longer than one hour?

00:00:49.408 --> 00:00:49.440
Look.

00:00:51.328 --> 00:00:51.904
Not sure?

00:00:52.704 --> 00:00:53.184
Okay.

00:00:55.168 --> 00:00:55.840
Um,

00:00:56.768 --> 00:00:59.776
No problem. Then let's try another question.

00:01:00.192 --> 00:01:03.488
How often do you review pull requests? Anybody, every day?

00:01:04.256 --> 00:01:06.816
Any one of you review pull requests every day?

00:01:08.992 --> 00:01:10.784
Okay. Not so many.

00:01:11.520 --> 00:01:11.968
All right.

00:01:12.480 --> 00:01:16.800
I think if you've worked with pull requests before and like a pull request

00:01:17.504 --> 00:01:20.800
method and process, you will often run into issues.

00:01:21.504 --> 00:01:26.688
And as an engineer, normally we want to solve this with tooling. So what we're going to do,

00:01:27.520 --> 00:01:29.216
well, let's fix it, okay?

00:01:29.824 --> 00:01:32.224
So what we're going to do today, in this talk,

00:01:32.608 --> 00:01:37.568
the goal is going to be to understand general pull request problems. That's the first one.

00:01:38.016 --> 00:01:42.080
The second one is going to be we're going to build a GitHub app, okay?

00:01:42.720 --> 00:01:45.728
And the next one is, I want to introduce you to some tools,

00:01:45.792 --> 00:01:47.808
maybe something that would be useful for you.

00:01:48.128 --> 00:01:51.072
We're going to use Trigger.dev, the Node.js SDK.

00:01:51.456 --> 00:01:54.208
And I also want to introduce you to E2B,

00:01:54.656 --> 00:01:57.600
maybe also an interesting tool for you, okay?

00:01:58.304 --> 00:02:00.960
And of course, we're going to use JavaScript. We're in Bangkok

00:02:01.408 --> 00:02:03.936
JS, right? So, we're going to use JavaScript.

00:02:04.800 --> 00:02:06.432
So, let's get started. My talk,

00:02:06.592 --> 00:02:10.624
"Making Pull Requests Great Again" using background jobs with Trigger.dev

00:02:11.200 --> 00:02:13.440
and E2B, okay? That's the goal.

00:02:14.048 --> 00:02:16.640
And quick introduction, my name is Tobias.

00:02:17.280 --> 00:02:18.624
I'm co-founder at Hubql.

00:02:19.232 --> 00:02:21.568
And we experiment with dev tooling,

00:02:22.144 --> 00:02:23.744
we do documentation tooling,

00:02:24.448 --> 00:02:26.912
and, yeah, I like memes, so I'm going to have a lot of memes.

00:02:27.808 --> 00:02:29.728
And, yeah, I like computers

00:02:30.240 --> 00:02:33.376
for a long time. That time I still had hair.

00:02:35.104 --> 00:02:36.480
So let's start with theory.

00:02:37.024 --> 00:02:39.456
Talk a bit about pull requests in general.

00:02:40.000 --> 00:02:43.488
There's a guideline for how big a pull request should be.

00:02:43.904 --> 00:02:45.536
Probably, you've seen pull requests that are

00:02:45.952 --> 00:02:48.320
like very small, one-line change.

00:02:48.800 --> 00:02:51.200
Sometimes you get a pull request that is very large.

00:02:52.448 --> 00:02:55.328
And normally, it will lead to problems

00:02:55.392 --> 00:02:58.656
if the pull request is too small or too big, or if they take too long,

00:02:59.072 --> 00:03:04.896
or they're unnecessary if you have a lot of CI jobs running, for example. So it should be somewhere in the middle.

00:03:06.176 --> 00:03:07.488
That is the theory.

00:03:08.768 --> 00:03:11.904
And also, pull request delays slow down teams.

00:03:11.968 --> 00:03:14.144
Sometimes you are waiting for tests. We just saw it

00:03:14.560 --> 00:03:18.016
with automation tests, right? They can take quite a long time to run.

00:03:18.624 --> 00:03:21.504
And so if you open a lot of pull requests, it may also lead to

00:03:21.632 --> 00:03:24.448
problems, waiting time, slow you down as a team.

00:03:26.112 --> 00:03:30.592
But let's look at the reality. Okay, let's forget about the theory. Let's look at some

00:03:31.616 --> 00:03:34.240
actual problems with pull requests.

00:03:34.880 --> 00:03:36.608
Okay, maybe you're a junior engineer.

00:03:37.568 --> 00:03:39.712
You might be scared of the review

00:03:40.064 --> 00:03:41.760
of a senior engineer, right?

00:03:41.888 --> 00:03:44.448
What the feedback might be for your pull request.

00:03:45.312 --> 00:03:46.752
So that's daunting.

00:03:48.576 --> 00:03:52.192
Another one as well, you might be scared if somebody finds a bug, right?

00:03:52.672 --> 00:03:55.232
That's scary, too. We don't want that to happen.

00:03:56.864 --> 00:04:01.088
And of course, general line, 10 lines of code.

00:04:01.312 --> 00:04:03.872
You will get 10 issues as feedback.

00:04:05.408 --> 00:04:06.816
But a big pull request

00:04:07.392 --> 00:04:09.120
looks fine to me, right?

00:04:09.952 --> 00:04:11.904
Nobody is going to review all this.

00:04:12.064 --> 00:04:15.808
So that's the reality with pull requests, and the best one,

00:04:16.608 --> 00:04:18.880
you open a pull request and you approve.

00:04:19.040 --> 00:04:22.624
Right? You approve yourself.

00:04:24.448 --> 00:04:25.632
That's the best one.

00:04:26.560 --> 00:04:30.752
Okay. So, since we like this one, it looks good to me,

00:04:30.944 --> 00:04:32.800
let's build an agent.

00:04:32.960 --> 00:04:35.104
Not exactly an agent, but we're going to try.

00:04:35.744 --> 00:04:36.640
Let's build one.

00:04:37.632 --> 00:04:41.248
So who has built a GitHub app before? Any one of you?

00:04:42.560 --> 00:04:43.328
Have you built one?

00:04:44.192 --> 00:04:46.752
No. Okay, cool. Let's build one.

00:04:47.840 --> 00:04:53.152
So, when you do a GitHub app, first thing you're going to notice, you have to use the GitHub API,

00:04:54.048 --> 00:04:56.032
and you're going to have a problem with rate limiting.

00:04:56.320 --> 00:04:58.816
The GitHub API is normally quite limited to

00:04:59.200 --> 00:05:01.024
a certain number of requests you can do.

00:05:01.568 --> 00:05:04.384
So that's a problem you're going to run into.

00:05:04.896 --> 00:05:07.360
And you have to handle webhooks.

00:05:08.064 --> 00:05:11.456
Webhooks are also something that may be annoying for you.

00:05:11.744 --> 00:05:13.760
If you've worked with webhooks before, you will know

00:05:14.496 --> 00:05:15.776
you're running into issues.

00:05:16.448 --> 00:05:18.720
Something that's maybe a bit more challenging than

00:05:18.784 --> 00:05:20.800
other kinds of implementation. So what we're going to do

00:05:21.504 --> 00:05:23.296
This is going to be our GitHub app.

00:05:24.640 --> 00:05:25.792
Okay, first one.

00:05:26.368 --> 00:05:29.152
If you have a GitHub app, you have to subscribe to an event.

00:05:29.280 --> 00:05:33.792
So you receive a GitHub event, and in this case, it's going to be when the pull request is opened.

00:05:34.720 --> 00:05:37.856
Of course, same as the previous talk, we like Elysia.

00:05:37.920 --> 00:05:40.864
Right, so we're going to use Elysia as our API handler.

00:05:41.696 --> 00:05:45.184
And then we're going to use Trigger.dev. Trigger.dev is going to handle

00:05:45.632 --> 00:05:49.344
the background job, something that runs after we receive the webhook.

00:05:49.760 --> 00:05:53.344
And then we can forward this to run an agent, agent-based,

00:05:54.016 --> 00:05:56.512
on the changes that we have and perform some changes.

00:05:57.024 --> 00:05:59.616
I'm going to run this in E2B, a sandbox,

00:05:59.712 --> 00:06:01.920
so like a small server that runs for you.

00:06:03.072 --> 00:06:04.896
And then we send the data back to GitHub.

00:06:06.368 --> 00:06:07.168
Okay, first one.

00:06:08.384 --> 00:06:12.608
If you look at GitHub, if you build an app, you can subscribe to events.

00:06:13.088 --> 00:06:15.936
One of the events is called pull_request.opened.

00:06:16.576 --> 00:06:22.112
So whenever somebody opens a pull request and you have the app installed, you're going to receive the event.

00:06:23.072 --> 00:06:26.144
You can also subscribe with the GitHub action, for example.

00:06:27.584 --> 00:06:28.320
Now, next step.

00:06:30.048 --> 00:06:32.320
We're going to use Elysia to receive the webhook.

00:06:32.448 --> 00:06:35.136
Okay? This is going to be a POST endpoint.

00:06:36.000 --> 00:06:37.600
We're going to validate the webhook,

00:06:38.080 --> 00:06:40.640
and trigger a task to trigger.dev.

00:06:41.984 --> 00:06:43.488
How does that look?

00:06:44.416 --> 00:06:46.432
I hope you can see this.

00:06:47.008 --> 00:06:47.488
So,

00:06:48.160 --> 00:06:50.848
basic Elysia app, a POST endpoint.

00:06:51.232 --> 00:06:54.752
And then what we can do, I skipped the part of validating

00:06:54.752 --> 00:06:58.176
the webhook, okay? You should verify normally if you receive the webhook.

00:06:58.720 --> 00:07:01.280
And then we do a switch and we check

00:07:01.696 --> 00:07:05.888
what kind of event is it? In our case, we look at opened and also reopened.

00:07:06.784 --> 00:07:07.904
And then as a next step,

00:07:08.416 --> 00:07:10.368
we are going to use task

00:07:10.624 --> 00:07:15.328
trigger. Task trigger is basically we're going to invoke a background job

00:07:15.936 --> 00:07:18.336
using the trigger.dev SDK.

00:07:19.072 --> 00:07:22.080
I have a repository and you can take a look later. So,

00:07:22.400 --> 00:07:25.088
I'll just go over the concepts a little bit for you.

00:07:26.272 --> 00:07:28.640
Next one, trigger.dev. What are we going to do?

00:07:29.952 --> 00:07:31.968
Okay. Why do we use trigger.dev?

00:07:32.416 --> 00:07:34.112
Well, they have open source

00:07:34.144 --> 00:07:37.344
JavaScript SDK. They're open source, you can self-host.

00:07:37.760 --> 00:07:42.112
So I like that. Let's use trigger.dev, but you can use something else as well.

00:07:43.232 --> 00:07:45.152
They claim themselves as a

00:07:45.344 --> 00:07:47.808
open source background jobs platform.

00:07:48.128 --> 00:07:50.368
So what they offer is different things.

00:07:50.816 --> 00:07:53.792
workflows, agents that you can run.

00:07:54.240 --> 00:07:55.936
You can control concurrency,

00:07:56.544 --> 00:07:58.688
you can do queues, retries,

00:07:58.912 --> 00:08:01.184
all the things that you normally need if you have a

00:08:01.600 --> 00:08:03.872
system that needs to be a bit more reliable.

00:08:06.208 --> 00:08:11.520
Okay, how does that look? You can define all the task and background jobs in code.

00:08:11.936 --> 00:08:12.416
Okay.

00:08:13.056 --> 00:08:14.624
So let's say you receive an event,

00:08:15.136 --> 00:08:19.808
you're going to invoke a certain task. You can do this by ID, and then you forward

00:08:20.032 --> 00:08:21.632
the payload of a webhook.

00:08:22.592 --> 00:08:23.968
Okay, that's an example here.

00:08:25.376 --> 00:08:29.536
And now what do we have to do? Well, we need a little bit of business logic,

00:08:29.664 --> 00:08:32.607
right? Now that we have the event that we have received,

00:08:32.895 --> 00:08:35.936
what is the next step? We have to do four steps. Okay?

00:08:36.576 --> 00:08:39.582
We will go through each one of them, one by one.

00:08:40.928 --> 00:08:42.207
So, first one.

00:08:43.232 --> 00:08:48.096
Getting the data from GitHub, okay? Imagine you receive a webhook as an event.

00:08:48.480 --> 00:08:51.232
What do you want to do if you have a GitHub app?

00:08:51.456 --> 00:08:53.920
Normally, somebody installed this, right?

00:08:54.560 --> 00:08:59.072
And then you get an installation ID. Installation ID

00:08:59.584 --> 00:09:03.072
You can assign a token and use this

00:09:03.456 --> 00:09:05.600
as acting as the GitHub app.

00:09:05.824 --> 00:09:09.856
Okay. That's the authentication and authorization part that you can do.

00:09:10.880 --> 00:09:12.576
And once you have this, you can use

00:09:12.608 --> 00:09:17.824
Octokit. Okay? Octokit is an SDK that you can use, Node.js

00:09:18.368 --> 00:09:21.952
based, and you can interact with the GitHub API.

00:09:23.264 --> 00:09:25.408
Okay, we are going to use Octokit.

00:09:26.400 --> 00:09:28.512
And the next step is going to be

00:09:28.704 --> 00:09:31.488
agents. Okay, what are we going to do with agents?

00:09:32.096 --> 00:09:34.624
Let me introduce you to E2B.

00:09:34.880 --> 00:09:39.424
First of all, E2B, their goal is to produce sandboxes where you can run

00:09:39.968 --> 00:09:44.480
agent-generated code, okay? Or AI-generated code.

00:09:45.088 --> 00:09:47.104
This can be unsafe to do.

00:09:47.232 --> 00:09:49.504
Right? So you might want to have a sandbox, something

00:09:49.856 --> 00:09:52.640
standalone, that's not running in your infrastructure,

00:09:52.896 --> 00:09:54.560
but maybe in another place.

00:09:54.976 --> 00:09:57.376
has a sandbox, so you can use E2B.

00:09:57.568 --> 00:09:59.104
and they also have an SDK

00:09:59.328 --> 00:10:01.440
for Node.js, so we're going to use that.

00:10:02.464 --> 00:10:03.776
Then you can use it.

00:10:04.320 --> 00:10:05.824
This might be a little too small.

00:10:06.624 --> 00:10:09.472
But what you can do is sandbox.create

00:10:10.176 --> 00:10:12.352
and then you can interact with the sandbox

00:10:12.672 --> 00:10:14.688
sending shell commands, for example.

00:10:15.136 --> 00:10:16.800
So what you can do is

00:10:17.056 --> 00:10:18.624
any command that you can think of,

00:10:19.104 --> 00:10:23.488
if you run like an Ubuntu machine, for example, right? So you can send commands,

00:10:23.968 --> 00:10:26.240
but you can also produce

00:10:26.752 --> 00:10:30.080
new files, you can use files, you can generate code in there

00:10:30.432 --> 00:10:32.192
and then get it back. So it's

00:10:32.416 --> 00:10:36.000
like a sandbox environment where you can do testing

00:10:36.768 --> 00:10:39.200
or other things that you want to do in this sandbox.

00:10:41.600 --> 00:10:42.016
Okay.

00:10:43.072 --> 00:10:48.512
How to spin it up? Well, it's more or less two lines. Sandbox.create

00:10:48.864 --> 00:10:49.728
and then you can say

00:10:50.272 --> 00:10:51.872
shell.commands.run

00:10:52.128 --> 00:10:54.048
and then you can pass in the command.

00:10:54.496 --> 00:10:57.600
In our case, since we want to interact with GitHub,

00:10:58.304 --> 00:11:00.192
we're going to use Git commands, right?

00:11:01.056 --> 00:11:04.128
So what you do is Git config, Git clone

00:11:04.640 --> 00:11:09.408
and then you can run it. So maybe have something like pnpm dev, for example.

00:11:09.696 --> 00:11:13.280
You can run it and then interact with this sandbox to make changes to

00:11:13.984 --> 00:11:15.296
your cloned repository.

00:11:16.512 --> 00:11:18.688
And of course, you can use anything else to do this,

00:11:18.720 --> 00:11:21.056
but this is like a short-lived sandbox, might

00:11:21.088 --> 00:11:23.808
be useful if you just want to do some small changes.

00:11:26.080 --> 00:11:29.472
Now, running agents, normally this is like a combination,

00:11:29.568 --> 00:11:33.312
right? You have to do some instructions. So if you've worked with AI before,

00:11:33.984 --> 00:11:36.544
you have a prompt. This is one example.

00:11:37.696 --> 00:11:40.544
I used the example from, it's called Maige.

00:11:41.376 --> 00:11:42.336
Maige is

00:11:43.040 --> 00:11:45.728
I would say a copy of Devin, maybe.

00:11:46.176 --> 00:11:48.000
So it's something that you can use to

00:11:48.768 --> 00:11:51.456
automate some of your coding tasks. It's an

00:11:51.552 --> 00:11:54.560
engineer agent. It works as a software engineer,

00:11:55.264 --> 00:11:56.960
and it can do things for you.

00:11:57.248 --> 00:11:58.816
It can do things like testing,

00:11:59.360 --> 00:12:02.112
it can do things like doing code changes,

00:12:02.592 --> 00:12:07.808
generate documentation. So some lower-level tasks where you can use AI to generate this.

00:12:08.320 --> 00:12:08.352
The

00:12:11.328 --> 00:12:12.064
Okay, last step.

00:12:13.568 --> 00:12:13.888
Cool.

00:12:14.560 --> 00:12:17.568
Now that we have feedback from our agent,

00:12:18.240 --> 00:12:20.800
the last step is to send it back to GitHub.

00:12:21.184 --> 00:12:23.136
This is one example: create a comment.

00:12:23.232 --> 00:12:25.248
Right, your GitHub app can make a comment.

00:12:25.408 --> 00:12:28.960
But of course, it can do anything else. So if you have access to the source code,

00:12:29.408 --> 00:12:31.264
you could make changes to the source code.

00:12:31.392 --> 00:12:32.896
So what you could do is

00:12:33.344 --> 00:12:37.344
change some of the files and make a new pull request, or make a new commit,

00:12:38.176 --> 00:12:40.288
or act for you on your behalf,

00:12:40.512 --> 00:12:42.304
like fixing a bug if somebody,

00:12:42.496 --> 00:12:44.288
some of your colleagues, for example,

00:12:44.672 --> 00:12:46.848
has feedback that something has to be changed.

00:12:47.264 --> 00:12:51.616
It can be automated in this way, and they can act on your behalf.

00:12:54.368 --> 00:12:54.816
Okay.

00:12:55.584 --> 00:12:58.080
And this is the result. Looks good to me.

00:12:58.944 --> 00:13:01.504
And it's working. You can try it.

00:13:01.504 --> 00:13:05.184
If you want, it's open source. You can clone it and

00:13:05.440 --> 00:13:07.648
use it for yourself and extend it.

00:13:08.544 --> 00:13:13.760
And yeah, it would look like this, right? If you ever had a GitHub app installed,

00:13:13.984 --> 00:13:17.600
what they're going to do is create a comment on behalf of the GitHub app.

00:13:20.352 --> 00:13:21.600
Now,

00:13:22.112 --> 00:13:24.608
I want to give you some alternative solutions because

00:13:24.960 --> 00:13:26.496
this is just one example.

00:13:26.944 --> 00:13:29.216
trigger.dev to understand maybe what it does.

00:13:29.536 --> 00:13:31.168
It's similar to Ingest,

00:13:31.520 --> 00:13:36.160
maybe Temporal, if you used that before. You can use Supabase,

00:13:36.672 --> 00:13:41.440
AWS EventBridge, or you can use GitHub Actions, right? If you just want to run

00:13:42.016 --> 00:13:43.648
something on behalf

00:13:44.256 --> 00:13:47.008
of your code changes when you do a pull request.

00:13:47.584 --> 00:13:51.808
And the second one, E2B, you can use GitHub actions, for example, as well.

00:13:52.160 --> 00:13:56.352
You can, you know, just run shell commands if you want inside GitHub actions.

00:13:56.800 --> 00:14:00.384
You can use EC2 or Jenkins. Why do we use E2B?

00:14:00.928 --> 00:14:05.472
Because they abstract away a lot of the handling of the machines and it's short-lived

00:14:05.632 --> 00:14:08.096
and it's like standalone, so it doesn't run into

00:14:08.736 --> 00:14:11.424
other issues that you may have during this approach.

00:14:13.920 --> 00:14:18.848
Future work. Okay. Now, this is just a concept, right, just to give you some ideas today.

00:14:19.488 --> 00:14:23.296
I think what was missing is looking into concurrency,

00:14:23.616 --> 00:14:26.016
looking into retries is something that you have to consider when you work with webhooks.

00:14:26.720 --> 00:14:29.952
Maybe also

00:14:30.016 --> 00:14:32.000
order of execution, right? You might have

00:14:32.032 --> 00:14:33.760
two events almost at the same time,

00:14:34.208 --> 00:14:36.768
but you don't handle them within the right order.

00:14:37.728 --> 00:14:41.152
And this is also something you can control with a system like trigger.dev.

00:14:42.208 --> 00:14:46.432
And, of course, looks good to me, maybe not enough. So, let's

00:14:46.976 --> 00:14:48.896
imagine something that might be more useful.

00:14:49.248 --> 00:14:54.528
Handling a pull request, right? You can think of ideas how you can make in your team

00:14:55.328 --> 00:14:57.408
make a small GitHub app that helps you

00:14:57.632 --> 00:14:59.264
to have something useful out of this.

00:15:00.032 --> 00:15:03.808
But in general, I want you to maybe think about how to make PRs better.

00:15:04.608 --> 00:15:06.624
Yeah, how can you maybe leverage AI

00:15:07.296 --> 00:15:10.496
within your team to reduce some of the work that is annoying for you

00:15:10.816 --> 00:15:13.408
and focus on things that are maybe more fun for you.

00:15:14.112 --> 00:15:14.816
So use that.

00:15:17.248 --> 00:15:18.656
Okay.

00:15:20.032 --> 00:15:24.800
Maybe you want to build something on top of this. I already gave you the framework as a whole.

00:15:25.344 --> 00:15:27.040
So feel free to

00:15:27.168 --> 00:15:29.856
scan this. Again, this is not a payment

00:15:30.304 --> 00:15:33.152
code, this goes to the repository.

00:15:33.888 --> 00:15:36.064
I'll share the link later as well.

00:15:37.120 --> 00:15:41.504
And also, if you do one of those, we might have a job for you at Hubql.

00:15:41.536 --> 00:15:43.776
So that might be some motivation for you

00:15:43.936 --> 00:15:46.400
to do it. So take a look at the repository.

00:15:47.680 --> 00:15:50.560
And if any of you are using Cursor

00:15:50.688 --> 00:15:53.312
as an IDE, please talk to me

00:15:53.536 --> 00:15:56.096
afterwards. It'll be great to have a discussion.

00:15:57.216 --> 00:15:59.712
And yeah, any questions?

00:16:02.752 --> 00:16:05.216
Please go ahead if you have a question.

00:16:13.792 --> 00:16:15.424
I think we still have time.

00:16:19.840 --> 00:16:24.096
Otherwise, in the meantime, I can go around a bit. You can go at this repository.

00:16:24.960 --> 00:16:27.008
Yeah, you can show around a bit more.

00:16:27.648 --> 00:16:31.200
Yeah, it's actually quite simple.

00:16:31.520 --> 00:16:34.784
There are only two files, one of which we saw before.

00:16:36.064 --> 00:16:39.968
One of them is the Elysia app. So this is receiving our webhook.

00:16:41.120 --> 00:16:44.416
And then what we do is task trigger. So task trigger

00:16:45.024 --> 00:16:45.824
is the

00:16:46.656 --> 00:16:47.616
trigger.dev.

00:16:48.800 --> 00:16:51.264
Let me make this even bigger, maybe.

00:16:52.576 --> 00:16:57.280
So task trigger is going to our task, pull request opened.

00:16:58.656 --> 00:17:02.944
And then once we go back, actually can just open this.

00:17:04.096 --> 00:17:06.688
Okay. And this is our task.

00:17:08.544 --> 00:17:12.096
In our task, we can define some configuration.

00:17:12.256 --> 00:17:15.166
So how long we're going to run, timeout, retries.

00:17:16.096 --> 00:17:21.406
And then this is what we saw, we can get the installation ID, so we know who is running this GitHub app.

00:17:22.688 --> 00:17:27.776
And then what we can do is interact with the GitHub API using Octokit.

00:17:28.096 --> 00:17:33.248
In Octokit, you can do anything with the GitHub API, creating comments, opening issues,

00:17:33.696 --> 00:17:36.992
in this case, we just send 'looks good to me' as a comment.

00:17:38.432 --> 00:17:42.176
But you can think of anything else. And I prepared for you, if you want to go further,

00:17:42.976 --> 00:17:44.768
I made an example how to run

00:17:45.312 --> 00:17:49.568
an agent, okay? On behalf of this. What you would have to do

00:17:50.048 --> 00:17:54.208
is to, well, get the changes or just clone it.

00:17:54.752 --> 00:17:56.032
Clone the repository

00:17:57.376 --> 00:17:59.488
and then, well, you have to do some setup

00:17:59.616 --> 00:18:02.560
in terms of, like, the tools that you want to use for your agent.

00:18:03.968 --> 00:18:07.456
And as a next step, you can then use the E2B

00:18:08.384 --> 00:18:11.264
to run your commands and interact with the sandbox.

00:18:12.224 --> 00:18:15.488
And, yeah, you might get feedback, right, from AI.

00:18:15.872 --> 00:18:19.744
AI feedback, you can forward it back to the pull request result.

00:18:20.096 --> 00:18:21.824
Can work on behalf of you.

00:18:21.888 --> 00:18:23.744
If you want to make your life easier.

00:18:24.672 --> 00:18:27.328
Yeah, this is just a starting point for you.

00:18:27.776 --> 00:18:29.440
I don't know. Any questions?

00:18:30.944 --> 00:18:31.168
Ah.

00:18:34.144 --> 00:18:36.480
Then I think that's it. Thank you very much.

00:18:37.632 --> 00:18:38.144
See you.
