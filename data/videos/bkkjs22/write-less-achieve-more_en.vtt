WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:02.784 --> 00:00:03.872
Hello, everyone.

00:00:04.416 --> 00:00:05.024
Uh,

00:00:05.600 --> 00:00:10.784
Yeah, this is my very first time here as a speaker, uh, in the, uh,

00:00:11.392 --> 00:00:12.512
Oops, in the,

00:00:14.016 --> 00:00:17.728
uh, like event, like this, as well, uh,

00:00:18.720 --> 00:00:21.856
Yeah, it sounds like something is wrong with my presentation.

00:00:22.080 --> 00:00:24.800
So, uh, we're gonna have, uh, on this session,

00:00:24.896 --> 00:00:27.168
right? So, like of course, we,

00:00:27.296 --> 00:00:30.784
uh, I begin the topic with, uh, without the test name,

00:00:30.816 --> 00:00:35.584
the same way we write the romantic names. So, uh, I mean, we write the romantic song,

00:00:35.712 --> 00:00:38.080
right? So, uh, the,

00:00:38.976 --> 00:00:39.680
uh,

00:00:40.768 --> 00:00:43.232
topic is about how we write

00:00:43.904 --> 00:00:45.216
the end-to-end test,

00:00:45.888 --> 00:00:47.424
but not about writing it.

00:00:47.904 --> 00:00:50.848
How we make sure that whatever end-to-end test,

00:00:51.488 --> 00:00:53.088
uh, that we are going to run

00:00:53.152 --> 00:00:54.944
is gonna be, uh,

00:00:55.136 --> 00:00:56.992
super stable and fast,

00:00:57.152 --> 00:01:00.480
right? So, uh, anyone here, uh, like,

00:01:00.800 --> 00:01:03.168
uh, there's someone with the, like,

00:01:03.328 --> 00:01:07.392
uh, that works with the role of the, uh, like,

00:01:08.896 --> 00:01:12.864
Software Automation Engineer, right? The Test Automation Engineer?

00:01:14.592 --> 00:01:15.456
Anybody here?

00:01:22.336 --> 00:01:23.968
Cool. It sounds like, hm,

00:01:26.592 --> 00:01:28.704
You never test it?

00:01:29.920 --> 00:01:35.232
Oh, yeah. Uh, that that is that is a good thing, but how how do you know that your software works?

00:01:38.816 --> 00:01:40.256
But you you didn't test it.

00:01:42.400 --> 00:01:46.560
Keep up to update. It's not bad. Oh, okay.

00:01:48.096 --> 00:01:52.640
Okay. That sounds like good idea to

00:01:52.640 --> 00:01:55.232
build the software as well, right? So,

00:01:55.712 --> 00:01:57.280
Obviously, uh, yeah.

00:01:57.536 --> 00:02:02.464
Uh, like, the same motto can also do, uh, with the

00:02:02.848 --> 00:02:06.496
elevator. So today, if we don't test the elevator, what happened?

00:02:07.936 --> 00:02:11.008
Would like to jump into the elevator that

00:02:11.392 --> 00:02:13.536
does not get uh, properly test

00:02:14.336 --> 00:02:16.576
and risk your life as a testing material?

00:02:20.608 --> 00:02:23.392
Sounds interesting. So, yeah, opt me out.

00:02:23.392 --> 00:02:28.128
I probably don't want. So, uh, testing the software is a matter of, uh,

00:02:28.352 --> 00:02:32.320
take a care and make the software reliable for the, uh, user

00:02:32.480 --> 00:02:37.664
like, despite they are customer or non-customer, right? So we being responsible for what

00:02:37.792 --> 00:02:42.112
we deliver to them, right? So wrong software

00:02:42.336 --> 00:02:47.104
rule or automation. Uh uh or I mean wrong software, rule or functional

00:02:48.128 --> 00:02:48.704
can

00:02:49.280 --> 00:02:50.912
cost the business loss.

00:02:51.392 --> 00:02:53.792
and uh it can also

00:02:54.752 --> 00:03:00.192
go back as a punishment on our backlog, on your backlog, on my backlog, as

00:03:00.288 --> 00:03:04.480
back to fix. So we we begin uh like

00:03:05.024 --> 00:03:08.096
our unending journey of uh

00:03:10.112 --> 00:03:10.912
fixing the bugs.

00:03:12.224 --> 00:03:16.544
But I do understand one thing that uh software testing is costly.

00:03:17.472 --> 00:03:20.320
Really costly. It's uh it's it's not easy

00:03:20.448 --> 00:03:23.232
uh start to be conduct with, right?

00:03:23.328 --> 00:03:26.400
So we have the easy way that we try to

00:03:26.496 --> 00:03:28.608
do and everyone uh prob

00:03:28.672 --> 00:03:32.032
probably familiar with it, which is the uh unit testing, right?

00:03:32.416 --> 00:03:37.152
Right. The uh the real problem with the unit testing is it actually tests

00:03:37.920 --> 00:03:38.592
one thing

00:03:39.264 --> 00:03:41.856
in too much isolation, but

00:03:42.368 --> 00:03:43.296
the software itself

00:03:44.192 --> 00:03:45.536
does not work in isolate.

00:03:46.656 --> 00:03:46.816
Right.

00:03:47.456 --> 00:03:50.528
We can test how our uh

00:03:50.688 --> 00:03:52.192
JSON stringify works.

00:03:53.152 --> 00:03:55.936
But uh we never test whatever

00:03:56.256 --> 00:04:01.024
real uh credit uh credit card transaction uh like

00:04:02.048 --> 00:04:03.968
that got performed on our system.

00:04:04.064 --> 00:04:09.472
That can be the case, as well, right? So, we don't want, we don't want to deliver the software that

00:04:09.504 --> 00:04:13.632
Uh, we'll end up as creating the damage to the user or to the

00:04:13.728 --> 00:04:16.128
uh, to ourselves in the long run.

00:04:17.216 --> 00:04:17.440
So,

00:04:18.016 --> 00:04:19.968
Uh, but how can we write

00:04:20.959 --> 00:04:23.584
the test, uh, effectively, right?

00:04:23.872 --> 00:04:27.296
So, uh, yeah, so, I, I

00:04:27.712 --> 00:04:31.776
begin the session, right? This session is about conducting the test here. So, a lot of

00:04:31.936 --> 00:04:37.120
uh, text here, uh, you can capture and read it later. I already mentioned, right?

00:04:37.344 --> 00:04:42.048
So, uh, today we, uh, like, what I am going to show you

00:04:43.136 --> 00:04:46.368
is, uh, the ability to run

00:04:47.040 --> 00:04:49.280
whatever end-to-end test,

00:04:50.304 --> 00:04:51.040
uh,

00:04:51.552 --> 00:04:54.944
with one minute per test case, within one minute.

00:04:55.680 --> 00:04:59.712
And end-to-end means, uh, if you're working with the, uh, website application,

00:04:59.968 --> 00:05:03.296
you start your website, you start your BFF, and you

00:05:03.392 --> 00:05:08.608
configure, uh, everything and run your UI test, right? The full UI test, right?

00:05:09.248 --> 00:05:09.952
And also,

00:05:10.464 --> 00:05:13.440
in the matter of, uh,

00:05:13.984 --> 00:05:16.320
really, really high reliability.

00:05:16.608 --> 00:05:21.792
So it means that when your test fails, most of the time, it's because of your functional, not the system or environment overall, right?

00:05:25.984 --> 00:05:28.320
Right. When we, and then

00:05:29.760 --> 00:05:32.320
it can also make it parallel. So

00:05:32.576 --> 00:05:34.144
I'm not sure I can share, but

00:05:34.304 --> 00:05:37.664
today, at the team I work with,

00:05:37.792 --> 00:05:41.792
we run these kind of tests, like I think, more than 100.

00:05:41.824 --> 00:05:43.968
I don't, I don't remember the number,

00:05:44.000 --> 00:05:46.912
and the pipeline that we write it and run these tests,

00:05:47.424 --> 00:05:49.056
it's done within 15 minutes

00:05:50.688 --> 00:05:53.920
with 90% plus stability.

00:05:54.112 --> 00:05:55.840
This is the number that I know, right?

00:05:56.800 --> 00:05:56.992
Right.

00:05:57.536 --> 00:06:00.448
So, and the second thing, second thing is

00:06:00.736 --> 00:06:04.192
second bullet is something that I think everyone

00:06:04.672 --> 00:06:07.936
is familiar with it, right? When you work with the system, right?

00:06:08.032 --> 00:06:12.800
you develop the set of knowledge on how your business

00:06:13.024 --> 00:06:16.320
works, right? Or how your system performs with the business, on how

00:06:16.640 --> 00:06:20.640
the, like, the system dynamic,

00:06:20.992 --> 00:06:22.880
mean how system, like,

00:06:24.256 --> 00:06:26.528
group to each other and

00:06:26.848 --> 00:06:29.216
Uh, they will deliver the result, right? So

00:06:29.760 --> 00:06:32.192
Uh, the problem about this thing is

00:06:32.448 --> 00:06:36.000
if you don't have the proper way to record the functionality

00:06:36.192 --> 00:06:39.200
as well as the, uh, validating your

00:06:39.456 --> 00:06:42.400
uh, some, uh, functional

00:06:43.520 --> 00:06:43.936
you

00:06:44.896 --> 00:06:47.008
you become a bottleneck.

00:06:48.096 --> 00:06:49.312
What does it mean by bottleneck?

00:06:50.080 --> 00:06:52.672
Think about the situation that everyone have to run to you

00:06:53.120 --> 00:06:55.840
uh, asking you, uh, how these things work,

00:06:56.768 --> 00:06:59.200
how this feature work, how the login, uh, work,

00:06:59.712 --> 00:07:00.640
how the inventory

00:07:01.088 --> 00:07:05.888
works, right? How this particular set of the function works.

00:07:06.624 --> 00:07:09.280
And they need to rely on you, like, and you cannot

00:07:09.792 --> 00:07:13.536
uh, do anything else because this question will go to you every time, right?

00:07:14.048 --> 00:07:14.336
And

00:07:14.944 --> 00:07:16.256
at some worst case,

00:07:17.088 --> 00:07:22.112
when you leave or or the person who build, uh, who work on this particular function

00:07:22.112 --> 00:07:23.648
left the company or left the team,

00:07:24.416 --> 00:07:26.528
like this code become something we call

00:07:27.296 --> 00:07:28.000
legacy

00:07:29.408 --> 00:07:31.488
because we don't know what it, uh, what it is.

00:07:31.712 --> 00:07:35.584
We just know that we don't, uh, if we don't touch it, everything works.

00:07:35.808 --> 00:07:38.464
And if we touch it, yeah, something funny happened.

00:07:38.752 --> 00:07:41.664
Like, don't touch it on Friday, uh, evening.

00:07:42.112 --> 00:07:44.832
Everything is okay. So, uh

00:07:45.440 --> 00:07:47.296
So, but how how can we

00:07:48.000 --> 00:07:51.040
get out of this situation? How can we document

00:07:51.392 --> 00:07:53.024
the business rule, the

00:07:53.120 --> 00:07:54.656
uh, the software

00:07:55.136 --> 00:07:57.120
functionality rule

00:07:58.240 --> 00:08:00.928
and use it as our testing

00:08:01.888 --> 00:08:03.008
way?

00:08:05.216 --> 00:08:05.472
It

00:08:06.624 --> 00:08:07.936
have a less

00:08:09.120 --> 00:08:09.600
coupling

00:08:10.368 --> 00:08:11.776
to uh, the system.

00:08:12.704 --> 00:08:12.896
Right.

00:08:13.696 --> 00:08:17.760
Coupling means, uh, think about unit test, right? When you refactor

00:08:18.272 --> 00:08:20.192
all your unit tests, probably

00:08:20.672 --> 00:08:23.456
can compile. And you need to change all your unit tests

00:08:23.648 --> 00:08:27.744
to uh, conform with whatever you refactor, and you start to wondering

00:08:27.840 --> 00:08:30.176
whether you fix the test correctly or not.

00:08:30.848 --> 00:08:34.207
This is where, this is where, uh, the unit test

00:08:34.400 --> 00:08:37.120
uh, introduce a coupling to the system.

00:08:37.183 --> 00:08:41.024
So, uh, how can we make a test to be more like black box,

00:08:41.312 --> 00:08:44.768
that have less coupling? Of course we have, uh, we still have

00:08:44.928 --> 00:08:48.160
need to have some coupling like uh, the same tech stack,

00:08:48.416 --> 00:08:50.656
uh, some kind of same platform, but

00:08:51.520 --> 00:08:56.672
at least we want to have a test that uh, we, number one, we understand, and everyone who read this

00:08:57.056 --> 00:08:57.728
understand.

00:08:58.592 --> 00:08:59.360
and it

00:09:00.192 --> 00:09:00.800
perform

00:09:01.568 --> 00:09:02.304
separately

00:09:02.880 --> 00:09:05.184
this regard on uh

00:09:05.440 --> 00:09:07.264
our systems implementation

00:09:09.216 --> 00:09:10.176
So, to avoid it

00:09:10.976 --> 00:09:12.768
Like I I I think uh some

00:09:12.800 --> 00:09:15.008
Some of you already know the answer, right?

00:09:15.392 --> 00:09:17.248
So, to write the

00:09:17.984 --> 00:09:18.784
requirement

00:09:19.840 --> 00:09:22.080
Uh we use Cucumber and Gherkin

00:09:22.912 --> 00:09:24.160
Right, uh

00:09:24.832 --> 00:09:24.928
Oh

00:09:28.736 --> 00:09:29.184
Uh

00:09:30.784 --> 00:09:32.448
Uh sorry. Uh

00:09:32.672 --> 00:09:34.240
Gherkin is the language

00:09:34.944 --> 00:09:37.536
And then uh Cucumber is uh with the

00:09:37.984 --> 00:09:41.408
uh more like the name of the platform, right?

00:09:42.176 --> 00:09:46.336
Right. I think you probably know the the term called given when then

00:09:47.488 --> 00:09:47.776
Right.

00:09:49.440 --> 00:09:55.424
On this attempt, what we gonna do is we gonna use Cucumber to specify

00:09:56.864 --> 00:10:00.992
the system environment in the way that you want it to be.

00:10:02.208 --> 00:10:05.696
For instance, uh if you working on the like class

00:10:06.080 --> 00:10:08.544
application or some application with the

00:10:08.704 --> 00:10:13.088
server side and client side, right? Your application will

00:10:13.184 --> 00:10:16.576
be stacked in a way like you have the web client or

00:10:16.640 --> 00:10:20.704
Angular client, whatsoever with client, then you have backend for frontend that

00:10:20.832 --> 00:10:24.736
dealing with the data fetching and a lot of backend that you don't control.

00:10:26.016 --> 00:10:26.144
Right.

00:10:26.784 --> 00:10:28.800
So, we will use Cucumber to

00:10:29.568 --> 00:10:31.168
precondition, those backend.

00:10:31.968 --> 00:10:33.376
in a way that

00:10:34.176 --> 00:10:35.040
we can

00:10:35.552 --> 00:10:37.440
be sure that whatever we

00:10:38.208 --> 00:10:40.224
mark as a mock or precondition

00:10:41.504 --> 00:10:45.728
are properly validated with the

00:10:46.272 --> 00:10:49.536
provider or can be, at least it can be, right?

00:10:50.336 --> 00:10:50.976
So,

00:10:51.648 --> 00:10:54.528
which come into the second

00:10:55.424 --> 00:10:55.808
step.

00:10:56.384 --> 00:10:58.208
Means uh we want to use

00:10:58.464 --> 00:11:00.032
Uh normally when we write the

00:11:00.096 --> 00:11:01.728
test, right? You use Jest

00:11:01.792 --> 00:11:05.792
and then you uh probably mock some uh

00:11:06.048 --> 00:11:08.704
like some class, some instance, some function

00:11:08.736 --> 00:11:11.552
to return uh what you expect, right? So

00:11:11.744 --> 00:11:15.360
uh but at this time, we will use PACT

00:11:16.160 --> 00:11:17.408
to mock the whole server.

00:11:18.016 --> 00:11:19.392
And we will start

00:11:20.192 --> 00:11:20.896
the server

00:11:22.144 --> 00:11:23.040
on the test

00:11:23.552 --> 00:11:29.312
every time, right? So think about your test case, one of your test case, one of your scenario, you configure how your uh backend gonna behave.

00:11:32.832 --> 00:11:36.064
And then you perform some action and then you can expect

00:11:36.800 --> 00:11:39.936
the immutable

00:11:40.512 --> 00:11:40.896
response.

00:11:42.400 --> 00:11:42.592
Right.

00:11:43.328 --> 00:11:44.480
So, uh in this

00:11:45.248 --> 00:11:47.648
Indeed, uh, on this, uh, the

00:11:47.776 --> 00:11:52.000
On this session, I will use just, uh, Elixir

00:11:52.192 --> 00:11:54.304
I think I heard the good name here.

00:11:54.560 --> 00:11:57.888
Bun and React to demonstrate the idea.

00:11:58.272 --> 00:12:02.752
Right, but, uh, this idea also works with another, uh, kind of application.

00:12:03.232 --> 00:12:07.072
Uh, we also use this, uh, similar idea on our, uh

00:12:07.456 --> 00:12:09.280
webpage that we build today.

00:12:09.888 --> 00:12:12.224
So, like, before we go, right,

00:12:13.376 --> 00:12:14.336
one big

00:12:15.648 --> 00:12:16.224
mistake

00:12:17.280 --> 00:12:18.464
when we are using Cucumber

00:12:19.392 --> 00:12:19.776
is

00:12:21.408 --> 00:12:24.512
All right. Cucumber itself is not the test case.

00:12:25.888 --> 00:12:30.016
is the matter of how you document your requirement

00:12:30.528 --> 00:12:31.328
and use it

00:12:32.032 --> 00:12:33.376
as your test case.

00:12:35.104 --> 00:12:39.744
You probably work on the company that asks you to, hey, uh, yeah, just write Cucumber, and

00:12:39.744 --> 00:12:45.216
maybe you have a lot of the long Cucumber file that you don't understand what what what

00:12:45.632 --> 00:12:47.104
it is, right? So,

00:12:48.224 --> 00:12:49.792
like, uh,

00:12:50.400 --> 00:12:52.064
Cucumber is there

00:12:52.800 --> 00:12:54.880
you only and always

00:12:55.424 --> 00:12:57.056
have three stage,

00:12:58.592 --> 00:12:58.656
right?

00:12:59.744 --> 00:13:05.472
So, uh, other other things else are considered as anti-pattern, right?

00:13:06.240 --> 00:13:06.560
So,

00:13:07.200 --> 00:13:10.976
we describe the immutable system condition before

00:13:11.712 --> 00:13:13.792
action happening on events.

00:13:14.336 --> 00:13:17.568
So, you start your test case on given. You describe how

00:13:17.568 --> 00:13:20.800
your database behave, how the backend behave, how

00:13:20.896 --> 00:13:25.376
uh, your browser going to be, right? Then describe everything under given.

00:13:27.488 --> 00:13:29.344
And then, you describe

00:13:29.984 --> 00:13:30.752
the action

00:13:31.648 --> 00:13:33.152
that the user

00:13:33.760 --> 00:13:36.832
uh, if you, uh, if you build the end user application,

00:13:37.088 --> 00:13:41.440
uh, or the event if you build the event-driven application or backend, right?

00:13:41.856 --> 00:13:43.360
Let's describe the action.

00:13:44.480 --> 00:13:44.960
on when.

00:13:45.952 --> 00:13:49.632
Preferably, uh, use only single when clause.

00:13:50.240 --> 00:13:54.304
Right? Because multiple when clauses most of the time will, uh, make your test

00:13:54.752 --> 00:13:57.312
become the, uh, become something else, right?

00:13:57.792 --> 00:14:01.536
So, and it, uh, most of the time create the anti-pattern.

00:14:02.944 --> 00:14:05.600
And then, uh, on, on the last

00:14:05.856 --> 00:14:07.776
uh, on the last section, it's just then.

00:14:08.000 --> 00:14:09.824
Then is the expectation.

00:14:09.856 --> 00:14:14.208
So, you know, precondition, you set given. Given I have this, this, this, this,

00:14:14.272 --> 00:14:17.472
uh, when this happens, then this is my result.

00:14:18.176 --> 00:14:19.360
For instance,

00:14:20.480 --> 00:14:21.280
I am a user.

00:14:22.496 --> 00:14:23.328
I

00:14:24.320 --> 00:14:26.112
I have credit card.

00:14:27.328 --> 00:14:28.096
When I

00:14:28.928 --> 00:14:30.624
put my credit card on the system,

00:14:31.136 --> 00:14:32.544
then my credit card

00:14:33.472 --> 00:14:37.888
will be served on the system, right? So, just simple, uh,

00:14:38.368 --> 00:14:42.624
precondition and then action and then, uh,

00:14:43.328 --> 00:14:43.744
outcome.

00:14:44.352 --> 00:14:48.416
Or if you familiar with another form of test, especially in the unit test

00:14:48.768 --> 00:14:51.008
pattern, it is called

00:14:51.392 --> 00:14:52.896
arrange, act, and assert.

00:14:53.536 --> 00:14:54.848
Same pattern, different name.

00:14:56.544 --> 00:15:01.664
Right? And why, why Cucumber? I already, uh, spoke about it, right?

00:15:01.760 --> 00:15:04.576
Uh, the problem about the integration test is

00:15:05.504 --> 00:15:06.112
the dynamic.

00:15:06.848 --> 00:15:09.216
Anyone here work with the game company before?

00:15:10.080 --> 00:15:11.232
Like, anyone here build game?

00:15:13.824 --> 00:15:13.920
Yeah.

00:15:14.560 --> 00:15:14.816
No.

00:15:15.520 --> 00:15:16.032
Uh,

00:15:17.056 --> 00:15:19.040
on the game industry.

00:15:19.520 --> 00:15:23.904
Like, if you build a game, there are a concept. It's called, uh, like,

00:15:24.256 --> 00:15:27.136
mechanic, dynamic, and aesthetic, MDA.

00:15:27.616 --> 00:15:32.736
Right. So, the concept is easy. Mechanic is the rule of the, like, system or your game.

00:15:32.832 --> 00:15:34.976
Uh, dynamic is how

00:15:35.424 --> 00:15:37.984
the user gonna use

00:15:38.528 --> 00:15:38.880
the

00:15:39.456 --> 00:15:42.464
mechanic or how to use the mechanic. So, they give

00:15:43.328 --> 00:15:45.952
the dynamic. Uh, so they give the

00:15:45.984 --> 00:15:48.320
aesthetic or feeling, right? So, the

00:15:48.608 --> 00:15:51.936
dynamic in this context, it means that

00:15:52.128 --> 00:15:54.176
uh, the system when, uh, when it

00:15:54.560 --> 00:15:57.024
got glue together or work together, right?

00:15:57.120 --> 00:16:02.304
They have many pre-condition, many stuff can happen. And we can have many, many, many, uh,

00:16:02.496 --> 00:16:05.920
outcome based on each, uh, like, condition.

00:16:06.144 --> 00:16:07.744
Right? Let's say server down,

00:16:07.872 --> 00:16:10.688
or our server start to return, uh, CAPTCHA.

00:16:10.848 --> 00:16:12.928
And then we need to, uh,

00:16:13.600 --> 00:16:15.744
like, figure it out how to deal with it, right?

00:16:15.840 --> 00:16:19.008
So, uh, on Cucumber, it provides

00:16:20.576 --> 00:16:24.928
very, very good, uh, pattern on how we deal with the

00:16:25.152 --> 00:16:27.136
dynamic or address the non-dynamic.

00:16:27.296 --> 00:16:29.536
Right? So, based on given, when, then clause,

00:16:30.240 --> 00:16:34.240
and with those given, when, then, it also allows us to run some linting rule

00:16:34.848 --> 00:16:37.888
to ensure that, uh, all of the

00:16:38.400 --> 00:16:42.720
test case, or the way we write or address the test case are properly conducted.

00:16:43.424 --> 00:16:43.584
Right.

00:16:44.192 --> 00:16:44.480
So,

00:16:45.568 --> 00:16:49.408
Yeah, of course, you can also use this on another form, like,

00:16:49.920 --> 00:16:51.808
uh, but also, uh, to make

00:16:51.936 --> 00:16:53.856
sure that your integration test works

00:16:54.560 --> 00:16:57.664
uh, in the way that, uh, you can use this for document,

00:16:58.272 --> 00:17:00.736
like this pattern of arrange, act, assert

00:17:02.528 --> 00:17:03.136
are required.

00:17:05.407 --> 00:17:05.440
Right.

00:17:06.336 --> 00:17:08.512
Otherwise, if you do the model-based testing,

00:17:08.736 --> 00:17:11.392
Uh, anyone here know the term called model-based testing?

00:17:13.664 --> 00:17:19.104
Anyone here used to work with the QA, and QA draw you a figure

00:17:19.232 --> 00:17:21.695
on the feature, and then draw the mind map

00:17:21.728 --> 00:17:23.359
on how things going to work.

00:17:26.304 --> 00:17:30.240
Yeah, yeah, you can start that. So, uh, yeah.

00:17:30.528 --> 00:17:33.632
So, I used to work with that, uh, like

00:17:33.888 --> 00:17:38.464
mechanic as well. We call this model-based testing where you model your problem, and you

00:17:38.592 --> 00:17:41.088
try to understand the uh

00:17:41.472 --> 00:17:42.976
like every possible outcome.

00:17:43.264 --> 00:17:44.928
And the problem with that outcome is

00:17:45.664 --> 00:17:46.432
is too

00:17:47.136 --> 00:17:48.256
uh complicated.

00:17:49.184 --> 00:17:53.408
Like you uh let's say you build a simple uh Agoda website,

00:17:54.144 --> 00:17:56.832
It's not simple, by the way. So uh

00:17:57.024 --> 00:17:59.936
So so you you have to start

00:17:59.936 --> 00:18:04.032
from the first page, right? You search for the hotel, and then you

00:18:04.096 --> 00:18:07.872
go to the uh room, you select room, you go to booking

00:18:07.904 --> 00:18:10.016
form, you do the payment, you check

00:18:10.496 --> 00:18:12.032
the uh

00:18:12.224 --> 00:18:14.624
after booking or like uh MMB page.

00:18:14.688 --> 00:18:17.952
This is what we call like I I don't remember the full name, right?

00:18:18.912 --> 00:18:19.168
So,

00:18:19.712 --> 00:18:25.216
uh you check your bookings, and then uh this is the end of the test case.

00:18:25.696 --> 00:18:27.456
Think about you need to write the

00:18:27.488 --> 00:18:30.688
automation from the first page to the last page. How long is going to take?

00:18:31.840 --> 00:18:34.144
And how hard is going to

00:18:34.720 --> 00:18:38.624
make you need to precondition your application.

00:18:40.096 --> 00:18:40.160
Right?

00:18:41.184 --> 00:18:41.248
Like

00:18:42.272 --> 00:18:45.184
it's gonna be difficult, right? So that's why we need

00:18:45.760 --> 00:18:47.808
uh some pattern, some right pattern

00:18:47.968 --> 00:18:52.704
to ensure that uh we we know what we uh are testing, right?

00:18:53.888 --> 00:18:58.048
So, uh, I think I speak a lot of boring principle, uh,

00:18:58.912 --> 00:18:58.976
uh,

00:18:59.488 --> 00:19:01.152
I want to build something.

00:19:01.376 --> 00:19:03.328
now, and that is the way I speak.

00:19:03.872 --> 00:19:07.552
So, uh, yeah, one motto that I love

00:19:07.904 --> 00:19:11.424
uh, about being agile is working software is the measure of progress.

00:19:12.416 --> 00:19:13.312
So, yeah.

00:19:14.336 --> 00:19:14.432
uh,

00:19:15.008 --> 00:19:16.608
So, we want to build something

00:19:17.440 --> 00:19:19.552
was so small. We want to build a basic

00:19:20.032 --> 00:19:25.920
online rock-paper-scissors game using server-client, right? So, the mechanic

00:19:26.304 --> 00:19:27.840
The game rule mechanic is simple.

00:19:28.096 --> 00:19:31.648
Uh, we have rock win scissor. Everyone know it. Everyone know how to play, right?

00:19:32.064 --> 00:19:36.128
So, and some constraint to make sure that we don't

00:19:36.128 --> 00:19:38.336
uh, or I don't overcomplicate the

00:19:38.368 --> 00:19:41.888
uh, example I gonna demonstrate you is we're gonna have

00:19:42.912 --> 00:19:43.456
uh,

00:19:44.384 --> 00:19:45.280
server

00:19:46.016 --> 00:19:50.080
Server side will be will randomly pick

00:19:51.008 --> 00:19:54.304
the answer and then will decide whether the game

00:19:55.392 --> 00:19:58.752
uh, who who win the game, to be precise, right? So,

00:19:59.040 --> 00:20:03.808
and then we have a client side that, uh, just send the information on what you pick

00:20:04.000 --> 00:20:07.296
to the server and server will tell you, uh, whether you win or lose the game.

00:20:09.440 --> 00:20:11.584
Easy, simple mechanic, right?

00:20:13.696 --> 00:20:19.360
Uh, I put the QR code here. You can scan. Uh, it's not the prompt pay, it's the link to the GitHub.

00:20:19.392 --> 00:20:21.536
which is like later, sure.

00:20:21.632 --> 00:20:27.008
Right. So, uh, yeah, the text stack is simple. We have Pact.

00:20:27.168 --> 00:20:27.680
We have

00:20:28.416 --> 00:20:30.656
This blue box, it's called test container.

00:20:31.360 --> 00:20:32.416
Anyone here know Docker?

00:20:33.984 --> 00:20:35.616
Yeah, I think everyone know, right?

00:20:36.032 --> 00:20:37.728
Docker, uh

00:20:38.112 --> 00:20:40.832
Test container itself is the way that you write

00:20:41.312 --> 00:20:46.496
the program on your favorite language that talk to the Docker, uh, engine.

00:20:46.976 --> 00:20:49.280
The same way that you write the, uh, Docker

00:20:49.856 --> 00:20:50.752
uh, file.

00:20:51.488 --> 00:20:54.304
Right, it allows us to dynamically create the container at

00:20:54.400 --> 00:20:59.296
the need or programmatically create the container at the need of our, uh, like

00:21:00.032 --> 00:21:04.384
uh, requirement. And we're going to use it to create our mock server.

00:21:05.344 --> 00:21:05.856
Right.

00:21:07.040 --> 00:21:09.632
Uh, yeah, just small thing.

00:21:10.240 --> 00:21:12.736
Kubernetes also do the same thing as the

00:21:13.216 --> 00:21:16.288
uh, test container, but with last, larger scale, right?

00:21:17.056 --> 00:21:21.280
So, another thing we're going to do is, is the CucumberJS.

00:21:22.080 --> 00:21:24.160
Actually, they have many languages.

00:21:24.192 --> 00:21:28.064
But since we are BKK.js, so I use JS at this session.

00:21:29.280 --> 00:21:30.976
And also I think

00:21:31.104 --> 00:21:33.696
Uh everyone know this icon?

00:21:34.336 --> 00:21:37.184
Like we're gonna use Bun to build the application.

00:21:37.920 --> 00:21:38.048
Right.

00:21:38.656 --> 00:21:43.040
And the reason I I I choose Bun because it looks cute, nothing in particular.

00:21:44.160 --> 00:21:47.616
Yeah. And yeah, we use another

00:21:47.712 --> 00:21:50.944
Uh framework, a popular framework from Thai

00:21:51.520 --> 00:21:54.624
engineer, right? I I don't remember who built it. It's called Alicia.

00:21:55.264 --> 00:21:56.192
Nice name, I like it.

00:21:57.568 --> 00:21:58.464
Yeah.

00:21:58.976 --> 00:22:03.360
Cool. So uh let's see how how how we can build this software

00:22:03.488 --> 00:22:05.472
and paste the information together, right?

00:22:05.984 --> 00:22:06.336
So,

00:22:07.168 --> 00:22:07.968
client side

00:22:08.544 --> 00:22:11.200
handle the user input, send to the server,

00:22:11.424 --> 00:22:13.184
server decide whether you win or lose.

00:22:14.016 --> 00:22:14.048
Right.

00:22:14.848 --> 00:22:17.216
And uh server uh random.

00:22:17.472 --> 00:22:20.544
In this situation, the server we are going to build

00:22:21.024 --> 00:22:23.936
will produce the random num- uh random output.

00:22:24.736 --> 00:22:27.328
So if we want to build a test case that end-to-end,

00:22:28.672 --> 00:22:30.688
like it's gonna be very difficult

00:22:31.264 --> 00:22:31.680
to

00:22:32.320 --> 00:22:34.944
uh predict the server outcome, right?

00:22:35.840 --> 00:22:36.192
We

00:22:36.832 --> 00:22:37.472
Luckily,

00:22:38.144 --> 00:22:40.384
is the same way as the software

00:22:40.896 --> 00:22:43.456
dynamic that we that we are

00:22:43.808 --> 00:22:47.776
working on, right? And when you work on many teams, uh, servers

00:22:47.840 --> 00:22:51.872
team can change the behavior of the server without inform you. So, in this

00:22:52.032 --> 00:22:57.280
example, we, uh, I'm going to demonstrate you the way we can, uh, mock those server

00:22:57.344 --> 00:23:00.096
the way that we can, uh, ensure that

00:23:00.288 --> 00:23:02.528
the server knows, uh, what they are doing.

00:23:03.296 --> 00:23:03.488
Uh

00:23:04.064 --> 00:23:08.160
And then everything beside the server side where client will be served under

00:23:08.704 --> 00:23:09.504
dev server

00:23:09.984 --> 00:23:15.616
because I don't want to make, uh, a stuff, uh, super complicated, right? So, the client side will have

00:23:15.872 --> 00:23:18.432
the BFF, back-end for front-end as a dev server.

00:23:18.944 --> 00:23:19.136
Right.

00:23:20.032 --> 00:23:22.112
So, how can, how can we make it happen?

00:23:23.136 --> 00:23:23.616
At first,

00:23:24.576 --> 00:23:27.648
right? I want to be BDD. I really want to be BDD. I

00:23:28.032 --> 00:23:30.016
I am the big fan of BDD. So,

00:23:30.336 --> 00:23:31.968
I start the project. Uh, I hope it

00:23:32.480 --> 00:23:34.528
like, I think it's too, a little bit too small.

00:23:38.016 --> 00:23:39.072
Perfect.

00:23:43.872 --> 00:23:44.256
Okay.

00:23:52.480 --> 00:23:52.800
Perfect.

00:24:06.592 --> 00:24:06.624
Okay.

00:24:07.328 --> 00:24:08.768
Uh, the battery is out

00:24:09.760 --> 00:24:13.376
for both microphone. So, uh, yeah. So, we

00:24:14.560 --> 00:24:15.712
uh, like,

00:24:16.000 --> 00:24:20.928
Uh, I, I don't know how to make it bigger, but, yeah, the example project contains three

00:24:21.568 --> 00:24:24.544
folder, right? The first folder is the acceptance

00:24:24.800 --> 00:24:28.032
means, uh, when we do BDD, we create the acceptance test, right?

00:24:28.512 --> 00:24:30.688
So, and the second server

00:24:30.752 --> 00:24:36.672
Uh, this server is a little bit tricky. It should be on different GitHub, but I want to make it simple, so I put it here.

00:24:37.088 --> 00:24:42.112
Right, the server side, uh, consider the server side is, uh, as some server, uh, that

00:24:42.240 --> 00:24:44.640
uh, some, uh, another

00:24:46.208 --> 00:24:46.752
person

00:24:47.488 --> 00:24:49.984
not you or not your team or not your company built.

00:24:50.304 --> 00:24:52.128
Right. You just, uh, write the client that

00:24:52.544 --> 00:24:54.080
consume the data from them, right?

00:24:54.464 --> 00:24:58.048
So, and then client is, uh, what we are going to test, right?

00:24:58.560 --> 00:25:00.352
So, what we are going to do is two things.

00:25:00.480 --> 00:25:02.592
We want to do BDD, and we want to do

00:25:02.944 --> 00:25:05.472
the second, uh, technique called

00:25:05.952 --> 00:25:08.096
consumer-driven contract testing.

00:25:09.760 --> 00:25:09.792
All right.

00:25:11.456 --> 00:25:13.184
Anyone know this term before?

00:25:18.304 --> 00:25:19.520
Oh, yeah. Done. Uh,

00:25:20.352 --> 00:25:20.736
Who know?

00:25:21.408 --> 00:25:21.632
Right.

00:25:24.192 --> 00:25:26.464
Yeah. So, uh, done.

00:25:27.136 --> 00:25:30.336
Uh, yeah. Maybe you need to zoom in your

00:25:30.336 --> 00:25:33.376
ID or VS Code. It's kind of too small. Okay.

00:25:35.072 --> 00:25:37.376
But, uh, I think I can, I need to open it here.

00:25:37.728 --> 00:25:39.360
Command? Control command?

00:25:54.048 --> 00:25:54.304
I see.

00:25:54.944 --> 00:25:56.096
How to make it bigger?

00:25:59.552 --> 00:25:59.648
Yeah.

00:26:01.056 --> 00:26:01.536
มัน

00:26:02.304 --> 00:26:03.168
มันไม่ใหญ่ขึ้น

00:26:06.976 --> 00:26:07.072
ขอโทษ

00:26:08.512 --> 00:26:08.704
อืม

00:26:09.824 --> 00:26:10.304
เห้ย

00:26:11.136 --> 00:26:11.552
ไม่ขึ้น

00:26:12.320 --> 00:26:12.480
โอเค

00:26:13.376 --> 00:26:13.952
ไม่ขึ้น

00:26:14.528 --> 00:26:15.616
มันต้อง

00:26:16.800 --> 00:26:18.208
หรือว่าเราดูใน GitHub เลย

00:26:19.872 --> 00:26:25.824
ครับ VS Code ใช่มั้ยครับ เปิด VS Code หน่อยได้มั้ยครับ

00:26:26.624 --> 00:26:28.224
VS Code. Okay.

00:26:29.312 --> 00:26:30.112
ขอบคุณครับ

00:26:30.816 --> 00:26:31.456
ขอโทษนะครับ

00:26:34.880 --> 00:26:34.944
ฮะ

00:26:36.160 --> 00:26:37.024
ใช่ครับ ขอบคุณครับ

00:26:37.920 --> 00:26:42.112
Okay. Uh yeah, it's a little bit of the technical uh hustle.

00:26:42.336 --> 00:26:45.984
So, yeah, uh going back to our beloved uh

00:26:45.984 --> 00:26:49.664
like server. So we want to begin the acceptance test because we

00:26:49.792 --> 00:26:53.504
we want to write a test first. So we want to be a real test driven.

00:26:53.600 --> 00:26:58.752
Right? And also we want to make sure that our test server are very stable.

00:26:58.848 --> 00:27:01.440
So we want to use the consumer driven contract testing.

00:27:01.728 --> 00:27:07.264
Like under the hood, it's just simple way to write the mock server and it's gonna generate the

00:27:07.296 --> 00:27:11.776
uh the rule of that mock server means uh this request is gonna respond like this.

00:27:12.224 --> 00:27:13.760
And both request and response

00:27:14.400 --> 00:27:17.376
will be called contract and it's gonna get used

00:27:17.632 --> 00:27:19.616
by the uh

00:27:19.904 --> 00:27:23.584
server side to validate that to validate dashing against us.

00:27:26.112 --> 00:27:29.696
So the con the concept is pretty simple. Uh it's just

00:27:30.240 --> 00:27:32.416
uh if you're working as a backend engineer,

00:27:32.576 --> 00:27:35.008
you probably have uh a lot of question on

00:27:35.104 --> 00:27:37.888
uh whether I changed the behavior or changed the API,

00:27:38.208 --> 00:27:43.328
uh if it is gonna broke my uh website or someone who consume my API or not.

00:27:44.192 --> 00:27:49.088
Like, or, uh, if you are working with the front-end API

00:27:49.120 --> 00:27:53.216
you probably want to make sure that server does not send something strange, right?

00:27:53.248 --> 00:27:56.416
and consumer-driven contract testing work in that way.

00:27:56.672 --> 00:27:59.360
But we will begin first with the

00:28:00.192 --> 00:28:01.120
feature files.

00:28:02.656 --> 00:28:06.496
Here is how I write the feature file. Very simple.

00:28:07.552 --> 00:28:08.992
I begin first with the rule.

00:28:10.560 --> 00:28:13.760
Rule, simple, simple term, not, uh, not

00:28:13.792 --> 00:28:15.328
fancy like scenario.

00:28:15.808 --> 00:28:18.240
Rule is, you describe what can do, what cannot do.

00:28:18.464 --> 00:28:21.408
Right? So this is what, uh, what the rule said.

00:28:21.632 --> 00:28:25.216
A match will decide winner based on the option player and NPC pick.

00:28:26.784 --> 00:28:26.912
Right?

00:28:28.288 --> 00:28:31.968
So, scenario will be easy, right? You pick something,

00:28:32.224 --> 00:28:34.112
server decide whether you win or lose,

00:28:34.240 --> 00:28:36.864
and then you show to the user, right?

00:28:37.152 --> 00:28:38.784
So, uh, yeah.

00:28:39.040 --> 00:28:41.248
You pick. Yeah, I, I put the

00:28:41.888 --> 00:28:45.152
bullet on given and when and then like this, so it's

00:28:45.152 --> 00:28:48.384
probably hard to understand, but let me show you the

00:28:48.576 --> 00:28:50.400
real, uh, working software, right?

00:28:56.064 --> 00:28:57.888
Okay, this is the real working software.

00:28:58.464 --> 00:28:59.936
Like when you, uh,

00:29:00.736 --> 00:29:04.736
Yeah, the UI is pretty rough. So, rock-paper-scissor.

00:29:05.312 --> 00:29:07.488
You pick one, and then

00:29:08.992 --> 00:29:10.432
Yeah, if you are lucky, you win.

00:29:12.192 --> 00:29:13.664
Yeah, if you are not lucky, you lose.

00:29:14.272 --> 00:29:15.584
Server will randomly

00:29:16.960 --> 00:29:17.696
give the response.

00:29:18.752 --> 00:29:22.400
And now, the challenge is we need to make sure that we create the test

00:29:22.976 --> 00:29:25.344
that we be able to

00:29:25.984 --> 00:29:28.032
uh, run it properly.

00:29:28.704 --> 00:29:30.752
Right. And it should be end-to-end test.

00:29:31.840 --> 00:29:32.096
It could

00:29:32.704 --> 00:29:36.576
Like we can make the test very stable by writing the unit test on each

00:29:36.864 --> 00:29:40.608
uh, component by render the component and then uh

00:29:40.768 --> 00:29:43.616
like uh or write some mock, right? But now,

00:29:44.128 --> 00:29:46.560
I don't want that component. I want to be end-to-end.

00:29:47.680 --> 00:29:47.968
So,

00:29:48.544 --> 00:29:51.936
The game work like this. Uh the rules are on the server side

00:29:52.768 --> 00:29:54.048
and we have to test it.

00:29:54.592 --> 00:29:57.568
So what we do first, we create the feature file this

00:29:57.824 --> 00:30:00.480
uh like this. Right. If you work with the

00:30:00.512 --> 00:30:05.632
team with the business or with the customer, this is where you uh need to write

00:30:06.048 --> 00:30:09.888
uh the document on. And you need And you This document

00:30:10.336 --> 00:30:12.160
will serve as your

00:30:16.768 --> 00:30:17.280
Bye bye.

00:30:20.192 --> 00:30:22.784
Everything working. Yeah. Success.

00:30:25.760 --> 00:30:31.392
Yeah, we have We have We have other session before this, so they are They might already drain all batteries.

00:30:31.424 --> 00:30:34.656
The battery is out. So, uh

00:30:35.168 --> 00:30:35.264
Yeah.

00:30:36.000 --> 00:30:40.384
So, uh we want, we want uh continue after that, so

00:30:40.448 --> 00:30:45.632
we have the feature file already here, right? So we build the server and client

00:30:45.696 --> 00:30:46.784
by the

00:30:47.552 --> 00:30:48.256
uh then

00:30:49.024 --> 00:30:52.288
we start building the code, right? So we want some UI

00:30:52.384 --> 00:30:57.984
since it's uh tangible and we can like touch it and feel it. We build the UI first.

00:30:58.592 --> 00:31:00.128
So we start build a UI, we

00:31:00.224 --> 00:31:02.368
Bootstrap. This one we are bun

00:31:02.848 --> 00:31:04.992
uh in its command and then boom!

00:31:05.088 --> 00:31:06.816
everything everything happened here.

00:31:07.424 --> 00:31:07.488
Right.

00:31:08.576 --> 00:31:12.064
Then uh we go into app.tsx.

00:31:12.320 --> 00:31:14.304
Right. So next, going to be very simple.

00:31:14.464 --> 00:31:16.224
What we're going to do is we create

00:31:16.768 --> 00:31:19.776
one uh we create the app component

00:31:20.160 --> 00:31:23.232
An app component have one function uh that

00:31:24.128 --> 00:31:28.000
call handle play. In each handle play, uh

00:31:28.512 --> 00:31:31.680
it it is the event that got fired after onClick

00:31:31.936 --> 00:31:34.176
on each button that we create below.

00:31:34.432 --> 00:31:36.864
Right, we create three button, rock paper scissor.

00:31:37.440 --> 00:31:40.512
Uh we put data tested ID, so it is easier for like

00:31:40.544 --> 00:31:42.208
uh automation test.

00:31:43.200 --> 00:31:44.736
Then, uh, this one

00:31:44.960 --> 00:31:47.904
After you click on each button, it sends

00:31:48.864 --> 00:31:51.936
the, uh, request to the API.

00:31:54.080 --> 00:31:56.800
Normally, normally this one you probably done it

00:31:56.896 --> 00:31:58.688
to your backend for frontend.

00:31:58.784 --> 00:32:01.120
Like your frontend code probably doesn't look like this.

00:32:01.312 --> 00:32:03.776
But since I want to demonstrate to you fast, so like

00:32:04.096 --> 00:32:07.584
The API itself has one function, extra function, so

00:32:07.680 --> 00:32:09.184
we can overlay

00:32:10.080 --> 00:32:14.560
the target API on each, each time you start the, uh,

00:32:15.040 --> 00:32:17.312
server, right? Or start the UI.

00:32:17.664 --> 00:32:21.024
Now the UI is done, you just send the API, and the API is

00:32:21.248 --> 00:32:23.168
uh, API mesh action.

00:32:23.648 --> 00:32:27.488
Like, just, uh, we, we send the action to API on the mesh, right?

00:32:28.192 --> 00:32:31.392
So then, respond nothing.

00:32:31.712 --> 00:32:35.488
Fancy, unless it's error, we don't, we do not, uh, we, we just

00:32:36.096 --> 00:32:38.880
set the, like, uh, the data that

00:32:39.040 --> 00:32:40.640
responds from the API.

00:32:41.184 --> 00:32:43.296
API decides, right? So the response here.

00:32:43.520 --> 00:32:45.088
No logic in the client side.

00:32:46.752 --> 00:32:48.704
Then, uh, the API

00:32:48.832 --> 00:32:52.832
we do it. So let's say we are on different teams, we build this API.

00:32:53.344 --> 00:32:56.608
Then we start it on the ECS server, right?

00:32:57.024 --> 00:33:01.472
So we create one action here, one post action here.

00:33:01.568 --> 00:33:07.168
receive the body, uh, receive the player action and then randomly pick the

00:33:07.456 --> 00:33:12.192
NPC choice, means uh NPC non-player character, right? NPC choice. And then

00:33:12.352 --> 00:33:17.152
it evaluate whether uh you or them or NPC are the winner,

00:33:17.632 --> 00:33:19.776
right? Evaluation is is a

00:33:20.064 --> 00:33:25.216
like not not that big deal. So we just uh do some small calculation here.

00:33:25.824 --> 00:33:28.480
uh in the server side logic, so we will skip

00:33:29.024 --> 00:33:30.592
like uh but this thing works.

00:33:31.648 --> 00:33:32.800
So uh

00:33:33.312 --> 00:33:34.272
Yep.

00:33:35.104 --> 00:33:35.552
After that,

00:33:36.224 --> 00:33:36.512
the most

00:33:37.024 --> 00:33:38.208
challenging part is here.

00:33:39.584 --> 00:33:41.760
So we want to build the uh

00:33:42.592 --> 00:33:43.552
the

00:33:44.480 --> 00:33:47.616
automation, right? So we use

00:33:48.224 --> 00:33:49.152
this package.

00:33:50.752 --> 00:33:52.896
So at first, uh what we do is by

00:33:56.544 --> 00:33:57.536
อันนี้เปลี่ยนให้แล้ว

00:33:58.080 --> 00:33:58.432
อ่า โอเค

00:34:01.024 --> 00:34:04.320
So uh we use yarn add Cucumber add

00:34:05.024 --> 00:34:05.760
Expect foundation

00:34:06.464 --> 00:34:09.056
for our consumer driven contract testing.

00:34:09.632 --> 00:34:14.431
And test library, uh this one is not neat, it just uh use it for boilerplate code.

00:34:14.623 --> 00:34:18.368
And then yeah, this one is as uh IO, we need it.

00:34:18.623 --> 00:34:20.992
for doing some magic behind

00:34:21.312 --> 00:34:23.583
Get port as well to doing some magic behind.

00:34:24.032 --> 00:34:26.335
And then another one, test container.

00:34:27.456 --> 00:34:31.648
Right. Another one is the node, obviously, right? So we have Playwright.

00:34:32.480 --> 00:34:37.312
So everyone, uh, fancy about Playwright. This part, it's just the wrapper of the

00:34:37.408 --> 00:34:40.672
uh, Selenium, but it's cool wrapper, by the way.

00:34:40.735 --> 00:34:42.784
So, yeah, we have Playwright here.

00:34:44.032 --> 00:34:44.192
So,

00:34:44.896 --> 00:34:46.335
how do we define the test?

00:34:47.168 --> 00:34:47.487
Right.

00:34:48.512 --> 00:34:50.112
So, uh, in

00:34:50.944 --> 00:34:52.159
Cucumber.js,

00:34:52.928 --> 00:34:55.232
uh, uh, the pattern that

00:34:55.328 --> 00:34:58.432
we we we work with the Cucumber.js, they

00:34:58.464 --> 00:35:00.032
tend to be different than

00:35:00.160 --> 00:35:03.520
uh, other languages. So like, uh,

00:35:04.096 --> 00:35:07.520
Yeah. So what we do here is we create the step binding.

00:35:08.032 --> 00:35:12.224
Right. Every time when you have the feature file, but

00:35:12.352 --> 00:35:15.680
don't have the step binding and you run the Cucumber,

00:35:17.280 --> 00:35:18.240
it gonna

00:35:19.296 --> 00:35:21.568
tell you, uh, automatically the snippet

00:35:22.048 --> 00:35:25.440
uh, that you can copy and paste into the new

00:35:25.792 --> 00:35:30.272
and into your bindings, uh, which I can show you for a moment.

00:35:30.944 --> 00:35:33.952
So let me rename this. So, uh, like

00:35:35.520 --> 00:35:36.256
ครับ

00:35:37.216 --> 00:35:38.848
So, yeah.

00:35:39.296 --> 00:35:41.248
So we run it with bun.

00:35:42.336 --> 00:35:43.072
Run

00:35:47.840 --> 00:35:49.248
Yeah, you see.

00:35:50.624 --> 00:35:50.912
Oops.

00:35:51.648 --> 00:35:54.368
So it will generate the

00:35:56.160 --> 00:35:58.880
snippet of the uh step binding.

00:35:59.104 --> 00:36:01.248
Like pretty different than Java,

00:36:01.376 --> 00:36:05.088
or C# if you work with C# or other language that have the code generator.

00:36:05.408 --> 00:36:07.168
This one it generate on

00:36:07.232 --> 00:36:10.752
on during your run and you need to copy and paste on your step bindings.

00:36:11.648 --> 00:36:16.000
And after that you need to do some like template thing to make sure that you

00:36:16.352 --> 00:36:20.128
you you can pass the uh value

00:36:20.416 --> 00:36:23.264
with the template properly, right? So,

00:36:23.552 --> 00:36:28.672
Uh yeah, this one is too detail. Uh you can check the document later.

00:36:28.928 --> 00:36:29.760
Right. So,

00:36:30.368 --> 00:36:32.320
what I did here is I copy everything.

00:36:33.888 --> 00:36:34.208
And then

00:36:34.944 --> 00:36:37.024
the next thing is on the given cost

00:36:37.952 --> 00:36:41.632
I have the global uh where is uh global

00:36:42.144 --> 00:36:44.896
variables address here or world object.

00:36:45.408 --> 00:36:48.128
Uh if you're familiar with JavaScript, right?

00:36:48.224 --> 00:36:51.936
So, TypeScript does not have world object. So I need to declare it like this.

00:36:52.672 --> 00:36:53.088
Then

00:36:54.112 --> 00:36:55.136
uh this one we

00:36:55.936 --> 00:36:57.632
collect the test state.

00:36:58.400 --> 00:37:01.248
Fortunately, on each Cucumber run

00:37:02.240 --> 00:37:04.064
Uh, this global will be

00:37:04.128 --> 00:37:06.720
different. This this object will be different on each run.

00:37:07.296 --> 00:37:10.240
Like, uh, thanks for the Cucumber folks, right?

00:37:10.496 --> 00:37:12.480
So, we collect

00:37:13.248 --> 00:37:15.648
the precondition from the given cause here.

00:37:17.792 --> 00:37:22.848
And we we do nothing fancy, right? We don't do we don't perform any direction. We don't even

00:37:23.008 --> 00:37:24.256
open the browser here.

00:37:24.800 --> 00:37:24.992
Right.

00:37:25.536 --> 00:37:27.744
on our given code is more like

00:37:27.872 --> 00:37:31.136
builder pattern, if you familiar with it, like you configure

00:37:31.200 --> 00:37:33.248
your object this way, this way, this way.

00:37:34.432 --> 00:37:35.040
and you'll be with

00:37:36.032 --> 00:37:37.568
And now we're going to go to the

00:37:37.920 --> 00:37:39.936
more exciting part, which is when

00:37:41.024 --> 00:37:41.280
Right.

00:37:42.176 --> 00:37:42.720
on when

00:37:43.296 --> 00:37:45.120
this is where the action got performed.

00:37:46.176 --> 00:37:48.640
We set up the server. We set up the mock server.

00:37:49.184 --> 00:37:49.696
And then

00:37:50.240 --> 00:37:53.664
we perform the action on this method.

00:37:55.488 --> 00:37:57.088
How can I set up the server here?

00:37:58.528 --> 00:38:01.248
So, uh, let's start with our first function.

00:38:02.016 --> 00:38:06.752
There are few steps that uh I I I I create here, right? Number one,

00:38:07.360 --> 00:38:08.160
we want to build

00:38:09.120 --> 00:38:09.568
the

00:38:10.336 --> 00:38:10.624
provider, right?

00:38:11.168 --> 00:38:11.392
contract.

00:38:13.184 --> 00:38:14.016
consumer contract.

00:38:15.296 --> 00:38:15.648
Then

00:38:16.736 --> 00:38:20.384
we start test Sorry to disturb. Um, you are running

00:38:20.416 --> 00:38:25.920
Uh um I'm afraid you already run out of time. So maybe you can get take like another five minutes.

00:38:26.048 --> 00:38:29.664
Oh, yeah, yeah. Sorry, sorry for running out of time. So, yeah.

00:38:29.856 --> 00:38:32.896
Uh let's continue fast. Then we have the server here.

00:38:33.344 --> 00:38:38.240
We have the uh server and then this this is where we start the pack server.

00:38:38.592 --> 00:38:40.864
Okay. So, uh, how pack work?

00:38:41.664 --> 00:38:43.456
Let's go to build game contract, right?

00:38:43.744 --> 00:38:46.368
Your game contract itself will invoke PACT.

00:38:47.552 --> 00:38:49.440
What we did here are the

00:38:49.536 --> 00:38:52.704
First line is bootstrap. You can check how PACT works.

00:38:53.088 --> 00:38:55.136
The most interesting part are here.

00:38:56.032 --> 00:38:59.616
So, you configure how your server going to behave here.

00:39:01.376 --> 00:39:06.176
Then, you run verify and finalize, so PACT going to dump the thing called

00:39:06.976 --> 00:39:09.728
uh contract.json at this state.

00:39:10.688 --> 00:39:10.848
Right.

00:39:11.584 --> 00:39:15.584
So, uh I'm afraid I don't have that much time, so yeah.

00:39:16.192 --> 00:39:18.880
We have the contract.json, and then

00:39:19.200 --> 00:39:21.728
next we start the PACT stub server.

00:39:22.336 --> 00:39:24.864
Simple uh container code.

00:39:24.960 --> 00:39:26.464
that uh we create the

00:39:26.560 --> 00:39:28.320
container, Docker container,

00:39:28.384 --> 00:39:33.856
and uh from PACT foundation, and then mount the contract part

00:39:34.816 --> 00:39:39.584
to the container and start it on the random port, right? We we start a random port.

00:39:40.224 --> 00:39:41.152
And then

00:39:42.240 --> 00:39:42.912
we

00:39:44.032 --> 00:39:46.656
create the uh we start the game client.

00:39:47.264 --> 00:39:48.864
Since it's uh like

00:39:49.184 --> 00:39:54.304
most dirtiest way to start the game client because we we want to start the browser, right?

00:39:54.368 --> 00:39:55.936
We don't want to render our test.

00:39:56.096 --> 00:40:01.184
We start the browser, we are like execute a thing, we create the command line, we override the server here.

00:40:01.632 --> 00:40:06.592
And then, boom, the magic happened. Below, we launched the uh

00:40:07.264 --> 00:40:07.936
browser.

00:40:09.408 --> 00:40:11.104
that talk to the client side.

00:40:11.264 --> 00:40:13.088
or webpack the server here.

00:40:13.792 --> 00:40:16.032
Then, uh it's not webpack, it's bundle server.

00:40:16.896 --> 00:40:22.272
Then after that, uh we just click on the button, if you notice.

00:40:22.624 --> 00:40:25.920
Right? And then, uh yeah, just expect the result. Right.

00:40:26.784 --> 00:40:27.040
So,

00:40:28.512 --> 00:40:29.088
Alright.

00:40:31.424 --> 00:40:31.680
Cool.

00:40:33.824 --> 00:40:35.392
I think something gonna crash.

00:40:37.280 --> 00:40:37.472
Yeah.

00:40:39.968 --> 00:40:42.176
Now, we have two test cases, or three.

00:40:43.136 --> 00:40:47.936
Yeah. Well, one test case failed. Maybe I do some modification, but two passed. Yeah.

00:40:48.256 --> 00:40:52.160
So we try to validate the rule, uh, based on this thing. Right.

00:40:52.608 --> 00:40:57.024
So, one test case failed, uh, which is the draw. Maybe I put the wrong term here.

00:40:57.664 --> 00:41:02.368
And after that, uh, yes, in the end. So I want to show you one thing, very cool.

00:41:04.256 --> 00:41:06.432
This is what we call contract.

00:41:07.200 --> 00:41:08.928
And this is why the magic happens.

00:41:09.376 --> 00:41:13.056
This contract is the configurator of your microservice or your environment.

00:41:13.664 --> 00:41:14.432
And this contract

00:41:15.040 --> 00:41:17.504
can be consumed and used by the server.

00:41:17.952 --> 00:41:19.776
Right. So we can load this file

00:41:20.640 --> 00:41:23.168
and use it as their own test.

00:41:23.680 --> 00:41:26.720
So, server side, uh, can be sure that

00:41:27.040 --> 00:41:30.112
uh, when you change something, when you refactor something,

00:41:30.688 --> 00:41:31.232
you know

00:41:32.192 --> 00:41:32.416
what

00:41:33.280 --> 00:41:34.944
to test against your consumer.

00:41:35.616 --> 00:41:35.808
Right.

00:41:36.928 --> 00:41:41.024
So, um, unfortunately we're running out of time. So I have, we've crossed the

00:41:41.280 --> 00:41:43.328
uh, session at this point.

00:41:44.128 --> 00:41:46.592
So, anyone have the question?

00:41:48.288 --> 00:41:48.768
Right.

00:41:53.280 --> 00:41:57.472
Uh, does anyone have any questions? Um, you can raise your hand up. I will send a mic to you.

00:42:00.064 --> 00:42:00.256
Nah.

00:42:04.896 --> 00:42:05.440
Uh

00:42:06.016 --> 00:42:08.224
I wonder how like how many test kits

00:42:08.288 --> 00:42:11.776
Can it be it depends on how how we write the Cucumber file

00:42:12.544 --> 00:42:17.824
Yeah, it depends on how many Cucumber or how many uh like

00:42:18.368 --> 00:42:20.128
scenario you want. Oh. Yeah.

00:42:20.576 --> 00:42:22.304
And you can create this

00:42:22.624 --> 00:42:24.288
uh full stack application

00:42:24.832 --> 00:42:27.584
per one of your scenario. Oh. Yeah.

00:42:28.544 --> 00:42:31.232
everyone at your uh run host

00:42:31.680 --> 00:42:33.952
machine allow to do so as well.

00:42:34.656 --> 00:42:37.472
But it's kind of like uh we don't need to

00:42:37.568 --> 00:42:39.328
specify all

00:42:39.424 --> 00:42:40.960
the test kit by ourselves.

00:42:41.248 --> 00:42:44.640
But like give it some example and Yeah. Oh.

00:42:45.888 --> 00:42:49.088
So the rest will be generated. Yeah, the rest will be generated.

00:42:49.408 --> 00:42:54.432
Right. So uh it it it uh like we we need to uh

00:42:54.720 --> 00:42:58.688
like do some manual work of course if uh the interactions are not there.

00:42:58.912 --> 00:43:03.968
But if the interaction are there, you just reuse whatever uh the builder has and then just change the

00:43:04.032 --> 00:43:07.008
parameters. Oh. Yeah. Thank you. Yeah.

00:43:11.840 --> 00:43:12.032
So

00:43:12.768 --> 00:43:16.448
Yeah. So please give an applause. Thank you.

00:43:19.040 --> 00:43:19.264
Okay.
