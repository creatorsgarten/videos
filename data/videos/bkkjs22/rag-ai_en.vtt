WEBVTT

00:00:01.248 --> 00:00:03.072
Okay.

00:00:05.504 --> 00:00:07.840
Ah, can I?

00:00:09.664 --> 00:00:10.624
Okay.

00:00:12.192 --> 00:00:13.376
Ah, chotto matte.

00:00:15.680 --> 00:00:16.800
I'm so excited.

00:00:24.992 --> 00:00:25.888
Alright.

00:00:26.816 --> 00:00:29.472
Right. So good evening, everyone.

00:00:29.536 --> 00:00:31.360
Welcome to my session.

00:00:31.424 --> 00:00:33.856
First of all, I have some questions for you guys.

00:00:34.048 --> 00:00:36.480
Do you know this anime or these cartoons?

00:00:37.824 --> 00:00:38.560
So?

00:00:40.736 --> 00:00:40.768
Ah.

00:00:41.312 --> 00:00:44.992
Yeah. So, anyone know this one? You know this one, right?

00:00:45.344 --> 00:00:48.064
Anyone know this one? No. No. No, it's

00:00:48.192 --> 00:00:50.240
Okay. So actually, it's quite old.

00:00:50.432 --> 00:00:52.736
I just realized these things

00:00:53.440 --> 00:00:58.912
you know, like a couple days ago when I asked some new generation students, and

00:00:59.200 --> 00:01:01.024
they said, "I don't know this one. What is it?"

00:01:01.632 --> 00:01:03.808
So actually these cartoons are named

00:01:04.288 --> 00:01:09.824
In Thai it's น้องสาวผมไม่ได้น่ารักขนาดนั้นหรอก In Japanese it's Ore no Imōto ga

00:01:10.112 --> 00:01:13.664
Konnani Kawaii

00:01:13.920 --> 00:01:16.320
Wake ga Nai. So you maybe like

00:01:16.736 --> 00:01:20.000
Why is it related to something that we're going to say today?

00:01:20.192 --> 00:01:23.040
So today, I'm going to share this thing.

00:01:23.680 --> 00:01:25.952
to any things because

00:01:27.552 --> 00:01:30.688
I'm going to talk about how we create the

00:01:31.520 --> 00:01:34.400
RAG AI or RagAI.

00:01:34.560 --> 00:01:36.640
So what do you like, by the way?

00:01:37.152 --> 00:01:39.200
Yup. Yup. So,

00:01:39.744 --> 00:01:45.376
because I'm going to base the story from these cartoons. So, these cartoons,

00:01:45.728 --> 00:01:47.392
the main characters,

00:01:47.680 --> 00:01:50.688
the middle one, the girl, she is like

00:01:54.976 --> 00:01:56.768
very good girl, good student,

00:01:57.152 --> 00:02:00.448
and really high class, something like that. But actually, behind the scene,

00:02:00.576 --> 00:02:05.984
in her secret life, she loves anime, playing eroge games, yep,

00:02:06.176 --> 00:02:10.431
some 18 plus game, something like that. And I think

00:02:10.624 --> 00:02:12.128
what I could help her

00:02:12.288 --> 00:02:13.792
to achieve something better or

00:02:14.272 --> 00:02:20.032
So today, I'm going to create the RAG AI

00:02:20.352 --> 00:02:22.016
that will help Kirino

00:02:22.336 --> 00:02:24.384
to search anime easier.

00:02:25.216 --> 00:02:27.680
So, but before we go do that,

00:02:27.712 --> 00:02:29.376
I would like to talk about

00:02:29.728 --> 00:02:32.672
RAG AI first. What's it?

00:02:33.440 --> 00:02:34.368
So...

00:02:35.008 --> 00:02:37.984
Oh, first of all, I forgot to

00:02:38.080 --> 00:02:40.096
introduce myself. But anyway,

00:02:40.128 --> 00:02:41.920
My name is Jirachai Chansivanon.

00:02:42.240 --> 00:02:43.776
My nickname is Job.

00:02:43.968 --> 00:02:47.008
I'm currently working at MongoDB in Singapore.

00:02:47.200 --> 00:02:50.816
So my role is Consulting Engineer, so

00:02:51.104 --> 00:02:54.336
normally I'm going to work on how we can make

00:02:54.496 --> 00:02:56.960
MongoDB faster, how we can install it,

00:02:57.024 --> 00:02:59.488
how we are going to implement it, something like that.

00:03:00.000 --> 00:03:01.824
So that's what my work is.

00:03:02.464 --> 00:03:08.032
And previously I was working at Microsoft as Digital Specialist,

00:03:08.096 --> 00:03:10.048
so you may get confused, what is it?

00:03:10.176 --> 00:03:12.384
So actually it's normally about

00:03:12.512 --> 00:03:18.240
being specialized in some Microsoft technology areas. Previously I was

00:03:18.912 --> 00:03:21.088
working as a specialist for Azure,

00:03:21.504 --> 00:03:26.880
about application things in Azure. How are we going to install it? How to build it? Something like that.

00:03:27.136 --> 00:03:31.872
But yeah, just the past. So, now today I'm at MongoDB and

00:03:32.544 --> 00:03:36.288
I found something really fantastic here as well.

00:03:36.992 --> 00:03:38.336
So, let's move on.

00:03:39.040 --> 00:03:41.088
So, let's start from

00:03:41.664 --> 00:03:42.496
RAG

00:03:43.552 --> 00:03:48.192
Anyone know about RAG before, or know what it stands for?

00:03:49.152 --> 00:03:51.840
I guess most of you all also know about this one.

00:03:52.064 --> 00:03:56.576
So, basically, RAG stands for Retrieval Augmentation Generation.

00:03:56.640 --> 00:04:01.856
So, it's going to be one technique to build your applications and connect to LLM.

00:04:01.920 --> 00:04:04.736
Large Language Model, like GPT, Gemini,

00:04:05.024 --> 00:04:07.840
or DeepSeek or something else, and let them

00:04:08.256 --> 00:04:10.720
find or search something for you, but

00:04:10.784 --> 00:04:13.344
based on human language, like not

00:04:13.696 --> 00:04:16.896
directly with something like that. You just,

00:04:16.928 --> 00:04:20.031
for example, need to search for sweaters.

00:04:20.160 --> 00:04:22.112
So if you say,

00:04:22.336 --> 00:04:26.688
I'm cold right now, so I'm looking for something to wear to make

00:04:26.784 --> 00:04:28.992
my body warmer, something like that.

00:04:29.056 --> 00:04:34.816
You can type in something like this, and your AI can search for a sweater or clothes for you.

00:04:35.392 --> 00:04:38.432
So that will work for you, but

00:04:39.328 --> 00:04:40.352
how with

00:04:41.408 --> 00:04:44.192
So normally, if your applications, right?

00:04:44.352 --> 00:04:45.952
You have your database here.

00:04:46.208 --> 00:04:50.528
So normally, you interact with your application by searching or browsing something like that.

00:04:51.136 --> 00:04:55.520
And then your application just searches right away from the database and returns it to you.

00:04:55.808 --> 00:04:59.072
That's what a normal application does, right?

00:04:59.392 --> 00:05:03.008
But for RAG,

00:05:03.360 --> 00:05:05.088
normally, it will retrieve

00:05:05.568 --> 00:05:08.032
the data the same as the database

00:05:08.288 --> 00:05:10.688
does. I mean, like a normal application does.

00:05:11.072 --> 00:05:13.824
But maybe add something more in this step.

00:05:16.672 --> 00:05:20.320
If we add augment and generations, what is it?

00:05:20.576 --> 00:05:24.544
So augment means we're going to use the capability of LLM.

00:05:24.896 --> 00:05:27.392
It could be your Gemini, or

00:05:27.520 --> 00:05:29.824
yeah, whatsoever, et cetera, to

00:05:30.496 --> 00:05:33.248
augment, to combine with the base knowledge.

00:05:33.536 --> 00:05:35.424
Like, if you find some

00:05:35.488 --> 00:05:37.664
part of the data, and you need

00:05:37.856 --> 00:05:42.112
to add on more to make it more complete. So you can use LLMs to

00:05:42.464 --> 00:05:44.160
augment it to make it more complete.

00:05:44.416 --> 00:05:48.128
And then, generate it back into the human language.

00:05:48.640 --> 00:05:50.496
So you may probably see something like this

00:05:50.720 --> 00:05:55.840
with new applications nowadays. Today, you can use ChatGPT and try to search something.

00:05:55.904 --> 00:05:59.488
And ChatGPT just goes to searching from Google or Bing, right?

00:05:59.872 --> 00:06:02.144
It's Bing actually. So yeah, so

00:06:02.432 --> 00:06:04.928
searching for you and generating an option for you.

00:06:04.992 --> 00:06:06.656
needs and that's your in the human language.

00:06:06.944 --> 00:06:09.376
to easier for easier way for you.

00:06:09.728 --> 00:06:11.968
So that's what RAG is going to do, but

00:06:12.736 --> 00:06:16.576
actually RAG does not just only support for normal database,

00:06:17.152 --> 00:06:18.176
Where is my next slide?

00:06:20.000 --> 00:06:24.512
Okay. So, actually, one thing that makes RAG

00:06:24.896 --> 00:06:30.560
more special than the normal searching is it could search from the data that

00:06:30.720 --> 00:06:35.232
that could be PDF, JSON file, images, or something else,

00:06:35.392 --> 00:06:37.856
that you can convert back into the

00:06:38.016 --> 00:06:40.512
numeric representations, like vectors.

00:06:41.024 --> 00:06:43.424
So that's what we're going to do with

00:06:43.840 --> 00:06:45.344
RAG today,

00:06:45.440 --> 00:06:47.776
because normally, in those part, it can be

00:06:48.064 --> 00:06:49.792
on application part, right?

00:06:49.856 --> 00:06:51.424
But we're going to be talking about how

00:06:51.456 --> 00:06:55.264
how are we going to convert our data and store it in something else

00:06:55.648 --> 00:06:59.328
and make your LLM process easier, because

00:06:59.488 --> 00:07:03.232
LLM doesn't just go and grab some data and come back.

00:07:03.520 --> 00:07:07.808
But it needs to search for something that is similar to something that you search, right?

00:07:08.160 --> 00:07:11.872
So for example you need to be looking for some sweaters

00:07:12.000 --> 00:07:14.208
or something to make you feel warmer, right?

00:07:14.880 --> 00:07:16.864
So, you cannot search for

00:07:17.184 --> 00:07:22.560
warm clothes or something like that from the database, but you need to search for something and then

00:07:22.848 --> 00:07:24.480
try to find something similar

00:07:25.056 --> 00:07:27.296
as to your input.

00:07:28.192 --> 00:07:30.144
So we're going to be talking about

00:07:30.496 --> 00:07:32.576
how do we make this process happen

00:07:33.120 --> 00:07:34.240
all realistic things.

00:07:34.496 --> 00:07:39.136
because LLM will not search like state-of-word but search in some way.

00:07:40.000 --> 00:07:44.736
So let me switch to this computer instead. I will draw something for you.

00:07:45.824 --> 00:07:47.680
Well, I need to move this one.

00:07:54.112 --> 00:07:56.416
You may be thinking about why I don't use just only

00:07:56.640 --> 00:08:00.256
one computer. So actually, during the build of

00:08:00.320 --> 00:08:05.408
this demo, I forgot to switch the computer. I mean, I picked the wrong one.

00:08:06.112 --> 00:08:08.256
Yeah, so that's why it ended up like this.

00:08:08.960 --> 00:08:11.584
So actually the demo should be on this computer, but

00:08:12.320 --> 00:08:14.208
in that moment, I picked the wrong one.

00:08:15.744 --> 00:08:17.728
Well, okay. Let me

00:08:18.464 --> 00:08:19.456
Share my screen. Well,

00:08:20.384 --> 00:08:21.056
that's my debug.

00:08:22.656 --> 00:08:24.352
Okay. So let's start from here.

00:08:26.240 --> 00:08:30.560
Let me keep what I have to say to see where my applications are for drawing.

00:08:31.488 --> 00:08:32.224
for drawing

00:08:36.672 --> 00:08:37.183
Give me a second.

00:08:41.056 --> 00:08:43.582
All right, it's here.

00:08:48.160 --> 00:08:49.760
Let me re-share my screen.

00:08:56.736 --> 00:08:57.216
All right.

00:08:57.984 --> 00:09:00.160
Okay. Let me recap what I have just

00:09:00.832 --> 00:09:06.400
explained previously. So, normally, right, you have an application, and your application needs to

00:09:06.752 --> 00:09:12.672
search something from the database, right? Normally, if we need to search, it will go to the search engine instead, right?

00:09:13.248 --> 00:09:16.704
and just search something that uses the keyword, right?

00:09:17.152 --> 00:09:19.776
But we will not do this one. But we can

00:09:20.640 --> 00:09:22.944
try to search something as a sentence,

00:09:24.320 --> 00:09:24.640
right?

00:09:25.504 --> 00:09:27.104
And we're going to use LLMs

00:09:27.424 --> 00:09:29.184
to convert this one into the

00:09:29.856 --> 00:09:31.520
numeric representations.

00:09:32.512 --> 00:09:34.080
Actually, it should be like ones and zeros.

00:09:35.840 --> 00:09:37.600
And then, try to search based on

00:09:37.888 --> 00:09:39.936
these numbers. So why do we need to

00:09:40.896 --> 00:09:45.408
convert our sentence or search to numbers? Because numbers could represent something that

00:09:45.760 --> 00:09:49.632
is wider or more dynamic. So, because

00:09:50.496 --> 00:09:54.208
after we convert this one into numbers, we will search

00:09:54.368 --> 00:09:56.512
the data based on a number as well.

00:09:57.504 --> 00:10:00.448
That means the data that we're going to store in the database

00:10:01.280 --> 00:10:03.520
is also stored as a number as well.

00:10:04.320 --> 00:10:09.824
So when we are going to store this kind of data, you need to look for some database that we call

00:10:09.984 --> 00:10:11.168
vector database.

00:10:11.968 --> 00:10:16.352
And then we can use our search engine to search it on the vectors.

00:10:17.344 --> 00:10:22.176
This is what we are going to do, and today we will not focus on

00:10:22.336 --> 00:10:25.792
this part or other part to part

00:10:26.336 --> 00:10:29.088
about generation, but we will focus on this part,

00:10:29.568 --> 00:10:33.632
how we're going to import the data, and how we are going to search our data.

00:10:34.496 --> 00:10:36.192
And today, our components,

00:10:36.672 --> 00:10:39.552
of course, this database is MongoDB,

00:10:40.352 --> 00:10:43.680
because MongoDB is designed to store the

00:10:44.256 --> 00:10:47.040
JSON format data, right? And it's also

00:10:47.456 --> 00:10:50.016
optimized for vectors database as well.

00:10:50.272 --> 00:10:53.664
So that means you can store your data like

00:10:53.856 --> 00:10:57.088
the original data along with the vector data as well.

00:10:57.760 --> 00:10:58.880
And you can use

00:10:59.936 --> 00:11:02.336
our search engine. We call it Atlas

00:11:03.232 --> 00:11:04.352
vector search

00:11:06.656 --> 00:11:07.488
to search our data.

00:11:08.288 --> 00:11:11.808
So actually, normally, this process is quite complicated, but

00:11:12.640 --> 00:11:17.184
MongoDB makes this thing easier, but I'm not sure it's really as easy as

00:11:17.600 --> 00:11:20.512
I'm not sure you're going to think the same as me, but this process is

00:11:20.640 --> 00:11:22.528
much easier than previously as well.

00:11:23.424 --> 00:11:24.640
So, let's see.

00:11:25.920 --> 00:11:27.360
What do we need to do?

00:11:28.000 --> 00:11:29.440
I will

00:11:30.176 --> 00:11:30.464
Okay.

00:11:31.968 --> 00:11:35.680
Okay. So, I will refer to my demonstrations.

00:11:36.096 --> 00:11:39.712
In this system, I'm going to build the application that helps users to search

00:11:39.872 --> 00:11:43.712
anime easier based on human language, right?

00:11:43.776 --> 00:11:48.928
So, that means we need to have the database of anime first. So, the first thing I need to do is

00:11:49.696 --> 00:11:50.336
Um,

00:11:51.488 --> 00:11:53.440
to load the database.

00:11:54.816 --> 00:11:58.112
Load the data somewhere else to MongoDB.

00:11:58.784 --> 00:11:59.104
So,

00:11:59.616 --> 00:12:04.672
this part I chose to get this one from my anime

00:12:05.056 --> 00:12:06.080
list web

00:12:06.720 --> 00:12:10.656
to get the list of animes. And then, I do one thing.

00:12:11.744 --> 00:12:12.384
I convert it

00:12:12.928 --> 00:12:14.752
to numbers.

00:12:15.552 --> 00:12:18.432
So, to convert this one to numbers, how to do this?

00:12:18.880 --> 00:12:21.120
I use the LLMs.

00:12:21.792 --> 00:12:24.096
But, this LLM is an embedding model.

00:12:24.512 --> 00:12:27.808
Basically, an embedding model is another language model, but it

00:12:28.160 --> 00:12:29.920
like language model, but it

00:12:29.984 --> 00:12:31.808
specializes in converting your

00:12:31.936 --> 00:12:35.104
text into numbers. And let me send it

00:12:35.424 --> 00:12:38.624
like different dimension. It's on its info.

00:12:39.040 --> 00:12:40.704
So, that means if you have, like,

00:12:40.928 --> 00:12:42.528
the back or like

00:12:42.720 --> 00:12:45.568
synopsis of that anime, it will convert

00:12:45.760 --> 00:12:48.960
the whole story into the numeric representations.

00:12:49.536 --> 00:12:50.944
So, in this part,

00:12:51.328 --> 00:12:56.896
I'm using a REST API to get the whole story of my anime

00:12:56.960 --> 00:13:02.304
and ask my LLMs to convert this one into the numbers, and then just

00:13:02.656 --> 00:13:07.296
insert the numbers along with the full document into MongoDB. This is the first step.

00:13:08.320 --> 00:13:11.712
So that means after I insert, I will get something like this.

00:13:12.288 --> 00:13:14.272
This is it.

00:13:15.040 --> 00:13:16.736
Is here? Oh, no. This one.

00:13:18.496 --> 00:13:20.768
So after I insert my data,

00:13:21.312 --> 00:13:26.048
as a number numeric representations along with my full data.

00:13:26.112 --> 00:13:28.800
So of course, here is my original data, right?

00:13:29.408 --> 00:13:32.768
But here, I have the semantic embeddings.

00:13:33.248 --> 00:13:36.000
This is what I convert by using LLMs

00:13:36.608 --> 00:13:37.120
to convert

00:13:38.336 --> 00:13:40.896
the whole text of this one of semantics.

00:13:41.344 --> 00:13:44.672
semantics and then convert into the number like this one.

00:13:46.048 --> 00:13:48.832
So that means, this data is ready to

00:13:49.184 --> 00:13:51.616
search by using vector search. So,

00:13:51.776 --> 00:13:53.760
you can think about like

00:13:54.368 --> 00:13:55.872
So, how are we going to use vector search?

00:13:56.224 --> 00:13:58.208
Do I need to create a new

00:13:58.400 --> 00:14:01.440
vector search engine, or do I need to install something else?

00:14:01.920 --> 00:14:05.024
Luckily, in MongoDB, we already embedded the search

00:14:05.216 --> 00:14:08.864
vector search engine and text search engine for you. But as of now,

00:14:09.056 --> 00:14:13.024
that engine is only available on cloud versions, but

00:14:13.568 --> 00:14:16.832
I'm hoping this year they will enable you to install it on your

00:14:16.864 --> 00:14:18.368
local machines.

00:14:18.720 --> 00:14:20.672
So today,

00:14:20.960 --> 00:14:26.752
I installed the cloud version of MongoDB on my computer by using development tools. So,

00:14:26.816 --> 00:14:28.896
that means I don't need to connect to the internet at all.

00:14:29.952 --> 00:14:30.528
So,

00:14:31.040 --> 00:14:35.008
I just create my search index here.

00:14:36.928 --> 00:14:42.080
Before my session, I created a search index

00:14:42.208 --> 00:14:45.536
to tell my MongoDB vector search to know

00:14:45.824 --> 00:14:50.944
which field is the vectors

00:14:52.192 --> 00:14:57.888
types. So I just create my search index in MongoDB directly, and then

00:14:58.464 --> 00:15:02.528
just set the type into vectors, and then set the path.

00:15:02.976 --> 00:15:08.448
So path, it means which field that we are going to use as a vector search. So from here, I just

00:15:08.576 --> 00:15:09.024
set

00:15:09.792 --> 00:15:12.320
I need to use the Semantic

00:15:12.992 --> 00:15:15.936
I will, you know, I need to copy the whole of the text.

00:15:16.704 --> 00:15:17.536
Yep, yeah.

00:15:19.136 --> 00:15:23.712
So to do so, in MongoDB Atlas, after you create MongoDB Atlas, and it's free,

00:15:24.064 --> 00:15:25.728
you just create your search index.

00:15:26.176 --> 00:15:28.416
and set the vector search like this.

00:15:29.344 --> 00:15:32.960
just choose the path to be the path that you store the vectors at.

00:15:33.312 --> 00:15:35.424
And then, you just set your

00:15:35.808 --> 00:15:39.488
Dimensions, number of dimensions. So how can we find this one?

00:15:39.744 --> 00:15:42.752
It's based on your LLMs

00:15:42.816 --> 00:15:44.512
or LLM, whichever one that you use.

00:15:44.608 --> 00:15:46.112
So for me, I use

00:15:46.176 --> 00:15:49.472
I forgot which one I used for this section.

00:15:50.112 --> 00:15:53.056
I used the

00:15:53.696 --> 00:15:54.848
Oh, Nomic Embed

00:15:55.456 --> 00:15:57.376
embed text. So this,

00:15:57.504 --> 00:16:00.768
the number of dimensions is based, it depends on your

00:16:01.024 --> 00:16:03.456
models that you choose. So that means

00:16:03.840 --> 00:16:05.440
my Nomic

00:16:05.664 --> 00:16:07.552
models, they have

00:16:07.776 --> 00:16:09.504
768

00:16:09.632 --> 00:16:12.576
dimensions. So here, I just put

00:16:12.864 --> 00:16:16.064
this one to be 768 dimensions.

00:16:16.928 --> 00:16:20.928
To find this one, you can check on your model documentation, they would

00:16:20.960 --> 00:16:24.448
tell you how many dimensions it will return back to you.

00:16:25.472 --> 00:16:27.584
And next, it's similarities.

00:16:27.712 --> 00:16:30.560
So, similarity basically is going to be like

00:16:30.784 --> 00:16:32.512
the function in mathematics

00:16:32.704 --> 00:16:36.832
will help us to search or match something that is similar together.

00:16:37.344 --> 00:16:40.192
So here we have three choices of similarity. We have

00:16:40.384 --> 00:16:44.576
Euclidean, cosine, and dot products. So, you may like

00:16:44.832 --> 00:16:49.984
Okay. Now I have to extend the mathematics class. Actually, yeah, if you need to

00:16:50.144 --> 00:16:53.984
deep understanding of it. But for me today, I'm going to use cosine.

00:16:54.048 --> 00:16:57.440
Because cosine is good for finding something that

00:16:58.048 --> 00:17:00.096
is similar or close together

00:17:00.416 --> 00:17:03.712
in terms of distance. So, I will use the cosine.

00:17:04.352 --> 00:17:08.288
So, to understand the other function, you can check on the MongoDB documentation as well.

00:17:09.887 --> 00:17:12.352
So, I just set this one as cosine.

00:17:14.016 --> 00:17:14.912
And then,

00:17:18.560 --> 00:17:21.152
change the index name to be something different,

00:17:22.656 --> 00:17:24.160
like this. And now it's

00:17:24.960 --> 00:17:27.232
So now, your database

00:17:27.584 --> 00:17:29.792
will be available for you to set as a vector search.

00:17:30.912 --> 00:17:31.904
and text search.

00:17:33.024 --> 00:17:34.208
So, to search this one,

00:17:35.072 --> 00:17:39.648
we just type your sentence. But your sentence, as of now, is still a string, right?

00:17:39.840 --> 00:17:43.136
as human text. So that means we need to convert this one

00:17:43.200 --> 00:17:45.152
into human text, okay? And as well

00:17:45.856 --> 00:17:48.512
So, if you go to my GitHub, I will

00:17:49.024 --> 00:17:49.472
Oops.

00:17:52.160 --> 00:17:52.416
It's gone.

00:17:53.760 --> 00:17:54.560
My GitHub is gone.

00:17:55.552 --> 00:17:57.088
Let me check. What happened?

00:17:58.816 --> 00:17:59.488
Hello.

00:18:03.296 --> 00:18:03.968
Hey.

00:18:04.512 --> 00:18:06.656
Anyone here? Riffy?

00:18:07.168 --> 00:18:07.872
Is that back?

00:18:10.592 --> 00:18:11.648
So, yeah. So that

00:18:12.416 --> 00:18:15.168
Screen is up. Okay, now it's back.

00:18:15.776 --> 00:18:16.704
Just like, yeah.

00:18:17.760 --> 00:18:19.360
I don't need this doc, actually.

00:18:19.968 --> 00:18:20.128
Yep.

00:18:21.376 --> 00:18:25.824
So, actually, you can check my source code from here and you can go along with me.

00:18:26.688 --> 00:18:27.776
But

00:18:28.480 --> 00:18:30.016
Yeah, as of now, my

00:18:30.304 --> 00:18:35.648
my source code that I pushed to my GitHub is not finished yet. I will put it up later.

00:18:36.128 --> 00:18:41.504
Yeah, I just finished this one when I came here on stage. So, yep.

00:18:42.464 --> 00:18:45.984
So, when I go to my repository, you're gonna notice that it's not

00:18:46.656 --> 00:18:47.232
completed.

00:18:48.352 --> 00:18:51.648
But the whole thing is inside here

00:18:52.000 --> 00:18:53.600
in the anime pullers.

00:18:53.792 --> 00:18:57.312
So, of course, I created this folder to ingest my data into MongoDB.

00:18:57.408 --> 00:19:00.224
But

00:19:00.576 --> 00:19:03.520
Yep. As of now, I use this one for demonstration, as well.

00:19:04.352 --> 00:19:04.736
So,

00:19:05.600 --> 00:19:11.072
after I convert my data and insert and create the index for vector search, right?

00:19:11.328 --> 00:19:14.304
So I just need to create the search system.

00:19:14.976 --> 00:19:20.480
So in my file, you will notice that I have search.ts here.

00:19:20.928 --> 00:19:22.272
So

00:19:23.072 --> 00:19:26.752
I hope this file will explain

00:19:26.816 --> 00:19:28.704
how MongoDB search

00:19:29.120 --> 00:19:30.688
to you.

00:19:31.264 --> 00:19:32.224
I mean like

00:19:34.464 --> 00:19:39.008
easier to understand. So here, in this process, what I have to do,

00:19:39.680 --> 00:19:40.736
I just receive

00:19:41.280 --> 00:19:43.840
retrieve the input from the users.

00:19:44.128 --> 00:19:45.632
And then I just

00:19:46.272 --> 00:19:48.192
convert this one to be the embedded

00:19:49.056 --> 00:19:54.368
representation as numeric representations. And then it just

00:19:54.656 --> 00:19:57.856
search straightforwardly into MongoDB like this.

00:19:58.816 --> 00:20:01.376
So here, this is my input.

00:20:02.560 --> 00:20:04.352
And then it will search for

00:20:04.864 --> 00:20:07.712
from this collection, anime list.

00:20:08.448 --> 00:20:13.248
And it will try to find like 500 candidates that

00:20:13.440 --> 00:20:16.800
could have something similar to what I am searching for.

00:20:17.472 --> 00:20:20.096
and return up to 100

00:20:20.608 --> 00:20:21.632
search results back to me.

00:20:22.752 --> 00:20:26.688
And it will return the

00:20:27.360 --> 00:20:29.664
results of searching. I will show you.

00:20:30.336 --> 00:20:32.160
Anyone here would like to search some

00:20:32.576 --> 00:20:34.112
cartoon? You have some

00:20:34.464 --> 00:20:36.288
cartoom that you'd like to search?

00:20:36.960 --> 00:20:40.320
Dragon Ball. Dragon Ball, right? Okay. Let me try to search.

00:20:41.184 --> 00:20:43.680
So, instead of searching Dragon Ball,

00:20:43.936 --> 00:20:47.200
directly, I use search based on its semantics.

00:20:47.712 --> 00:20:51.392
Like, let me try.

00:20:56.672 --> 00:20:57.248
Give me a moment.

00:20:58.496 --> 00:21:01.824
So, I just

00:21:02.528 --> 00:21:05.248
I just need to say it like this. Okay.

00:21:05.824 --> 00:21:07.360
So I just put what,

00:21:07.872 --> 00:21:12.128
I need to search for. I will search for like story about

00:21:16.768 --> 00:21:20.864
How do you, how do we call Goku?

00:21:25.952 --> 00:21:29.888
I mean like, the type of the super human, how do we say,

00:21:30.912 --> 00:21:33.696
A Super Saiyan. Okay. The story about Super Saiyan.

00:21:34.592 --> 00:21:36.416
How do you spell Saiyan?

00:21:36.608 --> 00:21:38.976
S E Y, right? S A

00:21:39.648 --> 00:21:40.032
I

00:21:41.376 --> 00:21:42.880
S A I. Oh.

00:21:44.384 --> 00:21:45.184
A N Y A, right?

00:21:45.696 --> 00:21:46.816
Y A N. Y A N.

00:21:47.360 --> 00:21:50.880
Saiyans. To collect

00:21:52.576 --> 00:21:53.216
seven

00:21:54.816 --> 00:21:56.864
balls.

00:21:58.464 --> 00:21:58.784
Okay.

00:21:59.648 --> 00:21:59.712
Huh.

00:22:03.168 --> 00:22:05.216
Dragon Ball's awesome.

00:22:07.968 --> 00:22:08.416
And this one.

00:22:11.104 --> 00:22:11.456
Okay.

00:22:13.408 --> 00:22:17.696
I will search with a small like this. Okay, let's try to see.

00:22:18.912 --> 00:22:20.128
Gonna think, why?

00:22:20.768 --> 00:22:21.984
Because I removed

00:22:23.104 --> 00:22:23.520
this one.

00:22:24.416 --> 00:22:28.448
Yeah, I call this one. Yep, I was there.

00:22:30.048 --> 00:22:31.520
Okay, that is return.

00:22:32.128 --> 00:22:33.056
Like Dragon Ball.

00:22:34.016 --> 00:22:34.528
Like this.

00:22:35.808 --> 00:22:37.248
Okay.

00:22:38.336 --> 00:22:41.696
I didn't include the Dragon in my search at all.

00:22:43.008 --> 00:22:45.344
But I was just talking about something like

00:22:45.824 --> 00:22:49.248
Super Saiyan, right? Or I would like to try something different, like

00:22:49.856 --> 00:22:51.776
study about

00:22:53.056 --> 00:22:55.360
Do you have some idea about

00:22:55.904 --> 00:22:56.928
One Piece, right?

00:22:57.728 --> 00:23:01.792
Oh, I think Luffy is maybe quite too straightforward, so I'm gonna try like

00:23:02.112 --> 00:23:04.064
Pirate.

00:23:06.624 --> 00:23:08.736
I will accidentally

00:23:09.376 --> 00:23:12.512
misspell as well. Pirate to

00:23:13.024 --> 00:23:16.256
find the precious

00:23:20.224 --> 00:23:22.432
I never searched about this one before.

00:23:22.560 --> 00:23:24.192
But let's see what I got from here.

00:23:26.240 --> 00:23:28.224
I know about

00:23:28.512 --> 00:23:30.016
One Piece at all. Oh, it's here.

00:23:30.976 --> 00:23:32.672
Yeah, it may be not a top

00:23:33.088 --> 00:23:36.416
Top results, but it's also included here as well.

00:23:38.240 --> 00:23:40.768
So this is what I can do from here.

00:23:42.592 --> 00:23:46.048
Before I end my session, I want to show you how to

00:23:46.464 --> 00:23:51.520
ingest my data and convert into vector representations.

00:23:51.968 --> 00:23:56.320
So you can go back, you can open my start producer actually.

00:23:56.800 --> 00:23:58.496
So because I just

00:23:59.328 --> 00:24:04.512
do this demonstration this afternoon, so that means I need to

00:24:04.864 --> 00:24:07.008
ingest like a thousand of

00:24:07.136 --> 00:24:09.088
anime into my computer directly.

00:24:09.344 --> 00:24:13.440
So instead of just using a for loop, I use Kafka instead.

00:24:13.600 --> 00:24:17.024
So from here, I'm just pulling the data

00:24:17.472 --> 00:24:19.936
from my anime list, right?

00:24:20.256 --> 00:24:22.592
So if you go to this file, get anime.

00:24:26.400 --> 00:24:28.640
I just get all anime and keep

00:24:29.152 --> 00:24:32.736
looping until keep going to the next page and next page.

00:24:33.696 --> 00:24:34.240
And then

00:24:35.424 --> 00:24:38.464
I will send to the next step

00:24:39.424 --> 00:24:40.128
to embed

00:24:40.864 --> 00:24:41.632
my data.

00:24:42.784 --> 00:24:43.840
So after I got

00:24:44.384 --> 00:24:48.928
a bunch of data already, I just do the same thing as I have done with searching.

00:24:49.440 --> 00:24:51.840
So I just convert it back to be like

00:24:52.192 --> 00:24:55.136
I just convert it into the vector search.

00:24:55.488 --> 00:24:58.048
into vector representations.

00:24:59.072 --> 00:25:01.920
I just insert it directly into my database.

00:25:04.096 --> 00:25:06.240
And so that, it's done.

00:25:07.296 --> 00:25:09.856
So, in this process, you may not be able to see the search UI at all

00:25:09.888 --> 00:25:13.696
because this one it will be on the back end part.

00:25:13.760 --> 00:25:16.832
So, it's going to be about how we are going to

00:25:17.280 --> 00:25:19.136
convert my data, how we're going to send it.

00:25:19.776 --> 00:25:20.448
So,

00:25:21.152 --> 00:25:22.848
Yep, that's about the process.

00:25:23.648 --> 00:25:29.568
But from here you may see the other files as well because we see essentially

00:25:29.632 --> 00:25:34.976
inserted the wrong data, and I also included the adults anime here as well. So,

00:25:35.360 --> 00:25:37.824
I need to include it later on.

00:25:39.072 --> 00:25:42.432
Yeah, so it's quite complex here.

00:25:42.912 --> 00:25:45.536
I mean, the way I represent

00:25:45.856 --> 00:25:48.384
represent the source code here.

00:25:48.992 --> 00:25:49.280
But

00:25:49.984 --> 00:25:53.184
I hope you can understand and get some idea about

00:25:53.312 --> 00:25:55.200
how the vector search works here.

00:25:56.032 --> 00:25:59.200
Well, I will open the floor for you to ask me about

00:25:59.488 --> 00:26:02.048
the process or need me to clarify something here.

00:26:02.784 --> 00:26:05.472
Anyone that would like to ask me about this one?

00:26:07.392 --> 00:26:07.936
Yes

00:26:12.480 --> 00:26:17.760
Okay, let me ขอบคุณค่ะ Yes ครับ เอ่อ แบบว่า for

00:26:18.464 --> 00:26:20.192
when you embed the data of

00:26:20.448 --> 00:26:22.144
to store in the database, does it

00:26:22.272 --> 00:26:26.080
Does it need to be the same model that you use to search, or

00:26:26.112 --> 00:26:29.056
if we decide to change the model, do we have to

00:26:29.312 --> 00:26:30.880
Redo the database?

00:26:31.648 --> 00:26:33.216
Awesome. That's a very good question.

00:26:33.376 --> 00:26:36.960
I also have the same question as you did before. So, yes, of course,

00:26:37.280 --> 00:26:39.680
you need to use the same model to search.

00:26:40.288 --> 00:26:42.528
The same model as you store your data

00:26:42.976 --> 00:26:47.616
to search as well. And if you would like to change the model, yes, that's right. You need to

00:26:48.448 --> 00:26:50.528
re-embed once again.

00:26:51.168 --> 00:26:55.040
Like what I have done here. So you will see that I have one file

00:26:55.520 --> 00:26:57.024
named re-embed it.

00:26:57.440 --> 00:26:59.776
So, yes, because I changed my mind

00:26:59.968 --> 00:27:03.232
to change my data structure that I just embedded.

00:27:03.520 --> 00:27:07.360
So that means I need to start over again to ingest my data.

00:27:08.352 --> 00:27:09.120
That's right.

00:27:10.560 --> 00:27:11.328
Okay.

00:27:12.416 --> 00:27:14.048
Thank you so much for your question, by the way.

00:27:14.752 --> 00:27:15.456
Any questions?

00:27:17.312 --> 00:27:17.600
Yes.

00:27:21.984 --> 00:27:26.400
Yeah, so I think many of us might not

00:27:26.784 --> 00:27:32.288
know much about text embedding or something like that.

00:27:33.216 --> 00:27:34.688
If there any

00:27:35.392 --> 00:27:37.920
advice on how to choose it, which

00:27:38.304 --> 00:27:40.448
which embedding model is

00:27:41.056 --> 00:27:44.160
suitable for what kind of search?

00:27:44.384 --> 00:27:46.144
Okay. Yeah. Thank you so much. So,

00:27:46.496 --> 00:27:49.472
That's also a good question, as well. So, actually,

00:27:49.472 --> 00:27:54.784
the model, you need to do some benchmarking as well, testing with your dataset, or maybe you need to

00:27:54.976 --> 00:27:57.984
read through the documentation because it depends on

00:27:58.016 --> 00:27:59.744
what kind of dataset you have.

00:27:59.872 --> 00:28:01.920
What are your data languages?

00:28:02.144 --> 00:28:06.816
So you need to check on that. For me, I used to use Nomix because it's good at

00:28:06.848 --> 00:28:08.576
both Thai and English as well.

00:28:08.896 --> 00:28:12.352
And as I checked on benchmarking, it

00:28:12.736 --> 00:28:15.296
has a good result, and in terms of

00:28:15.520 --> 00:28:20.064
performance to execute on my computer, it doesn't use much time to convert it.

00:28:20.704 --> 00:28:21.088
Yeah.

00:28:21.792 --> 00:28:22.496
That's right.

00:28:23.072 --> 00:28:24.768
Thank you so much for your question.

00:28:24.992 --> 00:28:26.944
Because we still have time, right?

00:28:27.008 --> 00:28:29.856
I will try to start over five minutes, right? Oh,

00:28:30.432 --> 00:28:30.752
Okay.

00:28:30.848 --> 00:28:36.480
I will try. So actually, I could try to create the whole new projects. And of course,

00:28:36.512 --> 00:28:39.968
this demo could fail, so let's try.

00:28:40.480 --> 00:28:40.800
So,

00:28:41.376 --> 00:28:43.680
I just would like to show you some examples. If

00:28:44.064 --> 00:28:45.632
you go back to your home today,

00:28:45.984 --> 00:28:49.216
what can you do? First of all, just go to MongoDB

00:28:50.560 --> 00:28:51.520
MongoDB Atlas.

00:28:52.032 --> 00:28:54.848
Oops. Yep. My webpage is not finished yet.

00:28:55.200 --> 00:28:58.176
So, first of all, just go to your MongoDB Atlas.

00:29:00.736 --> 00:29:01.824
Give me a second.

00:29:03.648 --> 00:29:07.360
Why do we need to create a MongoDB first? Because we need to have the

00:29:07.712 --> 00:29:10.176
the database to store the data, right?

00:29:10.304 --> 00:29:12.320
So just open your Atlas.

00:29:12.544 --> 00:29:16.768
MongoDB Atlas and create your first cluster. Actually, MongoDB

00:29:17.024 --> 00:29:20.832
we have always free and forever free tiers without

00:29:21.216 --> 00:29:25.984
using your credit card at all. Just create it straightforwardly.

00:29:26.656 --> 00:29:27.392
And then,

00:29:28.544 --> 00:29:29.664
you just

00:29:30.944 --> 00:29:33.184
you got your cluster like this.

00:29:34.304 --> 00:29:34.816
And then,

00:29:36.672 --> 00:29:39.776
and then we need to insert our data.

00:29:40.128 --> 00:29:43.456
As of now, we already got our cluster. Next step,

00:29:43.680 --> 00:29:45.536
we just need the connection string.

00:29:48.896 --> 00:29:54.208
So, from here you can choose any. So I will choose maybe Shell.

00:29:56.416 --> 00:29:59.616
So you can try to connect to your database as well.

00:30:04.096 --> 00:30:05.984
And I need to change my usernames.

00:30:08.928 --> 00:30:10.624
So just need to check that

00:30:10.784 --> 00:30:12.608
my connection is valid.

00:30:13.024 --> 00:30:15.008
So just connect to your database.

00:30:17.824 --> 00:30:18.592
and it's in, like…

00:30:19.136 --> 00:30:21.984
It's not work. Oh, it worked. Awesome. So, that means,

00:30:22.208 --> 00:30:24.448
Right now, we already got our,

00:30:25.120 --> 00:30:26.144
first cluster.

00:30:26.720 --> 00:30:29.088
Next step, you need to ingest your data.

00:30:29.312 --> 00:30:31.968
So, to ingest your data, you need to get ingest

00:30:32.352 --> 00:30:36.768
as a vector search, right? So, I will try to

00:30:37.120 --> 00:30:39.360
insert some random data.

00:30:39.424 --> 00:30:42.464
I will try to create a new file here.

00:30:43.104 --> 00:30:44.480
Let me create

00:30:45.088 --> 00:30:47.168
demo.ts, like this.

00:30:48.224 --> 00:30:48.672
And then

00:30:49.408 --> 00:30:51.808
I will try to insert the story of

00:30:51.872 --> 00:30:53.728
myself and my friends.

00:30:58.176 --> 00:31:03.840
So, I will talk and insert my names and about myself

00:31:04.096 --> 00:31:06.784
into the data.

00:31:06.912 --> 00:31:08.480
So, I will start from me.

00:31:10.496 --> 00:31:12.576
names, like, Job.

00:31:14.176 --> 00:31:16.160
And I will put my description here.

00:31:22.080 --> 00:31:23.296
So,

00:31:23.872 --> 00:31:24.512
or is…

00:31:26.592 --> 00:31:28.064
But that, this is not the name.

00:31:29.088 --> 00:31:31.904
So, I will use nickname instead.

00:31:33.664 --> 00:31:38.080
So, description will be the man

00:31:39.616 --> 00:31:40.352
who

00:31:44.160 --> 00:31:44.960
working at

00:31:47.264 --> 00:31:48.096
MongoDB,

00:31:50.624 --> 00:31:51.712
lonely in Singapore.

00:31:53.632 --> 00:31:54.048
Yeah.

00:31:55.008 --> 00:31:57.920
I need to attack myself first. So sad, no?

00:31:58.464 --> 00:32:01.376
And my friends usually

00:32:03.296 --> 00:32:06.496
And my friend is him, actually.

00:32:09.376 --> 00:32:10.272
visit me.

00:32:11.744 --> 00:32:11.968
At

00:32:12.672 --> 00:32:14.656
2:00 a.m. randomly.

00:32:15.424 --> 00:32:17.792
Yep, I put it like this.

00:32:19.136 --> 00:32:21.792
And then I will try to add another data.

00:32:21.952 --> 00:32:23.936
I will pick my friends, maybe some

00:32:24.352 --> 00:32:26.368
You, I will write about it.

00:32:26.912 --> 00:32:27.296
about you.

00:32:27.840 --> 00:32:28.256
So,

00:32:29.472 --> 00:32:32.000
So this is my friend's name.

00:32:34.144 --> 00:32:35.296
and descriptions

00:32:37.216 --> 00:32:39.008
What should I describe about you?

00:32:40.288 --> 00:32:41.536
Hmm.

00:32:42.912 --> 00:32:43.968
Okay. Maybe like

00:32:47.008 --> 00:32:47.584
A man

00:32:49.504 --> 00:32:50.144
who was

00:32:52.224 --> 00:32:53.056
studying abroad.

00:32:53.856 --> 00:32:54.784
studying abroad

00:32:56.672 --> 00:32:59.008
who was, who was a student

00:33:01.344 --> 00:33:02.144
in Japan.

00:33:02.752 --> 00:33:03.136
Something like that.

00:33:05.472 --> 00:33:08.288
So, actually, it's quite small data, actually. So,

00:33:08.800 --> 00:33:11.744
But I will try to show you how vector search works here.

00:33:11.808 --> 00:33:14.048
So, after you already got your data,

00:33:14.656 --> 00:33:19.072
you need to convert it, right? You just build your first,

00:33:19.808 --> 00:33:21.504
your first converters.

00:33:21.568 --> 00:33:24.672
So, from here, on my computer, I already installed Ollama,

00:33:25.152 --> 00:33:27.200
the application that

00:33:27.424 --> 00:33:29.632
allows you to run your LM locally.

00:33:30.368 --> 00:33:33.536
So, I already

00:33:34.688 --> 00:33:37.984
installed the package to connect to Ollama directly, like this.

00:33:38.880 --> 00:33:41.952
This is my function to convert my data.

00:33:42.400 --> 00:33:45.152
So, I will create other functions.

00:33:45.888 --> 00:33:46.240
Oh.

00:33:46.816 --> 00:33:48.672
มีที่วางไมค์ไหม?

00:33:52.928 --> 00:33:55.680
Okay. I will create one function here,

00:33:56.256 --> 00:33:57.024
like main, right?

00:33:58.080 --> 00:33:59.616
And then, I

00:34:00.832 --> 00:34:02.400
I will convert my data. So,

00:34:02.656 --> 00:34:05.408
To convert the data is very simple. You just loop it.

00:34:06.080 --> 00:34:08.128
And then, just send it directly.

00:34:10.431 --> 00:34:11.007
vector.

00:34:16.416 --> 00:34:18.080
And I will call this one. 

00:34:23.456 --> 00:34:26.592
The co-pilot generated for me. So, we need to.

00:34:26.911 --> 00:34:28.928
JSON stringified first.

00:34:29.376 --> 00:34:33.600
And send it just only like the descriptions, I guess.

00:34:35.487 --> 00:34:37.184
And then, you just put.

00:34:37.568 --> 00:34:39.424
The data structure here.

00:34:39.967 --> 00:34:41.568
Give me a moment.

00:34:43.360 --> 00:34:45.216
Next step, you just insert your data.

00:34:46.176 --> 00:34:48.512
So, you need to connect to MongoDB first.

00:34:49.024 --> 00:34:51.168
So, I will use my function that I already created.

00:34:52.608 --> 00:34:53.376
Connect DB.

00:34:54.176 --> 00:34:55.712
And it needs to be awaited.

00:34:56.447 --> 00:34:56.831
And then.

00:34:58.080 --> 00:34:59.136
I will insert it.

00:35:02.848 --> 00:35:05.312
Collection. Thank you, co-pilot.

00:35:05.888 --> 00:35:08.032
And I just insert one. 

00:35:09.888 --> 00:35:10.304
Like this.

00:35:12.000 --> 00:35:16.928
And of course, we need to include the full document or original document as well.

00:35:17.472 --> 00:35:19.904
So, we can use the object spread to.

00:35:20.416 --> 00:35:22.944
Include all original data.

00:35:23.200 --> 00:35:24.960
And then include the embedding here.

00:35:25.920 --> 00:35:26.208
Right?

00:35:27.584 --> 00:35:31.392
And done. This is the first part of inserting the data.

00:35:31.712 --> 00:35:33.376
So, let's see what it can look like.

00:35:38.368 --> 00:35:40.576
I need to run the demo file.

00:35:42.240 --> 00:35:42.592
Oh.

00:35:43.872 --> 00:35:44.864
Main functions.

00:35:45.600 --> 00:35:46.624
Mhm.

00:35:49.920 --> 00:35:51.936
Oh, yeah, that's right. Thank you so much.

00:35:52.448 --> 00:35:55.808
Yep, it should be on this name. Yeah, nickname. All right.

00:35:57.696 --> 00:35:58.304
And yes.

00:36:00.288 --> 00:36:01.856
And hopefully it

00:36:02.752 --> 00:36:03.104
Done.

00:36:04.992 --> 00:36:08.544
Okay. I think it's done because I didn't pin out anything. Oh,

00:36:08.896 --> 00:36:10.816
And you can see my password live away from here.

00:36:11.168 --> 00:36:12.832
Awesome.

00:36:13.440 --> 00:36:13.536
Yep.

00:36:14.304 --> 00:36:14.848
It's fine.

00:36:15.424 --> 00:36:18.944
So, this one, I just insert into my

00:36:19.040 --> 00:36:21.952
my local Atlas actually. So,

00:36:22.432 --> 00:36:25.120
For you, you just use the normal Atlas,

00:36:25.216 --> 00:36:28.768
like the descriptions. This one just insert to my

00:36:28.864 --> 00:36:30.688
local Atlas here.

00:36:31.232 --> 00:36:33.568
And when you see that, we've got a new

00:36:34.368 --> 00:36:37.152
We should have a new database here, no?

00:36:38.176 --> 00:36:38.560
Why?

00:36:39.936 --> 00:36:40.704
It's not up here.

00:36:41.664 --> 00:36:44.288
this fake database. Oh, it's here.

00:36:44.864 --> 00:36:47.712
Okay. I got a new collection here. Now, you'll see that

00:36:48.256 --> 00:36:50.144
my data, my descriptions

00:36:50.304 --> 00:36:52.032
already convert to vectors, right?

00:36:52.544 --> 00:36:55.584
Next step, we need to search. So to search,

00:36:55.936 --> 00:36:58.272
we just view this is

00:36:58.848 --> 00:37:02.880
So I will create another function here for search.

00:37:04.192 --> 00:37:07.936
I will refer to my previous code source code here.

00:37:08.480 --> 00:37:11.168
Async functions search

00:37:11.712 --> 00:37:13.568
And I will push

00:37:14.272 --> 00:37:15.648
q?: string

00:37:16.480 --> 00:37:16.832
Here

00:37:18.624 --> 00:37:22.464
And of course, we need to retrieve the input.

00:37:22.848 --> 00:37:25.664
Form Q or like form parameters like this.

00:37:26.784 --> 00:37:30.336
Completing. Thank you, Copilot. You helped me a lot. So,

00:37:30.784 --> 00:37:32.512
Yep. And then, we just type

00:37:33.952 --> 00:37:37.184
send our input into generate embedding.

00:37:38.048 --> 00:37:38.560
Like this.

00:37:39.072 --> 00:37:39.488
And then,

00:37:40.128 --> 00:37:42.624
What next? Just connect your MongoDB.

00:37:44.064 --> 00:37:44.608
And

00:37:45.760 --> 00:37:47.072
I think I can copy and paste.

00:37:50.048 --> 00:37:51.392
Okay. So, we just

00:37:53.056 --> 00:37:55.296
We just use

00:37:56.992 --> 00:38:00.416
the aggregation function to people collection.

00:38:01.376 --> 00:38:02.592
as a return result.

00:38:03.296 --> 00:38:05.600
And don't forget to change your path as well.

00:38:06.496 --> 00:38:08.320
So now, for our path, we use

00:38:09.216 --> 00:38:10.144
embedding, right?

00:38:11.040 --> 00:38:11.936
Yep. We use embedding.

00:38:12.736 --> 00:38:13.120
This one.

00:38:15.904 --> 00:38:17.376
And one thing that we forgot,

00:38:19.328 --> 00:38:22.336
We need to create an index for vectors as well.

00:38:24.032 --> 00:38:24.832
We need to come back here.

00:38:25.600 --> 00:38:27.680
And click create search index.

00:38:29.856 --> 00:38:32.928
And we just put our path for embeddings,

00:38:33.632 --> 00:38:35.296
and our model size

00:38:35.904 --> 00:38:36.352
is

00:38:37.152 --> 00:38:38.720
768.

00:38:39.552 --> 00:38:41.504
And we're going to use the cosine similarity functions.

00:38:46.176 --> 00:38:46.400
Yep.

00:38:47.776 --> 00:38:48.736
Okay. Now, it's ready.

00:38:50.016 --> 00:38:50.976
Now, everything looks

00:38:51.968 --> 00:38:52.480
already good.

00:38:53.344 --> 00:38:54.016
I hide

00:38:54.560 --> 00:38:54.944
I will

00:38:55.488 --> 00:38:57.824
I will hide everything as well. I don't need to show it.

00:38:58.848 --> 00:38:59.904
and set it to be an array.

00:39:01.184 --> 00:39:03.232
And console log

00:39:03.776 --> 00:39:04.384
the results

00:39:05.920 --> 00:39:07.296
Okay, I will show only the nickname.

00:39:07.808 --> 00:39:09.408
and I will remove the descriptions

00:39:11.392 --> 00:39:12.832
Alright. Yes.

00:39:13.344 --> 00:39:13.664
the

00:39:14.368 --> 00:39:15.904
Moment of Truths

00:39:17.440 --> 00:39:20.096
Why error here? Let's see.

00:39:20.896 --> 00:39:21.728
What am I missing here?

00:39:24.384 --> 00:39:25.152
What am I missing here?

00:39:27.936 --> 00:39:29.504
I am missing

00:39:30.112 --> 00:39:30.784
parentheses here.

00:39:31.776 --> 00:39:33.376
and change this one to be search.

00:39:37.568 --> 00:39:37.824
Okay.

00:39:38.656 --> 00:39:40.000
And let's try to run this one.

00:39:41.280 --> 00:39:44.672
So I will type Japanese students.

00:39:45.248 --> 00:39:47.424
I think that's too straightforward. Maybe like

00:39:48.448 --> 00:39:50.112
Study abroad, studying abroad.

00:39:54.176 --> 00:39:57.376
Let's see the result. Yep. We got some first, and followed by job.

00:39:57.760 --> 00:40:01.024
Yay! Okay. Yay!

00:40:01.408 --> 00:40:04.960
Time is running out. Sorry. Thank you so much. That's all.

00:40:05.216 --> 00:40:06.976
It's Riffy's idea, not mine.

00:40:08.064 --> 00:40:12.000
Okay. Say bye to Singapore. Bye bye. Thank you.

00:40:12.096 --> 00:40:16.160
Do you want to say any last words? No. I'm just saying

00:40:16.384 --> 00:40:18.336
try to use this.

00:40:18.400 --> 00:40:22.496
Yep. You can come back to check on my repository and try to deploy this one

00:40:22.496 --> 00:40:24.608
with your own MongoDB cluster.

00:40:24.896 --> 00:40:29.856
I mean, MongoDB Atlas cluster. And if you would like to deploy your own MongoDB Atlas

00:40:30.400 --> 00:40:34.112
on your own machine, you just install this thing.

00:40:34.752 --> 00:40:35.808
You need to install

00:40:36.320 --> 00:40:39.552
something we call Atlas CLI.

00:40:40.864 --> 00:40:44.736
Once you install the Atlas CLI, you can deploy

00:40:44.800 --> 00:40:48.096
exactly the same Atlas MongoDB Atlas

00:40:48.448 --> 00:40:49.952
cloud version on your computers.

00:40:50.336 --> 00:40:53.600
features using Atlas followed by deployment

00:40:57.600 --> 00:40:58.496
and setup.

00:40:59.232 --> 00:41:02.816
If I remember correctly, setup type

00:41:04.256 --> 00:41:06.880
Atlas local like this one. I'm not sure.

00:41:07.360 --> 00:41:12.352
You need to install two things: Atlas CLI and Docker. And after that, it will deploy

00:41:13.312 --> 00:41:14.176
it will deploy

00:41:14.816 --> 00:41:17.824
something that's similar to MongoDB Atlas cloud versions.

00:41:18.336 --> 00:41:20.480
I forgot

00:41:20.768 --> 00:41:22.336
the parameters.

00:41:22.464 --> 00:41:26.848
So that means you can try to run your own MongoDB Atlas on your computer directly.

00:41:27.616 --> 00:41:29.184
And it will create a new

00:41:29.216 --> 00:41:31.104
MongoDB containers,

00:41:31.392 --> 00:41:33.408
Docker container with

00:41:33.696 --> 00:41:35.200
containing the MongoDB

00:41:35.392 --> 00:41:38.944
DB Atlas inside, and you can follow the steps.

00:41:39.040 --> 00:41:43.776
And you will get your own MongoDB Atlas on your computers, and enjoy.

00:41:44.448 --> 00:41:46.272
And happy hacking. Thank you so much.

00:41:47.168 --> 00:41:49.344
Thank you. Thank you very much.

00:41:50.176 --> 00:41:51.392
Okay.

00:41:53.376 --> 00:41:55.584
Okay.
