WEBVTT

00:00:01.100 --> 00:00:07.632
โอเคครับ ตอนนี้ใกล้เวลาบ่าย 3 ครึ่งแล้วนะครับ
ก็เดี๋ยวจะเปิด session ต่อไปเลยครับ

00:00:07.700 --> 00:00:14.433
ใน session ต่อไปนี้ก็จะเป็นเรื่องเกี่ยวกับ
Material UI นะครับ ที่เมื่อ 2-3 สัปดาห์ที่แล้ว

00:00:14.500 --> 00:00:18.933
ปล่อยเวอร์ชัน major 6 มา หลังจากกี่ปีนะครับ พี่จุ้น

00:00:19.000 --> 00:00:27.533
3 ปีนะครับ ก็มีอะไรมาใหม่ใน Material UI นี้
ก็ขอเชิญพี่จุ้น Core Contributor ของ Material UI ครับผม

00:00:29.200 --> 00:00:36.133
สวัสดีครับทุกคน ไม่ได้มาพูดนานมาก
เพราะว่าติดอยู่กับอีเวอร์ชันนี้แหละ

00:00:36.200 --> 00:00:37.333
ก็

00:00:39.400 --> 00:00:45.733
สวัสดีครับ ผมชื่อจุ้น ตอนนี้ทำงานเป็น
software engineer อยู่ที่บริษัทชื่อ MUI นะครับ

00:00:45.800 --> 00:00:48.233
มีใครไม่เคยใช้บ้างไหมครับ

00:00:50.200 --> 00:00:55.633
ไม่มีนะ เป็นคำถาม พอรู้ว่าไม่มีใครยกมือ

00:00:57.200 --> 00:01:02.633
สำหรับใครที่ไม่รู้ว่ามันคืออะไร เดี๋ยวเกริ่นอีกนิดนึง

00:01:02.700 --> 00:01:09.032
ตัวนี้ โลโก้นี้นะครับ เป็น open source
React component นะครับ

00:01:09.100 --> 00:01:15.133
ที่เพิ่งครบ 10 ปีไปเมื่อประมาณสัปดาห์ที่แล้วนะครับ

00:01:15.200 --> 00:01:18.333
ถือว่าเป็น library ที่อยู่มาค่อนข้างนานนะครับ

00:01:19.500 --> 00:01:23.532
แล้วก็เริ่มจะมีคนไม่ค่อยใช้กันแล้ว ไม่ใช่

00:01:23.600 --> 00:01:27.532
อันนี้เป็น stats เล็กๆ น้อยๆ ละกัน
ให้ทุกคนเห็นก่อนว่าโปรเจกต์อ่ะ

00:01:27.600 --> 00:01:29.933
มันเป็นโปรเจกต์ size ที่ค่อนข้างใหญ่นะครับ

00:01:30.000 --> 00:01:35.733
มีฐานคนใช้งานอยู่ค่อนข้างเยอะ
เป็นเรื่องสำคัญมาก ที่ผมเข้ามา

00:01:35.800 --> 00:01:41.433
ผมก็เริ่มจะเห็นนะว่าโปรเจกต์ size ใหญ่ๆ เนี่ย
เวลาที่เราจะตัดสินใจทำอะไรเนี่ย มัน

00:01:41.500 --> 00:01:45.333
ต้องคิดเยอะมากกว่าเขียนโค้ดนะครับ

00:01:45.400 --> 00:01:50.133
คือ ณ ปัจจุบันเนี่ย คนใช้งานตัวเว็บไซต์นะ
มันจะมี mui.com เนี่ย

00:01:50.200 --> 00:01:55.233
คือเข้ามา documentation อะไรพวกนี้นะครับ
อยู่ที่ประมาณล้านคนนะ ต่อเดือน

00:01:55.300 --> 00:01:58.133
ก็ถือว่าค่อนข้างเยอะ
อันนี้ global นะครับ ทั่วโลก

00:01:59.200 --> 00:02:04.933
แล้วก็ยอดดาวน์โหลดนะ ปัจจุบันเนี่ย
อยู่ที่ประมาณ 4 ล้านครั้ง อันนี้จาก npm

00:02:06.100 --> 00:02:13.033
ต่อสัปดาห์ ซึ่งคิดเป็นประมาณ 18% ของตัว
React DOM ก็คือ React บนเว็บนะครับ

00:02:13.100 --> 00:02:18.233
ก็นับว่าค่อนข้างเยอะนะ React บนเว็บ
ก็ตอนนี้น่าจะเยอะที่สุด

00:02:18.300 --> 00:02:23.333
ในตลาดของ framework การทำเว็บใช่มั้ย

00:02:23.400 --> 00:02:29.733
ก็คิดว่าไม่น่าจะมีใครที่ไม่ใช้ React เนาะ
จะมี Vue อยู่คนนึง แต่ไม่เป็นไร

00:02:31.100 --> 00:02:37.033
สำหรับตัวบริษัท บริษัทเราเริ่มมาจาก
open source นะครับ แล้วก็

00:02:37.100 --> 00:02:40.433
พอมันมีการใช้งาน คนเริ่มเห็น

00:02:40.500 --> 00:02:44.433
ใช้งานเยอะขึ้นเนี่ย
มันก็เริ่มขยายออกมาเป็นทั้ง open source

00:02:44.500 --> 00:02:47.132
คือบริษัทเรา drive ด้วย open source แล้วก็

00:02:47.200 --> 00:02:50.433
เริ่มจะมี paid product นะครับ
เพื่อเอามา เรียกว่า หมุน

00:02:51.100 --> 00:02:55.833
นะครับ หมุนตัวบริษัทได้
ก็ตอนนี้มีประมาณ 38 คนในบริษัท

00:02:55.900 --> 00:03:00.433
จาก 25 ประเทศ ก็ถือว่าเป็นบริษัทที่แบบ

00:03:00.500 --> 00:03:03.033
ค่อนข้างจะหลากหลาย culture มากนะครับ

00:03:04.300 --> 00:03:09.033
อยู่ทั้งฝั่งเอเชีย ยุโรป แล้วก็ฝั่งที่เป็น US นะครับ

00:03:10.300 --> 00:03:14.833
โอเค อ่ะ ถ้าถามลูกค้าจริงๆ เพราะว่าผมรู้สึกว่า

00:03:14.900 --> 00:03:20.233
บางคนจะมีความสงสัยนะว่า เฮ้ย เดี๋ยวนะ คือเป็นบริษัท open source เอาเงินมาจากไหนวะ

00:03:20.300 --> 00:03:26.233
ใช่มั้ย ก็เรามีทั้งพาร์ทที่เป็นขายด้วยนะ
ขาย product อะไรอย่างเงี้ย

00:03:26.300 --> 00:03:30.433
คือสิ่งที่ผมทำอ่ะ มันเป็น open source ทั้งหมดเลย

00:03:30.500 --> 00:03:33.833
เอ่อ ผม ทีมที่ผมอยู่แล้วกัน open source ทั้งหมด
เพราะฉะนั้นก็จะไม่ได้มีเงินเข้ามา

00:03:33.900 --> 00:03:36.132
เอาง่ายๆ ผมก็คือผลาญเงินบริษัท

00:03:36.200 --> 00:03:40.533
ทุกวันทุกวันนะครับ
แต่มันก็จะมีพาร์ทที่ขาย product ให้กับ

00:03:40.600 --> 00:03:46.733
บริษัทอื่นๆ ซึ่งลูกค้าหลากหลายนะครับ ก็จะมีทั้งเนี่ย

00:03:46.800 --> 00:03:53.733
Fortune 500 ทั้งหลายนะครับ อยู่ในทุกๆ อุตสาหกรรม
ก็จะเหมือนกับเข้ามาซื้อ license อะไรต่างๆ อย่างเงี้ยครับ

00:03:53.800 --> 00:03:56.933
แล้วก็นั่นแหละ เงินพวกนั้นก็คือเอามาจ่าย

00:03:57.000 --> 00:03:58.033
แบบพนักงานนะครับ

00:03:58.900 --> 00:04:02.733
อันนี้ให้เห็นคร่าวๆ นะครับ ว่ามันมี

00:04:02.800 --> 00:04:06.333
บริษัทประมาณนี้ ซึ่งจริงๆ มันมีเยอะมากนะครับ

00:04:06.400 --> 00:04:08.132
ทุกๆ เดือน CEO เค้าก็จะมา

00:04:08.200 --> 00:04:13.733
เล่าให้ฟังว่า เฮ้ย เรามีบริษัทอะไรเข้ามาซื้อ product
เราบ้าง อันนี้ก็นึกว่าเปิดโลกเหมือนกัน

00:04:13.800 --> 00:04:17.433
ตอนที่ผมเข้าไปเห็นครั้งแรกก็
เฮ้ย ไอ้พวกนี้มันซื้อด้วยเหรอวะ

00:04:17.500 --> 00:04:23.633
แบบ ทำไม Microsoft ต้องมาซื้อ อะไรเกี่ยวข้อง
กับ Material UI วะ

00:04:25.400 --> 00:04:28.933
แค่รู้ว่าเค้ามาซื้อ license นะ
แต่ไม่ได้รู้ว่าเค้าเอาไปทำอะไร

00:04:29.000 --> 00:04:31.033
ต้องบอกอย่างนี้

00:04:31.100 --> 00:04:35.033
โอเค ทีนี้เดี๋ยวเรามาเข้าเรื่องกันเลยดีกว่าว่า Material UI

00:04:35.100 --> 00:04:39.233
เวอร์ชัน 5 นะครับ ก็คือปล่อยประมาณ 3 ปีที่แล้ว

00:04:39.300 --> 00:04:44.832
ผ่านมาประมาณ 3 ปีเนี่ย
ก็คือเราพัฒนาตัวเวอร์ชัน 6

00:04:44.900 --> 00:04:51.832
เวอร์ชัน 6 เนี่ยเริ่มพัฒนามาประมาณปีนึง
เราก็ใช้เวลาค่อนข้างจะนานพอสมควร เพราะว่า

00:04:51.900 --> 00:04:55.733
พวกเราน่าจะทราบว่า
ไอ้ช่วงปีที่ผ่านมาเนี่ยมันมี React

00:04:55.800 --> 00:04:57.633
มันมีการเปลี่ยนผ่านที่เป็น

00:04:57.700 --> 00:05:01.733
ไปทาง server เนี่ยค่อนข้างจะเยอะนะครับ
เลยทำให้

00:05:01.800 --> 00:05:05.332
เรื่องของการทำเรื่อง stylesheet
เรื่อง CSS อะไรพวกเนี้ย

00:05:05.400 --> 00:05:09.733
เรียกว่ามันเปลี่ยนโมเดลในการเขียนออกไปนะ

00:05:09.800 --> 00:05:12.533
มีใครเคยใช้แบบ CSS in JS ไหม

00:05:14.500 --> 00:05:21.433
น่าจะเคยได้ยินอยู่นะ
ก็คือปกติเราจะเขียน CSS ในไฟล์ CSS ใช่มั้ย

00:05:21.500 --> 00:05:27.033
แล้วก็ อันนี้คือ basic สุดๆ
ก็คือเขียนไฟล์ CSS แล้วก็แปะลงไปในตัว head

00:05:27.100 --> 00:05:28.433
ลิงก์อะไรพวกเนี้ย

00:05:28.500 --> 00:05:32.633
ทีนี้ในยุคก่อนๆ ประมาณสัก 5 ปีที่แล้วนะครับ

00:05:34.000 --> 00:05:39.633
ecosystem ของ JavaScript
มันก็จะเริ่มโตขึ้น โตขึ้นใช่ป่ะ

00:05:39.700 --> 00:05:44.233
เริ่มมี webpack เริ่มมีอะไรพวกนี้
ทำ module optimization อะไรพวกเนี้ย

00:05:44.300 --> 00:05:46.533
CSS ก็เป็นพาร์ตหนึ่งที่โปรแกรมเมอร์

00:05:46.600 --> 00:05:49.332
ฝั่ง JavaScript ก็อยากที่จะ

00:05:49.400 --> 00:05:54.133
เอาเข้ามาอยู่ในโลกของ JavaScript ด้วย
มันก็เลยเกิดเป็น CSS in JS ขึ้นมา

00:05:54.200 --> 00:06:01.033
ทำให้เราเขียนอยู่ในไฟล์ JavaScript อันเดียว
เขียน CSS เขียน HTML อะไรทุกอย่างยำลงไป

00:06:01.100 --> 00:06:02.233
นะครับ แล้วมันก็

00:06:02.900 --> 00:06:06.633
ปัญหาที่ตามมา จริงๆ อย่าเรียกว่าปัญหาเลย
เรียกว่า consequence แล้วกัน

00:06:06.700 --> 00:06:09.832
มันก็จะเป็นเรื่องความยุ่งยากในการ
manage ฝั่ง server-side

00:06:09.900 --> 00:06:15.033
นะครับ อันนี้ก็จะมีความปวดหัวของ open source ทั้งหลายนะครับ

00:06:16.400 --> 00:06:19.332
ทีนี้เวอร์ชัน 6 เนี่ย เราก็…

00:06:19.400 --> 00:06:23.033
ตัวนั้นน่ะ เดี๋ยวจะเป็นสิ่งที่ผมจะอธิบายให้ฟังตอนสุดท้ายว่า

00:06:23.100 --> 00:06:27.033
เรามีวิธีการแก้ปัญหาตรงนั้นยังไงนะครับ

00:06:27.100 --> 00:06:34.233
เพราะว่า พาร์ตหลักๆ ที่มัน drive
ให้เราออกจาก CSS in JS เนี่ย ก็คือ

00:06:34.300 --> 00:06:39.332
ตัว Next.js นะครับ ที่เขาออกตัว
React Server Component มาใช่ไหม

00:06:39.400 --> 00:06:45.433
แล้วทุกอย่างเนี่ย มันก็ควรจะเป็น static อ่ะ
คือเขาจะแบบ กูจะ static อย่างเดียว server-side

00:06:45.500 --> 00:06:50.233
เอ่อ อยู่ข้างบน server ตลอดอะไรเงี้ย
เพราะฉะนั้นเนี่ย CSS in JS มันจะไม่ค่อยเวิร์ก

00:06:50.300 --> 00:06:53.733
เพราะฉะนั้น Material UI component ณ ตอนเนี้ย
มันก็เลยเป็น

00:06:53.800 --> 00:06:56.233
client component กันหมดนะครับ

00:06:56.300 --> 00:07:03.733
เพราะฉะนั้นเราก็ได้เหมือนกับโดน push มาจากฝั่งผู้ใช้งาน
จากฝั่งบริษัท จากลูกค้า ว่าเมื่อไหร่มึงจะทำสักที

00:07:03.800 --> 00:07:09.933
ให้มัน support ไอ้ React Server Component
เราก็เลยต้องพยายามหา solution ต่างๆ เพื่อให้

00:07:10.000 --> 00:07:13.832
เพื่อให้เราสามารถจะ migrate โค้ด

00:07:13.900 --> 00:07:17.233
โดยที่เราไม่ต้องแก้โค้ดเยอะ อันนี้คือ

00:07:17.300 --> 00:07:22.332
เป็นอีกส่วนหนึ่งนะที่ผมได้เรียนรู้
พอมาทำ open source นะครับ

00:07:22.400 --> 00:07:26.433
เรื่องของ stability
เดี๋ยวผมจะมาพูดตอนสุดท้าย

00:07:26.500 --> 00:07:31.033
เรามาเริ่มจากฟีเจอร์แรกกันก่อนว่า

00:07:31.100 --> 00:07:34.433
เวอร์ชั่นหกมีอะไรใหม่บ้าง
อย่างแรกก็คือ

00:07:34.500 --> 00:07:44.633
เรื่องของ dark mode ที่เราปรับปรุงให้มันดีขึ้น
แล้วก็ง่ายขึ้นนะครับ เดี๋ยวผมจะเปิดโค้ดให้ดู

00:07:44.700 --> 00:07:46.832
จริงๆ เปิดไว้แล้ว

00:07:46.900 --> 00:07:49.332
โอเคครับ อันนี้เป็น…

00:07:49.400 --> 00:07:50.733
ขอขยายนิดหนึ่ง

00:07:58.000 --> 00:08:00.633
อันนี้ก็เป็น Material UI Component นะครับ

00:08:00.700 --> 00:08:05.033
ที่จริง ๆ อันนี้เป็นเวอร์ชัน 6 แล้ว แต่ว่ายังไม่ได้

00:08:05.100 --> 00:08:10.832
ใส่ฟีเจอร์ใหม่เข้าไป อันนี้เป็น blog page ธรรมดา

00:08:10.900 --> 00:08:15.033
ไม่ใช้ Material UI Component นะ ทีนี้

00:08:15.100 --> 00:08:21.033
มีใครในนี้ทำ dark mode ให้กับเว็บไซต์ของตัวเองบ้าง

00:08:21.100 --> 00:08:27.533
มีใครไหม สมัยนี้ dark mode มันก็น่าจะเป็นพื้นฐาน

00:08:27.600 --> 00:08:32.433
ทีนี้ใน Material UI เวอร์ชันเก่า จริง ๆ ก็เวอร์ชันปัจจุบัน

00:08:32.500 --> 00:08:37.832
เวลาที่เราจะทำ dark mode เนี่ย
ส่วนใหญ่เราก็จะเก็บ state ไว้ถูกป่ะ

00:08:37.900 --> 00:08:41.533
มี state อันหนึ่งใช่ป่ะ ที่บอกว่า โอเค ตอนนี้ฉันอยู่ light mode

00:08:41.600 --> 00:08:47.733
เสร็จแล้ว ถ้า user เขามีการเลือกโหมด dark mode
เราก็จะไปเปลี่ยน state ธรรมดา

00:08:47.800 --> 00:08:51.733
ปึ้ง แบบนี้ใช่ไหม แล้วก็มันจะกลายเป็น

00:08:52.700 --> 00:08:58.033
dark mode แบบนี้นะครับ
เอาง่ายๆ คือเราเป็นคนจัดการ state ตรงนี้เอง

00:08:58.100 --> 00:09:03.133
นี่คือ basic แต่ว่าเรื่องของการทำ dark mode
จริง ๆ มันมี detail ค่อนข้างเยอะ

00:09:03.200 --> 00:09:08.633
มันจะมีฟีเจอร์ข้างในของมันอีกค่อนข้างเยอะ
อย่างเช่น อันแรกเนี่ย System Preference

00:09:08.700 --> 00:09:12.233
นะครับ ตัวที่เหมือนเป็นฟีเจอร์ที่

00:09:12.300 --> 00:09:18.533
ให้มันดูสิ่งที่ user เขาเลือกไว้ แล้วก็เปลี่ยนโหมดเอง

00:09:18.600 --> 00:09:24.633
โดยที่เขาไม่ต้องมาเปลี่ยนเองครับ ซึ่งตรงนั้นน่ะ
เราสามารถ test ได้จาก

00:09:24.700 --> 00:09:30.733
Chrome DevTools ด้วยก็ได้ เดี๋ยวพอ enable แล้วจะ test ให้ดูนะ

00:09:30.800 --> 00:09:34.833
อันนี้คือฟีเจอร์ detail อันแรกนะ ที่ส่วนใหญ่
ที่ทำ dark mode แล้วต้องมาทำอันนี้อีก

00:09:34.900 --> 00:09:39.833
นะครับ อันที่ 2 ก็คือเรื่องของการ synchronization
ระหว่างแท็บ สมมุติเราเปิด

00:09:39.900 --> 00:09:43.433
มีเว็บเราใช่ป่ะ แล้วลูกค้าเปิดหลายแท็บมากเลย

00:09:43.500 --> 00:09:49.633
ถ้าเกิดว่าเราไม่ซิงค์แต่ละแท็บ
เวลาเขาไปเปลี่ยน dark mode ที่แท็บหนึ่งใช่ป่ะ

00:09:49.700 --> 00:09:54.733
แท็บอื่นมันก็จะไม่ได้ effect
เพราะว่ามันมี state ของแต่ละแท็บแยกกัน

00:09:54.800 --> 00:09:58.533
นะครับ อันนี้เราก็ต้องมาทำเพิ่มนะครับ

00:09:58.600 --> 00:10:04.033
อันที่ 3 ก็คือเป็นเรื่องของ detail เล็ก ๆ น้อย ๆ นะครับ เรื่องของ UX

00:10:04.100 --> 00:10:10.533
ก็จะเป็น transition เวลาที่เราเปลี่ยนโหมด
แล้วมันมีการ transition เดี๋ยวผมจะเปิด

00:10:10.600 --> 00:10:15.033
ตัวอย่างให้ดูนะครับ อันนี้คือตัวอย่างหนึ่งที่

00:10:15.100 --> 00:10:21.733
ทำตัว transition เพิ่มแล้วนะ
เรียกว่าเป็นการ disable transition
สมมุติว่าผมกด dark mode ใช่ป่ะ

00:10:21.800 --> 00:10:27.833
เราจะเห็นว่าทุกอย่างมันจะเปลี่ยนกับพริบ
ทันทีนะครับ แต่ว่า ถ้า

00:10:27.900 --> 00:10:31.633
ในเว็บส่วนใหญ่เนี่ย ที่ยังไม่ได้ทำอ่ะ มันจะเป็นประมาณนี้

00:10:36.100 --> 00:10:40.533
ลองดูมุมซ้ายนะครับ
เวลาที่เราเปลี่ยนโหมดปุ๊บเนี่ย

00:10:41.300 --> 00:10:47.033
สังเกตว่า เห็นไหม มันจะมี transition บุ๊บๆ อย่างนี้ใช่ไหมครับ

00:10:47.100 --> 00:10:53.333
ทีนี้ลองจินตนาการว่าเว็บเราเนี่ย
มันมี transition พวกนี้อยู่ค่อนข้างเยอะใช่ป่ะ

00:10:53.400 --> 00:10:59.733
มี background นู่น นี่ นั่น อะไรอย่างเงี้ย
ซึ่งแต่ละ transition นี่หมายถึง CSS transition นะ

00:10:59.800 --> 00:11:05.333
เสร็จแล้วพอเราเปลี่ยนโหมดอะไรพวกเนี้ย
บางทีมันจะวื๊บช้า วื๊บเร็ว

00:11:05.400 --> 00:11:10.933
ไม่เหมือนกันสักที่นึงนะครับ
ซึ่งตรงนั้นเป็นเรื่องของ CSS ปกติอยู่แล้วนะ

00:11:11.000 --> 00:11:16.033
บางทีมันจะดูแล้วมันจะรำคาญตาอะไรอย่างเงี้ย

00:11:16.100 --> 00:11:22.433
บางคนส่วนใหญ่เขาจะ disable กัน อย่างเช่น
สมมุติว่าถ้าเราเข้าไปที่เว็บ

00:11:22.500 --> 00:11:24.333
อย่าง Tailwind อะไรอย่างเงี้ยครับ มันก็จะ

00:11:26.200 --> 00:11:31.833
อันนี้ เห็นไหมครับ มันก็จะไม่มี transition อะไรให้มันมากวนตาเท่าไหร่นะครับ

00:11:33.000 --> 00:11:38.733
อันนี้เป็น detail เล็กๆ น้อยๆ
ที่เราต้องทำเองอยู่ ณ ตอนนี้นะครับ

00:11:40.700 --> 00:11:43.033
แล้วเรื่องสุดท้ายก็จะเป็น

00:11:43.100 --> 00:11:47.833
เรื่องการทำ server-side เดี๋ยวผมเปิดตัวอย่างให้ดู

00:11:47.900 --> 00:11:53.133
ตอนนี้อย่างเช่น ปัญหา ยกตัวอย่างเว็บ Material UI เลย

00:11:53.200 --> 00:11:55.033
มี feature แต่ว่ายังไม่ได้แก้นะครับ

00:11:55.900 --> 00:12:01.633
ถ้าเราเปลี่ยนเป็น dark mode เนี่ย
ส่วนใหญ่คนจะเจอก็คือเวลาเรารีเฟรชหน้าจอใช่ป่ะ มันจะกระพริบ

00:12:01.700 --> 00:12:06.633
อันนี้เป็นแบบ basic เลย ทุกคนต้องเจอเลย
ทำ server-side ต้องเจออันนี้

00:12:06.700 --> 00:12:11.133
ซึ่งมันจะจัดการค่อนข้างยากด้วย
เพราะว่าหนึ่งคือไอ้ตัวโหมดที่เราเก็บอะไรพวกนี้

00:12:12.200 --> 00:12:19.033
พอเราเพิ่มไอ้ feature เมื่อกี้ที่ผมบอกไปแล้ว
พวกเรื่องของการเก็บ state sync กับ storage

00:12:19.100 --> 00:12:23.233
tab synchronization อะไรพวกนี้
คือทุกอย่างมันอยู่ที่ client ใช่ไหม

00:12:23.300 --> 00:12:25.333
แต่ถ้าเว็บเรารันบนเซิร์ฟเวอร์

00:12:25.400 --> 00:12:26.833
คือบน server มันไม่มี

00:12:27.400 --> 00:12:30.933
โหมดอยู่แล้ว นึกออกป่ะ
โหมดมันจะไม่มี undefined

00:12:31.000 --> 00:12:34.333
แล้วเราจะรู้ได้ยังไงว่าตอนนั้นเขาจะเอา
dark mode หรือจะเอา light mode

00:12:34.400 --> 00:12:38.433
เพื่อที่จะส่งมาให้ client ใช่ไหม เพราะฉะนั้น
ทุกอย่างมันต้อง run บน client หมด

00:12:38.500 --> 00:12:41.133
อันนี้เป็นปัญหา classic เลย
ที่ทุกคนน่าจะต้องเจอ

00:12:42.800 --> 00:12:43.933
โอเคครับ

00:12:44.600 --> 00:12:50.033
ก็ทั้งหมดเนี่ยเวอร์ชัน 6 เนี่ย
เราพยายามทำให้มันง่ายขึ้นเพื่อมาจัดการ

00:12:50.700 --> 00:12:56.233
ไอ้เรื่องพวกเนี้ยครับ
โดยที่นะครับ เดี๋ยวผมเขียน

00:13:02.200 --> 00:13:07.233
โอเค โดยที่เดี๋ยวโค้ดมันจะเปลี่ยนเป็นอย่างนี้ครับ
คือตอนนี้เรามี

00:13:08.700 --> 00:13:13.133
โค้ดเก่าอยู่ใช่ไหมครับ
เอานี้เถิบไปนิดนึงนะ

00:13:13.200 --> 00:13:18.833
ในเวอร์ชัน 6 เนี่ย
เราพยายามจะมองให้ธีมมันเป็น static มากขึ้น คือแบบ

00:13:18.900 --> 00:13:25.233
ไม่ต้องมี state เข้ามายุ่งเลยนะครับ
เราก็จะ move ไอ้ธีมเนี่ยขึ้นไปข้างบนนะครับ

00:13:25.300 --> 00:13:26.633
ออกไปนอก React component เลย

00:13:27.400 --> 00:13:33.333
นะครับ แล้วก็เอาธีมนี้
เรียกว่าเป็นการสร้างธีมปกติก่อนนะครับ

00:13:33.400 --> 00:13:36.833
แล้วเราจะไม่ต้องมาใส่โหมดเข้าไปแล้ว

00:13:36.900 --> 00:13:40.533
คือถ้าเอา basic สุดๆ เลยเนี่ย
ถ้าอยากจะทำ light mode กับ dark mode นะครับ

00:13:40.600 --> 00:13:46.933
คือเราจะเพิ่ม field ใหม่ขึ้นมาชื่อว่า color scheme นะครับ แล้วก็เราจะบอกว่า โอเค ฉันต้องการ

00:13:47.000 --> 00:13:50.333
light mode กับ dark mode อย่างนี้นะครับ

00:13:51.100 --> 00:13:56.833
อันนี้ก็คือมันก็จะไปดึงตัว default token
ที่ Material UI เขามีอยู่แล้วมาให้นะ

00:13:56.900 --> 00:14:03.233
อันนี้ไม่ได้เปลี่ยนอะไร แต่ว่าเราปรับตรงนี้ให้มันง่ายขึ้นนะครับ พอเราได้อันนี้ใช่ไหม

00:14:03.300 --> 00:14:08.133
เราเอาไปใส่ที่ธีม ทีนี้เราก็จะลบตัว state ที่เรามีออกไป

00:14:08.200 --> 00:14:12.733
ทีนี้ พอเราทำแบบนี้ปุ๊บนะครับ
Material UI เนี่ยก็จะ

00:14:14.300 --> 00:14:18.433
สร้าง state ขึ้นมาเอง
คือ Material UI จะบริหารจัดการ state เอง

00:14:18.500 --> 00:14:27.233
นะครับ แล้วพอเราทำตรงนี้เสร็จ
เราลองมา debug

00:14:27.300 --> 00:14:35.933
อันนี้ถ้าเกิดว่าใครทำ UI เยอะก็จะรู้นะครับ ว่าใน
DevTools เนี่ยมันสามารถที่จะ emulate dark mode ได้

00:14:36.000 --> 00:14:40.333
นะครับ โดยที่เราไม่ต้องไปเปลี่ยน system preference ของเครื่องเรา

00:14:40.400 --> 00:14:45.233
นะครับ เราพิมพ์ dark เนี่ย
มันจะมี emulate CSS dark color scheme ใช่ป่ะ

00:14:45.300 --> 00:14:51.833
อันนี้ไม่ใช่ Material UI นะ ต้องบอกก่อน
อันนี้คือ browser มันจะเหมือนกับจำลองให้ว่า

00:14:51.900 --> 00:15:00.733
เครื่อง user ต้องการ dark mode นะ
พอเรากดตรงนี้ อันนี้คือ Material UI มันจะไป watch ตัว

00:15:00.800 --> 00:15:06.433
ตัว media prefers color scheme ตรงนั้นให้
เราก็จะเปลี่ยนให้ สังเกตว่า

00:15:07.300 --> 00:15:13.133
จากโค้ดที่จริงๆ เราต้องเขียน 4 feature เนี่ย
น่าจะประมาณสัก 200-300 บรรทัด​อะไรเงี้ยครับ

00:15:13.200 --> 00:15:19.533
เราเหมือนกับลบตรงนั้นทิ้งไปเลย
แล้วก็ให้ Material UI ทำให้นะครับ

00:15:19.600 --> 00:15:21.833
ซึ่งผมรู้สึกว่าตรงนี้มันเป็นอะไรที่

00:15:22.800 --> 00:15:25.033
library มันควรจะทำให้อยู่แล้วนะครับ

00:15:25.100 --> 00:15:29.633
คือโปรแกรมเมอร์อะ
ไม่ควรจะต้องมาโฟกัสกับเรื่องจุกจิกอะไรแบบนี้

00:15:29.700 --> 00:15:34.633
ซึ่งผมว่ามันช่วยได้เยอะมากเลย
เวลาทำโปรเจคใหม่อะไรอย่างเงี้ย คือ

00:15:34.700 --> 00:15:38.933
ประกาศธีม Dark mode Light mode
แล้วทุกอย่างก็จะทำให้หมดเลย

00:15:39.000 --> 00:15:42.633
ซึ่งมันเป็นสิ่งที่เว็บไซต์ทุกเว็บมันก็ควรจะมีอยู่แล้วนะครับ

00:15:42.700 --> 00:15:46.233
อันนี้เป็น feature แรกนะครับ ที่เพิ่มเข้ามา

00:15:46.300 --> 00:15:51.533
ซึ่ง interface มันจะดูง่ายนะ
แต่จริงๆ ข้างหลังมันก็จะมี detail ค่อนข้างเยอะนะครับ

00:15:51.600 --> 00:15:58.833
ถ้าเกิดว่าเราต้องการ custom สี token อะไรเงี้ย
ก็คือทำเหมือนเดิม ก็คือเราสามารถใส่ palette สี

00:15:58.900 --> 00:16:00.633
ตามที่เราต้องการได้เลย

00:16:00.700 --> 00:16:05.433
เหมือนเดิม การ custom นะครับ
แต่ว่าเราแค่ประกาศ field ใหม่

00:16:05.500 --> 00:16:10.633
แล้วเราก็เอา token ที่เราต้องการจะ custom แปะลงไป
นะครับ มันก็จะ

00:16:10.700 --> 00:16:13.133
มี feature พวกนี้ออกมาให้ อันนี้

00:16:13.200 --> 00:16:16.533
เป็นอันแรกนะครับ
ทีนี้ต่อมา

00:16:19.000 --> 00:16:21.033
ต่อมาจะเป็นเรื่องของการ

00:16:22.100 --> 00:16:26.633
มันจะสืบเนื่องมาจาก feature แรก
พอเรามี Dark mode ใช่ไหม

00:16:26.700 --> 00:16:31.433
ทีนี้ไอ้การ custom style ของ Dark mode
เนี่ยครับ ถ้าเป็นยุค

00:16:31.500 --> 00:16:35.833
เก่าๆ เอ้ย ถ้าเป็นเวอร์ชันที่แล้วเนี่ย
วิธีการ custom มันจะเป็นแบบนี้ครับ

00:16:35.900 --> 00:16:37.433
ซึ่งผมโคตรไม่ชอบ

00:16:37.500 --> 00:16:42.633
มันคือการที่เรา…
ซูมเข้าไปก่อน

00:16:45.400 --> 00:16:50.733
หน้าตามันจะเป็นแบบนี้ ก็คือ

00:16:51.800 --> 00:16:58.133
จริงๆ มันก็เหมือน basic React ทั่วไปนะ
คือเราจะเอา state มาเช็คใช่ปะ

00:16:58.200 --> 00:17:01.833
ว่าตอนนั้น user เขาใช้โหมดอะไร

00:17:01.900 --> 00:17:06.733
แล้วก็แค่สลับค่า
อย่างเช่นอย่างเคสนี้คือเราจะเปลี่ยน box shadow ใช่ไหม

00:17:06.800 --> 00:17:12.032
เราก็เช็คว่าตอนนี้โหมดมันเป็น light ใช่ปะ
render box shadow อันนี้

00:17:12.099 --> 00:17:18.933
ถ้าเกิดว่าไม่ใช่ก็ render box shadow อีกอันหนึ่ง
นี่คือวิธีการใส่สไตล์

00:17:19.000 --> 00:17:25.133
สำหรับ light mode กับ dark mode นะครับ
ก็เป็น if-else ธรรมดานะ

00:17:25.200 --> 00:17:27.233
แต่ว่า ตัวเวอร์ชัน 6 เนี่ย พอ

00:17:27.900 --> 00:17:34.233
เราเพิ่ม Dark mode เข้าไปแล้ว
เราก็เพิ่มขึ้นมาอีกฟังก์ชันหนึ่ง ชื่อว่าเป็น

00:17:34.300 --> 00:17:40.333
theme.applyStyles
แล้วก็สิ่งที่เราทำก็คือเราสามารถเลือกได้ว่าเราจะ

00:17:40.400 --> 00:17:46.133
แอปพลายสไตล์สำหรับโหมดอะไรนะครับ
อย่างเช่นพอใส่ dark mode ใช่ไหม แล้วเราก็

00:17:46.700 --> 00:17:53.233
เราก็เปลี่ยนตรงนี้ เอาค่า เอาง่ายคือเราพยายามจะลบ

00:17:53.300 --> 00:18:00.233
สิ่งที่เป็น javascript ทิ้งแล้วพยายามจะ move ไป CSS เพียวๆ ทั้งหมด

00:18:00.300 --> 00:18:05.033
ให้มันเป็น static style ทั้งหมด
เพื่อสุดท้ายเดี๋ยวเราจะย้ายตรงนี้

00:18:05.100 --> 00:18:10.133
ให้มันกลายเป็น Pure CSS ได้

00:18:11.600 --> 00:18:17.133
โค้ดมันจะหน้าตาประมาณนี้พอเปลี่ยนแล้วนะครับ
อันนี้ก็จะเป็น

00:18:17.200 --> 00:18:19.733
background image นะครับ แล้วก็

00:18:21.000 --> 00:18:26.933
โค้ดมันจะหน้าตาเป็นแบบนี้ก็คือ
สไตล์ที่เรา override มันจะอยู่ข้างบนใช่ไหม

00:18:27.000 --> 00:18:31.433
ก็คือสำหรับ Light mode ก่อน
แล้วก็สไตล์อะไรที่เราต้องการจะ override สำหรับ

00:18:31.500 --> 00:18:35.033
โหมดที่เราเพิ่มเข้ามาก็คืออยู่ข้างล่าง คือ

00:18:35.100 --> 00:18:42.033
ตรงนี้มันอาจจะดูไม่ได้แตกต่างมาก
แต่ว่าพอโค้ดมันค่อนข้างเยอะ 100-200 บรรทัด

00:18:42.600 --> 00:18:49.533
เราจะเริ่มเห็นแล้วว่ามันอ่านง่ายขึ้น
แล้วก็เวลา refactor โค้ด มันก็จะง่ายขึ้นด้วย

00:18:49.600 --> 00:18:53.233
ซึ่งถามว่า

00:18:54.000 --> 00:19:00.533
ผมก็มีโปรเจคที่แบบมีโค้ดแบบเก่าอยู่นะครับ เยอะมาก

00:19:02.100 --> 00:19:08.633
เรามี codemod ที่จะช่วย migrate ตรงนั้นให้นะครับ
เดี๋ยวจะลอง run ให้ดู

00:19:09.600 --> 00:19:16.733
ตอนนี้จอมันจะดูไม่ค่อยเห็นเท่าไหร่
แต่ว่าเรามี codemod ที่

00:19:16.800 --> 00:19:21.633
เราเพิ่มขึ้นมาให้นะครับ
ก็ตรงนี้จริงๆ พอ run ปุ๊บอ่ะ มันจะไปไล่

00:19:21.700 --> 00:19:25.833
แก้ไฟล์ทุกไฟล์ที่อยู่ในโค้ดเบสเรานะครับ ให้เป็น

00:19:25.900 --> 00:19:31.433
การเขียนสไตล์ในรูปแบบที่มันแบบใหม่
ก็คือแอปพลายสไตล์ เพราะเรา run codemod ปุ๊บ

00:19:32.900 --> 00:19:43.033
มันก็จะโหลด codemod ลงมาแป๊บนึงนะ
แล้วมันก็จะแก้ไฟล์ให้ สังเกตว่า

00:19:43.100 --> 00:19:46.133
จาก box shadow เมื่อกี้ เดี๋ยวผมลอง compare ดู

00:19:48.700 --> 00:19:56.433
ตัว codemod ก็จะแก้ให้
ไปนั่งไล่อ่าน แล้ว codemod ที่ผมเขียนมาอันนี้จะค่อนข้าง

00:19:56.500 --> 00:20:01.033
ฉลาดพอสมควรนะครับ
มันจะค่อนข้างรู้ว่าอะไรต้องแก้อะไรไม่ต้องแก้

00:20:01.100 --> 00:20:03.033
อันนี้ก็ช่วยลดเวลาได้แบบ

00:20:03.100 --> 00:20:03.833
เยอะมาก

00:20:03.900 --> 00:20:04.733
นะครับ

00:20:05.900 --> 00:20:11.933
เพื่อให้เรา migrate ไปเป็นเวอร์ชันใหม่ได้ ต่อมาพอเรามี

00:20:13.800 --> 00:20:18.333
โอเค อันนี้อันที่ 3 ครับ
สิ่งที่เราเพิ่มเข้ามาอีกก็คือเรื่องของ CSS variable นะครับ

00:20:19.100 --> 00:20:24.333
ปัจจุบันเนี่ย คือค่อนข้างจะ standard เลย
คือเว็บไหนที่ไม่ทำ CSS variable เนี่ย

00:20:24.400 --> 00:20:26.733
คือจริงๆ มันก็ไม่ได้ขนาดนั้นหรอก แต่ว่ามันจะช่วย

00:20:27.600 --> 00:20:32.433
โดยเฉพาะการเอา library มาใช้นะครับ
แล้วก็เราสามารถที่จะใช้ CSS variable

00:20:32.500 --> 00:20:34.033
ไป integrate กับ solution ต่างๆ ได้

00:20:34.100 --> 00:20:37.633
อะไรอย่างเงี้ยครับ โดยที่เราไม่ต้องพึ่ง JavaScript เพราะว่า

00:20:37.700 --> 00:20:43.833
ถ้าเราดูอย่างเคสเมื่อกี้นะครับ
เดี๋ยวเราเปิดกลับเข้าไปดูที่ตัวนี้นะ

00:20:43.900 --> 00:20:46.233
เราลอง debug ดูเนี่ย คือ

00:20:47.100 --> 00:20:52.333
ทุกอย่างเนี่ย สีเสออะไรพวกเนี้ยครับ มันจะเป็น

00:20:52.400 --> 00:20:58.633
มันเหมือนกับเรา hardcode ลงไปถูกป่ะ
เนี่ย มันจะเป็น RGB หรือสี hex ตรงๆ ใช่ไหม

00:20:58.700 --> 00:21:02.833
หนึ่งคือถ้าเป็นโปรแกรมเมอร์เนี่ย เวลาเรา debug เราก็

00:21:02.900 --> 00:21:06.733
ค่อนข้างยากละ
คือถ้าเราไม่ได้เชี่ยวชาญ Material UI เนี่ย

00:21:06.800 --> 00:21:09.433
เราจะไม่รู้เลยว่าสีนี้มันมาจากไหนใช่ไหม

00:21:09.500 --> 00:21:12.733
แล้วก็อย่างที่ 2 คือ สมมุติว่า
เราจะเอาอันนี้ไป integrate กับ

00:21:13.800 --> 00:21:19.333
ที่อื่น สมมุติว่ามี third party มา
ต้องการจะมา override สีของแอปเรา

00:21:19.400 --> 00:21:22.733
เราทำยังไงอะ
เราก็ต้องไปแก้ JavaScript ใช่ไหม

00:21:22.800 --> 00:21:26.533
ทั้งๆ ที่แบบ เอ๊ะ ตรงนี้มันก็เป็น CSS นี่หว่า
ทำไมมันถึงทำไม่ได้อะไรอย่างเงี้ยครับ

00:21:26.600 --> 00:21:34.133
CSS variable เนี่ยมันจะมาช่วย
ปิดช่องโหว่ตรงนั้นได้ดีมากนะครับ

00:21:34.200 --> 00:21:35.733
ช่วยเรา integrate ได้เยอะเลย

00:21:35.800 --> 00:21:39.033
ซึ่งวิธีการเพิ่ม CSS variable ลงไปให้กับ

00:21:39.100 --> 00:21:42.333
ตัวแอป Material UI เนี่ยก็ง่ายนิดเดียว

00:21:42.400 --> 00:21:46.733
ก็คือการใส่ CSS variable
แล้วก็ใส่เป็น true เข้าไปนะครับ

00:21:46.800 --> 00:21:50.833
พอเรา save ปุ๊บเนี่ยแล้วเราลอง debug ดูใหม่นะครับ

00:21:51.400 --> 00:21:58.333
เราจะเห็นว่า ทุกอย่างเนี่ย
โทเคนทุกอย่างที่อยู่ในธีมเนี่ย

00:21:58.400 --> 00:22:03.733
มันจะถูกเปลี่ยนเป็น CSS variable นะครับ
แล้วก็ component เราเนี่ยจะเริ่ม

00:22:03.800 --> 00:22:07.333
เริ่มใช้งาน CSS variable เลย
ข้อดีของอันนี้คือ

00:22:07.400 --> 00:22:09.533
อย่างที่บอกเมื่อกี้
สมมุติเรามี third party ใช่ไหม

00:22:09.600 --> 00:22:17.333
ที่เราต้องไปทำแอปครอบอีกแอปเนี่ยอีกทีนึง
อะไรอย่างเงี้ย เราไม่สามารถ—

00:22:17.400 --> 00:22:21.133
ถ้าเราจะ override คือเราต้อง override CSS
แบบใช้ pseudo class อะไรพวกนี้ใช่ป่ะ

00:22:21.200 --> 00:22:22.733
ซึ่งมันก็จะค่อนข้างเยอะ

00:22:22.800 --> 00:22:28.833
แต่ว่าถ้าเราสามารถที่จะเขียนแค่ CSS file
แล้วก็เหมือนกับเขียนแค่โทเคนที่จะ override สี

00:22:28.900 --> 00:22:35.733
มันจะง่ายขึ้น ยกตัวอย่างเช่น
ผมบอกว่า เราก็อปสีนี้มาก่อนเนาะ

00:22:35.800 --> 00:22:37.433
ผมอยาก override ตัว

00:22:38.500 --> 00:22:43.233
สี primary ของทั้งแอปเลยนะครับ
วิธีทำก็คือผมก็จะไป

00:22:44.700 --> 00:22:48.433
ยกตัวอย่างเช่น อย่างเคสนี้ เอาเคสนี้แล้วกัน เดี๋ยวนะ

00:22:50.000 --> 00:22:53.533
เอาตรงนี้ เอา section นี้ก็ได้

00:22:53.600 --> 00:22:54.733
เพราะว่า CSS variables เนี่ย

00:22:54.800 --> 00:22:58.933
เราสามารถที่จะประกาศ
ไปครอบแต่ละ section ได้ด้วยนะครับ

00:22:59.000 --> 00:23:03.533
ผมบอกว่าทั้ง section นี้เลย
ผมขอเปลี่ยนอีสีเนี่ยเป็นสีแดง

00:23:04.800 --> 00:23:09.333
เห็นไหมว่ามันก็ทำได้เลยโดยที่

00:23:09.400 --> 00:23:13.233
ไม่ได้มีความ complex ในเรื่องของ JavaScript เลย

00:23:13.300 --> 00:23:15.633
แบบ CSS ล้วนๆ ได้หมดนะครับ

00:23:15.700 --> 00:23:19.833
อันนี้ถือว่าผมรู้สึกว่าเป็น
improvement ที่ดีมากๆ นะครับ

00:23:19.900 --> 00:23:23.433
แล้วหนึ่งในหน้าที่ของผมก็คือ ผมจะ

00:23:23.500 --> 00:23:26.033
พยายามเอา JavaScript ออกไปให้ได้มากที่สุดนะครับ

00:23:26.100 --> 00:23:30.433
แล้วก็พยายามจะใช้ CSS ที่มัน
มีอะไรใหม่ๆ มาให้เยอะขึ้นนะครับ

00:23:30.500 --> 00:23:35.833
นี่คือ CSS variables ครับ ต่อไป

00:23:37.700 --> 00:23:42.333
ต่อไปเป็นเรื่อง Container Query มีใครใช้ไหม
Container Query ใครเคยได้ยินบ้าง

00:23:44.500 --> 00:23:49.033
มี 2 คน โอเค Container Query เนี่ย
จริงๆ ตอนที่ผมได้ยินครั้งแรก

00:23:49.100 --> 00:23:51.433
ผมก็รู้สึก เออ มันดีแหละ มันน่าจะใช้ได้นะ

00:23:51.500 --> 00:23:54.133
แต่ว่า ณ ตอนนั้นน่ะ คือมันยังไม่ค่อย

00:23:54.800 --> 00:23:57.933
เขาเรียกว่าเหมือนกับ browser support
มันยังไม่ค่อยดีแล้วกันนะ

00:23:58.000 --> 00:24:00.433
แล้วก็ในมุมของผมที่ทำ open source อะไรพวกเนี้ย

00:24:00.500 --> 00:24:05.033
คือผมจะเอามาใช้ก็ต่อเมื่อ
browser support มันพร้อมให้กับ

00:24:05.900 --> 00:24:11.233
developer เขาใช้งานนะครับ แต่ว่า ณ ปัจจุบัน
เดี๋ยวเราเปิดให้ดูนะ ตัว Container Query เนี่ย

00:24:13.100 --> 00:24:19.933
อุ้ย content อ๋อ นี่มัน Style Query นะครับ
ไม่เอา content นี่ query ธรรมดา

00:24:20.000 --> 00:24:25.633
ณ ปัจจุบันเนี่ย คือ 93%
คือถ้ามัน 93% เนี่ย อันเนี้ยคือใช้ production ได้แล้ว

00:24:25.700 --> 00:24:29.133
ใช้งานได้เลยนะ
production

00:24:29.200 --> 00:24:34.233
IE ช่างแม่งแล้วกันเนาะ เอ่อ ช่างมันนะครับ แล้วก็

00:24:34.300 --> 00:24:38.133
อันนี้อาจจะ ใครที่ต้อง support iOS

00:24:38.200 --> 00:24:43.733
15.8 อะไรอย่างนี้อาจจะต้องรอก่อน
แต่ว่าโดยส่วนใหญ่แล้วอ่ะ ไม่ค่อยมีเท่าไหร่ละ

00:24:43.800 --> 00:24:45.133
คือถ้ามัน 93% เนี่ย

00:24:45.200 --> 00:24:49.133
จริงผมรู้สึกว่ามัน production ready แล้ว
คือใช้ได้เลย ใช้ไปเหอะนะครับ

00:24:49.700 --> 00:24:53.233
เราก็ควรจะใช้ด้วยนะ
มัน solve ปัญหาได้ค่อนข้างเยอะ

00:24:54.400 --> 00:24:56.733
เดี๋ยวเราลองเข้าไปดู

00:25:02.800 --> 00:25:07.633
ก็เข้าไปนะ
command K แล้วก็ search container query

00:25:07.700 --> 00:25:11.533
อันนี้เป็น feature ใหม่นะครับ
ก็จะมี new ตรงนี้

00:25:11.600 --> 00:25:14.633
จริงๆ มันไม่ได้มีอะไรมากแหละ มันแค่

00:25:14.700 --> 00:25:19.633
เป็น utility นะครับ ใน Material UI
ให้เราเขียนง่ายขึ้น

00:25:19.700 --> 00:25:25.533
คือเราไม่ต้องมาประกาศเองแล้วกัน
ซึ่ง syntax มันก็จะก๊อบๆ Tailwind มา

00:25:26.500 --> 00:25:32.333
นะครับ เราสามารถเขียนประมาณนี้ได้
อย่างเช่นเราต้องการจะใส่ padding ใช่ป่ะ แล้วก็

00:25:32.400 --> 00:25:35.833
เหมือน padding container query แบบ

00:25:35.900 --> 00:25:41.733
ที่ 40em ให้มีขนาด 4 อะไรเงี้ย
คือถ้าเราแปลงเป็น tailwind

00:25:41.800 --> 00:25:45.633
มันก็จะคล้ายๆ อะไรประมาณนี้นะครับ

00:25:45.700 --> 00:25:48.333
โอเค อันนี้คืออีกตัวนึง
อันนี้ไปลองดูเองได้

00:25:48.400 --> 00:25:53.433
ผมว่าไม่ได้ซับซ้อนอะไรมากนะครับ
เป็นแค่ utility ให้เราเขียน container query ได้ง่ายขึ้น

00:25:53.500 --> 00:25:55.333
ไม่ต้องเขียนสด

00:25:56.300 --> 00:25:58.333
ต่อมาก็จะเป็นเรื่อง

00:25:58.400 --> 00:26:01.233
โอเค อันนั้นคือ feature ทั้งหมด
ที่เพิ่มเข้าไปนะครับ

00:26:01.300 --> 00:26:04.933
ทีนี้เรามาดูฝั่งที่เป็น improvement บ้าง

00:26:05.000 --> 00:26:07.733
ว่ามันมีอะไร improve บ้าง อันนี้คือ

00:26:09.200 --> 00:26:14.933
optimize runtime performance นะ
คือ Material UI เวอร์ชั่น 6 จะเร็วขึ้นประมาณ 20-30%

00:26:15.000 --> 00:26:20.933
ก็คือด้วยเพื่อนผมคนนี้นั่นเองนะครับ เขาชื่อ Romain
เป็นคนที่

00:26:21.000 --> 00:26:26.833
เรียกว่าช่ำชองการ improve performance มากเลย
ผมแนะนำให้เข้าไปดู profile เขานะครับ

00:26:26.900 --> 00:26:30.533
เพราะว่าไอ้โพสต์ที่เขาเขียนเนี่ย แม้แต่

00:26:31.700 --> 00:26:38.033
แม้แต่คนที่เขียน tailwind ยังต้องเข้ามาอ่านนะครับ
Optimize JavaScript for fun and profit

00:26:38.100 --> 00:26:43.233
ดีมากเลยนะครับ คือแบบ detail ดีมาก
แล้วก็ประยุกต์ใช้กับโปรเจกต์ได้ทุกโปรเจกต์

00:26:43.300 --> 00:26:48.633
อันนี้แนะนำเลย ต้องเข้าไปอ่านนะครับ

00:26:51.400 --> 00:26:55.333
อันนี้เป็น improvement อันนึงนะ
ก็จะเห็นว่าอันนี้เป็น issue ที่

00:26:55.400 --> 00:26:59.533
เป็น PR ที่ปิดไปแล้วสำหรับการ
improve performance นะครับ

00:26:59.600 --> 00:27:05.233
ส่วนใหญ่มันจะเกี่ยวข้องกับพวก
internal runtime ต่างๆ

00:27:05.300 --> 00:27:07.633
ที่เรามีการเขียนไว้นั่นแหละนะครับ

00:27:08.000 --> 00:27:15.133
ซึ่ง ถ้าเกิดใครสนใจ ลองเข้าไปดู PR พวกนี้ได้
คือข้อดีคือเราไม่เคยคิดเลยนะ

00:27:15.200 --> 00:27:17.033
ฟังก์ชันที่เราเขียนทั้งหลาย

00:27:17.100 --> 00:27:20.533
มันจะมีผลทำให้มันช้าลง

00:27:20.600 --> 00:27:24.933
นึกออกไหม สมมุติว่าเวลาทุกคนเขียนแอปอ่ะ
ไม่แคร์หรอกใช่ไหม เราเขียน callback เราเขียน

00:27:25.000 --> 00:27:30.133
ฟังก์ชัน พวกแบบ arrow function เขียนอะไรพวกเนี้ย
เราประกาศตัวแปร ใส่ๆ แม่งเข้าไป

00:27:30.200 --> 00:27:34.433
แต่ว่าสุดท้ายแล้ว พอวันนึงที่แอปแม่งช้า เราจะ

00:27:35.200 --> 00:27:38.633
ไม่รู้ว่าทำไมมันถึงช้า
เราก็จะไม่เคยคิดด้วยว่าฟังก์ชันพวกเนี้ยแหละ

00:27:38.700 --> 00:27:40.733
เป็นตัวปัญหาที่ทำให้มันช้า อะไรเงี้ยครับ

00:27:41.900 --> 00:27:45.333
นะครับ เพราะฉะนั้นควรจะเข้าไปอ่านเลย

00:27:45.400 --> 00:27:48.133
เป็นอีก next level นะครับ ของ developer

00:27:48.200 --> 00:27:56.333
โอเค แล้วก็สิ่งอีกอันนึงที่เรา improve ไปก็คือ
เราปรับปรุง template ใหม่นะครับ

00:27:56.400 --> 00:27:58.733
เดี๋ยวเราเปิดให้ดู

00:28:02.800 --> 00:28:09.033
อ้าว ลิงก์หาย โอเค ไม่เป็นไร ลิงก์หาย
เพราะฉะนั้นเดี๋ยวเราเข้าไปดูที่

00:28:10.900 --> 00:28:12.633
ที่ template ตรงๆ โอเคครับ

00:28:12.700 --> 00:28:18.733
อันนี้เป็น template ที่ designer
ที่เราอยู่ในบริษัท เขาทำขึ้นมานะครับ

00:28:18.800 --> 00:28:21.033
ก็เดี๋ยวลองไปดูอีกอันก็ได้

00:28:21.700 --> 00:28:27.733
อันนี้เป็น template ที่แบบ copy ไปใช้งานได้เลยนะ
หรือว่าจะเปิดผ่าน code sandbox ก็ได้

00:28:27.800 --> 00:28:36.733
เปิดปุ๊บ เราก็จะได้ template นี้มาใช้เลย
ซึ่งพวกนี้ฟรีหมดนะครับ ก็ลองไปเล่นดูกันได้

00:28:36.800 --> 00:28:38.933
นานจัง

00:28:40.100 --> 00:28:44.233
ไม่เป็นไรนะครับ เดี๋ยวลองไปเล่นดูก็คือ
เปิดผ่าน code sandbox แล้วจะเห็นเลย

00:28:44.300 --> 00:28:45.833
มันก็จะ responsive ด้วยนะครับ

00:28:45.900 --> 00:28:50.533
แบบพอเปิดเข้าไปปุ๊บก็ลองแก้ๆ
ตามที่เราต้องการได้นะครับ

00:28:50.600 --> 00:28:53.333
ก็คือทุก template เนี่ย
แก้ใหม่หมดเลยนะครับ

00:28:53.400 --> 00:28:57.533
ทำให้มันสวยขึ้นนะครับ
ก็พวกเนี้ยเราจะ theme มาให้แล้วนะครับ

00:28:57.600 --> 00:29:01.633
ก็มีหลากหลายเลย มี dashboard marketing

00:29:01.700 --> 00:29:08.133
มีทั้งเพจ checkout
ที่เราสามารถ copy ไปใช้ได้เลยนะครับ

00:29:08.200 --> 00:29:13.833
แล้วก็ไปใส่ logic ของเราตามที่เราต้องการได้
เนี่ยมี sign in

00:29:13.900 --> 00:29:15.633
แบบใครอยากทำ sign in page แบบง่ายๆ

00:29:15.700 --> 00:29:18.633
ก็คือ copy ไปใช้เลยก็ได้นะ ผมก็ทำบ่อย

00:29:18.700 --> 00:29:24.933
นะครับ ปึ๊บ แปะ อันนี้พอดีจอผมมันใหญ่
มันก็เลยซูมไปนิดนึง

00:29:26.500 --> 00:29:32.133
อันนี้คือ improvement อีกอันนึงก็คือเรื่อง template ช่วยได้เยอะมาก

00:29:32.200 --> 00:29:38.333
โอเค อันนี้เป็น detail เล็กๆ น้อยๆ แต่ว่า grid ที่เราปรับปรุงก็คือ

00:29:38.400 --> 00:29:45.333
แต่ก่อน grid ที่เราใช้มันจะใช้ margin
ในการทำ spacing นะครับ ซึ่ง

00:29:45.400 --> 00:29:50.033
ต้องเข้าใจว่าแต่ก่อนมันก็ยังไม่มี gap
ให้ใช้เยอะขนาดนั้นใช่ไหม

00:29:50.100 --> 00:29:51.633
browser support ก็ยังไม่เยอะนะครับ

00:29:51.700 --> 00:29:56.333
แต่ว่าปัจจุบันเนี่ย
browser support ในส่วนที่เป็น flexbox gap เนี่ย

00:29:56.400 --> 00:29:59.533
มันครอบคลุมเยอะมากแล้วนะครับ
เพราะฉะนั้นเราก็เลย

00:29:59.600 --> 00:30:02.633
มีการปรับปรุงตัว grid ให้มันกลายเป็น gap

00:30:02.700 --> 00:30:08.333
เพราะฉะนั้นมันจะ custom ง่ายขึ้น
คือแต่ก่อนถ้าเราเป็น grid เวอร์ชั่นเก่าเนี่ย

00:30:08.400 --> 00:30:13.233
เวลาที่เราจะใส่ margin อะไรให้กับตัว children นะครับ
มันจะใส่ไม่ได้

00:30:13.300 --> 00:30:18.933
มันไม่ใช่ใส่ไม่ได้ แต่ว่าเราต้องเพิ่มไอ้ตัว CSS
ไอ้ specificity ให้มันเยอะขึ้นนะครับ

00:30:19.000 --> 00:30:23.033
แต่ว่าปัจจุบันเนี่ยก็คือเราจะใช้ tailwind เนี่ยง่ายละนะครับ

00:30:24.600 --> 00:30:29.733
โอเค แล้วก็ improvement อันต่อมาครับ ใกล้จะจบแล้ว

00:30:29.800 --> 00:30:36.233
ก็คือตัว bundle size ที่ ไม่ใช่ bundle size
เรียกว่าเป็น package size นะครับ

00:30:36.300 --> 00:30:41.033
ที่เวลาเรา install package เนี่ย
อันนั้นน่ะคือ size ที่มันลดลงนะครับ

00:30:41.100 --> 00:30:43.933
ลดลงประมาณ 25% นะครับ

00:30:44.000 --> 00:30:50.633
ก็สาเหตุที่มันลดลงก็เป็นเพราะว่าเรา
เราอัพเวอร์ชั่นของไอ้ตัว browser list นะครับ

00:30:50.700 --> 00:30:56.233
ก็ให้มัน support แบบ node ไอ้ node แล้วก็ browser เวอร์ชั่นใหม่ๆ ละ

00:30:56.300 --> 00:30:59.833
เพราะฉะนั้นเนี่ยมันจะไม่มีการ
compile CommonJS แบบเวอร์ชั่นเก่าๆ

00:30:59.900 --> 00:31:02.833
โค้ดมันก็จะเลยสั้นลง ลดลงนะครับ

00:31:05.000 --> 00:31:05.833
โอเค

00:31:06.500 --> 00:31:12.733
แล้วก็อันสุดท้ายนะครับ อันนี้เรียกว่า highlight เลย
แต่ว่ายังเป็นแบบ experimental อยู่ก็คือ

00:31:13.700 --> 00:31:18.733
อย่างที่ผมเล่าไปตอนแรกว่า Material UI เนี่ย
ตอนนี้มันใช้ emotion

00:31:18.800 --> 00:31:25.133
เป็น CSS-in-JS library อันนึงนะครับ
ที่ใช้ JavaScript เขียน CSS

00:31:25.200 --> 00:31:29.733
แล้วมันก็จะมีการเอา CSS ไปแปะใช่มั้ย
ปัญหาอย่างที่บอกเลยก็คือ

00:31:29.800 --> 00:31:31.833
มันจะเป็นเรื่อง server-side rendering

00:31:31.900 --> 00:31:36.833
ไม่ใช่สิ ปัญหาคือไอ้ตัว
React Server Components อะไรพวกนี้ครับ

00:31:36.900 --> 00:31:42.633
ที่เหมือนมันจะไม่ค่อยได้ไปต่อเท่าไหร่
กับ React 19 นะครับ ที่เพิ่งออกมา

00:31:43.800 --> 00:31:44.933
ยังไม่ออก ยังไม่ออก ใกล้จะออกแล้ว

00:31:46.100 --> 00:31:53.633
เพราะฉะนั้นเราก็เลยต้องหา solution อื่นนะครับ
มันก็เลยมาจบที่โอเค ถ้างั้นเราต้องทำ library อันนึง

00:31:53.700 --> 00:31:55.433
เพื่อที่จะ

00:31:56.400 --> 00:32:02.933
ไปเอา stylesheet ต่างๆ ที่เขียนใน JavaScript
มาแปลงให้เป็น CSS ให้หมด

00:32:03.000 --> 00:32:07.133
คอนเซ็ปต์มีแค่นั้นเลยนะ
แต่ว่าข้างหลังแม่งโคตรซับซ้อนเลย

00:32:08.700 --> 00:32:12.233
เดี๋ยวผมจะเดโมให้ดูเลย เพราะจริงๆ เคยเล่าไป

00:32:12.300 --> 00:32:16.333
เมื่อ talk ที่ผ่านมาสักพักแล้วว่า

00:32:16.400 --> 00:32:20.833
ลองไปตามดูก็ได้นะครับ ว่าที่มาที่ไปมันเป็นยังไง อะไรอย่างเงี้ยครับ

00:32:20.900 --> 00:32:25.933
สุดท้ายก็คือ ตอนนั้นมันยังเป็นชื่อไม่ official

00:32:26.000 --> 00:32:30.033
ตอนนี้คือ library มันจะชื่อว่า
Pigment CSS นะครับ เดี๋ยวผมจะเปิด

00:32:30.100 --> 00:32:32.833
ตัว repo ให้ดู
เป็น open source เหมือนกัน

00:32:34.400 --> 00:32:38.133
Pigment CSS นี่เป็น GitHub นะครับ

00:32:38.200 --> 00:32:44.433
ฝากกดไลก์ กดแชร์
กดดาวให้ด้วยนะ ตัวนี้ Pigment CSS

00:32:44.500 --> 00:32:51.733
มีบล็อกให้อ่านด้วย เดี๋ยวก็ฝากลองไปดูได้

00:32:51.800 --> 00:32:54.933
เดี๋ยวผมจะเดโมให้ดูว่ามันต่างจากเดิมยังไงนะครับ

00:32:56.600 --> 00:33:01.333
เรามาที่ อันนี้เป็น repo ที่ผมเตรียมไว้

00:33:02.600 --> 00:33:04.433
ใช่ repo นี้ป่าววะ

00:33:04.500 --> 00:33:10.133
ใช่สิ ไม่ใช่ นี่มัน Material UI repo นี้

00:33:10.200 --> 00:33:14.433
ซูมเข้ามาก่อนนะ
เดี๋ยวผมจะขอเช็คอันนี้ก่อน

00:33:14.500 --> 00:33:23.133
อันนี้เป็น Next.js project ธรรมดาเลย
ที่เพิ่งเริ่ม เพิ่งแบบ from scratch ครับ

00:33:23.200 --> 00:33:26.333
ตอนนี้ config ของ Next ก็คือเป็น default เลย

00:33:26.400 --> 00:33:33.633
เป็น object ธรรมดานะครับ
ทีนี้เดี๋ยวเราจะลอง run dev

00:33:33.700 --> 00:33:37.333
yarn dev อย่างนี้นะครับ

00:33:37.400 --> 00:33:40.833
แล้วเราไปที่ localhost

00:33:40.900 --> 00:33:43.733
ตรงนี้ไม่มีอะไร
เราจะไปที่ route /sign-in นะ

00:33:43.800 --> 00:33:48.533
อันนี้คือเป็น Material UI component
เวอร์ชัน 6 เหมือนกัน แต่ว่า

00:33:48.600 --> 00:33:55.133
เป็น default นะ ผมยังไม่ได้ทำอะไรกับมัน
ก็คือยังไม่ได้เอา Pigment เนี่ยมาใช้ครับ

00:33:55.200 --> 00:34:02.933
เดี๋ยวเราลองไปดูโค้ดเร็วๆ ว่าหน้าตาเป็นยังไง

00:34:03.000 --> 00:34:05.633
โอเคครับ อันนี้ในแอป /sign-in นะครับ

00:34:05.700 --> 00:34:09.333
ใน Next.js มันก็จะ route
หน้าตาเป็นเหมือนโฟลเดอร์

00:34:09.400 --> 00:34:13.132
แล้วเข้าไปดูที่เพจนะครับ โอเค นี่ export default มาจาก

00:34:13.199 --> 00:34:17.933
component นี้นะ ซึ่ง component ตอนนี้
ก็เป็น Material UI component

00:34:18.000 --> 00:34:24.233
เวลาเราเขียนแอปธรรมดา
ก็เรียก component มา แล้วก็

00:34:24.300 --> 00:34:29.833
เนี่ย return พวก มี theme ครอบใช่มั้ย
แล้วก็มี component ต่างๆ

00:34:29.900 --> 00:34:35.033
มี text typography มี
form control อะไรอย่างเงี้ครับ

00:34:35.100 --> 00:34:40.033
ก็เป็น basic เลย เหมือนเวลาเราเขียนแอปปกติครับ

00:34:40.100 --> 00:34:46.333
สิ่งที่เราได้มาก็คือ เราจะได้อันนี้มา
ลอง debug ให้ดู เดี๋ยวผมขยายก่อนนะ

00:34:46.400 --> 00:34:51.933
จะได้ไม่ต้องสลับจอไปสลับจอมา

00:34:52.000 --> 00:34:57.933
ลอง debug ก่อนนะครับ ณ ตอนนี้
เราจะเห็นว่าอันนี้คือ class ใช่มั้ย

00:34:58.000 --> 00:35:04.833
ที่ตัว emotion มัน generate ขึ้นมานะครับ
จาก stylesheet ที่ Material UI เขียนไว้ครับ

00:35:04.900 --> 00:35:11.633
เราจะเห็นว่ามันจะเป็น hash class แบบนี้นะครับ
ซึ่งไอ้พวกนี้

00:35:11.700 --> 00:35:16.633
ณ ตอนนี้ มันยังทำเป็น
React Server Component ไม่ได้

00:35:16.700 --> 00:35:17.933
มันยังไม่ support

00:35:18.000 --> 00:35:24.033
ก็ต้องเป็น client component ทั้งหมด
ซึ่งนั่นก็คือเป็นข้อจำกัด ณ ตอนนี้ แต่ว่า

00:35:24.100 --> 00:35:29.133
เราเขียน Pigment CSS ขึ้นมาเพื่อให้มันไป

00:35:29.900 --> 00:35:34.933
ให้มันเข้าไปอยู่ใน
เขาเรียกว่าเป็น bundler process นะครับ

00:35:35.000 --> 00:35:40.633
เวลาที่เรา spin ในตัว Next.js ขึ้นมา
Next.js มันก็จะมี engine ของมันใช่ป่ะ

00:35:40.700 --> 00:35:44.233
ที่มันไปดึงโค้ดที่เราเขียนน่ะ เข้ามาแล้วก็เอามา

00:35:44.300 --> 00:35:49.133
ทำนู่นนี่นั่นทุกอย่างให้เรานะครับ
Pigment น่ะ Pigment CSS มันจะเข้าไปอยู่ในนั้น

00:35:49.200 --> 00:35:52.833
เข้าไปอยู่ใน process ตรงนั้น
แล้วก็เหมือนกับไป intercept

00:35:52.900 --> 00:35:57.333
พอมันไปเจอไฟล์ Material UI ปุ๊บ มันจะอ่านไฟล์

00:35:57.400 --> 00:36:03.333
แล้วก็จะหาว่ามี CSS ตรงไหนบ้าง
แล้วก็จะไป

00:36:03.400 --> 00:36:09.933
พ่นออกไปเป็นไฟล์ CSS ตรงๆ นี่คือ concept แบบ broad concept

00:36:10.000 --> 00:36:11.933
โอเค เดี๋ยวเรามาดูผลลัพธ์กัน

00:36:13.800 --> 00:36:16.133
โอเค ผลลัพธ์ก็คือ เดี๋ยวเราจะ

00:36:17.100 --> 00:36:21.533
เราจะไม่ใช้ next config ธรรมดา เราจะไป wrap

00:36:21.600 --> 00:36:26.933
ด้วย นี่ ก็จะมี plugin เพิ่มขึ้นมานะครับ
คือเราต้อง install library ก่อน

00:36:28.000 --> 00:36:30.833
ครับ install library เพิ่มขึ้นมาก็คือตัวนี้ครับ

00:36:30.900 --> 00:36:33.833
ตัว plugin ของ Pigment CSS นะครับ

00:36:33.900 --> 00:36:41.333
แล้วเสร็จแล้ว เราก็แค่ import มาแหละ
import ตัว plugin มาใช่ป่ะ แล้วก็เอาไป

00:36:41.400 --> 00:36:45.433
ครอบตัว next config
แล้วก็จะใส่ theme เข้าไป

00:36:45.500 --> 00:36:48.533
อะไรอย่างเงี้ยครับ
ตามที่เราสร้าง theme แล้วก็

00:36:48.600 --> 00:36:54.233
มี config เล็กๆ น้อยๆ เอางี้ครับ
concept คือเราต้องใส่ config ให้มัน

00:36:54.300 --> 00:36:56.333
ครับ ไปครอบตัว next config ครับ

00:36:56.400 --> 00:37:04.033
แล้วทีนี้พอเราเซฟปุ๊บ
ผมสร้างอีก route นึงขึ้นมาชื่อ sign-in 2

00:37:04.100 --> 00:37:10.433
ตัว sign-in 2 เนี่ย ตรงนี้
เรียกว่าเกือบจะ copy ตัว sign-in มาทั้งดุ้นเลย

00:37:10.500 --> 00:37:16.633
อาจจะมีแก้โค้ดบางบรรทัดนิดหน่อยนะครับ
มันจะมีบาง component ที่

00:37:16.700 --> 00:37:19.933
ต้องเปลี่ยนไปใช้ของ Pigment
อะไรพวกนี้ครับ นิดนิดหน่อยหน่อย

00:37:20.000 --> 00:37:23.133
ประมาณซัก 95% ไม่ได้เปลี่ยนเลย

00:37:23.200 --> 00:37:29.133
เสร็จแล้วเดี๋ยวเราลองรันตรงนี้ใหม่

00:37:29.200 --> 00:37:32.433
แล้วทีนี้เราลองเข้าไปดูที่ sign-in 2 นะครับ

00:37:33.500 --> 00:37:38.633
อันนี้คือพอเรา enable Pigment แค่นั้น
แค่ประมาณนั้นเลยนะครับ

00:37:38.700 --> 00:37:43.533
ตอนนี้ pigment มันจะเริ่มไป intercept ไฟล์ที่ Next.js ส่งมาให้

00:37:43.600 --> 00:37:47.533
คือ Next.js มันต้องไป process ไฟล์ต่างๆ ในโฟลเดอร์เราใช่ไหม

00:37:47.600 --> 00:37:51.833
รวมทั้ง node_modules อะไรพวกนี้ด้วย
ตัว pigment ก็จะไป intercept

00:37:51.900 --> 00:37:54.533
แล้วดูว่า ถ้าอันนี้เป็น Material UI

00:37:54.600 --> 00:37:59.133
จะไปหา CSS แล้วก็พ่นออกมาเป็นไฟล์ CSS นะครับ

00:37:59.200 --> 00:38:05.733
สังเกตว่าผลลัพธ์จะคล้ายเดิม แทบจะเป็นเหมือนเดิมเลย
แต่สิ่งที่ต่างก็คือ

00:38:05.800 --> 00:38:12.733
เราจะสังเกตว่า CSS ทุกอย่างที่มันเกิดขึ้น
มันจะไปอยู่ในไฟล์ของ Next.js แล้ว

00:38:12.800 --> 00:38:18.833
ถ้าเกิดว่าใครไม่ชิน Next.js
มันจะมี layout ใช่ไหมกับ page

00:38:18.900 --> 00:38:25.333
อันนี้เป็น app router นะครับ
เนี่ย CSS ทั้งหมดเนี่ย จากที่มันอยู่ใน emotion ครับ

00:38:25.400 --> 00:38:31.633
มันย้ายมาอยู่ในไฟล์ CSS เพียวๆ
เพราะฉะนั้นเราสามารถที่จะเขียน

00:38:31.700 --> 00:38:37.733
ตัว component บางอย่างเนี่ย
มันจะกลายเป็น server component ไปเลย

00:38:37.800 --> 00:38:46.033
สังเกตว่าเราแทบจะไม่ได้เขียนโค้ดอะไรใหม่เลย
ซึ่งผมคิดว่าอันนี้ก็จะเป็น

00:38:46.100 --> 00:38:53.433
เป็น innovation อีกอันนึงนะครับ
ในอนาคตอันใกล้ คือตอนนี้มันยังมี bug อยู่

00:38:54.000 --> 00:38:58.833
แต่ก็เป็นพื้นฐานของ library ใหม่ๆ ที่มันเกิดขึ้นนะครับ
คือเราเจอ use case หลากหลาย

00:38:58.900 --> 00:39:04.133
ต้องเข้าใจว่า pigment เนี่ย
มันจะต้อง support Next.js

00:39:04.200 --> 00:39:06.833
support Rust support Vite อะไรพวกนี้

00:39:06.900 --> 00:39:12.133
เพราะว่ามันเป็นส่วนหนึ่งของ bundler ต่างๆ ที่จะ process ไฟล์นู่นนี่นั่น

00:39:12.200 --> 00:39:13.133
เพราะฉะนั้นนะ

00:39:14.800 --> 00:39:16.033
use case มันหลากหลายมาก

00:39:16.100 --> 00:39:19.733
ตอนนี้ปวดหัวมากครับ
คือผมไม่ได้เขียน React แล้ว

00:39:19.800 --> 00:39:25.433
ผมไปเป็นเหมือน
ไปนั่ง debug Next.js กับ Vite ทั้งวันเลยครับ

00:39:25.500 --> 00:39:30.333
ตอนนี้ยังมีปัญหาเรื่องของ performance นิดนึง
มันยังช้าอยู่ สังเกตว่าเมื่อกี๊

00:39:30.400 --> 00:39:34.733
แค่หน้า sign in ธรรมดาใช่ไหม
กว่ามันจะโหลดก็ใช้เวลาสัก 30 วินาที

00:39:34.800 --> 00:39:36.133
มันจะค่อนข้างช้า

00:39:36.200 --> 00:39:44.233
ตอนนี้ก็จะเป็น improvement ที่ต้องค่อยๆ ทำไป
แต่ว่าอย่างน้อยเราเห็นหนทางแล้ว ที่ทำยังไงให้

00:39:44.300 --> 00:39:49.533
คนที่ใช้ emotion สามารถ
migrate มาเป็น plain CSS ได้

00:39:49.600 --> 00:39:56.533
นี่เป็น step แรก ซึ่งตอนนี้ก็ยังอยู่ในช่วงทดลอง
ก็เริ่มมีคนเอาไปทดลองใช้

00:39:56.600 --> 00:39:58.633
ก็เจอปัญหาต่างๆ ก็ค่อยๆ แก้กันไป

00:39:59.700 --> 00:40:06.533
อันนี้ก็คือสุดท้ายแล้ว เป็นเรื่องสุดท้าย
ก็คือตัว pigment CSS ครับ

00:40:06.600 --> 00:40:10.133
มีอีกไหมเอ่ย

00:40:10.200 --> 00:40:15.333
หมดแล้วครับ นี่คือ update ที่อยากมาเล่าให้ฟังนะ
สำหรับ Material UI version 6 ครับ

00:40:15.400 --> 00:40:20.533
ถ้ายังไงก็ฝากไปลองใช้งานนะครับ แล้วก็อ่าน doc ดูได้

00:40:21.400 --> 00:40:27.333
ถ้าเกิดใครมีอะไรอยากจะคุยเพิ่มเติม
อยากถามอะไรยังไง ก็เดี๋ยวหลัง

00:40:28.000 --> 00:40:29.433
หลัง World เค้าพูด

00:40:30.200 --> 00:40:33.333
เกี่ยวกับ Vue ป่ะ? ไม่?

00:40:33.400 --> 00:40:35.233
เดี๋ยวหลัง World เค้า

00:40:35.300 --> 00:40:41.133
มาแชร์ ก็เข้ามาคุยได้นะครับ
มาคุยได้ ถามได้ทุกเรื่องเลย

00:40:41.200 --> 00:40:42.633
โอเคครับ ขอบคุณมากครับ
