WEBVTT

00:00:00.300 --> 00:00:04.300
ก็ครับ เอ่อ ผมแมนนะครับ
ชื่อโยธิน วงศ์สมุหครับ

00:00:04.300 --> 00:00:10.400
มาจากไลน์ ไทยแลนด์ครับ
เป็นดาต้าเอ็นจิเนียร์ต๊อกตอยอยู่ในบริษัทนั้นครับผม เอิ่มมม

00:00:11.700 --> 00:00:17.900
ต้องบอกว่าตอนที่-- ตอนที่เป็นหัวข้อนี้เนี่ย
ตอนก่อนจะเริ่มมาเป็นหัวข้อนี้

00:00:19.400 --> 00:00:21.700
ตอนนั้นเนี่ยตอนคุยกับ คุณแก้วคุณกานต์เนาะ

00:00:22.200 --> 00:00:28.900
แล้วก็รู้สึกว่า เฮ้ย
มันมีคอมโพเนนต์ตัวหนึ่งเว้ยที่ในเวลาเราทำดาต้าแพลตฟอร์มเนี่ย

00:00:28.900 --> 00:00:31.800
คนไม่ค่อยพูดถึง อย่างน้อยก็ในคอนเท็กซ์ใน

00:00:32.299 --> 00:00:37.100
ในประเทศเราเนาะ เออ
คนไม่ค่อยพูดถึงแล้วรู้สึกว่า เฮ้ย มันก็สำคัญนะ

00:00:37.100 --> 00:00:39.100
เออ แต่คนกลับไปโฟกัสอีกจุดหนึ่ง

00:00:39.100 --> 00:00:43.000
จุดอื่นไรเงี้ย
เดี๋ยวเดี๋ยวค่อยว่ากันในทอล์คครับ ก็เลยวันนี้คิดว่า

00:00:43.900 --> 00:00:46.600
เราจะมาทำให้ดูว่าไอ้ตัวดาต้าแค็ตตาล็อกเนี่ย

00:00:46.600 --> 00:00:48.700
จริงๆ แล้วเนี่ยมัน มันสำคัญยังไง

00:00:48.700 --> 00:00:57.500
แล้วก็ข้างในมันทำงานยังไงบ้างครับคร่าวๆ ครับ คร่าวๆ
วันนี้ก็จะมีอยู่สี่ section หลักๆ

00:00:57.500 --> 00:01:01.900
นะครับ
ก็คือเดี๋ยวคุยกันเรื่องว่าเฮ้ยตัวแค็ตตาล็อกเนี่ยมัน มันเกิดขึ้นมาได้ไง

00:01:02.600 --> 00:01:08.100
อ่า แล้วก็ตามมาด้วยว่าตัว
ตัวประเภทของแค็ตตาล็อกเนี่ย เฮ้ยมันมี มันมีอะไรบ้างนะ

00:01:08.100 --> 00:01:11.800
เพราะว่าคำว่าแค็ตตาล็อกมันก็ดูเป็นคำที่มันเจเนริกเนาะ

00:01:11.800 --> 00:01:17.400
เออ ใครอาจจะพูดอาจจะเข้าใจไม่ตรงกันครับ
แล้วก็ในส่วนที่สามเนี่ย เราจะพูดว่าเฮ้ยมัน

00:01:18.000 --> 00:01:20.700
มันทำงานยังไง
เบื้องหลังมันเป็นยังไงอะไรอย่างเงี้ย เออ

00:01:20.700 --> 00:01:23.800
จุดดีไซน์ดีซิชั่นของมันที่มันเกิดขึ้นมามันเพราะอะไรครับ

00:01:23.800 --> 00:01:28.100
แล้วก็ส่วนสุดท้ายก็คือเราจะพูดถึงว่าในอนาคตต่อไปเนี่ย

00:01:28.100 --> 00:01:33.700
เออ มัน มัน มันจะไปทางไหน ตัว ตัวทูลลิงตัวนี้
ตัวคอมโพเนนต์ตัวนี้ครับโอเค

00:01:33.700 --> 00:01:40.200
ไม่ให้เป็นการเสียเวลาครับ
ตัวแรกที่เราจะพูดถึงกันก็คือตัวแค็ตตาล็อกเนี่ยมันเกิดมาได้ไง อ่า

00:01:41.500 --> 00:01:45.200
ในนี้ทุกคนน่าจะรู้จักสิ่งที่เรียกว่าห้องสมุดเนาะ

00:01:45.800 --> 00:01:50.000
อ่านี่เป็นสิ่งที่ทุกคนคุ้นเคยกันใน
ในฟิซิคอลเวิลด์ครับ

00:01:50.000 --> 00:01:54.300
ซึ่งห้องสมุดก็มีอะไร มีมีเดต้า
เดต้าคืออะไร หนังสือถูกป่ะ

00:01:54.300 --> 00:01:58.500
อยู่ตามชั้นอยู่ตามอะไร
ทีเนี้ยเราก็จะเกิดคำถามว่า โอเค

00:01:59.100 --> 00:02:02.500
ถ้าเราอยากจะไปหาหนังสือสักเล่มนึง
สมมุติไปหา อ่า

00:02:02.500 --> 00:02:05.900
อะไรนะ
ดีไซน์นิ่งดาต้าเอ็นเท็นซีแอปพลิเคชัน ที่พี่กานต์พูดตะกี้

00:02:05.900 --> 00:02:11.700
เราจะไปหาที่ชั้นไหนยังไงครับ ถ้าใคร
(เดาะลิ้น) อายุเยอะหน่อย

00:02:11.700 --> 00:02:14.400
เออต้องขออนุญาตครับ (หัวเราะ)
อาจจะคุ้นเคยกับสิ่งนี้

00:02:15.100 --> 00:02:20.300
อันนี้ อันนี้ขอเช็กคร่าวๆ
มีใครไม่เคยเห็นสิ่งนี้ไหมครับ โอเค

00:02:20.300 --> 00:02:23.000
แปลว่าเราอาจจะอยู่กันคนละยุคกันจริงจริง (หัวเราะ)

00:02:23.000 --> 00:02:27.500
ครับครับสิ่งนี้มันเป็นเหมือน
เป็นเหมือนเป็นเหมือนอินเด็กซ์การ์ดแค็ตตาล็อกในห้องสมุดเนาะ

00:02:27.500 --> 00:02:32.100
คือ
คือก่อนที่มันจะเริ่มมีระบบคอมพิวเตอร์เข้ามาในในชีวิตประจำวันของเราเยอะๆ เนี่ย

00:02:32.100 --> 00:02:34.100
การหาหนังสืออยู่ในห้องสมุดเนี่ย

00:02:34.100 --> 00:02:38.300
อ่าการที่เราจะเดินหาตามชั้นสมมุติห้องสมุดมันใหญ่มากแล้วมันก็ใช้เวลาเยอะนะครับ

00:02:38.300 --> 00:02:45.800
มันก็เลยจะถูกย่อตัวอินเด็กซ์การ์ดตัวนี้อยู่อยู่ที่มุมมุมหนึ่งในห้องสมุดอาจจะเป็นตู้ที่มันมีชั้นสแต็คอะไรอย่างเงี้ย

00:02:45.800 --> 00:02:52.000
แล้วก็จะมีตัวอักษรบอกว่าโอเคอะไรอยู่ตรงไหนนะครับซึ่งในตัวอินเด็กซ์การ์ดเนี่ยมันจะมี

00:02:52.000 --> 00:02:57.700
มันจะมีดีเทลคร่าวๆ ก็คือแบบว่า เฮ้ย
มันเป็นหนังสืออะไร ใครเขียนนะ

00:02:57.700 --> 00:03:03.100
เสร็จแล้วมันก็จะมีบอกว่าไอ้ตัวหนังสือตัวนี้หรือหรือแมททีเรียลที่เราต้องการหาเนี่ย

00:03:03.100 --> 00:03:07.500
มันอยู่ในเซคชั่นไหน ชั้นไหนของห้องสมุด

00:03:07.500 --> 00:03:13.200
อ่าตัวนี้ซึ่งถามว่าพอเรามาดูอย่างงี้เนี่ยมันช่วยอะไร ถ้าเรามองแบบฟิสิคอลเนาะ

00:03:13.200 --> 00:03:17.500
มันช่วยให้เราประหยัดเวลาแทนที่เราจะต้องไปเดินหาแบบตามชั้น เฮ้ยชั้นนี้อยู่ที่ไหน

00:03:17.500 --> 00:03:20.200
หมวดไอทีอยู่ตรงไหน
หมวดดาต้าเอ็นจินีเรียอยู่ตรงไหนเนี่ย

00:03:20.200 --> 00:03:22.900
เรามาดูตรงนี้ก่อน เราก็รู้ชั้น เราจะรู้

00:03:22.900 --> 00:03:27.900
เราจะรู้มุม เราจะรู้ชั้น
แล้วเราก็จะไปหยิบเลขถูก เอ้ยไปหยิบได้ถูกเล่ม

00:03:27.900 --> 00:03:31.200
อ่านี่คือฟิสิคอลเวิลด์ที่เราคุ้นเคยกันเนาะ

00:03:32.200 --> 00:03:39.100
ทีนี้กลับมาที่ตัวงานดาต้าของเราเนี่ย ในยุคแรกๆ
เนี่ยตัวระบบดาต้ามันยังไม่ซับซ้อนครับ

00:03:39.100 --> 00:03:44.100
จริงๆ มันก็ซับซ้อนแหละ
แต่ว่าสิ่งที่มันอยู่มันอยู่ในสิ่งที่เรียกว่าดาต้าแวร์เฮาส์เนาะ

00:03:44.100 --> 00:03:47.100
อ่าซึ่งแต่ก่อนมันก็จะเป็นซอฟต์แวร์ก้อนเดียว

00:03:47.100 --> 00:03:51.800
อ่าอาจจะสมมติว่ามันเป็นตัวอาร์ดีบีเอสสักตัวหนึ่งที่มันใหญ่มากๆ นะครับ

00:03:51.800 --> 00:03:55.500
ซึ่งเราก็จะคุ้นเคยกับหน้าตัวหน้าการคิวรี่เนาะ

00:03:55.500 --> 00:04:02.500
แล้วเราก็จะคุ้นเคยกับอินเตอร์เฟสว่าเอ้ยเราใช้เอชพีเอลในการคิวรี่ตัวดาต้าที่เรามีอยู่เนี่ยขึ้นมาได้ในตัว

00:04:02.500 --> 00:04:09.300
ในตัว
ตัวดาต้าที่เราจัดการอยู่นะครับซึ่งตัวคอมโพเนนต์ตัวนี้หรือดาต้าแวร์เฮาส์ตัวนี้เนี่ย

00:04:10.100 --> 00:04:14.300
ความสะดวกสบายของมันน่ะก็คือเรารู้แค่เอชพีเอล

00:04:14.300 --> 00:04:18.500
เรารู้ว่าดาต้าเราอยู่ที่ไหน
เราสามารถซีเล็คจากตัวจุดที่เรารู้ได้เลย

00:04:18.500 --> 00:04:21.300
เราไม่จำเป็นต้องจำว่าเอ้ยอะไรมันอยู่ตรงไหนเนาะ

00:04:21.300 --> 00:04:25.900
เบื้องหลังจริงๆ ของแวร์เฮาส์เนี่ย
ถ้าเราไปดูอาร์คิเทคเจอร์ของของตัว rdbms เนี่ย

00:04:26.700 --> 00:04:31.900
มันจะประกอบด้วยคอมโพเนนต์ยุบยับเนาะแต่จะมีคอมโพเนนต์ตัวนึงชื่อว่าแค็ตตาล็อกเมเนเจอร์นะครับ

00:04:31.900 --> 00:04:37.500
หรือหรืออีกชื่อหนึ่งถ้าจะไปดูตัวอาร์คิเทคของตัวดาต้าเบสเนสเซสเซมเราเรียกว่าดาต้าดิกชันนารีนะครับ

00:04:37.500 --> 00:04:40.200
ตัวนี้จะเป็นตัวแมปว่าตัวเนื้อไฟล์จริงๆ อ่ะ

00:04:40.900 --> 00:04:43.300
อ่าตัวนั้นน่ะมันมีสตรัคเจอร์ของดาต้าเป็นยังไง

00:04:43.300 --> 00:04:48.200
ตัวดาต้าเบสชื่ออะไร
แล้วก็แต่ละคอลัมน์อ่ะมันเป็นไทป์ไหนอะไรอย่างเงี้ย

00:04:48.200 --> 00:04:50.000
จะถูกดีฟายไว้ในสิ่งที่เรียกว่าดาต้าดิกชันนารี

00:04:50.000 --> 00:04:52.900
ซึ่งอยู่ในสิ่งที่เรียกว่าแค็ตตาล็อกเมเนเจอร์เนาะ

00:04:52.900 --> 00:04:58.800
อ่าอันนี้คือยุคที่เป็นตัวอ่าผมเรียกว่าโมโนลิธิกดาต้าแวร์เฮาส์ก็คือยังเป็นก้อนใหญ่ๆ

00:04:58.800 --> 00:04:59.300
ก้อนนึงอยู่

00:04:59.900 --> 00:05:09.100
ทีนี้เนี่ยอย่างที่ทุกคนรู้กันอาจจะสักประมาณตอนนี้ปีสองพันยี่สิบห้าใช่ไหมย้อนกลับไปประมาณปีสองพันสิบเราเริ่มมีปัญหาการสเกลริ่ง

00:05:09.600 --> 00:05:14.600
อ่าเราเริ่มมีปัญหาการสเกลริ่งว่าโอเคไอ้ก้อนใหญ่ๆ
ก้อนนี้มันเริ่มเอาไม่อยู่แล้ว

00:05:14.600 --> 00:05:19.000
เพราะดาต้าในยุคที่มันเป็นเว็บเนี่ยมันไหลมาเยอะมาก

00:05:19.000 --> 00:05:22.900
ไม่ว่าจะเป็นสมมุติทำระบบบริษัทเอ็นเตอร์ไพรส์ใหญ่ เงี้ย ทำระบบเซลล์

00:05:22.900 --> 00:05:27.100
ทำหน้าเว็บขายของ ทำนู่นทำนี่
เราจะเริ่มมีดาต้าไหลเข้ามาในระบบเยอะๆ นะครับ

00:05:27.100 --> 00:05:31.400
ซึ่งตัวโมโนลิธิกดาต้าแวร์เฮาส์ก้อนโตๆ
เนี่ย ไม่ว่าจะขยายซีพียู

00:05:31.400 --> 00:05:35.800
ขยายแรม ขยายฮาร์ดดิสก์ยังไงเนี่ย
การที่มันระบบเป็นก้อนก้อนเดียวเนี่ยมันก็เริ่มเอาไม่อยู่แล้ว

00:05:36.300 --> 00:05:41.900
เพราะฉะนั้นมันเลยเกิดสิ่งที่ทุกคนอาจจะเริ่มคุ้นเคยกันดีกันดีในยุคนี้นะครับ ก็คือคลาวด์

00:05:42.500 --> 00:05:45.600
อ่าเริ่มมีการสเกลเป็นดิสซิบิวเต็ดเป็นคลาวด์อย่างเงี้ย

00:05:45.600 --> 00:05:51.500
แล้วเกิดสิ่งที่เรียกว่าคลาวด์ดาต้าแพลตฟอร์มขึ้นนะครับ ซึ่งพอเรามองย้อนไปเนี่ย

00:05:52.500 --> 00:05:55.600
เอ่อตะกี้เราคุ้นเคยกับ structure
ของตัวดาต้าแวร์เฮาส์เนาะ

00:05:55.600 --> 00:05:57.900
คนที่ทำงานกับดาต้าก็เลยเริ่มคิด structure

00:05:57.900 --> 00:06:13.200
ว่าเอ้ยเราจะทำยังไงดีนะที่เราจะทำการประมวลผลดาต้าอยู่บนคลาวด์โดยใช้คอมโพเนนต์ที่มันทำให้เราใกล้ใกล้เคียงกับสิ่งที่เราเคยทำได้มากที่สุดครับมันก็เลยเกิดเป็นบิวดิ้งบล็อกตัวนี้ครับขึ้นมาเป็นตัวคลาวด์ดาต้าแพลตฟอร์ม

00:06:14.100 --> 00:06:18.700
อ่าซึ่งสมมุติถ้าเราเราคิดถึงการที่เราจะทำงานกับดาต้าอย่างเงี้ย

00:06:18.700 --> 00:06:21.400
ในใจเราจะเริ่มคิดแล้ว
เฮ้ยมันต้องมันต้องมีคอมโพเนนต์อะไรบ้างนะ

00:06:21.900 --> 00:06:23.400
เอ่อ หลักหลักเนี่ย

00:06:23.900 --> 00:06:28.300
โดยส่วนใหญ่จากจากที่ประสบการณ์คุยกับหลายคนมาหรืออ่านในคอมมูนิตี้มาเนี่ย

00:06:28.300 --> 00:06:32.100
คนจะเริ่มโฟกัสกับสองอย่าง
สองอย่างแรกสุดเลยนะครับ

00:06:32.100 --> 00:06:36.600
ซึ่งจริงจริงมันก็สำคัญนะ เออ
ก็คือเราโฟกัสกับตัวคอมพิว

00:06:37.300 --> 00:06:40.700
อ่าซึ่งคือซีพิวกับแรมเนาะ รีสอร์ทต่างๆ
ที่เราต้องใช้ในการประมวลผล

00:06:40.700 --> 00:06:42.500
อีกส่วนหนึ่งที่เราจะคิดก็คือตัวสตอเรจ

00:06:43.200 --> 00:06:46.600
อ่าเราจะคิดถึงสอง
สองคอมโพเนนต์นี้ก่อนเสมอเลยซึ่ง

00:06:46.600 --> 00:06:52.600
ซึ่งมันก็ไม่ผิดเนาะ
แต่ว่าอีกจุดหนึ่งที่สำคัญก็คือแล้วเราจะใช้ดาต้าตัวนั้นยังไง

00:06:52.600 --> 00:06:58.000
อ่ามันจะเกิดคำถามว่าเรามีซีพู--
เรามีคอมพิวเตอร์เครื่องหนึ่งอ่ะเอาไว้ประมวลผลแล้วอ่ะ

00:06:58.000 --> 00:07:02.600
แต่พอประมวลผลเสร็จแล้วอ่ะเราจะเอาตัวประมวลผลตัวเนี้ยให้คนอื่นใช้ยังไงนะครับ

00:07:02.600 --> 00:07:03.700
ซึ่งอันนี้เป็นจุดที่

00:07:03.700 --> 00:07:04.100
ที่

00:07:04.100 --> 00:07:11.700
ที่ค่อนข้างจะสำคัญในจุดนี้อ่าแต่ก่อนอื่นก่อนก่อนในยุคที่เป็นคลาวด์เนี่ยก่อนที่ไปถึงยุคที่มันมีแค็ตตาล็อกเนี่ย

00:07:12.800 --> 00:07:17.600
อยากจะให้เห็นโลกก่อนว่าโลกที่มันไม่มีแค็ตตาล็อกเนี่ยหน้าตามันเป็นยังไง

00:07:17.600 --> 00:07:20.100
อ่าทุกคนอาจจะรู้จักเทอมเทอมนี้

00:07:20.100 --> 00:07:24.200
อ่าในยุคนี้น่าจะเป็นคอมมอนเวิร์ดแล้วก็คือสิ่งที่เรียกว่าดาต้าเลคเนาะ

00:07:24.200 --> 00:07:27.900
อ่าอย่างที่อย่างที่เกริ่นไปตะกี้ก็คือในยุคคลาวด์เนี่ย

00:07:28.800 --> 00:07:31.900
เรามีดาต้าเยอะมากเนาะมันจะถูกฟีดดิ้งเข้ามาผ่านการอินเจ็ทเข้ามา

00:07:31.900 --> 00:07:34.800
ผ่านการซิงค์อินทิเกรตเข้ามาเยอะมากอยู่ในสิ่งที่เรียกว่าดาต้าเลค

00:07:35.400 --> 00:07:40.500
เสร็จแล้วเนี่ยดาต้ามันกองอยู่ตรงเนี้ยเยอะมาก แล้วเราจะต้องใช้มัน

00:07:40.500 --> 00:07:48.200
อ่ะทีนี้เนี่ยการที่เราไม่มีวิธีการการจัดการมันสมมุติเราเอามากองกันแล้ว เออทุกระบบ เดฟ เดฟ

00:07:48.200 --> 00:07:50.700
เอ่อ รีพอร์ต เอ่อ
อนาลิสต์อะไรอย่างเงี้ยเอามากองไว้ตรงนี้

00:07:51.500 --> 00:07:58.200
ถ้าไม่มีการจัดการให้มันดีดี
สิ่งที่เกิดขึ้นก็คือแทนที่เราจะได้วาดฝันว่าโอ้เรามีดาต้าเยอะมาก

00:07:58.200 --> 00:08:03.600
แล้วเราจะมีดาต้าแวร์เฮาส์ที่เราสามารถคิวรี่เออแบบที่เราเคยทำได้ในสมัยที่เรามี

00:08:03.600 --> 00:08:09.300
Data warehouse เป็นก้อนก้อนเนี่ย มันจะเกิดการกรอง Data
ออกมาเยอะเป็นเขาเรียกว่าอะไร Garbage in

00:08:09.900 --> 00:08:14.300
ครับซึ่งเราก็จะเกิดคำถามว่าเอ๊ะแล้วเราจะใช้
Data ตัวนี้ยังไงเนาะ เออ

00:08:15.300 --> 00:08:18.500
ซึ่งสถานะเนี้ยในการที่เรามี Data

00:08:18.500 --> 00:08:22.700
Lake
แล้วเราใช้งานมันไม่ได้อ่ะสิ่งเนี้ยในทางเทคนิคเราเรียกว่า Data Swarm

00:08:23.400 --> 00:08:26.600
ครับ Data Swarm เนี่ยมันเป็นสเตจของตัว Data

00:08:26.600 --> 00:08:34.200
Lake
ที่เราเอาข้อมูลไปใช้ไม่ค่อยได้อ่ะหรือใช้ยากอะไรอย่างเงี้ยเราไม่รู้ว่าเราจะหาข้อมูลตัวนั้นยังไงอ่ะยกตัวอย่างเช่น

00:08:34.200 --> 00:08:39.000
เฮ้ย ถ้าสมมติเราอยากได้ Log สมมติมี Traffic
งานเข้าเราทำเว็บอีคอมเมิร์ซเนาะสมมติ

00:08:39.000 --> 00:08:46.400
แล้วเราอยากรู้ว่าเฮ้ยมีการมีการมีคนเอามีคนเข้าเว็บไซต์เราเท่าไหร่วันนี้เดือนนี้มียอดขายเท่าไหร่เดือนนี้จริงๆ

00:08:46.400 --> 00:08:52.400
เดฟก็เอา Data มากรองให้ Data Lake
แล้วนะแต่ว่าเราไม่มีวิธีการจัดการมันเราก็จะไม่รู้จะใช้งาน Data

00:08:52.400 --> 00:09:08.800
ตัวนั้นยังไงอ่ะ เออ Data
อยู่ตรงนั้นแหละแต่เราเรายังไม่ได้ทำเอามาพาสเอามาทำนู่นนั่นนี่ในการจัดการให้มันเป็นระบบนะครับซึ่งอันเนี้ยเป็นไซน์ที่ที่สำคัญมากในการที่สมมติถ้าเราอยู่ในยุคคลาวด์เนี่ยจะให้มองไว้เพราะว่ามันจะช่วยป้องกันปัญหาที่ก่อนที่มันจะเริ่มโต

00:09:08.800 --> 00:09:14.000
เราเราสามารถหยุดมันได้อ่านะครับซึ่ง

00:09:14.000 --> 00:09:22.500
Data Swarm
เนี่ยเป็นสเตจที่ทุกคนก็ไม่อยากเจอเนาะอ่าเพราะฉะนั้นมันก็เลยเกิดคอมโพเนนต์ขึ้นมาในยุคในยุคคลาวเหมือนกันอีกตัวซึ่งก็คือสิ่งที่เราจะคุยกันวันนี้ก็คือ

00:09:22.500 --> 00:09:23.900
Data Lake เอ้ย Data Catalog

00:09:24.600 --> 00:09:37.900
ครับผมอ่าในการจัดการว่าเราจะใช้ข้อมูลแต่ข้อมูลยังไงทีนี้เนี่ยผมพูดเร็วไปไหมนะไม่เร็วนะโอเคครับทีนี้เนี่ยก่อนที่จะไปคุยกันเรื่อง

00:09:37.900 --> 00:09:40.600
Data Catalog
ต่อเนี่ยอยากให้รู้จักกับประเภทของ Data

00:09:40.600 --> 00:09:48.100
Catalog ก่อนนะครับโอเคคือถ้าเราเอาคำว่า Data
Catalog ไปเสิร์ชใน Google

00:09:48.100 --> 00:09:54.000
ตอนนี้ในปี 2024 ตอนนี้ปี 2025
เนาะเราจะเจอว่าโอ้โหมันมีมันมี Tooling

00:09:54.000 --> 00:09:58.600
หลายชื่อหลายตัวอยู่ในสารสนเทศในการทำตัว

00:09:58.600 --> 00:10:06.700
Cloud Data Platform
เยอะมากเยอะไปหมดเยอะจนเรารู้สึกว่าเฮ้ยเราจะใช้ตัวไหนดีวะเออซึ่งตัว Data

00:10:06.700 --> 00:10:08.600
Catalog เนี่ยถ้าเรามามองประเภทมันจริงๆ

00:10:08.600 --> 00:10:13.600
เนี่ยมันสามารถแบ่งกลุ่มได้เป็นสองประเภทใหญ่ๆ นะครับตัวแรก

00:10:13.600 --> 00:10:20.800
อ้อก่อนอื่นไอ้คำ Catalog
อันที่ผมเล่าไปแล้วเนาะก็คือมันเป็นคำที่โหลมากครับเราพูดกับบุคคลที่หนึ่ง

00:10:20.800 --> 00:10:22.500
บุคคลที่สอง บุคคลที่สาม ทุกคนอาจจะเข้าใจว่า

00:10:22.500 --> 00:10:30.200
Catalog
ไม่เหมือนกันเลยก็ได้อ่าเพราะฉะนั้นนั่นคือสาเหตุว่าทำไมเราต้องมาคุยกันว่ามันมีประเภทอะไรบ้างนะครับ

00:10:30.200 --> 00:10:33.000
ประเภทแรกเราเรียกว่า Technical Catalog

00:10:33.000 --> 00:10:38.800
นะครับ Technical Catalog
เนี่ยหน้าที่หลักของมันก็คือทำการ Track ตัว Table Metadata

00:10:39.400 --> 00:10:44.500
นะครับว่า Table
เรามีหน้าตาเป็นยังไงเอ่อมีสกีม่าเป็นยังไงมี

00:10:44.500 --> 00:10:45.900
Database อะไรบ้างแล้วมันจัด Hierarchy

00:10:45.900 --> 00:10:50.600
กันยังไงอยู่ตรงโลเคชั่นไหนนะครับซึ่งหัวใจสำคัญมันก็คือเป็นตัว

00:10:50.600 --> 00:11:00.800
Source of Truth ของตัวเนื้อ Data
ของเราว่ามันอยู่ที่ไหนนะอ่านะครับตัวนี้เป็นตัวแรกซึ่งมีมีมีถ้าจากดูรูปใหญ่ๆ

00:11:00.800 --> 00:11:07.200
ตะกี้เนาะมันสามารถแบ่งมาอยู่ในนี้ได้อีกหลายตัวมากอีกกลุ่มนึงซึ่งเอ่อผมว่าถ้าเราเสิร์ชด้วยคำว่า

00:11:07.200 --> 00:11:12.100
Data Catalog
เราจะเจอสิ่งนี้มากกว่าสิ่งนั้นเราเรียกว่า Federated Catalog นะครับ

00:11:12.600 --> 00:11:17.600
Federated Catalog เนี่ยหรือในอีกชื่อนึงอาจจะเป็นชื่อ
Business Catalog แต่ผมไม่ค่อยอยากเรียกว่า

00:11:17.600 --> 00:11:19.400
Business Catalog เนาะ Federated Catalog

00:11:19.400 --> 00:11:23.900
Federated คืออะไร Federated
คือการที่เอามารวมรวมกันจากหลายหลายแหล่งนะครับตัว

00:11:23.900 --> 00:11:27.600
Federated Catalog เนี่ยจะทำการ
Track ในเลเวลที่

00:11:27.600 --> 00:11:33.900
Business มองอ่าตัว Technical Catalog
อะเราจะมองในมุมของของเครื่องมือเนาะเอ่อมองมุม Engineer

00:11:33.900 --> 00:11:38.400
ว่าเออเครื่องมือมันเชื่อมถึงกันยังไงแต่มุม Federated
Catalog เนี่ยเราจะมองในมุมของ Business

00:11:38.400 --> 00:11:41.600
ว่าโอเคตัวฝั่ง Business เนี่ยเราจะมอง

00:11:41.600 --> 00:11:46.100
Data
อะไรเราจะมองหาอะไรซึ่งมันจะประกอบด้วยตัวความสามารถไอ้

00:11:46.100 --> 00:11:52.100
Capability เนี่ยในมุมอีกมุมหนึ่งเช่นตัว Data Governance
ในการจัดการ Access Control หรือว่าตัว

00:11:52.100 --> 00:12:00.600
Document
และการสืบค้นเพื่อให้มันง่ายขึ้นนะครับอ่าซึ่งต้องบอกว่าวันนี้เนี่ยด้วยความที่เรื่อง

00:12:00.600 --> 00:12:04.700
Data Catalog
มันใหญ่มากเนาะวันนี้เราจะโฟกัสที่ Technical Catalog

00:12:04.700 --> 00:12:12.500
นะครับด้วยเวลาที่เรามีจำกัดอีกสิบแปดนาทีอ่ะทีนี้เนี่ยถ้ามาดูว่าตัว Catalog

00:12:12.500 --> 00:12:17.600
เนี่ยมันทำงานยังไงอ่ะอ่าตะกี้เราเห็นก้อนคอมโพเนนต์คอมโพเนนต์เล็กๆ

00:12:17.600 --> 00:12:20.600
ตะกี้เนาะในในภาพของตัว Data Platform

00:12:21.600 --> 00:12:26.000
ต้องย้อนกลับไปเลยว่าจุดเริ่มต้นมันน่ะในยุคที่มันเริ่มออกมาเป็นตัว

00:12:26.000 --> 00:12:31.200
Distributed เนี่ยอ่ามันเกิดสิ่งที่เรียกว่า
Hive Metastore ขึ้นนะครับ

00:12:31.200 --> 00:12:40.700
Hive Metastore
เกิดขึ้นตอนไหนต้องบอกว่าในยุคนี้มีใครเอ่อไม่รู้จักฮาดูปไหมครับ

00:12:40.700 --> 00:12:47.300
ติ๊กต็อกติ๊กต็อกแปลว่ารู้จักกันทุกคนอ่านะครับฮาดูปเนี่ยมันเกิดมาตอนประมาณช่วงปี

00:12:47.300 --> 00:12:52.100
2010 กว่าๆ
เนาะเออมันเกิดปัญหาว่าตอนนั้นคำคำที่บูมมากก็คือคำว่า Big Data

00:12:53.400 --> 00:12:57.800
ตอนนั้นเนี่ยมันเกิดปัญหาว่าโอเคคอมพิวเตอร์เครื่องนึงไอ้ที่เราเกริ่นกันก่อนหน้านี้ว่า Data

00:12:57.800 --> 00:13:01.900
Warehouse
ก้อนก้อนหนึ่งมันเริ่มมันเริ่มไม่ไหวละแล้วคอมพิวเตอร์มันแพงมากตัว

00:13:01.900 --> 00:13:17.100
CPU
อะไรมันแพงมากในการที่จะสเกลขึ้นมาเป็นระบบระบบหนึ่งก็เลยเกิดเฟรมเวิร์คขึ้นมาครอบคลุมก็คือตัวฮาดูปเนาะซึ่งมันทำให้เราใช้คอมพิวเตอร์เครื่องถูกถูกเนี่ยในการกระจายโหลดของการประมวลผลเนี่ยไปอยู่หลายหลายตัวได้นะครับตัวฮาดูปเนี่ยมันจะมีสเต็กคร่าวคร่าวก็คือมันจะมีตัว

00:13:17.100 --> 00:13:21.600
HDFS
อยู่ข้างล่างเนาะอันนี้ไม่แน่ใจเห็นเมาส์ผมไหมก็คือมี HDFS

00:13:21.600 --> 00:13:27.700
เป็นตัวเป็นตัวสตอเรจเนาะถ้าเราเทียบกับภาพคลาวด์ตะกี้แล้วก็มีตัวยานเป็นตัวจัดการรีซอร์สแล้วก็จะมีตัว

00:13:27.700 --> 00:13:37.200
MapReduce
ที่เป็นเฟรมเวิร์คเนี่ยไว้คอยเขียนโปรแกรมในการเอาไปประมวลผลบนบนฮาดูปนะครับทีเนี้ยในยุคแรกแรกของฮาดูปเนี่ยมันเกิดปัญหาว่าตัว

00:13:37.200 --> 00:13:55.000
MapReduce เอ่อ API
ของมันเนี่ยมันเขียนยากเพราะว่าคนที่จะเขียนโปรแกรมกับฮาดูปได้ถามว่าต้องเขียนยังไงก็เขียนภาษาจาวาแล้วถามว่าคนเดฟที่เป็นอะไรนะอะนาไลสต์สมมติเราจะเขียนจาวาอย่างเงี้ยในการเอาไปข้อมูลไปวิเคราะห์เขียนเป็นโปรแกรมจาวาแล้วก็รู้สึกว่าโอ้โหตอนแรกแม่งอยู่ใน

00:13:55.000 --> 00:13:59.900
Data Warehouse
เขียนเอสพีเอลกันสวยงามสวยงามมันต้องไปเขียนจาวามานั่งทำโปรแกรมแบบ Reduce

00:13:59.900 --> 00:14:12.200
อะไรอย่างเงี้ยมันเริ่มมีความเป็นซอฟต์แวร์เอ็นจินีระลิกจัดจัดละมันก็เริ่มไม่สะดวกนะครับในช่วงถัดมาเนี่ยฝั่งเฟซบุ๊กก็เลยบอกว่าโอเคมันเริ่มลำบากไปละเราก็เลยสร้างไฮฟ์ขึ้นมาครอบตัว

00:14:12.200 --> 00:14:16.900
MapReduce Framework
ตัวนี้อีกทีนึงซึ่งตัวไฮฟ์เนี่ยจะเป็นทำตัวเป็น

00:14:16.900 --> 00:14:18.800
Data Warehouse ที่อยู่บน Distributed

00:14:18.800 --> 00:14:32.000
Framework
ซึ่งก็คือฮาดูปเนาะในการทำให้เราสามารถคิวรี่โดยใช้ท่าแบบทำเป็นเอสพีเอลที่เราเคยทำได้อยู่บนฮาดูปถามว่าข้อดีคืออะไรข้อดีคือเราได้พลังการประมวลผลในระดับระดับ

00:14:32.000 --> 00:14:38.500
Data
ที่ใหญ่มากในระดับฮาดูปแต่เราก็ยังมีอินเทอร์เฟซที่เราใช้งานง่ายที่เป็นเอ่อเอสพีเอลอินเทอร์เฟซในการทำงานกับ

00:14:38.500 --> 00:14:45.800
Data
นะครับซึ่งถ้าเราไปดูอาร์ชิเทคเจอร์ของไฮฟ์เนี่ยถ้าคุณภาพตัว Data Warehouse

00:14:45.800 --> 00:15:03.300
ตะกี้เนาะจะเห็นว่ามันแยกส่วนของของตัวที่เป็นรีซอร์สกับอ่าดิสก์กับตัวคอมพิวออกจากกันนะครับแต่ว่าอันนี้อาจจะไม่ต้องลงดีเทลมากแต่ว่าสิ่งที่อยากจะให้เห็นก็คือเราจะรู้ได้ไงว่าตัว

00:15:03.300 --> 00:15:09.900
Data
ตัวนั้นมันอยู่ที่ไหนนะครับมันก็เลยมีคอมโพเนนต์คอมโพเนนต์หนึ่งซึ่งมันมีลูกศรชี้เข้าชี้ออกเยอะมากสิ่งนั้นคือ

00:15:09.900 --> 00:15:18.700
Metastore
ตัวนี้วงกลมสีน้ำเงินตัวนี้เป็นคอมโพเนนต์ที่เกิดขึ้นมาในยุคนั้นนะครับซึ่งตัว

00:15:18.700 --> 00:15:23.600
Metastore เนี่ยทำหน้าที่หลักๆ
เนี่ยก็คือจัดการตัว Abstraction

00:15:23.600 --> 00:15:33.600
อย่างที่ผมบอกก็คือแทนที่เราจะมานั่งนั่งเปิดไฟล์อ่านทำเขียนโปรแกรมกับตัวฮาดูปอินเทอร์เฟซเท็ดอีพีเอสอย่างเงี้ยสิ่งที่เราทำก็คือตัวเนี้ยมันจะจัดการสร้าง

00:15:33.600 --> 00:15:41.900
Abstraction ครอบความเป็น Table
ในในมายด์ซีควอลอะไรอย่างเงี้ยขึ้นมาให้เพื่อให้เราสามารถคิวรี่ได้แล้วก็จัดการในการทำตัว

00:15:41.900 --> 00:15:45.700
Data Discovery ในการหาว่าเฮ้ยตัว Data
เนี้ยมีอะไรบ้างจัดเป็น

00:15:45.700 --> 00:15:55.900
Catalog เป็น Collection
ไว้เพื่อให้เราสามารถสืบค้นได้นะครับตัวเนี้ยคือคือคือความสามารถของมันนะครับซึ่งถ้าไปมองมองใน

00:15:55.900 --> 00:15:58.000
Stack ย้อนกลับมาเนาะใน Stack ใหญ่ๆ

00:15:58.000 --> 00:16:09.200
เนี่ยตัวเนี้ยคอคอจริงๆ
มันมีแค่นั้นเลยก็คือทำหน้าที่ในการเก็บว่าอะไรมันอยู่ตรงไหนแล้วจะเข้าถึงได้ยังไงนะครับเสร็จแล้วเนี่ยพอมันโฟกัสมากมากเนี่ย

00:16:09.200 --> 00:16:13.700
มันก็มีคนมาเชื่อมกับมันอยู่ใน
ในสเต็กรอบตัวมัน ยกตัวอย่างเช่น

00:16:13.700 --> 00:16:16.900
ตัวคอมพิว--
คอมพิวเตอร์เอนจินอย่างเช่นสปาร์คหรือไฮอะไรอย่างเงี้ย

00:16:16.900 --> 00:16:20.300
ซึ่งถ้าใครใช้สปาร์คยุคนี้เนาะ
ก็จะมีบางคนแบบว่า

00:16:20.300 --> 00:16:23.400
เฮ้ย
ทำไมจะต้องเซ็ตตัวไฮเมกะสโตอีกนะ เราไม่ได้ใช้ไฮนะ

00:16:23.400 --> 00:16:26.500
เพราะว่าสปาร์คเนี่ยมันไม่รู้ว่าอะไรมันอยู่ตรงไหน

00:16:26.500 --> 00:16:29.900
อะ มันต้องมีคนคอยบอกว่าอะไรมันอยู่ตรงไหน
ซึ่งก็คือตัวไฮเมกะสโต

00:16:29.900 --> 00:16:32.600
หรือว่าตัวเพรสโตเนี่ย
ถ้าสมมติไปเก็บของไว้เนี่ย

00:16:32.600 --> 00:16:38.600
บางทีมันก็ไม่รู้ ก็ต้องพึ่งตัว
ตัวไฮเมกะสโตในการแบบว่าบอกว่า เฮ้ย อะไรมันอยู่ตรงไหนนะครับ อะ

00:16:39.300 --> 00:16:45.300
แต่ว่ามันก็ไม่ได้คิดแค่นั้นอย่างเดียว อย่างเช่น
ความสามารถในการจัดการ access control อย่างเงี้ย

00:16:45.800 --> 00:16:48.800
เอ่อ
ตัวไฮมันก็มีระดับนึงแต่ว่าคนที่จัดการจริงๆ

00:16:48.800 --> 00:16:52.900
ก็เอ็กเทนอ่านความรู้ที่ได้จากตรงไฮเมกะสโตเนี่ยไปอยู่ในฝั่ง

00:16:52.900 --> 00:16:55.000
apache ranger อะไรอย่างเงี้ย หรืออย่างเช่น

00:16:55.000 --> 00:17:01.900
เอาข้อมูลในเมกะสโตเนี่ยไปทำดาต้าลิเนต์เนี่ยก็ไปอยู่ในฝั่งตัวapache at last นะครับอะ

00:17:01.900 --> 00:17:07.700
อันนี้คือภาพรวมคร่าวๆ
เนาะซึ่งพอเรามาดูตัวก้อนของไฮเมกะสโตจริงๆ อะ

00:17:07.700 --> 00:17:09.800
จริงๆ คอมโพเนนต์มัน มันง่ายมากเนาะ ถ้าใคร

00:17:10.599 --> 00:17:15.300
ถ้าใครเคยเขียนเว็บมาบ้างเนาะ จะรู้จัก เอ่อ
สิ่งที่เรียกว่าอะไรนะ ทรี เทียร์ อาร์คิเทคเจอร์เนาะ

00:17:15.300 --> 00:17:17.800
อ่า มันก็จะมีแบบเป็นดาต้าเบส เป็นแบ็คเอ็น

00:17:17.800 --> 00:17:20.300
เป็นฟร้อนท์เอ็นอะไรอย่างเงี้ยที่
ที่เราคุ้นเคยกันเนาะ

00:17:20.300 --> 00:17:24.900
ตัวไฮเมกะสโตโปรแกรมจริงๆ
เนี่ยมันประกอบไปแค่สามชั้นอย่างงี้เลยครับ

00:17:24.900 --> 00:17:28.000
ชั้นแรกเนี่ยก็คือตัวมิสเตอร์--
เมต้าสตอร์เซอร์วิส

00:17:28.000 --> 00:17:34.000
ตัวเนี้ย สีสีเหลืองเหลืองตัวเนี้ย
ซึ่งถูกเขียนในตัว อ่า ทริปเฟรมเวิร์คเนาะ

00:17:34.000 --> 00:17:38.400
อ่า
ซึ่งเป็นอินเทอร์เฟซอีกลูปแบบหนึ่งซึ่งสมัยนี้อาจจะหาคนเขียนได้ยากแล้วนะครับ

00:17:38.400 --> 00:17:42.800
เป็นอินเทอร์เฟซไว้ให้คุยกับตัว component อื่นๆ
นะครับ แล้วก็จะมีตัวฝั่งตัว database

00:17:42.800 --> 00:17:48.300
ซึ่งตัวเนี้ยจะเก็บตัวเมตาดาต้า
อย่างที่บอกเราเก็บอะไร เราเก็บตัว table

00:17:48.900 --> 00:17:54.900
เราเก็บตัว field ว่าเอ๊ย มันมีอะไรเป็นแบบไหน
เสร็จแล้วตัวสุดท้ายที่เรามาคุยกันเนี่ยก็คือตัว

00:17:54.900 --> 00:17:57.600
client ซึ่งเอาไว้ในการ interact
กับตัว metastore

00:17:57.600 --> 00:18:00.800
service ซึ่งก็คุยผ่านตัวที่
protocol อีกทีนึงนะครับอะ

00:18:01.400 --> 00:18:03.000
ดูเข้าใจง่ายๆ

00:18:03.800 --> 00:18:09.300
นะครับ
ทีนี้ถ้าเราเจาะลึกเข้าไปในตัวดาต้าเบสว่าตัวไฮเมกะสโตเนี่ย

00:18:09.300 --> 00:18:10.900
สุดท้ายแล้วมันเก็บอะไรบ้างใน table

00:18:10.900 --> 00:18:16.900
มันมีบอกที่ทำเอาดาต้าเบสของไฮเนี่ย มา
มาแกะตัวสกีม่าให้ดูเป็นแผนผังอีกทีนึง

00:18:16.900 --> 00:18:18.400
เราจะเห็น table แบบยุบยับเต็มไปหมดเลย

00:18:18.400 --> 00:18:24.300
แต่ถ้าเราอ่านชื่อมันดีดีเนี่ยจะเริ่มเห็นว่ามันคือองค์ประกอบที่ทำให้เรามีสิ่งที่เรียกว่าตัว

00:18:24.300 --> 00:18:30.000
table กับดาต้าเบสที่ ที่เราคุ้นเคยกันได้ ยกตัวอย่างเช่น
พอเราแยกตัวเมตาดาต้าออบเจกต์ออกมาเนี่ย

00:18:31.100 --> 00:18:34.200
สามกลุ่มหลักหลักที่เราต้องใช้ในการคิวรี่มีอะไรบ้าง

00:18:34.200 --> 00:18:39.300
เราอยากรู้เนาะว่าตัวดาต้าเบสมีดาต้าเบสอะไรบ้าง เราอยากรู้ว่าเทเบิลเนี่ย

00:18:40.000 --> 00:18:42.500
ในเทเบิลเทเบิลหนึ่งเนี่ยมันมีคอลัมน์อะไรบ้าง

00:18:43.100 --> 00:18:47.500
ตัวดาต้าเบสไหนเป็นเจ้าของ
สตอร์เรจมันเป็นอะไร ก็คือตัวไทป์ของฟีลเนาะ

00:18:47.500 --> 00:18:51.800
เสร็จแล้วตัวโลเคชั่นของไฟล์ของเทเบิลเหล่านั้นเนี่ยมันอยู่ที่ไหนนะครับ

00:18:51.800 --> 00:18:58.700
แล้วก็ส่วนสุดท้ายคือพาร์ติชัน อันนี้
อันนี้ต้องสืบย้อนกลับไปนิดนึงว่าความเป็นยุคฮาดูปเนี่ย

00:18:59.600 --> 00:19:02.500
เอ่อ ตัวไฟล์อ่ะมันยังอยู่ในระดับไฮแลคีย์อยู่

00:19:02.500 --> 00:19:08.600
หมายความว่าเราเก็บตัวไฟล์เป็น
เป็นไฮแลคีย์ตัวดาต้าอะไรอย่างเงี้ยแล้วการที่เราจะแอคเซ็ปต์ได้เนี่ย

00:19:08.600 --> 00:19:12.200
มันก็จะผ่านชั้นตัวเปโฟลเดอร์โฟลเดอร์โฟลเดอร์ซ้อนเข้าไปนะครับ

00:19:12.200 --> 00:19:17.400
ก็เลยต้องมีสิ่งที่เรียกว่าพาร์ติชันขึ้นมาด้วย
เดี๋ยวตอนตัวอย่างอาจจะได้เห็นครับ

00:19:18.200 --> 00:19:20.900
ทีนี้ตะกี้มันเป็นแอสเซกชันเนาะ
เรามาดูตัวอย่างของจริงกันดีกว่า

00:19:21.500 --> 00:19:25.200
พอตอนสมมติเรครีเอทเทเบิลตัวเนี้ย

00:19:25.200 --> 00:19:29.000
พอเราเค-
พอเราสั่ครีเอทเทเบิลอันนี้ทุกคนน่าจะคุ้นเคยตัวเอสเคแอลตัวนี้เนาะ

00:19:29.000 --> 00:19:31.200
เออ นะครับ
ถ้าทำงานดาต้าน่าจะคุ้นเคยกันอยู่แล้ว

00:19:31.700 --> 00:19:34.600
พอเราสั่งครีเอทเทเบิลผ่านตัวไคล์เอนท์มันเนี่ย

00:19:34.600 --> 00:19:38.400
ไคล์เอนท์เนี่ยจะไปสั่งให้เมต้าโฟลเซอร์วิสเนี่ยเก็บข้อมูลลงในตัว

00:19:38.400 --> 00:19:42.400
อ่า
ดาต้าเบสแต่ละเทเบิลนะครับซึ่งตะกี้ก็อย่างที่เราบอกไปมันมีทั้งดาต้าเบส

00:19:42.400 --> 00:19:46.400
มีทั้งตัวเทเบิลแล้วก็จะมีตัวพาร์ติชันเนาะ อะไรอย่างเงี้ย

00:19:46.400 --> 00:19:49.700
เก็บเป็นไทป์ว่าโอเคมีฟิลด์อะไรบ้างนะครับ

00:19:49.700 --> 00:19:57.200
ซึ่งตรงตัวไม่มีอะไรตะกี้ผมพูดไปนิดนึงแล้วเรื่องการที่มันเก็บว่า โอเคมันเป็น

00:19:57.800 --> 00:20:00.900
เป็นชั้นตัวอ่าโฟลเดอร์ยังไงเนาะ

00:20:00.900 --> 00:20:05.900
อ่าซึ่งเป็นชั้นชั้น
อันนี้ก็เลยต้องเก็บข้อมูลลงใน ในตัวเมต้าโฟล์

00:20:07.800 --> 00:20:14.600
อาจจะงงนิดนึงตรงนี้ ทีนี้ตอนรีดเนี่ย ถามว่าตอนรีด
รีดยังไง เนื่องจากความที่มันเก็บข้อมูลลงเป็น

00:20:14.600 --> 00:20:18.100
เป็นเทเบิลไดเรกทอรีแต่ละเทเบิลเนาะ ในตัว
ในตัวชั้นสตอร์เรจของมัน

00:20:19.000 --> 00:20:22.900
ทุกครั้งที่มันถามคิวรี่ขึ้นมา
สิ่งที่เกิดขึ้นก็คือตัวคิวรีเอ็นจิ้นน่ะ

00:20:22.900 --> 00:20:26.300
ไม่ว่าจะเป็นตัวไฮเป็นสปาร์คอะไรอย่างเงี้ย จะวิ่งไปถามดาต้า

00:20:26.300 --> 00:20:29.500
ดาต้า ดาต้าโฟล์ตตัวเมต้าโฟล์ก่อนเสมอว่า เฮ้ย

00:20:30.200 --> 00:20:34.400
เราอยากจะคิวรี่ตัวเนี้ย
สมมติในนี้มันเป็นเอ็มโพลีแทรกเกอร์คอฟฟี่ล็อกตัวเนี้ย

00:20:34.400 --> 00:20:39.200
อยากถามว่าไอ้เทเบิลตัวเนี้ย
มันมีฟิลด์อะไรบ้าง ฟิลด์นั้นมี

00:20:39.200 --> 00:20:42.500
เอ่อมีไทป์เป็นอะไร
โลเคชั่นของไฟล์มันอยู่ที่ไหนนะ

00:20:42.500 --> 00:20:45.800
เสร็จแล้วถ้าสมมติเราเค-
เราคิวรี่สมมติเราชอบคิวรี่เป็น

00:20:45.800 --> 00:20:51.900
เป็นไทม์แสตมป์เนาะ ซึ่งหลายๆ
ครั้งในงานดาต้าเราแบ่งงานเป็นพาร์ติชันตัวนี้ก็จะบอกอีกว่าโฟลเดอร์มันอยู่ตรงไหน

00:20:51.900 --> 00:20:54.900
เสร็จแล้วพอเราได้ข้อมูลจากตรงนี้มากมากอะ ได้ครบแล้วเนี่ย

00:20:55.500 --> 00:21:01.300
ตัวคิวรีเอ็นจินเนี่ยก็จะวิ่งไปอ่านตัวไฟล์แต่ละพาธซึ่งอาจจะอยู่ในตัวออบเจกต์สตอร์เรจหรือว่าตัว

00:21:01.300 --> 00:21:07.300
อ่า เอชดีบีเอสได้นะครับ
อันนี้เป็นหลักการทำงานของมัน ซึ่ง อ่า

00:21:07.300 --> 00:21:09.200
พอถึงจุดนี้ก็รู้สึกว่ามันฟังดูดีเนาะ

00:21:09.200 --> 00:21:12.500
มันฟังดูดีว่าเออมันก็ตรงไปตรงมา
นี่แบบไปถาม ไปถามอะไรนะ

00:21:12.500 --> 00:21:16.800
ไปถามบรรณารักษ์ว่าอะไรอยู่ตรงไหนแล้วก็ อ่า
ไปหยิบของได้ของกลับมานะครับ

00:21:17.300 --> 00:21:19.800
แต่มันมีลิมิเตชันในยุคนี้อยู่นะครับ

00:21:20.300 --> 00:21:25.300
ลิมิเตชันยุคนี้ก็คือ
อย่างแรกตัวอินดิเฟดของเมต้าโฟล์เองเนี่ย

00:21:25.300 --> 00:21:28.500
มันเขียนด้วยทริป
ถามว่าในยุคนี้มีใครเขียนโปรแกรมด้วยทริปไหมครับ

00:21:29.300 --> 00:21:31.400
ไม่มีเนาะ ทุกคนรู้จักแต่เอชดีพี

00:21:31.900 --> 00:21:37.200
ทุกคนรู้จักแต่เรซโปรโตคอล ทุกคนรู้จักอะไรอาจจะ
อาจจะแบ- อาจจะแรงขึ้นก็คือจีพีอาร์ซี

00:21:37.200 --> 00:21:41.400
อะไรอย่างเงี้ย
เพราะฉะนั้ทริปอินเทอร์เฟซในยุคนี้เนี่ยมัน มันค่อนข้างจะแบบเริ่ม

00:21:41.400 --> 00:21:45.600
เริ่มจะหาคนดูแลยากและจะหาคนเอ็กเทนได้แล้วอีกจุดหนึ่งที่อาจจะเป

00:21:45.600 --> 00:21:49.300
लิมิเตชันของตัวไฮเมกะสโตคือ
ทุกครั้งที่มันคิวรี่อะ

00:21:49.800 --> 00:21:52.400
มันต้องไปถามตัว อาร์ดีบีเอ็มเอส

00:21:52.400 --> 00:21:55.500
ทุกอย่าง ทุกอย่างยกเว้นตัวดาต้า

00:21:55.500 --> 00:21:58.400
ทุกอย่างหมายถึงอะไร ตัวคอลัมน์ เดฟินิชัน

00:21:58.400 --> 00:22:03.500
เทเบิลอยู่ที่ไหน โลเคชั่นอยู่ตรงไหนอะไรอย่างเงี้ย
มันต้องไปถามตรง ตรงอาร์ดีบีเอส

00:22:03.500 --> 00:22:06.000
ตัวดาต้าเบสที่มันเป็นตัวเก็บเมต้าโฟล์หนักมาก

00:22:06.000 --> 00:22:09.200
ซึ่งถ้าสมมติเราต้องคิวรี่เยอะเยอะหรือกับเราอยากสแกนด้วยว่า

00:22:09.200 --> 00:22:12.700
เฮ้ย
ทั้งหมดเนี่ยมันมีเก็บข้อมูลอยู่เท่าไหรเนี่ย

00:22:12.700 --> 00:22:18.600
ตัวดาต้าเบสตัวเนี้ยไม่ว่าจะสเกลเท่าไหร่มันก็จะเริ่มเหนื่อยมากจนเริ่มจะเป็นคอห่วนในระบบนะครับ

00:22:18.600 --> 00:22:24.200
แล้วก็จริงจริงแล้วตัวทิปีเอพีไอเนี่ยมันสามารถต่อตรงได้ซึ่งอาจจะไม่ค่อยปลอดภัยเท่าไหร่เนาะอันนี้

00:22:26.000 --> 00:22:30.800
ทีนี้เนี่ยพอพอเห็นว่าไอ้เมต้าโฟล์เนี่ยมันมันเหนื่อยมากมากเนาะ เออ

00:22:31.500 --> 00:22:34.800
netflix ก็เลยบอกว่า โอเค เรา
เราจะไม่อยู่กับมันละ เรา

00:22:34.800 --> 00:22:39.100
เราอยู่กับมันมานานพอละ เราจะแก้ปัญหามัน
มันก็เลยรู้จักสิ่งที่เรียกว่า เอ้ย

00:22:39.100 --> 00:22:41.800
มันก็เลยเกิดสิ่งที่เรียกว่า open table format

00:22:41.800 --> 00:22:49.500
ซึ่งหนึ่งในตัวที่เกิดขึ้นมาใน ใน netflix ก็คือ iceberg
ครับในนี้มีใครไม่รู้จักไอซ์เบิร์กมยนะ

00:22:50.300 --> 00:22:52.200
โอเค แปลว่าส่วนใหญ่รู้จักนะครับ

00:22:52.200 --> 00:22:54.100
ไม่แปลกใจเพราะนี่มันงานดาต้าเอ็นจิเนียร์เนาะ

00:22:54.100 --> 00:22:56.900
เออ (หัวเราะ)
เราไม่รู้จักไอซ์เบิร์กก็อาจจะแปลกแปลกหน่อยครับ

00:22:56.900 --> 00:23:01.700
ตัวในยุคไอซ์เบิร์กเนี่ยถ้าเราไปเสิร์ชตัวอาร์คิเทคเจอร์มันจริงจริงเนี่ย

00:23:01.700 --> 00:23:06.800
มันจะเริ่มต่างจากไฮแล้ว
พอเรามองดูเนี่ยไอ้สิ่งที่มันชูโรมมาเป็นแถวแรกสุดเลยอะ

00:23:07.400 --> 00:23:13.500
คือสิ่งที่เรียกว่า iceberg catalog นะครับ
ตามด้วยตัว metadata layer และตัว data layer

00:23:14.000 --> 00:23:15.100
นะครับ อ่า

00:23:16.000 --> 00:23:17.400
เดี๋ยวเรามาเจาะดูทีละตัวกัน

00:23:18.500 --> 00:23:19.700
ตัว iceberg catalog เนี่ย

00:23:20.600 --> 00:23:24.700
ถ้าเรามองดูเนาะ เฮ้ย มันก็ต่างจากมัน
มันก็เหมือนไฮเมกะสโตเนาะ

00:23:24.700 --> 00:23:26.400
แต่ถ้าเราดูในอินดีเทลจริงจริงเนี่ย

00:23:27.100 --> 00:23:29.800
ตัวเนี้มันจะลดโหลดบางอย่าง

00:23:30.600 --> 00:23:34.800
สิ่งที่มันเก็บเนี่ยมันจะเก็บแค่เมตาดาต้าคอยน์เตอร์

00:23:34.800 --> 00:23:39.500
หมายความว่าอะไร
หมายความว่าแทนที่จะเก็บตัวเทเบิลเดฟินิชันทั้งหมด อย่างเช่น เรา

00:23:39.500 --> 00:23:42.700
เทเบิลเราเนี่ยมีดีดีแอล เอ่อ
มีฟิลด์หน้าตาแบบไหน

00:23:42.700 --> 00:23:45.100
มีคอลัมน์อะไรบ้างอย่างเงี้ยเก็บในไอซ์เบิร์กคายล็อก

00:23:45.100 --> 00:23:49.800
ไม่
ไอซ์เบิร์กคายล็อกบอกว่าเราเก็บแค่โลเคชั่นของมันนะครับ

00:23:49.800 --> 00:23:56.600
เสร็จแล้วพอเรารู้โลเคชั่นของตัวเมตาดาต้าเนี่ยในเลเวลที่สองเนี่ย ตัวเมตาดาต้าเก็บอะไร

00:23:56.600 --> 00:24:03.100
ตัวเมตาดาต้าเก็บรายละเอียดของเทเบิลตรงนั้นทั้งหมด
รายละเอียดนั้นมีอะไรบ้าง รายละเอียดนั้นคือ

00:24:03.100 --> 00:24:09.400
เรามี อ่า ไฟล์เก็บผ่านอยู่ที่ไหน
เรามีสกีม่าหน้าตาเป็นยังไงบ้างอะไรอย่าง เงี้ย

00:24:09.400 --> 00:24:14.500
ไอ้รายละเอียดที่เราเคยเก็บอยู่ในตัว Hive
Metastore เนี่ย มันถูก offload

00:24:14.500 --> 00:24:19.000
ออกมาอยู่ในตัว Metadata Layer ซึ่ง อ่า

00:24:19.700 --> 00:24:23.200
พอมัน offload ตรงนี้เนี่ย การสเกล
การสเกลตัว อ่า

00:24:23.900 --> 00:24:29.300
ความสามารถของไฟล์ ความสามารถของการทำ Schema Evolution
อย่างเงี้ย มันเกิดขึ้นได้ง่ายขึ้นแล้ว Core

00:24:29.300 --> 00:24:33.000
Code มันไม่ได้อยู่ที่ตัว Hive Metastore
หรือตัวดาต้าเบสของมันอีกแล้วนะครับ

00:24:33.000 --> 00:24:38.800
ส่วนสุดท้ายเนี่ยก็คือตัว Data File
ซึ่งจะมีสิ่งที่เรียกว่า Manifest File เป็นตัวประกบไว้เนาะ

00:24:38.800 --> 00:24:45.800
ตัวเนี้ยก็จะเป็นตัวคอยบอกย่อยอีกทีนึงว่าตัว Data File
เราเนี่ย Type มันเป็นอะไร อ่า นะครับ

00:24:45.800 --> 00:24:49.900
ซึ่งพอมาดูตัว Iceberg เนี่ย Iceberg

00:24:49.900 --> 00:24:54.400
จริงๆ แล้วตัวแค็ตตาล็อกมีหลายตัว แต่ตัวหนึ่งที่
Iceberg ชูขึ้นมาก็คือสิ่งที่เรียกว่า

00:24:54.400 --> 00:24:58.800
Iceberg REST Catalog นะครับ Iceberg REST Catalog
เนี่ยมันเป็นเหมือน standard ที่

00:24:58.800 --> 00:25:02.800
Iceberg
สร้างขึ้นมาว่าการจะทำแค็ตตาล็อกเนี่ยในการคุยกับตัว Iceberg Table เนี่ย

00:25:03.400 --> 00:25:06.900
มันต้องคุยกันด้วย อ่า ฟอร์แมตอะไรบ้างนะครับ

00:25:06.900 --> 00:25:10.000
ซึ่งคอมโพเนนต์ ถ้าเรา
ถ้าเราคุ้นเคยกับภาพตัว Hive Metastore ตะกี้เนาะ

00:25:10.600 --> 00:25:14.500
หน้าตามันก็จะมาแนวเดียวกันเลยก็คือตัว Iceberg

00:25:14.500 --> 00:25:20.300
Catalog ซึ่งตะกี้เราพูดถึงว่า Trip มันมีปัญหาเนาะใน
Hive MetastoreIceberg บอกว่า Iceberg

00:25:20.300 --> 00:25:24.100
ลองไปใช้ที่ Trip
เราจะใช้อะไรที่คนเขาเอาไว้ implement ง่ายๆ

00:25:24.100 --> 00:25:29.200
เพราะฉะนั้นก็เลยเกิดสิ่งที่เรียกว่า REST Catalog
Specification ขึ้นมานะครับ แล้วก็คุยกันผ่านตัว

00:25:29.700 --> 00:25:33.600
HTTP Service ที่ อ่า
ทุกคนอาจจะเข้าใจกันอยู่แล้ว

00:25:34.100 --> 00:25:34.200
อะ

00:25:34.800 --> 00:25:38.300
แล้วก็ยังมีมรดกตกทอดออกมาอยู่ก็คือ

00:25:38.300 --> 00:25:43.800
อ่า
เราจะต้องเก็บข้อมูลตัวบางอย่างอยู่ในตัวดาต้าเบสของตัว Iceberg REST Catalog

00:25:43.800 --> 00:25:49.700
ซึ่งเดี๋ยวเราไปลงดีเทลต่อไปนะครับ
แล้วก็มีตัวไคลเอนท์ที่คุยกันผ่านตัว REST Interface

00:25:49.700 --> 00:25:52.000
ไปที่ Iceberg REST Catalog เนาะ อ่า

00:25:53.500 --> 00:25:55.300
ตะกี้เราพูดถึงอันนี้ไปนิดนึงแล้วก็คือ

00:25:55.300 --> 00:26:01.700
แทนที่เราจะเป็นสเปคของทริปซึ่งค่อนข้างจะแบบล็อกวินเดอร์มากแล้วเราไม่รู้ว่าเฮ้ยข้างในมันมีอะไรมีอะไรบ้างนะ

00:26:01.700 --> 00:26:04.000
ตัว Iceberg บอกว่า Iceberg เราทำ REST Catalog

00:26:04.000 --> 00:26:07.200
specification ให้
แล้วก็ถ้าใครอยากทำตัวคอนเนคเตอร์

00:26:07.200 --> 00:26:10.200
เอ้ยทำตัวแค็ตตาล็อกเนี่ยก็
implement ตามนี้เลยนะครับ

00:26:10.200 --> 00:26:15.200
ซึ่งถ้าใครเป็นโปรแกรมเมอร์แล้วอ่าน ???
เป็นก็จะรู้ว่าโอเคมันมีแค่ input output

00:26:15.200 --> 00:26:18.200
ที่เราแค่ต้องเสิร์ฟออกมาตาม specification

00:26:18.200 --> 00:26:22.300
ส่วนเราจะเป็น implement ด้วยภาษาอะไรเป็น
python เป็น rust เป็นอะไรก็แล้วแต่

00:26:23.100 --> 00:26:27.800
ก็แค่ทำตามนี้ก็พอนะครับอีกจุดหนึ่งที่น่าสนใจของตัว

00:26:27.800 --> 00:26:30.500
Iceberg Catalog ก็คือตัว Metadata
Object อย่างที่บอก

00:26:31.000 --> 00:26:35.000
ถ้าเราย้อนกลับไปดูภาพ ภาพแรกตรงนี้เนาะ
Iceberg Catalog เนี่ย

00:26:36.000 --> 00:26:38.900
ตรงเนี้ยมันบอกว่าเราเก็บแค่ Metadata Pointer

00:26:38.900 --> 00:26:44.600
หมายความว่ายังไง พอเราไปดูตัวสกีมาจริงๆ
ที่ตัวดาต้าเบสของตัว Iceberg Catalog มันเก็บไว้อะ

00:26:45.200 --> 00:26:47.200
สิ่งที่มันสนใจมันสนใจแค่สองอย่างเองก็คือ

00:26:47.900 --> 00:26:52.800
มันมีเนมสเปซอะไรบ้าง
เนมสเปซเนี่ยในภาษาที่เราเข้าใจกันก็คือดาต้าเบสเนาะ อ่า

00:26:52.800 --> 00:26:59.000
อีกตัวหนึ่งที่เราสนใจเนี่ยก็คือตัว Iceberg Table
ก็คือตัว Table จริงๆ ซึ่งตัว Table เนี้ย

00:26:59.900 --> 00:27:04.000
เราสนใจแค่ว่ามันอยู่กับเนมสเปซไหน อ่า ชื่ออะไร

00:27:04.600 --> 00:27:10.300
แล้วสิ่งที่สนใจจริงๆ คือ
เมตาดาต้าไฟล์มันน่ะอยู่ที่ไหนนะครับ ซึ่งอาจจะเป็นผ่านใน

00:27:10.300 --> 00:27:15.900
HDFS ผ่านใน S3 ผ่านในจี-- จี-- เอ่อ Google
Storage อะไรอย่างเงี้ยก็ว่าไปนะครับ

00:27:17.600 --> 00:27:20.200
ทีนี้มาดูเทียบกันว่าจังหวะการเขียนเป็นยังไง

00:27:20.900 --> 00:27:24.900
จังหวะการเขียนสมมุติเราสร้างครีเอทเทเบิลคล้ายๆ
กับตอนที่เราทำ Hive Metastore ตะกี้เนาะ

00:27:26.000 --> 00:27:32.800
พอมันเขียนเนี่ยสิ่งที่มันเซฟลงในตัวดาต้าเบสมันเซฟแค่ว่า โอเค เราเกิดดีบีเทเบิลหนึ่งนะ

00:27:32.800 --> 00:27:39.800
ดีบีเทเบิลหนึ่งมีการมีเมตาดาต้าไฟล์อ่ะอยู่ที่นี่
อยู่ที่อาจจะเป็นวีโอเอส-- เอ่อ อาจจะเป

00:27:40.500 --> 00:27:43.200
เอชสามแล้วก็เป็นพาธซัมติงอะไรอย่างเงี้ย

00:27:43.200 --> 00:27:50.300
แล้วก็เป็นไฟล์ดอตเจสามที่เราอาจจะไปอินสเปคได้นะครับเสร็จแล้วมันก็จะสร้างตัวโฟลเดอร์ขึ้นมาในตัวออบเจกต์สโตเรจจริงๆ

00:27:50.300 --> 00:27:59.000
แล้วก็เกิดตัวเมตาดาต้าไฟล์ขึ้นมาเป็นเวอร์ชั่นแรกนะครับซึ่งตัวไอซ์เบิร์กแคตาล็อกมันพอยต์ไปอยู่นะครับอ่านี่คือการครีเอทเทเบิลเนาะ

00:27:59.000 --> 00:28:00.700
ทีนี้จังหวะที่มันลีดบ้างล่ะ

00:28:01.600 --> 00:28:06.500
จังหวะที่มันลีดสมมติเรามีดาต้าแล้วเนี่ย
สิ่งที่เกิดขึ้นตามจังหวะก็คือ โอเค

00:28:06.500 --> 00:28:09.800
ตัวไคเอนท์เนี่ยวิ่งไปถามตัวไอซ์เบิร์กแคตาล็อกมันว่า เทเบิลนี้

00:28:10.700 --> 00:28:12.500
อ่า เมตาดาต้าไฟล์มันอยู่ที่ไหนนะ

00:28:12.500 --> 00:28:16.700
มันก็จะจิ้มไปว่าโอเคอยู่ที่เมตาดาต้านะ
เสร็จแล้วพอวิ่งไปที่เมตาดาต้าปุ๊บ

00:28:16.700 --> 00:28:21.200
เมตาดาต้าก็จะบอกว่าตัวแมนิเฟสต์ไฟล์ของตัวดาต้าไฟล์เราอยู่ที่ไหน

00:28:21.200 --> 00:28:27.600
มันก็จะวิ่งไปตามขั้น
ถามว่าภาพเนี้ยมันดูเหมือนไม่มีอะไร แต่จริงๆ แล้วสิ่งที่เกิดขึ้นน่ะ

00:28:27.600 --> 00:28:30.900
ไอ้ตัวโหลดในซิสเต็มของไอซ์เบิร์กแคตาล็อกตรงเนี้ยมันน้อยมาก

00:28:30.900 --> 00:28:33.900
สิ่งที่มันถามก็แค่ถามว่าอะไรมันอยู่ตรงไหน แบบจุดจุดเดียว

00:28:34.700 --> 00:28:38.100
รายละเอียดของเทเบิล เช่น
เรารู้ว่าคอลัมน์มันอยู่ที่ไหน

00:28:38.100 --> 00:28:40.400
โลเคชั่นของตัวดาต้าไฟล์อยู่ตรงไหนอย่างเงี้ย

00:28:40.400 --> 00:28:45.700
รวมถึงเวอร์ชั่นของดาต้ามันถูกออฟโหลดไปอยู่ข้างๆ
ในเมตาดาต้าเลเยอร์หมดเลยนะครับ

00:28:45.700 --> 00:28:50.900
นี่คือ
นี่คือวิวัฒนาการที่เกิดจากยุคไฮท์โตรขึ้นมาเป็นไอซ์เบิร์กแคตาล็อก อ่า

00:28:52.100 --> 00:28:58.100
ครับซึ่งตัวแอดเวนเทจเมื่อกี้ผมผมน่าจะเล่าไปหมดแล้วผมขอข้ามแล้วกันนะครับ ตึ๊งตึ๊ง

00:28:59.400 --> 00:29:03.600
พูดถึงอนาคตบ้างซึ่งตะกี้ทุกคนจะเริ่มเข้าใจแล้วว่าจริงๆ

00:29:03.600 --> 00:29:07.100
แล้วตัว
ตัวแคตตาล็อกเนี่ยมันก็เริ่มพอจะทำงานยังไงเนาะ อ่า

00:29:08.700 --> 00:29:13.700
ทีนี้เนี่ยพอแคตตาล็อกมันทำงานพื้นฐานได้ละ คนก็เริ่มแบบว่า โอ๊ย

00:29:13.700 --> 00:29:15.500
มันก็ไม่ได้ซับซ้อนขนาดนั้นนี่หว่า เรา

00:29:16.000 --> 00:29:22.000
เราเริ่มจะมียูสเคสว่าเอามันไปใช้กับอะไรบ้างดีนะครับถ้าเราตามเทรนด์ใน

00:29:22.000 --> 00:29:24.700
ในตัวดาต้าเอ็นจินีียริ่งคอมมิตี้มาสักพักเนาะ

00:29:24.700 --> 00:29:27.300
เราจะเริ่มเห็นว่าตัว OpenTableFormat

00:29:27.300 --> 00:29:32.000
เนี่ยมัน มันค่อนข้างจะโดมิเนตช่วงนี้หนักมากนะครับ
เราทุกคนต้องปรับตัวอยู่กับมันนะครับ

00:29:32.700 --> 00:29:39.000
เทรนด์แรกเกี่ยวกับ Data Catalog
ที่อยากจะให้รู้ก็คือมันจะเริ่มเกิดสิ่งที่เรียกว่า

00:29:39.000 --> 00:29:42.000
Format Agnostic Catalog Format
Agnostic คืออะไร

00:29:42.000 --> 00:29:47.300
อ่า ใน ในช่วงที่เราดูตรงเนี้ย
มันจะมีบางตัวที่บอกมันว่า

00:29:47.300 --> 00:29:52.200
เคเราชอบทำงานกับไฟล์ฟอร์แมตนี้
เราชอบทำงานกับไฟล์ฟอร์แมตนี้ที่อยู่ในดาต้าเลคเฮาส์

00:29:52.200 --> 00:29:58.500
แต่ทุกคนก็รู้ว่าหลายรี--
หลายนีดในปัจจุบันมันก็มีรีฟไลม์เนนต์แต่ละทีมไม่เหมือนกันเนาะ

00:29:58.500 --> 00:30:00.600
ทีมนี้อยากได้ อ่า เพอร์ฟอร์แมนดีๆ

00:30:00.600 --> 00:30:04.800
ในการคิวลี่ข้อมูล
ทีมนี้อยากได้แค่แบบเป็นทำมัลลี่สตรัทอะไรอย่างเงี้ย

00:30:04.800 --> 00:30:11.200
ซึ่งพอรีฟไลม์เนนต์นีดมันไม่เหมือนกันเนี่ย มันก็เลยเกิด
อ่า ตัวแคตตาล็อก เกิดโอเพ่นฟา-- เอ่อ

00:30:11.200 --> 00:30:13.300
โอเพ่นฟอร์แมตขึ้นมาหลายๆ ไฟล์นะครับ

00:30:13.300 --> 00:30:14.500
ซึ่งไอ้ฟอร์แมต

00:30:14.500 --> 00:30:14.900
Agnostic

00:30:14.900 --> 00:30:21.800
ตัวเนี้ยมันเข้ามาแก้ปัญหาในจุดนี้ก็คือแทนที่เราจะมีหนึ่งแคตตาล็อกต่อหนึ่งไฟล์โอเพ่นฟอร์แมตไทป์เนี่ย

00:30:22.300 --> 00:30:25.400
เรามีแคตตาล็อกตัวเนี้ยที่มันอินเตอร์ออปกับตัว

00:30:26.000 --> 00:30:31.300
ตัวไฟล์ไทป์หลายหลายแบบได้เลยนะครับซึ่งเพื่อให้มั่นใจได้ว่าเรามี

00:30:31.800 --> 00:30:33.600
เรามีอะไรนะ ไฟล์ฟอร์แมตที่เหมาะสมกับแต่ละ

00:30:33.600 --> 00:30:33.800
use

00:30:33.800 --> 00:30:34.100
case

00:30:34.100 --> 00:30:35.000
แล้วก็ตัว

00:30:35.000 --> 00:30:40.300
specification
ค่อนข้างจะเปิดกว้างเพื่อจะให้เราเอ็กเทนด์มากยิ่งขึ้นนะครับ ซึ่งตัวอย่างของตัว

00:30:41.100 --> 00:30:44.300
อ่า ฟอร์แมต Agnostic Catalog
ตัวเนี้ยก็คือตัว Unity Catalog เนาะ

00:30:44.300 --> 00:30:48.500
ซึ่งตอนนี้ซัพพอร์ตหลากหลายมากกับตัวอย่างเช่น อาเช่ กาวิททีโน

00:30:48.500 --> 00:30:54.700
หรือว่าตัว XTable
เองก็น่าจะกำลังคิดอยู่ตรงนี้อยู่ว่าเป็นตัวแคตตาล็อกที่ซัพพอร์ตในการอินเตอร์

00:30:54.700 --> 00:30:59.400
อินเตอร์โปรเซส ตัว OpenTable Format
นะครับอีกกลุ่มหนึ่งนะครับ

00:31:00.400 --> 00:31:04.300
เอ่อ ประมาณช่วงเดือนที่แล้วผม
ผมไปเจอบทความความหนึ่งชื่อว่า

00:31:05.000 --> 00:31:09.800
Rise of Single Node Processing นะครับ มัน
มันพูดถึงเทรนด์ในช่วงนี้ว่า เฮ้ยทำงาน Data Engineer

00:31:09.800 --> 00:31:12.500
เรา เราไม่ค่อยอยากจะ เขาเรียกอะไรนะ

00:31:12.500 --> 00:31:18.400
เซ็ตอัพตัวคลัสเตอร์ในการประมวลผลขึ้นมาเยอะแล้วเพราะเทคโนโลยีในการคอมพิวเตอร์เอนจินเนี่ยมัน

00:31:18.400 --> 00:31:20.400
มัน มันดีขึ้นมากแล้วยกตัวอย่างเช่น ไอ้

00:31:20.900 --> 00:31:24.100
MacBook ตัวเนี้ย เอาจริงๆ มันก็แรงเนาะถูกไหม

00:31:24.100 --> 00:31:26.600
มัน มันไม่เหมือนคอมสมัยก่อนที่แบบแรมสี่กิ๊ก

00:31:26.600 --> 00:31:30.600
ซีพียูแบบกระจิ๋งหนึ่งอะไรอย่างเงี้ย
แล้วเราประมวลผลดาต้า ไม่ได้

00:31:30.600 --> 00:31:37.800
คอมสมัยนี้มันแรงพอที่เราจะทำอะไรในเครื่องได้แล้วมันก็เลยเกิดทูริ่งที่ทำให้เราประมวลผลในเครื่องได้ที่เป็นซิงเกิลโปรเซสเซอร์อย่างเช่นตัว

00:31:37.800 --> 00:31:41.700
DuckDB
หรือตัวอาปาเช่อาโรหรือตัวโพลาร์อย่างเงี้ย

00:31:41.700 --> 00:31:52.500
อ่าซึ่งพอเกิดมูฟเม้นท์ตัวนี้ขึ้นมาสิ่งที่เกิดขึ้นคือความเป็นแคตตาล็อกอะแทนที่เราจะต้องเมนเทนเป็นคอมโพเนนต์แยกอะมันจะเริ่มชิพไปหาฝั่งที่เป็นโปรเซสเซอร์มากขึ้น

00:31:52.500 --> 00:31:59.400
ก็คือให้มันอยู่ในเครื่องนี้เลยโดยการพีโหลดตัวอ่าแคตตาล็อกหรือโนว์เลจในการแอกเซสซิ่งดาต้าเข้าไปนะครับ

00:31:59.400 --> 00:32:04.600
ซึ่งมันก็ช่วยลดความซับซ้อนในการเมนเทนคอมโพเนนต์หลายหลายคอมโพเนนต์ที่อยู่ในคลาวด์ดาต้าแพลตฟอร์มมากขึ้น

00:32:04.600 --> 00:32:10.300
แต่อย่างที่บอกพอเราออฟโหลดสิ่งเนี้ยเข้าไปอยู่ในฝั่งยูเซอร์มากขึ้นเนี่ยการจัดการตัว

00:32:10.300 --> 00:32:12.200
access control หรือว่าแบบ security

00:32:12.200 --> 00:32:17.900
อะไรอย่างเงี้ยมันก็เริ่มมีความชาเลนจ์อยู่นะครับตัวนี้เป็นเป็นเทรนด์อีกเทรนด์หนึ่งที่ที่กําลังมาของแคตตาล็อก。

00:32:17.900 --> 00:32:22.800
เทรนด์สุดท้ายที่อยากจะพูดถึงครับ ก็คือตัว
orchestrator integrate นะครับ

00:32:23.400 --> 00:32:26.700
คือถ้าเรามองในมุมดาต้าแพลตฟอร์มเนาะ

00:32:26.700 --> 00:32:31.200
ทุกคนเนี่ยอยากทํางาน
ตะกี้พี่กานต์พูดถึงว่าถ้าอยากให้มันทํางานซ้ำๆ มันก็ต้องมีคอนเนาะ

00:32:31.900 --> 00:32:35.900
แต่ถ้างานในดาต้าจริงๆ
เราก็จะมีออร์เคสตราเตอร์เนาะ แอร์โฟร์หรือนู่นนั่นนี่

00:32:35.900 --> 00:32:39.900
หรือที่เราใช้กันนะครับ ซึ่งตัว orchestrator

00:32:39.900 --> 00:32:42.700
เนี่ยก็เริ่มมีมูฟเมนท์เหมือนกัน
แทนที่เราจะทํางานเป็น

00:32:42.700 --> 00:32:45.600
เป็นนักค้าแบบว่าทําเอไปบีไปซีอะไรอย่างเงี้ย

00:32:45.600 --> 00:32:50.400
เราจะเริ่มมองทํางานกับดาต้าในมุมของสิ่งที่เรียกว่าแอสเซ็ทมากยิ่งขึ้นนะครับ

00:32:50.400 --> 00:32:55.000
ซึ่งทั้งๆ ที่ตัว orchestrator
มันรู้อยู่แล้วว่ามันจะคุยกับใครอะไรยังไงอ่ะ

00:32:55.000 --> 00:32:58.900
มันก็ยกระดับตัวเองขึ้นมาว่า เฮ้ย
เรากุมความรู้ของแคตตาล็อกตัวนี้ไว้ด้วยนะ

00:32:58.900 --> 00:33:01.000
อยากรู้อะไรว่าอะไรมันเชื่อมกับอะไรตรงไหนเนี่ย

00:33:01.000 --> 00:33:04.400
มาดูที่เรานะครับถามว่าทําอย่างงี้แล้วมันดียังไง

00:33:05.500 --> 00:33:09.900
ดาต้าแคตตาล็อกส่วนใหญ่เนี่ยมันจะแยก component
ออกไปเป็นต่างหากตัวหนึ่งเนาะ

00:33:09.900 --> 00:33:15.700
แล้วต้องการที่จะทําให้มันมีมี value
ขึ้นมาเราต้องทําการส่งดาต้าให้มัน อาจจะจะเป็นการ

00:33:15.700 --> 00:33:21.100
push model หรือ pull model ก็ได้
แต่การที่เรามูฟตัวแคตตาล็อกตัวนี้มาอยู่ในตัว orchestrator

00:33:21.100 --> 00:33:22.500
ซึ่งทุกคนต้องทํางานกับมันอยู่แล้วอ่ะ

00:33:23.000 --> 00:33:27.200
มันทําให้ความรู้มันอยู่ตรงเนี้ย
แล้วการเกิดขึ้นของดาต้า

00:33:27.200 --> 00:33:31.900
ดาต้าควอลิตี้เป็นยังไงอย่างเงี้ย
มันถูกจัดการอยู่ในตัว orchestrator ทีเดียวเลยนะครับ

00:33:31.900 --> 00:33:38.600
ซึ่งมันก็ลดความซับซ้อนไว้อีกเนาะนะครับ
ซึ่งถามว่าตัวเนี้ยถามว่าเกิดขึ้นมากแค่ไหน เอ่อ

00:33:38.600 --> 00:33:41.000
ผมไม่รู้ผมไม่รู้ orchestrator ตัวอื่นเนาะ

00:33:41.000 --> 00:33:45.500
แต่ตัวอย่างดักซ์เตอร์หรืออย่างเช่นตัวแอร์โฟร์ที่ทุกคนใช้กันเนี่ย

00:33:45.500 --> 00:33:47.300
ดักซ์เตอร์ก็จะมีสิ่งที่เรียกว่าแอสเซ็ทเนาะ

00:33:47.300 --> 00:33:50.300
ตัวแอร์โฟร์ก็จะมีสิ่งที่เรียกว่าแอสเซ็ทตัวเนี้ยเป็นตัวไดรฟ์ตัว

00:33:50.300 --> 00:33:54.900
movement
นี้ขึ้นมาว่าโอเคเราย้ายแคตตาล็อกมาอยู่ที่ฝั่งของ orchestrator

00:33:54.900 --> 00:34:00.800
นะครับอ่ะทีนี้จริงๆ
ของเกินเวลาขออภัยนะครับ (หัวเราะ)

00:34:01.800 --> 00:34:05.500
จริงๆ
อ่ะที่ผมยกตัวอย่างเมื่อตะกี้มันมันยังไม่หมดของแคตตาล็อกเลยครับ

00:34:05.500 --> 00:34:10.300
มันเป็นแค่ตัวคอร์ความสามารถของแคตตาล็อกเลยว่าอะไรมันอะไรอยู่ตรงไหนนะครับ จริงๆ

00:34:10.300 --> 00:34:14.000
มันมีเรื่องอีกเยอะมากที่ไม่ได้พูดถึงซึ่ง

00:34:14.000 --> 00:34:24.300
เอ่อก็หวังว่าอันนี้อาจจะเป็นจุดเริ่มต้นที่ที่คนเราไปเขาเรียกไปมองมุมมุมแคตตาล็อกตัวนี้มากยิ่งขึ้นว่ามันควรจะทําอะไรได้ทําอะไรไม่ได้นะครับ

00:34:24.300 --> 00:34:31.100
แล้วก็สิ่งที่อยากจะฝากไว้อันสุดท้ายของทอล์คนี้คือคือตัวตัวตัวดาต้าแคตตาล็อกเนี่ย

00:34:31.900 --> 00:34:35.000
ถ้าสมมุติเราอยู่ในบริษัทเนาะลองลองคิดภาพตัวบริษัท

00:34:35.000 --> 00:34:40.400
บริษัทเนี่ยเวลาเราเข้าไปเนี่ยให้มองดูว่าตัวอะดอปเอะ-อะดอปเทชั่นของดาต้าเราเป็นเลเวลไหน

00:34:40.400 --> 00:34:47.199
อะบริษัทเราเป็นบราวน์ฟิลด์หรือเปล่าที่มีการทําเกาต์แมนหนักมากมีทุกอย่างพร้อมมีโปรเซสซิ่งเรียบร้อยแล้ว

00:34:47.199 --> 00:34:56.100
หรือว่าเราเข้าไปเป็นดาต้าอินจิเนียร์คนแรกที่อยู่ในบริษัทแล้วเราไม่รู้ว่าจะทําอะไรยังไงขึ้นมาอะไรอย่างเงี้ยนะครับความรู้ที่เรามีในการทําแคตตาล็อกตัวเนี้ย

00:34:57.600 --> 00:35:01.900
ในวันนี้ที่ผมเล่าไปเนี่ยมันเสิร์ฟสอง
สองคนสองคนสองกลุ่มเนี้ยต่างกัน

00:35:02.400 --> 00:35:06.300
อ่าอย่างเช่นสมมุติเราอยู่ในโลกที่มันบราวน์ฟิลด์มากเนาะ

00:35:06.300 --> 00:35:08.700
เออเรามีเกาต์แมนหนักมากเรามีนู่นนั่นนี่หนักมาก

00:35:08.700 --> 00:35:14.600
ถามว่าถ้าสมมุติเกาต์แมนเราเริ่มช้าหรือตัวดาต้าแคตตาล็อกของของตัวหลักเรามันเริ่มโหลดมากๆ

00:35:14.600 --> 00:35:18.900
อย่างเงี้ย
เราจะทํายังไงให้มันเร็วขึ้นในสภาวะที่องค์กรมันใหญ่มากๆ อย่างเงี้ย

00:35:18.900 --> 00:35:23.100
การที่เรารู้ว่าแคตตาล็อกมันทำงานยังไงหรือว่าเราจะเลือกใช้สร้างมันยังไงอย่างเงี้ย

00:35:23.700 --> 00:35:25.200
ตัวเนี้ยจะทําให้มันเอสเซ็นทรัลยิ่งขึ้น

00:35:26.500 --> 00:35:28.900
หรืออย่างเช่นถ้าอยู่ในกรีนฟีลด์อย่างเงี้ย

00:35:28.900 --> 00:35:32.400
โอเคเราไม่รู้อะไรเลยเราเป็นดาต้าเอนจิเนียร์คนแรกในบริษัทเราจะทำยังไง

00:35:32.400 --> 00:35:37.300
การที่เรารู้จักแคตตาล็อกเนี่ยมันทําให้รู้ว่าโอเคจุดเริ่มต้นที่ดาต้าซิติเซ็นเลเวลแรก

00:35:37.300 --> 00:35:42.800
เลเวลแรกคือใคร
คือเอ็นจิเนียร์ที่เราทํางานด้วยเนี่ยเขาจะใช้ดาต้ายังไงเนี่ยมันจะมีประโยชน์ยังไงบ้างนะครับ

00:35:42.800 --> 00:35:45.400
นอกจากที่เราจะรู้ว่าเราจะเลือกคอมพิวท์เอนจินยังไง

00:35:45.400 --> 00:35:51.800
เราจะเลือกสตอเรจตัวไหนนะครับตัวนี้ก็น่าจะหวังว่าจะช่วยให้อ่ากลุ่มคนที่อยู่ในสองโลกนี้เนาะ

00:35:51.800 --> 00:35:53.800
เข้าใจเข้าใจกับดาต้าแคตตาล็อกมากยิ่งขึ้น

00:35:54.500 --> 00:35:56.800
ครับผมประมาณนี้ครับขอบคุณครับ

00:35:56.800 --> 00:35:59.100
ขอเสียงปรบมือให้พี่แมนหน่อยค่ะ

00:35:59.800 --> 00:36:02.900
(เสียงปรบมือ) ขอบคุณพี่แมนมากๆ นะคะ
