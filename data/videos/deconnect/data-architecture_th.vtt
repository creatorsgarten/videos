WEBVTT

00:00:00.100 --> 00:00:03.800
โอเค ตามชื่อเรื่องหัวข้อนะครับ
Architecture Data Architecture

00:00:04.600 --> 00:00:06.700
เมื่อกี้เห็นแบบมีใครเป็นจูเนียร์บ้างไหมครับ

00:00:07.600 --> 00:00:08.000
จูเนียร์

00:00:08.700 --> 00:00:09.600
(หัวเราะ) ใครเป็นซีเนียร์นะ

00:00:10.800 --> 00:00:12.000
ไม่ ไม่ พูดไม่ได้

00:00:13.000 --> 00:00:21.400
โอเค จริงๆ ผมจะบอกว่าเซสชั่นนี้ครับพยายามที่จะแชร์ประสบการณ์สำหรับ Data Engineer

00:00:21.400 --> 00:00:25.300
มือใหม่เนาะ ว่าเดี๋ยวเราเห็นคำว่า Architect

00:00:25.300 --> 00:00:29.100
เนี่ย จะเป็นแบบรุ่นพี่หรือเปล่านะในการดีไซน์นะครับ

00:00:29.100 --> 00:00:35.400
เดี๋ยวผมจะพยายามทำให้พาทุกคนไปเรียนรู้กับมัน แล้วก็กลับไปทำที่บริษัทได้นะครับ

00:00:35.400 --> 00:00:42.200
หวังว่าจะเป็นแบบนั้นเนาะ โอเคครับตามชื่อเรื่องนะครับ
Data Architecture ในงานของ Data Engineer

00:00:43.000 --> 00:00:46.800
นะครับ
ใครก็เริ่มได้ ไม่จำเป็นต้องเป็นซีเนียร์เนาะ

00:00:46.800 --> 00:00:50.100
แนะนำตัวเองอีกรอบครับ ชื่อกานต์นะครับอยู่ที่ ODT

00:00:50.100 --> 00:00:59.100
Team หรือว่าเรียกสั้นๆ
ว่าโอดีทีนะครับ เอ่อ เพิ่งเปลี่ยนชื่อไตเติลเมื่อกี้นิดนึงนะครับ ตัดคำว่าโค้ชไปเป็นคำว่า Enable แทนเนาะ

00:00:59.100 --> 00:01:00.000
ลอกมาจาก เอ่อ

00:01:00.800 --> 00:01:04.500
Enabling ทีมในทีม Topology
นะครับ เราเข้าไป enable

00:01:04.500 --> 00:01:13.300
ลูกค้าให้เขาสามารถที่จะทำงาน ให้เขาสามารถที่จะคิดเองได้อะไรประมาณนั้นนะครับผม โอเค จริงๆ ก็อยู่ในงานสายงาน

00:01:13.300 --> 00:01:20.200
data มาหลายปีแล้ว 10 กว่าปีนะครับ แต่ว่าช่วงแรกๆ
ก็คือไปทำพวก พยายามแล้วกัน พยายามไปทำพวก data

00:01:20.200 --> 00:01:22.000
science พยายามไปทำ machine learning

00:01:22.700 --> 00:01:27.700
แล้วก็พบว่าโลกสวยฮะ (หัวเราะ)
เข้าไปทำงานคือไม่เจอ

00:01:27.700 --> 00:01:32.900
data
ไม่เจอระบบเลยนะครับ แล้วก็พัฒนาระบบมาแล้วก็เริ่มชอบพวก engineer

00:01:32.900 --> 00:01:39.100
ทั้งหลายแหล่นะครับ แล้วก็คิดว่าถ้าเราสามารถที่จะทำ
engineer หรือว่า data engineer ได้ดี

00:01:39.800 --> 00:01:47.300
คนที่จบสายงาน data scientist
อ่ะ เขาควรจะได้ทำในสายงานที่เขาเรียนมาเนาะนะครับ ประมาณนั้น โอเค

00:01:49.000 --> 00:01:52.100
เริ่มเรื่องดีกว่า วันนี้มี 3 หัวข้อนะครับ

00:01:52.100 --> 00:01:56.200
ก็คือเดี๋ยวจะลองเล่าถึงปัญหาในปัจจุบันก่อนนะครับ

00:01:56.200 --> 00:02:02.200
ว่าปัญหาในเรื่องของ Architect
เนี่ย มันมีปัญหาอะไรที่ผมอยากจะหยิบยกมาเล่าให้ฟังเนาะ

00:02:02.200 --> 00:02:08.699
แล้วก็การออกแบบ Data Architect
นะครับ ว่ามันเป็นแบบไหน สุดท้ายก็ทิ้งทวนเป็นรีแคปเฉยๆ

00:02:08.699 --> 00:02:19.200
นะครับ เกริ่นเป็น background ก่อน อ่า จะได้เข้าใจ
context ตรงกันเนาะ ภาพนี้ Data Engineer

00:02:19.200 --> 00:02:24.300
ทุกคนเดี๋ยวจะต้องเจอกันนะครับ ใครไม่เคยเห็นก็เดี๋ยวเห็นไว้นะครับ เดี๋ยวคุณจะได้เห็นภาพนี้ตลอดเวลา

00:02:24.900 --> 00:02:29.700
เป็นภาพ Data Engineer Life Cycle นะครับ มาจากหนังสือ
Fundamentals of Data Engineering

00:02:30.300 --> 00:02:36.700
นะครับ อ่า ปกติแล้วสายงาน Data Engineer
เราจะเห็นแต่ด้านบนเนาะ มีการ generate

00:02:37.500 --> 00:02:42.800
data จาก source นะครับ เข้าไปทำพวก transformation ต่างๆ
มี storage แล้วก็ไปออก dashboard ใช่มั้ย

00:02:43.500 --> 00:02:45.400
อันนี้เป็นภาพแบบเหนือน้ำ

00:02:46.200 --> 00:02:48.800
ทีนี้ภาพใต้น้ำเนี่ยครับ undercurrents เนี่ย

00:02:49.800 --> 00:02:53.700
เวลาใครถามผมอ่ะ ถ้าคุณอยากจะ
outstanding ในสายงาน Data

00:02:53.700 --> 00:02:57.200
Engineer เนี่ย ให้คุณโฟกัสที่
undercurrents นะครับ

00:02:58.100 --> 00:03:01.300
อ่า แล้วคุณจะเฉิดฉายในสายงานนี้ เพราะว่าด้านบนเนี่ยจริงๆ

00:03:01.300 --> 00:03:04.900
คุณทำไปสักพักคุณก็ทำได้แล้ว แต่ด้านล่างเนี่ยมันต้องอาศัย

00:03:04.900 --> 00:03:12.800
practice อาศัยประสบการณ์
อาศัยการเรียนรู้เพิ่มเติมเนาะ วันนี้เลยหยิบตรงนี้มาเล่าครับ เรื่องของ Data

00:03:12.800 --> 00:03:13.200
Architect

00:03:14.000 --> 00:03:18.400
โอเคเนาะ เป็นพาร์ทนึงของ undercurrents นะครับ

00:03:19.900 --> 00:03:20.800
ทีนี้คำว่า Architect

00:03:21.400 --> 00:03:24.600
ใครรู้ความหมายมันมั่ง (หัวเราะ) แปลว่าอะไรนะ

00:03:27.900 --> 00:03:32.200
แปลว่าสถาปัตยกรรม (หัวเราะ)
ไม่ได้ช่วยอะไรเลย (หัวเราะ)

00:03:33.100 --> 00:03:35.600
คือมันเป็นคำที่นิยามยากครับ คำว่า

00:03:35.600 --> 00:03:39.500
Architect เนี่ย เวลาที่พูดถึง Architect
เนี่ย บางคนก็จะให้นิยามแบบหนึ่ง

00:03:39.500 --> 00:03:43.900
บางคนให้นิยามแบบหนึ่ง
บางคนก็ให้นิยามแบบหนึ่ง โอเคมั้ย

00:03:43.900 --> 00:03:50.900
อะ ทีนี้ผมยกนิยามของที่เขาคุยกันนะครับ เอ่อ ในสายงานของซอฟต์แวร์อาร์คิเทคเนาะ Martin

00:03:50.900 --> 00:03:56.400
Fowler นะครับ เขาให้คำนิยามคำว่าอาร์คิเทคประมาณนี้นะครับ มันคือ

00:03:56.900 --> 00:04:03.100
Share understanding มั้ย Share understanding
that the expert developers

00:04:03.100 --> 00:04:08.600
have of the system
design. เวลาที่เขาดีไซน์อะไรออกมานะครับ

00:04:08.600 --> 00:04:15.800
เขาจะต้อง share
ความเข้าใจของเขาอะ สิ่งที่อยู่ในหัวของเขาอะออกมาให้คนอื่นเข้าใจด้วย โอเคไหม

00:04:15.800 --> 00:04:19.399
ไม่ว่าจะเป็นรูปแบบของภาพ รูปแบบของไดอะแกรม

00:04:19.399 --> 00:04:24.800
การเล่าเรื่องบอกต่อออกเป็นสไลด์ต่างๆ นะครับ
มันคือการ share understanding

00:04:24.800 --> 00:04:28.400
ให้ทุกคนเข้าใจ ให้ทุกคนเห็นภาพตรงกัน เห็นไหม

00:04:28.400 --> 00:06:05.800
อันนี้คือความหมายของ architect
ที่เดี๋ยวผมจะพูดวันนี้นะครับ โยนถึงปัญหาก่อน ปัญหามีอะไรบ้างนะ ปัญหาหลักๆ อันนึงนะครับ เป็นปัญหาระดับโลกเลยนะ คือเรามีอาร์คิเทคน้อยเกินไป เห็นไหมครับ ปัญหาระดับโลกเลยนะครับ เรามีจำนวนคนที่เป็น Data Architect หรือว่าเป็น Software Architect เนี่ยน้อยเกินไป เห็นไหม เพราะว่าอะไรครับ คือมันส่งผลหลายอย่างเลยเนาะ เรื่องของระบบของแต่ละองค์กร ทำไมเขาออกแบบมาเป็นแบบนี้ ทำไมมันล่มบ่อย นู่นนี่นั่น เออ มันเป็นปัญหาที่ว่าคนที่ไม่ได้เป็นอาร์คิเทคไปออกแบบอาร์คิเทค หรือว่าบางที business analyst ไปออกแบบอาร์คิเทคอย่างเงี้ยครับ เออ มันก็เลยดูไม่ค่อยจะตอบโจทย์เท่าไหร่ ทีนี้มันน้อยเกินไป มันอาจจะเป็นเพราะว่าคนที่เป็น Data Architect หรือว่าเป็น Software Architect ครับ ภาพจะเหมือนแบบเป็นลูกสิงโตอ่ะ ที่โดนถีบออกจากหน้าผา แล้วก็บอกว่าถ้ากูว่ายน้ำได้ แล้วกูปีนขึ้นมาได้จากหน้าผาขึ้นมาเจอแม่มันอะ นั่นแหละคืออาร์คิเทค โอเคไหม ใคร ใครที่ทำงานสายอาร์คิเทคมักจะเป็นแบบนี้เนาะ กูโดนถีบลงไปตรงไหนไม่รู้แหละ แต่กูรอดขึ้นมาได้นี่แหละ กูเรียกตัวเองว่าอาร์คิเทค โอเคไหมครับ อ่ะ มันน้อยจนมีคนเอาไปทำเสื้อบอกว่า

00:06:05.800 --> 00:06:08.700
someone who solves a problem you do not know

00:06:09.500 --> 00:06:10.000
you had

00:06:11.100 --> 00:06:12.600
in a way you don't understand

00:06:13.900 --> 00:07:01.600
ทำอะไรไม่รู้แหละ แต่มันเวิร์ค เราก็ไม่ได้เข้าใจ ทีนี้โดยเฉพาะเด็กจบใหม่นะครับ จูเนียร์นะครับ คุณเดี๋ยวคุณลองกลับเข้าไปบริษัทนะ แล้วคุณลองถามคำถามนี้กับซีเนียร์นะครับว่า เอ้ย ไอ้ระบบแบบนี้เนี่ย แพลตฟอร์มแบบนี้เนี่ย คุณออกแบบมาได้ยังไง เขามักจะตอบคุณว่า เอ่อ ไม่รู้ มันต้องแบบนี้เว้ย แล้วมันเวิร์ค เห็นไหม มันเวิร์คอ่ะ เออ แต่ก็ไม่รู้เหมือนกันว่ามันมีที่มาที่ไปแบบไหนนะครับ อันนี้คือปัญหาของอาร์คิเทคในปัจจุบันระดับโลก ก็เลยตั้งคำถามว่า เฮ้ย มันจะมีแบบ

00:07:03.100 --> 00:07:08.100
proper way ไหม หรือ proper training framework
ไหมที่เราจะสามารถ build up

00:07:08.100 --> 00:07:14.400
skill architect ไม่ว่าจะเป็น software architect หรือ data
architect ขึ้นมา แล้วเราสามารถที่จะออกแบบ

00:07:14.400 --> 00:07:40.000
architect
ให้กับองค์กรได้ มันมีไหมนะ เวย์นี้จะบอกว่ามันมีครับ ผมเชื่อว่ามี แล้วว่าก็เลยวันนี้จะเอามาแชร์ให้ทุกคนฟัง เป็นเวย์ที่ผมใช้แล้วกัน แล้วมันเวิร์คกับผม มันอาจจะเวิร์คกับพวกคุณก็ได้นะครับ หรือไม่เวิร์คก็ได้นะครับ แต่ก็เป็นเวย์หนึ่ง ก็ลองเอาไปลองประยุกต์ใช้กันดูเนาะ นะครับ โอเค การออกแบบ

00:07:40.000 --> 00:07:41.800
Data Architect หรือออกแบบ Architect

00:07:41.800 --> 00:07:56.300
นะครับ ผมมีหยิบมา 3 อย่าง เห็นไหม 3 อย่าง อย่างแรกถ้าเราอยากจะดีไซน์เรื่องของ

00:07:56.300 --> 00:08:00.000
Architect
เนี่ย มันมีทฤษฎีหนึ่งเรียกว่า Residuality

00:08:00.700 --> 00:08:07.400
Theory ครับ เดี๋ยวค่อยคุยกัน ชื่อมันอาจจะแปลกๆ นิดนึง
แต่จริงๆ คอนเซ็ปต์มันเข้าใจง่าย โอเคมั้ย

00:08:07.900 --> 00:08:15.100
อย่างที่สอง เพื่อเป็นการแชร์ understanding
ของเรานะครับ เราจะไม่พูดภาพอยู่บนอากาศ โอเคไหมครับ

00:08:17.000 --> 00:08:20.900
ใครเคยเป็นบ้างแบบพูดถึงสิ่งๆ หนึ่ง
พูดอยู่บนอากาศอย่างเงี้ย

00:08:20.900 --> 00:08:24.300
เฮ้ย แมวส้มตัวนั้นน่ารักจังเลย
ทุกคนเห็นแมวส้มตัวเดียวกันไหม

00:08:26.500 --> 00:08:27.300
ไม่น่านะ

00:08:27.800 --> 00:08:31.900
บางคนอาจจะนึกถึงการ์ฟิลด์
บางคนอาจจะนึกถึงแมวด้านล่างที่เพิ่งเจอมา

00:08:31.900 --> 00:08:35.799
โอเคไหมครับ เพราะฉะนั้นเนี่ย
การที่จะทำให้ทุกคนเห็นภาพตรงกันเนี่ย

00:08:35.799 --> 00:08:39.299
มันจะต้อง visualize ออกมา somehow some way

00:08:39.299 --> 00:08:44.400
เห็นไหม diagram
ที่ผมจะเอามาแชร์ก็คือชื่อว่า Zeflow model นะครับ

00:08:45.000 --> 00:08:46.000
และสุดท้ายเนี่ย

00:08:48.000 --> 00:08:51.900
การที่เรามี knowledge
แล้วเราจะส่งมอบต่อไปอ่ะ เราจะใช้

00:08:52.800 --> 00:08:55.200
document ตัวหนึ่งที่ชื่อว่า ADR เนาะ

00:08:55.700 --> 00:08:59.100
เพื่อ persist knowledge
เข้าไปในองค์กรนะครับ เข้าไปในทีม

00:08:59.700 --> 00:09:00.800
เดี๋ยวค่อยไปรู้จักกัน

00:09:02.900 --> 00:09:03.600
อย่างแรกก่อน

00:09:04.600 --> 00:09:09.100
Residuality Theory
นะครับชื่ออ่านยากนิดหนึ่ง

00:09:10.100 --> 00:09:13.200
คนที่คิดนะครับชื่อว่า แบร์รี่ โอ'เลอรี่

00:09:13.200 --> 00:09:19.700
มีงานวิจัยเลยนะ research เป็นเปเปอร์เลยนะ publish
ออกไปที่ ScienceDirect ถ้าผมจำไม่ผิดนะครับ

00:09:20.400 --> 00:09:25.300
คือเขาสนใจเรื่องของ Complex System

00:09:25.300 --> 00:09:29.000
แล้วก็ Software Engineering
เขามองว่าเรื่องของ Complex System

00:09:29.000 --> 00:09:31.700
ถ้าเอามาผสมกับ Software Engineering เนี่ย

00:09:31.700 --> 00:09:35.300
มันจะช่วยให้เขาออกแบบระบบที่มัน Complex

00:09:35.300 --> 00:09:45.300
ได้และอธิบายได้ด้วยว่ามันคืออะไร โอเคไหมครับ อ่ะมาดู
concept แบบผมพยายามย่อยให้มันดูง่ายเนอะ

00:09:45.800 --> 00:09:49.500
โอเคไหม
ถ้าใครสงสัยเดี๋ยวคุยนอกรอบเลย ยกมือถามได้นะครับ

00:09:50.800 --> 00:09:53.000
อันนี้ยกนิยามมาก่อน

00:09:53.700 --> 00:09:57.900
The future of a system is a function of
its residues. นะครับ

00:09:58.600 --> 00:10:02.100
Residues ก็คือ the leftovers of
the system after

00:10:02.100 --> 00:10:06.200
the impact of a stressor. A stressor is

00:10:06.200 --> 00:10:12.400
anything that is previously unseen or unknown that
impacts the system. อันนี้คือนิยาม

00:10:12.400 --> 00:10:17.400
แต่ว่าผมอยากจะเน้นสองคำนี้ครับ
มาทำความรู้จักสองคำนี้กัน residue กับ

00:10:18.000 --> 00:10:18.600
stressor

00:10:21.500 --> 00:10:21.900
โอเค

00:10:22.600 --> 00:10:26.300
ออกสู่โลก ออกจากโลก theory
ก่อนนะ ออกมาในโลกแบบ

00:10:27.300 --> 00:10:30.700
practical
หรือว่ากันเองนะครับใครเคยดูการ์ตูนเรื่องนี้บ้าง

00:10:33.200 --> 00:10:35.600
หมูสามตัวแล้วก็มีหมาป่าไปเป่าบ้าน

00:10:37.500 --> 00:10:38.300
ไม่เคยเลยหรอ

00:10:39.500 --> 00:10:40.100
ซวยละกู

00:10:41.900 --> 00:10:43.200
ใครเคยบ้างเป็นเพื่อนผมไหม

00:10:44.800 --> 00:10:48.200
โอเคมีคนพยักหน้า
ขอบคุณมากครับไม่ได้รู้สึกว่าแก่อยู่คนเดียว

00:10:49.600 --> 00:10:52.900
ไม่เคยดูจริงหรอ กลับไปดูนะขอร้อง

00:10:54.000 --> 00:10:56.800
อะเรื่องมันมีอยู่ว่ามันมีหมูสามตัวครับ

00:10:56.800 --> 00:11:03.200
แล้วหมูแต่ละตัวมันสร้างบ้านเห็นไหม
รู้สึกหมูหมูตัวแรกเนี่ยสร้างบ้านเป็นฟางนะครับ

00:11:03.200 --> 00:11:10.500
แล้วหมาป่าจะมากิน
หมาป่าก็เป่าพ่วงหมู่ตัวแรกก็วิ่งหนีไปอยู่บ้านที่สอง บ้านที่สองเป็นไม้

00:11:10.500 --> 00:11:16.800
หมาป่าก็เป่าพ่วงบ้านพัง
แต่ว่าหมูบ้านที่สามเขาใช้อิฐก่อสร้างขึ้นมา

00:11:16.800 --> 00:11:20.900
ใช้เวลานานกว่าชาวบ้านนิดนึง
แต่ว่าหมาป่าเป่ายังไงก็ไม่ทัน

00:11:22.300 --> 00:11:23.600
เกี่ยวอะไรกับโลกของเรานะ

00:11:24.200 --> 00:11:29.000
เกี่ยวตรงที่ว่าไอ้หมาป่าเนี่ยครับ
สำหรับผมแล้วมันคือ Stressor

00:11:30.700 --> 00:11:36.800
Stressor
คือคนที่จะมาอิมแพคกับระบบของเราโอเคไหม

00:11:37.400 --> 00:11:43.500
เราสร้างระบบขึ้นมา เราสร้างบ้านขึ้นมาแล้วมันจะมี
Stressor เข้ามาเป่าพ่วงพยายามทำให้ระบบเราพัง

00:11:44.800 --> 00:11:47.300
ถ้าในโลกความเป็นจริงของเราคือ requirement

00:11:47.300 --> 00:11:53.400
นั่นเองครับ requirement
เข้ามาจะพยายามทำให้ระบบมันเกิดการเปลี่ยนแปลงแล้วระบบเราจะพัง เห็นไหม

00:11:54.500 --> 00:11:55.500
ส่วน Residual เนี่ย

00:11:57.500 --> 00:12:00.200
คือ The Left Over ใช่ไหมสิ่งที่เหลือรอดจาก

00:12:00.700 --> 00:12:01.800
Requirement นั้นมา

00:12:03.000 --> 00:12:06.600
เห็นไหมครับ อ้า Stressor กับ Residual นะครับ

00:12:07.900 --> 00:12:11.500
อันนี้คือคอนเซ็ปต์หลักหลักของ
Residuality Theory เนาะ

00:12:12.700 --> 00:12:18.800
เวลาที่มี Requirement เข้ามาแล้วก็ต้องทำบ้านให้มัน
strong เนี่ยครับ เราจะพูดถึงสิ่งนี้ครับ

00:12:20.100 --> 00:12:21.700
Functional แล้วก็ Non-functional

00:12:22.700 --> 00:12:22.800
เห็นไหม

00:12:23.600 --> 00:12:26.200
เวลาที่เราออกแบบ architecture นะครับ

00:12:27.100 --> 00:12:31.500
การที่จะดีลกับ stressor
ได้เราต้องคิดถึงสองอันนี้ หนึ่งคือ functional

00:12:32.000 --> 00:12:36.200
และสองคือ non functional
การที่สร้างบ้านแล้วเปลี่ยนบ้านไปอีกอันหนึ่ง

00:12:38.100 --> 00:12:41.100
functional เนี่ยคือ business
requirement ของเรา

00:12:42.400 --> 00:12:46.500
เขาจะอยากได้อะไรไปตอบโจทย์บิสเนสเห็นไหมครับ อ้า

00:12:47.100 --> 00:12:49.100
to solve the business problem ส่วน non

00:12:49.100 --> 00:12:55.800
functional
เนี่ยคือหน้าที่ของเราแล้วที่จะต้องทำให้มั่นใจว่าระบบเนี่ยมัน support

00:12:55.800 --> 00:13:01.000
business goal ให้ได้เนาะสองอันนี้นะครับ
functional และ non functional

00:13:04.000 --> 00:13:09.800
เผื่อใครไม่เคยรู้จักสองคำนี้นะครับ อันนี้ยกตัวอย่างคือ
Functional เนี่ยมันเกี่ยวกับ capability

00:13:10.300 --> 00:13:15.300
นะครับ ความสามารถของระบบ อย่างเช่น
ระบบเนี่ยสามารถที่จะให้ user login ด้วย

00:13:15.300 --> 00:13:20.400
email และ password ได้ เห็นไหมอันนี้คือ
functional นะครับ ก็คือ

00:13:20.400 --> 00:13:24.800
system should do
อะไรควรจะทำอะไรได้เนาะ ส่วน non-

00:13:24.800 --> 00:13:28.400
functional เนี่ยหน้าตาจะเป็นแบบนี้ครับ คือ
quality คือ experience

00:13:29.700 --> 00:13:35.200
ที่ช่วย support business goal
นะครับ ก็คืออย่างเช่น

00:13:35.200 --> 00:13:40.500
system เนี่ยจะต้อง handle 1,000 login
พร้อมกันเนี่ยภายใต้ 2 วิ

00:13:42.300 --> 00:13:45.800
นี้เป็นต้น พวก non-functional ต่างๆ
เนี่ยจะเป็นฝั่งของ

00:13:45.800 --> 00:13:51.500
engineer ฝั่งของ architect เป็นคนคิดเพื่อ support ตัว
business requirement นั้นๆ นะครับ

00:13:52.000 --> 00:13:53.600
how a system should perform

00:13:59.200 --> 00:14:02.900
อันนั้นเป็นเรื่องของการดีไซน์เห็นไหมครับ
สมมุติผมยกตัวอย่างก่อน

00:14:03.900 --> 00:14:11.700
ผมยกตัวอย่างดีกว่าจะได้เห็นภาพมากขึ้น
เวลาที่เราเข้าไปในองค์กรเราถามหาบิสเนสก่อน business

00:14:11.700 --> 00:14:15.900
goal เป็นอะไรนะครับ
อย่างเช่นว่าถ้าสมมุติเป็นสตาร์ทอัพใหม่ๆ

00:14:15.900 --> 00:14:21.200
เลย
เราเข้าไปในองค์กรเราบอกว่าโอเคอยากจะได้ข้อมูล public data ขึ้นมา

00:14:23.100 --> 00:14:28.500
โอเค business มีแค่นี้เนาะ
เราก็มาดีไซน์ออกแบบ architecture ของเราครับ

00:14:28.500 --> 00:14:34.300
Architecture
ของเราเนี่ยให้ออกแบบให้มันมินิมัมที่สุดที่จะตอบโจทย์ business requirement

00:14:34.300 --> 00:14:43.500
นั้นให้ได้ก่อน โอเคไหมครับ เช่น
โอเคงั้นเดี๋ยวผมใช้โค้ดตัวหนึ่งเขียนด้วย Python

00:14:44.200 --> 00:14:51.900
ไป scrape
หน้าเว็บแล้วเอาข้อมูลมาวางให้พี่เป็น Excel คำถามครับ

00:14:52.500 --> 00:14:54.800
ตอบโจทย์ functional requirement ไหม

00:14:55.800 --> 00:14:57.300
ตอบ ถูกไหมครับ

00:14:58.200 --> 00:15:01.300
ที่เหลือเนี่ยเรามาคิดว่าโอเค

00:15:02.100 --> 00:15:03.500
non-functional เป็นแบบไหน

00:15:04.300 --> 00:15:14.300
เขาอยากจะได้ข้อมูลทุกวันไหม อ่า หรือว่าเขาอยากจะได้ข้อมูลที่มันแบบมหาศาลใหญ่มากๆ อันนี้เราต้องมาเขียนโค้ดเพื่อตอบโจทย์บิสเนสนั้นๆ

00:15:15.400 --> 00:15:22.700
ถูกไหม อันนี้ไออยากได้ public data นี่คือหนึ่ง stressor
นะครับ ยิงเข้าหาตัว architecture ของเรา

00:15:23.300 --> 00:15:27.000
มันอาจจะมี stressor อีกแบบหนึ่งเข้ามาใน
architecture ของเราครับ

00:15:27.000 --> 00:15:29.800
โอเคอยากได้ระบบ เอ่อ อยากได้ data

00:15:29.800 --> 00:15:34.000
ของระบบตรงนู้นเอาเข้ามาซ้อนทับกับ public

00:15:34.000 --> 00:15:37.800
data ที่เรามีอยู่ ถูกไหม ถามว่า architecture

00:15:37.800 --> 00:15:45.900
ตัวเดิมตอบโจทย์ไหมครับ ไม่ตอบโจทย์ใช่ไหม เพราะว่ามันเป็นแค่โค้ด Python แล้วก็ไปดึงข้อมูล

00:15:45.900 --> 00:15:46.700
public data

00:15:47.500 --> 00:15:50.900
เราก็โอเคทำไงนะ ออกแบบตัว architecture

00:15:50.900 --> 00:15:57.000
ของเราใหม่นะครับ ให้มันสามารถไปดึงข้อมูลจากอีกระบบหนึ่งมาได้ แปลว่าเราก็ต้องคิดพวก

00:15:57.000 --> 00:16:07.300
authentication
อะไรต่างๆ เข้ามาไหม แต่ถ้ายิ่งพี่เขาบอกว่าโอเค เอ่อ อยากจะเห็นแดชบอร์ดทุกวันอ่ะ เราก็ต้องมาคิดเพิ่มและเราจะเติม

00:16:07.300 --> 00:16:12.400
schedule เข้าไปยังไง ถามคือ Schedule เนี่ย
เราเติมเข้าไปแบบง่ายๆ ที่สุดนี่คืออะไรนะ

00:16:13.900 --> 00:16:14.800
Cron อย่างงี้ใช่ไหม

00:16:15.800 --> 00:16:18.200
ครอนเป็น Process
ตัวหนึ่งที่เราสามารถที่จะ Schedule

00:16:18.200 --> 00:16:22.300
ได้นะครับ อ่ะ มันก็ Schedule ไป
แล้วเราก็วนลูปแบบนี้ครับ

00:16:23.600 --> 00:16:24.300
จนกว่า

00:16:25.000 --> 00:16:31.400
Architecture หรือระบบของเราเนี่ยมันตอบโจทย์ Requirement
ทั้งหมด อันนั้นคือ Architecture ที่ดี

00:16:32.700 --> 00:16:34.500
ขององค์กรเรา เห็นไหม

00:16:35.100 --> 00:16:39.500
อันนี้เป็นขั้นตอนในการออกแบบ
Architecture นะครับ

00:16:40.700 --> 00:16:42.400
โอเค เราออกแบบเสร็จแล้ว

00:16:43.000 --> 00:16:45.100
แล้วเอาไปคุยกับคนอื่น คนอื่นรู้เรื่องไหม

00:16:46.700 --> 00:16:50.600
ก็จะเจออีกปัญหาหนึ่งนะครับ
เราจะทำไงให้ภาพในหัวของเราเนี่ย

00:16:51.200 --> 00:16:53.800
สื่อสารออกมาให้คนอื่นรู้เรื่องนะครับ

00:16:53.800 --> 00:16:58.700
ก็จะใช้ประโยชน์ของไดอะแกรมเป็นหลัก
ไดอะแกรมมีหลักของมันเหมือนกัน

00:16:58.700 --> 00:17:04.300
C4 เนี่ย เป็นไดอะแกรมที่ผมชอบมาก
เพราะว่าเวลาที่เราดูภาพ Architecture นะครับ

00:17:05.400 --> 00:17:09.500
ให้ทุกคนเนี่ย ทำตัวเสมือนเป็นนก เห็นไหม

00:17:10.900 --> 00:17:12.300
บินขึ้นบินลงได้

00:17:13.300 --> 00:17:17.598
แปลว่าเราสามารถที่จะดูภาพ Bird's eye view ได้
ลงมาที่ Architecture ของเรา

00:17:17.598 --> 00:17:20.598
ถ้าเราอยากจะดูภาพให้มัน Low level
กว่า เราก็บินลงมา

00:17:21.300 --> 00:17:26.700
เห็นไหมครับ C4
เป็นไดอะแกรมตัวหนึ่งที่ตอบโจทย์ตรงนั้น สามารถดูเป็น level ได้

00:17:28.400 --> 00:17:30.700
ซึ่งมันไปตรงกับคอนเซ็ปต์ของ

00:17:31.900 --> 00:17:40.100
Architecture Elevator นะครับ เขาบอกว่าเวลาที่คุณเป็น
CEO ขององค์กรแล้วมันมีตึกสูงๆ อยู่อะ

00:17:40.100 --> 00:17:44.000
ถ้าคุณอยากจะรู้ว่าชั้นไหนมันมีปัญหาคุณทำไง

00:17:44.900 --> 00:17:49.100
(เสียงหัวเราะ)
บางคนบอกว่าคุณก็สั่งลูกน้องไปดู ไม่ใช่นะ

00:17:49.100 --> 00:17:50.800
คุณก็ต้องลงไปดูด้วยตัวเองถูกไหมครับ

00:17:50.800 --> 00:17:55.800
คุณก็ต้องแบบลงมาที่-- กดลิฟต์ลงมาที่ชั้นนั้น
แล้วคุณก็แก้ปัญหาที่ชั้นนั้น

00:17:55.800 --> 00:18:00.700
ถ้าคุณอยากเห็นภาพบนสุด
คุณก็ขึ้นลิฟต์ขึ้นไปบนสุด โอเคไหม

00:18:01.400 --> 00:18:01.600
อ้า

00:18:02.100 --> 00:18:06.200
นี่ครับการมองภาพ Architecture
เราควรจะมองได้หลายเลเวลประมาณนี้ เนาะ

00:18:07.500 --> 00:18:14.300
ตัวอย่าง ตัวอย่าง ภาพเลเวลบนสุดใน C4
โมเดลนะครับ ภาพแรกคือ Context

00:18:15.200 --> 00:18:16.300
หรือว่าเรียกว่า C1

00:18:17.000 --> 00:18:20.400
ภาพ Context
เนี่ยเป็นภาพที่เราใช้สื่อสารกับทาง Business นะครับ

00:18:20.400 --> 00:18:25.300
ว่าระบบหรือว่า Data Platform
ของเราเนี่ยมีใครมาใช้บ้าง

00:18:25.300 --> 00:18:28.200
และเราไปเชื่อมต่อกับ External
System ตัวไหนบ้าง

00:18:29.500 --> 00:18:30.200
แค่นี้เลยครับ

00:18:31.100 --> 00:18:31.500
เห็นไหมนะ

00:18:32.000 --> 00:18:34.400
นี่คือกล่องสี่เหลี่ยม 2 กล่องนะครับ

00:18:36.100 --> 00:18:40.200
แค่นี้พอเพราะว่าเวลาที่เราวาดภาพ
เราใช้ในการสื่อสาร

00:18:40.200 --> 00:18:43.800
การสื่อสารเนี่ยเราต้องดู Audience
ด้วยนะว่าเราจะสื่อสารให้ใคร

00:18:43.800 --> 00:18:46.300
ภาพนี้ใช้สื่อสารกับฝั่ง Business นะครับ

00:18:46.900 --> 00:18:50.100
ถ้าเราที่จะเริ่มสื่อสารกับฝั่งของ
Engineer เราเนี่ย

00:18:50.100 --> 00:18:55.800
เราก็จะบินลงมาอีกชั้นหนึ่งนะครับ
มาอีกเลเวลหนึ่งก็คือ โอเค เดี๋ยวฉันจะสื่อสาร

00:18:56.400 --> 00:19:01.500
Logistic platform นะ เป็น Logistic data
platform ของฝั่งของทีม Data ของเรา

00:19:02.200 --> 00:19:04.700
เราก็เจาะลึกลงไปที่ Logistic platform ครับ

00:19:05.300 --> 00:19:05.600
ปึ๊บ

00:19:07.300 --> 00:19:13.500
อ๋อ Logistic platform เนี่ยมีการไป Stream
Data นะครับ จาก External System

00:19:14.000 --> 00:19:18.400
เข้าไปที่ Kafka ไปที่ Lambda ไปที่
Snowflake แล้วไปออก Tableau

00:19:19.500 --> 00:19:23.800
อ่ะ อันนี้ก็คือภาพ C2 เราลงมาอีกเลเวลหนึ่ง
จะมีภาพเทคโนโลยีอยู่ด้วย

00:19:24.600 --> 00:19:25.000
โอเคไหม

00:19:25.900 --> 00:19:32.900
ประมาณนี้นะครับ จริงมันมี 4 เลเวลลงไปถึง C4
นี่คือเลเวลของพวก Sequence Diagram Use case อะไรต่างๆ

00:19:33.600 --> 00:19:34.000
โอเคเนาะ

00:19:34.700 --> 00:19:39.300
เข้าใจว่าทุกคนน่าจะแบบพอวาดของพวกนี้เป็นอยู่แล้ว เห็นไหมครับ

00:19:39.300 --> 00:19:41.500
เออ สี่เหลี่ยมเอาเส้นมาเชื่อมต่อกัน

00:19:43.800 --> 00:19:47.300
คำถามถัดไปครับ

00:19:49.600 --> 00:19:50.200
กดไม่ไป

00:19:50.900 --> 00:19:51.800
คำถามถัดไปคือ

00:19:53.200 --> 00:20:01.500
แล้วเทคโนโลยีพวกนี้คิดมาได้ยังไงนะ
ในฐานะที่เราเป็นมือใหม่ใช่ไหมครับจริงๆ เราคิดมาจาก

00:20:02.100 --> 00:20:06.800
Business เนาะ ว่า Business อยากได้แบบไหน
สมมุติว่าในเคสนี้ External

00:20:06.800 --> 00:20:10.500
System เขาให้ Data
เราเป็นสตรีมมาแบบ Real-time

00:20:11.200 --> 00:20:15.800
เราก็ต้องไปหาเทคโนโลยีแล้ว
เทคโนโลยีไหนที่มันสามารถรับข้อมูลเข้ามาแบบ Real-Time ได้

00:20:16.600 --> 00:20:23.000
แล้วเข้าไปที่ฟังก์ชันไหน เอาฟังก์ชันไหนไปเก็บในตัว
Data Warehouse ของเรายังไง ไปเก็บใน

00:20:23.000 --> 00:20:25.800
Data Base ของเราแบบไหน อ่า เราอาจจะวางคร่าวๆ

00:20:25.800 --> 00:20:30.700
ก่อนแล้วมาดูว่าเทคโนโลยีคือเราควรจะต้องใช้อะไรตอบโจทย์ดี โอเคไหม

00:20:32.900 --> 00:20:40.300
ก็จะโยงถึงขั้นตอนถัดไปครับ
2 อันนี้เป็นเทคนิคที่ผมใช้ในการเลือกเทคโนโลยีเบื้องต้นก่อนนะครับ

00:20:40.300 --> 00:20:44.500
ก็จะมี Technology comparison ต้องทำอยู่แล้ว
แล้วก็มี Decision matrix

00:20:45.600 --> 00:20:48.100
สมมุติในเคสที่โอเคเราจะเลือกแล้วว่า

00:20:48.900 --> 00:20:51.900
ข้อมูลไหลลงมาเนี่ยมาลงใน Data
Warehouse ตัวหนึ่ง

00:20:52.400 --> 00:20:55.600
โอเคไหมครับ Data Warehouse ตัวนั้นใช้อะไรด?

00:20:57.400 --> 00:21:01.400
อ่า สมมุติว่าเฮ้ยเราไปเจอละมี
ClickHouse กับมี ThaiDB

00:21:02.300 --> 00:21:02.900
เคยได้ยินชื่อไหม

00:21:05.000 --> 00:21:09.000
ClickHouse เดี๋ยวมันจะดังขึ้นมาครับ
ผมเชื่อเดี๋ยวมันจะมีชื่อเสียงมากนะครับ ClickHouse เนี่ย

00:21:09.000 --> 00:21:11.900
ส่วน ThaiDB นี่ปิงแคปซื้อไป (หัวเราะ)

00:21:13.200 --> 00:21:16.400
เข้าใจว่าเดี๋ยวจะมี session
พูดเรื่อง ClickHouse ที่

00:21:17.100 --> 00:21:20.600
Effort อะไรนะ Conference
เมื่อกี้นะครับ Open source

00:21:23.200 --> 00:21:23.300
อะ

00:21:24.000 --> 00:21:25.600
เทคโนโลยีเปรียบเทียบนะครับ Technology

00:21:25.600 --> 00:21:31.000
comparison
เราก็แค่เอา 2 เทคโนโลยีเนี่ยมาดูว่าตามนะ ขอไอ้ Criteria เนี่ยครับ

00:21:31.800 --> 00:21:34.500
เราดูตาม Non-functional requirement ด้วยนะ

00:21:35.600 --> 00:21:39.100
เห็นไหม ตาม Non-functional
requirement แต่ละข้อเนี่ยครับ

00:21:39.100 --> 00:21:42.000
2 ระบบเนี่ยมันมีข้อแตกต่างกันยังไงบ้าง

00:21:42.800 --> 00:21:48.300
โอเคเนาะ เอ้อ ตัวหนังสือมันจะเล็กไปครับ
คือเดี๋ยว เดี๋ยวผมส่งสไลด์ให้ทีมงาน

00:21:50.300 --> 00:21:52.400
เสร็จแล้วพอเรา comparison เสร็จนะครับ

00:21:53.200 --> 00:22:00.000
มันก็ต้องโหวตใช่ไหม
การโหวตถ้าจะให้ทุกคนเห็นภาพตรงกัน เราใช้ตัวเลขว่าเราให้เรทเท่าไหร่

00:22:00.000 --> 00:22:04.700
โอเคไหมครับเรทก็อาจจะการ์ดเตอร์ข้อมูลจากในทีม

00:22:04.700 --> 00:22:10.000
หรือเอาเราอาจจะคิดเองอะไรอย่างนี้เป็นต้นนะครับ
ว่าโอเคอันนี้มันควรจะเป็นจาก

00:22:10.000 --> 00:22:12.600
0 ถึง 10 เราให้ 10
อะไรอย่างเงี้ย เป็นต้น

00:22:13.200 --> 00:22:14.300
ครับผม เออ

00:22:15.000 --> 00:22:20.100
ใช่มั้ยเพราะว่าการให้เรทเนี่ยมันชัดเจน
ไม่ใช่ว่าเฮ้ย ClickHouse มันดี ดียังไง

00:22:22.100 --> 00:22:28.000
หรือว่าการใช้ ThaiDB มันลำบาก มันลำบากยังไง มัน
มันไม่เห็นภาพตรงกัน แต่ถ้าบอกว่าเลขปุ๊บ

00:22:29.200 --> 00:22:32.900
ตอนนี้มีใครง่วงบ้างครับอย่าง
เงี้ย ง่วงทุกคนเลย

00:22:34.400 --> 00:22:38.900
ถ้าผมเปลี่ยนใหม่ตอนนี้เลเวลความง่วงของคุณเนี่ยเท่าไหร่จาก 0 ถึง 5

00:22:39.600 --> 00:22:40.000
อย่าง เงี้ย

00:22:41.000 --> 00:22:43.100
เราจะเข้าใจว่า โอ้ ทุกคน 5 หมดเลยว่ะ

00:22:43.800 --> 00:22:50.100
ง่วงหมด อย่าง เงี้ย เป็นต้นนะครับ อะ
ใช้เลขในการสื่อสารแล้วก็เมคดีซิชั่นให้คอมเรคคอมเมนดาชั่น

00:22:50.100 --> 00:23:01.000
แล้วก็เคาะตัดสินใจร่วมกันนะครับ
ว่าโอเคเราจะไปเทคโนโลยีตัวนี้กัน โอเคไหม

00:23:02.400 --> 00:23:06.700
ทีนี้ไม่มีช็อต ไม่มีช็อตคัตครับ
ผมจะบอกเรื่องนี้ไม่มีช็อตคัต

00:23:07.800 --> 00:23:09.900
ถ้าคุณเป็นมือใหม่หรือคุณเป็นมือเก่านะ

00:23:10.500 --> 00:23:12.900
ผมแนะนำให้คุณต้องอ่านเล่มนี้แล้วกัน

00:23:13.900 --> 00:23:16.000
โอเคไหมครับ เล่มมันจะโคตรหนาอยู่

00:23:16.800 --> 00:23:22.600
(หัวเราะ) อยู่สักหน่อยแล้วนะ
แต่ว่าเป็นเล่มที่ทำให้คุณเข้าใจเทคโนโลยีในโลกของ Data มากขึ้น

00:23:23.400 --> 00:23:23.800
โอเคไหม

00:23:24.400 --> 00:23:27.700
ไม่มีช็อตคัตนะครับ
คุณไม่ได้อยู่ดีๆ แล้วคุณจะรู้เรื่องนะ

00:23:28.300 --> 00:23:34.800
โอเค คุณอ่านหนังสือด้วยนะครับ
เราจะได้อ้างอิงจากหนังสือเล่มเดียวกันอันนี้

00:23:36.700 --> 00:23:42.400
หลังจากที่เราเมคดีซิชั่นแล้ว
เราออกแบบแล้วเราเมคดีซิชั่นเรื่องเทคโนโลยีแล้ว

00:23:42.900 --> 00:23:45.500
อีกอย่างหนึ่งสำคัญมากๆ ครับแล้วเรามักจะลืม

00:23:46.600 --> 00:23:54.200
คือถ้าเราไม่ได้เขียนมันลงไปนะครับ
ผมจะถือว่าสิ่งนั้นมันไม่เกิดขึ้นจริงในโลกนี้

00:23:55.600 --> 00:23:56.000
โอเคไหม

00:23:57.100 --> 00:24:02.700
แปลว่าเราจะต้องมีการ Record สิ่งๆ นี้ Record decision มันลงไปด้วยนะครับ

00:24:02.700 --> 00:24:07.000
ก็โยงถึงเรื่องของ Architectural
Decision Record หรือว่า ADR

00:24:07.900 --> 00:24:12.200
ลักษณะมันเป็น Document ตัวหนึ่งนะครับ ตัวอย่างอยู่ทางขวามือ

00:24:12.800 --> 00:24:18.200
เราบอกว่า Title คืออะไร สเตตัสเป็นยังไง
Context บริบท ณ เวลานี้เนี่ย

00:24:18.200 --> 00:24:25.300
ทำไมเราถึงเลือกเทคโนโลยีตัวนี้ ทำไมเราไม่เลือก
Cloud ทำไมเราไม่เลือกตัวนั้นตัวโน้น

00:24:25.900 --> 00:24:27.800
นะครับ บริบทเป็นยังไง

00:24:28.400 --> 00:24:35.500
เห็นไหม
แล้วเราก็เมคดีซิชั่นอะไรเพื่อที่จะเลือกเทคโนโลยีตัวนั้น หรือว่าเลือกไดเรกชันนะครับ

00:24:36.800 --> 00:24:39.700
ทีนี้อาจจะมีคำถามว่าอะไรที่เราต้องเขียนบ้าง

00:24:39.700 --> 00:24:43.300
ไม่งั้นเราต้อง Record ทุกอย่างเลยหรือเปล่า ให้คิดแบบนี้ครับ

00:24:45.100 --> 00:24:50.100
อะไรที่มันเกี่ยวกับอาร์คิเทคเจอร์มันจะเป็นเรื่องที่เราเปลี่ยนยาก

00:24:51.300 --> 00:24:53.300
เห็นไหม difficult to change

00:24:54.600 --> 00:24:55.000
เช่น

00:24:55.900 --> 00:24:57.000
เปลี่ยนยี่ห้อดาต้าเบส

00:24:58.900 --> 00:24:59.300
เช่น

00:25:00.100 --> 00:25:01.500
เปลี่ยนโปรแกรมมิ่งแลงเกวจ

00:25:02.900 --> 00:25:07.600
มีไหมวันหนึ่งเราใช้ Go เฮ้ย Go ไม่
ไม่เวิร์กแล้วไปใช้ Python

00:25:07.600 --> 00:25:11.500
สวิตช์แบบวันเดียวเลย มีไหม
ใครทำได้บอกด้วยนะครับ (หัวเราะ)

00:25:12.400 --> 00:25:14.500
มาทำงานกับผมด้วย (หัวเราะ)

00:25:15.500 --> 00:25:18.200
โอเคเนาะ อะไรที่มันเปลี่ยนยากนะครับ

00:25:18.200 --> 00:25:23.200
อันนั้นน่ะเกี่ยวข้องกับอาร์คิเทคเจอร์ให้เรา Record ลงไปนะครับ โอเคเนาะ

00:25:25.200 --> 00:25:26.400
อยากจะย้ำแบบนี้นะครับ

00:25:27.200 --> 00:25:31.200
ใครเคยดูหนังเรื่องนี้ไหม แนะนำให้ไปดูเหมือนกันใน
Netflix นะครับ The Last Kingdom

00:25:32.000 --> 00:25:38.700
คนนี้คืออัลเฟรดนะครับ
เขาเป็นคิงของเวสเส็กที่พยายามจะรวมอังกฤษเข้าด้วยกัน

00:25:38.700 --> 00:25:45.000
เขาบอกไว้ว่า do not underestimate the power of
written word ครับ when a man dies

00:25:45.000 --> 00:25:47.600
if nothing is written he is soon forget

00:25:48.100 --> 00:25:53.900
forgotten. (หัวเราะ)
ในเรื่องเขามีปัญหากับพระเอกครับ

00:25:54.400 --> 00:26:00.700
แล้วเขาบอกพระเอกว่าเขาจะไม่เขียนชื่อพระเอกลงในประวัติศาสตร์ ลงใน เอ่อ สิ่งที่เขาเขียน

00:26:01.500 --> 00:26:05.300
พระเอกคนนั้นก็หายจากประวัติศาสตร์โลกนี้ไป โอเคไหม

00:26:06.500 --> 00:26:09.300
เพราะฉะนั้นเนี่ยเวลาที่เราเมคดีซิชั่นนะครับ

00:26:09.300 --> 00:26:14.500
ให้เรา Record เป็นเอกสารไว้ด้วย
ไม่งั้นเดี๋ยวมันจะเกิดเหตุการณ์ว่าอะไรนะ

00:26:14.500 --> 00:26:18.800
จำรูปซีนเนี่ยรูปแรกๆ ได้ไหม
ไม่รู้ว่ะมันมาได้ไงแต่มันเวิร์ค

00:26:19.800 --> 00:26:20.100
โอเคไหม

00:26:20.700 --> 00:26:26.600
อะเราจะได้เข้าใจบริบทของบริษัทด้วยว่าทำไมเขาเลือก Hadoop วะ แม่งเก่าไปแล้ว

00:26:27.500 --> 00:26:30.900
เดี๋ยวนี้เขาไป Cloud หมดแล้วอะไรอย่างเงี้ย นะครับ เออ

00:26:31.500 --> 00:26:31.800
โอเคไหม

00:26:32.400 --> 00:26:37.400
เราก็ต้องเข้าใจบริบทของเขาด้วย
ซึ่งเอกสารพวกนี้ครับจะช่วยให้เราเข้าใจบริบทของเขา

00:26:38.300 --> 00:26:40.300
โอเคไหมครับ อะ

00:26:40.800 --> 00:26:43.400
ต้องเขียนเนอะ ต้องเขียน.

00:26:44.600 --> 00:26:48.900
โอเค ช่วงสุดท้ายสรุปนิดนึงครับ รีแคปนิดนึง.

00:26:50.800 --> 00:26:54.000
ก็ปัญหาทุกวันนี้ยังคงมีอยู่นะครับ

00:26:54.000 --> 00:26:57.900
เรามี Resource แบบจำนวนอาร์คิเทคเจอร์เนี่ยที่น้อยมาก

00:26:57.900 --> 00:27:04.700
และผมคาดหวังว่าเดี๋ยวทุกคนจบจากนี้ไปนะครับคุณจะมีสกิลไอเทคเจอร์ในเร็ววันนี้ โอเคไหม

00:27:05.600 --> 00:27:11.000
คือสำหรับผมอะ
ผมไม่ได้รู้สึกว่าเฮ้ยคนเป็นไอเทคเจอร์นี่มันต้องเป็นยากนะ

00:27:11.000 --> 00:27:15.200
ผมรู้สึกว่าทุกคนน่ะควรจะมีสกิล
Data ไอเทคเจอร์อยู่

00:27:15.900 --> 00:27:23.600
โอเคไหมครับ เออ Data
ไอเทคเจอร์สกิลมันไม่ควรอยู่ที่คนใดคนหนึ่งแล้วสั่งพวกเราให้ทำตาม

00:27:24.500 --> 00:27:33.100
เห็นไหม
มันควรจะเป็นดีซิชั่นแล้วก็มาจากทีมนะครับเพราะว่าทีมเนี่ยจะรู้ดีที่สุดว่าเราจะต้องใช้เทคโนโลยีอะไร

00:27:33.100 --> 00:27:36.200
อะไรที่เหมาะสม อะไรที่มันควรใช้

00:27:36.200 --> 00:27:42.900
ไม่ใช่ Consultant สักคนนึงเดินมาบอกเราว่า
เฮ้ยพวกคุณไป Google เลย เฮ้ยพวกคุณ AWS

00:27:43.500 --> 00:27:46.600
อะไรอย่างเงี้ย ไม่ใช่นะครับมันควรจะมาจากทีม

00:27:46.600 --> 00:27:51.800
เพราะฉะนั้นทุกคนควรจะมีสกิลเรื่องในเรื่องไอเทคเจอร์นะครับ

00:27:52.700 --> 00:27:59.000
อะซึ่งเฟรมเวิร์คที่ผมใช้นะครับ RACI, DOLCE, DORITO Theory นะครับ

00:27:59.000 --> 00:28:09.700
C4 Model แล้วก็ ADR นะครับเป็น Practice เบื้องต้นแล้วกัน 3 อย่างนะครับที่จะช่วยให้เราแบบเรียนรู้เรื่องของไอเทคเจอร์ได้นะครับแล้วก็ออกแบบได้ดีขึ้น.

00:28:09.700 --> 00:28:19.300
ซึ่งที่หยิบมา 3 อย่างเนี่ยจริงๆ
เรื่องไอเทคเจอร์เนี่ยมันโคตรกว้างเลยนะครับ เอ้อ

00:28:19.300 --> 00:28:23.500
แต่ว่าถ้าคุณเรียนรู้ Just Enough เนี่ย
To be Dangerous เนี่ยครับ

00:28:23.500 --> 00:28:27.900
ผมคิดว่าทุกคนสามารถที่จะก้าวไปเป็นแบบเฉิดฉายในองค์กร

00:28:27.900 --> 00:28:31.000
คุณแบบก้าวกระโดดไปเป็นซีเนียร์ในองค์กรได้

00:28:31.000 --> 00:28:37.600
ออกแบบระบบซิสเท็มได้พวกนั้น นะครับ
โอเค.ทิ้งท้ายครับ

00:28:39.000 --> 00:28:44.200
Software แล้วก็ Data ไอเทคเจอร์นะครับ
Without ดีไซน์เนี่ย ถ้าเราไม่ได้ดีไซน์มาดีๆ นะ

00:28:44.200 --> 00:28:46.300
มันเหมือนซิตี้ที่ไม่ได้แพลนนิ่งนะครับ

00:28:47.100 --> 00:28:50.000
ซิตี้ไหนไม่รู้นะครับ
คุณคิดกันเอาเองนะครับ (หัวเราะ)

00:28:50.700 --> 00:28:52.900
โอเคเนาะ ซิตี้ที่ไม่ได้แพลนนิ่งนะครับ

00:28:52.900 --> 00:28:58.100
แล้วก็ผมเชื่อว่า Data Architecture ทุก Data Engineer ทุกคนเนี่ยครับ

00:28:58.100 --> 00:29:04.200
สามารถที่จะมาสเตอร์สกิล Data Architecture ได้นะครับ
โดยที่คุณไม่จำเป็นต้องเป็นซีเนียร์ครับผม

00:29:04.700 --> 00:29:07.000
ประมาณนี้ โอเค ขอบคุณครับ

00:29:07.000 --> 00:29:10.100
ขอเสียงปรบมือให้พี่กานต์หน่อยค่ะ
(เสียงปรบมือ)

00:29:10.100 --> 00:29:16.000
ค่ะ
แล้วก็ได้รู้แล้วนะคะว่าสกิล Data Architecture เนี่ยมันสำคัญยังไงกับงาน Data Engineer ของเรานะคะ

00:29:16.000 --> 00:29:23.200
ในตอนนี้จะถือว่าเป็นช่วง Q&A เนาะ
หากใครมีคำถามสามารถยกมือถามตอนนี้ได้เลยค่ะ

00:29:23.200 --> 00:29:27.200
โอเคครับ คือแสดงว่าจาก เอ่อ
C4 Model เมื่อกี๊เนี่ย

00:29:27.200 --> 00:29:31.600
ผมสงสัยว่าถ้าเกิด อ่า สมมติมีหลายๆ

00:29:31.600 --> 00:29:35.100
ที่ หลายๆ คนที่เราต้องไปพรีเซนต์ด้วย
แล้วเขามีโดเมนแตกต่างกันอย่างเงี้ย

00:29:35.100 --> 00:29:41.700
เราต้องทำ Architecture visualize แยกออกไปตามจำนวนเท่านั้นเลยใช่ไหมครับ

00:29:41.700 --> 00:29:47.800
คำถามคือเรา เราจะสื่อสารใคร
เราจำเป็นต้องทำภาพนั้นครับ สำหรับผมนะ

00:29:47.800 --> 00:29:51.200
เราจะจำเป็นต้องทำภาพนั้นเพื่อสื่อสารกับเขาให้เข้าใจ

00:29:52.100 --> 00:29:53.100
ทำเฉพาะที่จำเป็น

00:29:53.800 --> 00:29:55.200
นะครับ

00:29:55.200 --> 00:30:00.500
มันไม่มี แบบ ภาพรวมทีเดียวเลยใช่ไหมครับ
แต่เราต้องดีไซน์ออกมาให้ตามเขาเท่านั้น

00:30:00.500 --> 00:30:01.700
ใช่ครับ ไม่มีภาพ

00:30:02.400 --> 00:30:06.900
ไม่มีภาพเดียวเป็น Silver Bullet นะครับ
เหมือนเวลาเราคุยกับเพื่อนเนาะ

00:30:06.900 --> 00:30:10.800
เราไม่ได้คุยกับเพื่อนคนนึงกับอีกคนนึงเหมือนกันถูกไหมครับ

00:30:10.800 --> 00:30:17.500
เราสื่อสารกันคนละแบบ
ดังนั้นภาพ Architecture เนี่ยครับมันเป็นการแชร์ understanding ระหว่างผมกับพวกคุณ

00:30:17.500 --> 00:30:20.200
ผมกับน้องเขาอะไรอย่างเงี้ย ผมกับ

00:30:20.200 --> 00:30:26.200
เอ่อ น้องอีกคนนึง
ดังนั้นผมต้องพูดคือพูดคุยกันคนละแบบ ไม่มีภาพเดียว

00:30:26.200 --> 00:30:26.900
ขอบคุณมากครับ

00:30:26.900 --> 00:30:28.400
ครับผม

00:30:28.400 --> 00:30:31.100
มีใครมีคำถามเพิ่มเติมไหมคะ?

00:30:31.100 --> 00:30:33.900
โอเค อยากถามว่า Data Architect อะครับ

00:30:34.400 --> 00:30:41.300
เอ่อ ในเชิงซอฟต์แวร์ครับ
ก็คือ DevOps Engineer หรือเปล่า ต่างกันยังไงบ้างครับ

00:30:41.300 --> 00:30:47.500
DevOps Engineer
ผมมองว่าความต่างในการโฟกัสนะครับสิ่งที่เขาโฟกัส

00:30:47.500 --> 00:30:58.800
เออ DevOps Engineer เนี่ย
ลักษณะจะเป็นเหมือนเราพยายามที่จะทำ automate เพื่อ deliver ของเนี่ยจากต้นทางไปยังปลายทางให้ได้สมูทที่สุด

00:30:58.800 --> 00:31:03.700
ได้เร็วที่สุดนะครับ จะโฟกัสแถวๆ
นั้น โฟกัสระหว่างแบบ

00:31:03.700 --> 00:31:10.200
เหมือนเป็น culture
ที่ออกแนว support การ deliver ให้กับทีม

00:31:10.200 --> 00:31:16.300
เราพัฒนาซอฟต์แวร์ตัวนึงเนี่ย
จะเอาซอฟต์แวร์ตัวเนี้ยไปวางไว้บน Server ไป deploy ให้ลูกค้าใช้ยังไงอะครับ

00:31:16.300 --> 00:31:17.900
เขาจะทำ support ทั้งเส้น

00:31:18.700 --> 00:31:23.000
เนาะ อันเนี้ยสำหรับผมคือแนวๆ
DevOps Engineer ครับ

00:31:23.000 --> 00:31:30.700
ส่วน Data Architect ก็เราวางออกแบบระบบนะครับ
อย่างสมมติว่าถ้าเป็น Architecture ของ Data เนาะ

00:31:30.700 --> 00:31:40.000
เราออกแบบระบบขึ้นมาว่าตัว Architecture ตัวเนี้ยเราจะตอบโจทย์เรื่องของการรับข้อมูลเข้ามายังไงได้บ้าง

00:31:40.000 --> 00:31:51.700
แล้วก็เอาข้อมูลเนี่ยออกไป produce ออกไปให้ฝั่งของ downstream หรือว่าผู้ใช้งาน Data เนี่ยยังไงได้บ้างมากกว่าจะเป็นภาพแบบดีไซน์มากกว่า support ครับผม

00:31:51.700 --> 00:31:54.100
เอ่อ ประมาณว่า Data Architect กับ เอ่อ

00:31:54.100 --> 00:31:59.700
เมื่อกี้น่าจะผมพูดผิดน่าจะไม่ใช่ DevOps ครับ น่าจะเป็นประมาณ Solution Architect แบบนี้ครับ Cloud Architect น่าจะคล้ายๆ กันนะครับ

00:31:59.700 --> 00:32:00.700
ๆ กันนะครับ

00:32:00.700 --> 00:32:01.300
อ้า

00:32:02.100 --> 00:32:05.400
Solution Architect สำหรับผมอะมันออกแนว Business

00:32:06.600 --> 00:32:10.300
ครับ อะเราไปทำความเข้าใจ
สำหรับผมนะตามความเข้าใจผมนะ

00:32:10.900 --> 00:32:17.500
เราไปทำความเข้าใจกับทางฝั่งของ Business แล้วเราก็คิดโซลูชันให้เขา ครับ

00:32:17.500 --> 00:32:22.800
ประมาณนั้น
โซลูชันเนี่ยมันอาจจะเป็นภาพ Architecture ที่เรามีอยู่แล้วว่า เฮ้ย

00:32:22.800 --> 00:32:27.800
ถ้า Business แบบนี้เราใช้ภาพ Architecture แบบนี้เพื่อทำเป็นโซลูชันให้กับอีกทีมนึง

00:32:28.300 --> 00:32:31.100
อย่างเงี้ยเป็นต้น
ให้กับลูกค้าอีกเจ้านึงเป็นต้น

00:32:31.700 --> 00:32:32.000
ครับ

00:32:32.600 --> 00:32:33.200
เอ้อ

00:32:33.200 --> 00:32:42.600
มันจะมีความแตกต่างสำหรับผมแบบ Software Architect หรือว่า Data Architect เนี่ยจะอยู่เข้ามา Internal มากกว่า Solution Architect

00:32:43.200 --> 00:32:45.300
ครับ

00:32:45.300 --> 00:32:48.900
ขอบคุณครับ

00:32:48.900 --> 00:32:51.400
ค่ะก็ขอบคุณสำหรับคำถามทั้งหมดด้วยนะคะ

00:32:51.400 --> 00:32:56.300
ยังไงถ้าหากว่าท่านอื่นอื่นมีคำถามเนี่ยสามารถถามพี่กานต์ได้เลยนะคะ

00:32:56.300 --> 00:33:00.800
ก็ยังไงขอบคุณพี่กานต์มากนะคะที่มาแชร์ความรู้ในวันนี้ ขอเสียงปรบมือให้พี่กานต์หน่อยค่ะ

00:33:02.100 --> 00:33:03.200
(เสียงปรบมือ)
