WEBVTT

00:00:00.500 --> 00:00:04.300
โอเค ก่อนอื่นขออภัยทุกท่านที่มาสายนะครับ

00:00:04.300 --> 00:00:08.200
แล้วก็พอเข้ามาเนี่ย ช็อคนิดนึงเพราะว่าเห็นสีหน้าของแต่ละท่านเนี่ย

00:00:08.200 --> 00:00:12.200
รู้สึกว่าเรื่องที่ผมจะพูดเนี่ย ไม่จำเป็นอีกแล้วในชีวิต

00:00:12.200 --> 00:00:13.200
อะไรอย่างเงี้ยครับ

00:00:14.200 --> 00:00:19.000
รู้สึกว่าทุกคนน่าจะเทพมาก ถ้าสมมุติว่าเรื่องที่ผมเล่าเนี่ย

00:00:19.400 --> 00:00:24.000
ทุกคนรู้แล้วอย่างเงี้ย ก็ถือว่าเรามาทบทวนความรู้ก่อนเนาะ

00:00:24.000 --> 00:00:26.300
แล้วก็เดี๋ยวมันก็จะมี record ออกไปใช่ไหม

00:00:26.300 --> 00:00:30.000
ก็ให้คนที่เขายังไม่รู้ได้รู้ต่อไปอย่างเงี้ยครับ

00:00:31.600 --> 00:00:37.400
โอเค ถือว่าเป็นเวทีแรกๆ ของผมเลยที่อยู่ในวงการซอฟต์แวร์เนาะ

00:00:37.400 --> 00:00:39.500
เพราะว่าปกติแล้วเมื่อก่อนผมทำ UX มา 5 ปี

00:00:39.500 --> 00:00:42.200
หลายๆ คนอาจจะเคยเห็นหน้าผมในวงการ UX ครับ

00:00:42.200 --> 00:00:45.700
แต่ว่าเนี่ย ผมเพิ่งหลังจากโควิดก็คือเปลี่ยนสายมาทำ frontend

00:00:45.700 --> 00:00:46.700
ได้ประมาณ 3-4 ปีละ

00:00:46.700 --> 00:00:48.900
แล้วก็รู้สึกว่าชอบ JavaScript อะไรอย่างเงี้ยครับ

00:00:48.900 --> 00:00:50.900
ก็เลยเริ่มศึกษามาเรื่อยๆ อะไรอย่างเงี้ยเนาะ

00:00:50.900 --> 00:00:55.800
โอเค background ประมาณนี้ครับ ชื่อเอ็มครับ ลืมบอก by the way

00:00:55.800 --> 00:00:58.200
เดี๋ยวนะ ขอดูปั๊กกะตืนก่อน

00:01:01.200 --> 00:01:05.200
ถือมือถือนี่ ไม่ได้ตอบไลน์ครับ ดูโพยครับ จดโพยมาครับ

00:01:06.500 --> 00:01:10.000
ขอโทษดีนะครับ โอเคครับ

00:01:13.600 --> 00:01:18.400
เดี๋ยวเริ่มเนาะ โอเค 30 นาทีครับ ก่อนจะเริ่มนะ

00:01:18.400 --> 00:01:21.000
จริงๆ มันมี ผมเห็นมีฟีเจอร์ใหม่ของ Keynote เนี่ย

00:01:21.000 --> 00:01:22.900
จริงๆ พื้นหลังมันเลื่อนด้วยนะ

00:01:22.900 --> 00:01:25.100
ถ้าใครไม่เห็นเนาะ คือหลังมันเลื่อนๆ เนี่ย

00:01:25.100 --> 00:01:27.100
เป็นฟีเจอร์ใหม่ของ Keynote ผมชอบมาก

00:01:28.400 --> 00:01:31.700
ครับ ก็หลักแล้วเนี่ย ที่ผมมา

00:01:34.900 --> 00:01:38.400
ที่ผมสนใจเรื่องนี้ครับ ผมรู้สึกว่าเด็กยุคใหม่ในปัจจุบันเนี่ยครับ

00:01:38.600 --> 00:01:42.900
คือเค้าเข้ามาในฟิลด์ของ front-end จะว่าสกิลเนี่ย

00:01:43.000 --> 00:01:45.500
คือเค้ามักจะจั๊มป์มาที่ framework เลยอย่างเงี้ย

00:01:45.800 --> 00:01:48.700
ซึ่งอาจจะทำให้ขาดพื้นฐานบางอย่างที่ทำให้เค้า

00:01:48.700 --> 00:01:51.500
อาจจะเข้าใจผิดหรือว่าไม่เข้าใจไปอะไรอย่างเงี้ยครับ

00:01:51.700 --> 00:01:54.500
ก็หวังว่าเวทีนี้จะได้ช่วยให้ทุกคนเข้าใจเนาะ

00:01:56.600 --> 00:01:59.100
เฮ้ย เดี๋ยวนะ รู้สึกประหม่ามากเลย แล้วก็เดี๋ยวนะ

00:01:59.100 --> 00:02:02.600
ไป the way ก่อนที่ถึงจุดนั้นน่ะ คือกว่าผมจะมาถึงตอนเนี้ย

00:02:02.600 --> 00:02:05.300
เหมือนแบบพระเจ้าแกล้งมากเลยอ่ะ เครื่องบินก็ดีเลย์

00:02:05.400 --> 00:02:07.400
รถก็ช้าอะไรอย่างเงี้ย เกือบจะมาไม่ทันแล้ว

00:02:07.500 --> 00:02:09.900
ผมจะขอทีมงานเทแล้วอะไรอย่างเงี้ยครับ

00:02:11.700 --> 00:02:18.200
โอเค ถ้าดูตามโค้ดเนี่ยครับ อันนี้เห็นมองเห็นอยู่เนาะ เห็นครับ

00:02:18.200 --> 00:02:21.400
โอเค let a เท่ากับ 10 เนาะ แล้วก็ let b เท่ากับ a

00:02:21.400 --> 00:02:22.500
แล้วก็ a เท่ากับ 20 เลยครับ

00:02:22.700 --> 00:02:26.200
ถ้าถามทุกคนเนี่ย ทุกคนก็น่าจะรู้อยู่แล้วว่า

00:02:26.200 --> 00:02:29.700
คำตอบสุดท้าย a ค่า a กับค่า b เนี่ย เท่าไหร่เนาะ

00:02:29.800 --> 00:02:35.200
แต่ว่าถ้าเราลองคิดดูช้าๆ เนี่ย อันนี้จะชวนคิดนะว่า

00:02:35.600 --> 00:02:40.200
ค่อยๆ คิดไปทีละ step ว่าสิ่งที่มันเกิดขึ้นในโค้ดที่เราเห็นเนี่ย

00:02:40.200 --> 00:02:41.800
เราคิดอะไรในหัวบ้างนะครับ

00:02:41.900 --> 00:02:46.700
ก็คือตอนแรกเนี่ย เราก็จะกำหนดตัวแปร a เนาะ

00:02:47.100 --> 00:02:50.900
ตั้งค่าตัวแปร a ขึ้นมาตัวหนึ่ง แล้วก็กำหนดให้มันค่าเท่ากับ 10 เนาะ

00:02:51.400 --> 00:02:54.600
แล้วก็สร้างตัวแปร b ขึ้นมาตัวแปรหนึ่ง กำหนดค่าให้เท่ากับ a

00:02:54.700 --> 00:02:58.600
เอ๊ะ แล้ว a มันเท่าไหร่นะ เมื่อกี้ a มัน อ๋อ a มันเท่ากับ 10 นี่หว่า

00:02:58.800 --> 00:03:02.100
ก็คือ a เท่ากับ 10 นะครับ สุดท้ายก็คือกำหนด a เท่ากับ 20 เนาะ

00:03:02.300 --> 00:03:06.700
ดังนั้นคำตอบของโจทย์ข้อเนี้ยมันก็คือเท่ากับว่า

00:03:07.000 --> 00:03:10.500
สุดท้ายแล้วเนี่ย a ก็คือเท่ากับ 20
แล้วก็ b เท่ากับ 10 นะครับ

00:03:11.500 --> 00:03:15.300
ที่ชวนคุยอย่างเงี้ยก็คือ จริงๆ แล้วคือไม่ได้มาสอนเบสิกอะไรนะครับ

00:03:15.900 --> 00:03:19.700
แต่ว่าอยากให้เราลองค่อยๆ คิดตาม step เนี้ย

00:03:19.900 --> 00:03:23.100
คือให้เราเห็นว่าสิ่งที่เกิดขึ้นในหัวเราเนี่ย

00:03:23.300 --> 00:03:27.700
พอเราเห็นโค้ดเนี่ย เราคือทุกคนน่ะ รู้ทันทีว่ามันคำตอบเท่าไหร่เนาะ

00:03:28.100 --> 00:03:31.800
แต่ว่าอยากให้ทุกคนน่ะ เดี๋ยวนะ ตื่นเต้นแป๊บนึงครับ

00:03:36.000 --> 00:03:39.300
อยากให้ทุกคนเห็นภาพแต่ละ step สิ่งที่มันเกิดขึ้น

00:03:39.300 --> 00:03:42.100
ในหัวครับว่ามันเกิดอะไรบ้างเนาะ สิ่งนี้คือเรา

00:03:42.100 --> 00:03:44.300
เรียกว่า mental model เนาะ

00:03:44.300 --> 00:03:47.100
mental model เนี่ยก็คือตามชื่อโจทย์เนาะ

00:03:47.100 --> 00:03:48.800
ก็คือเนี่ย JavaScript mental model นะครับ

00:03:48.800 --> 00:03:50.700
เป็นเรื่องของ JavaScript เนาะที่ผมมาพูดเนาะ

00:03:50.700 --> 00:03:57.300
คือสิ่งที่เราเข้าใจ ถ้าตาม definition ของ Wikipedia

00:03:57.300 --> 00:04:00.600
เนี่ยเค้าบอกว่า an internal representation model of

00:04:00.600 --> 00:04:03.600
external reality that is a way of representing

00:04:03.600 --> 00:04:05.800
reality within one's mind

00:04:05.800 --> 00:04:07.900
คือหมายความว่า สิ่งที่เรานึกว่า

00:04:07.900 --> 00:04:09.400
เรามองเห็นสิ่งนึงเนี่ย

00:04:09.400 --> 00:04:10.800
แล้วเราเข้าใจว่ามันทํางานยังไง

00:04:10.800 --> 00:04:14.000
เข้าใจง่ายๆ เช่น ลูกบิดประตู สมมุติว่าถ้าเรา

00:04:14.000 --> 00:04:16.600
ไปเห็นลูกบิดประตูเนี่ย เราก็จะเข้าใจโดยทันทีว่า

00:04:16.600 --> 00:04:21.100
มันมักจะบิดซ้าย บิดขวา บิดตามเข็ม

00:04:21.100 --> 00:04:25.600
แต่ว่าวันไหนถ้ามีใครทําลูกบิดประตู

00:04:25.600 --> 00:04:28.000
อันนึงที่มันหมุนไปตรงกันข้ามอย่างเงี้ย

00:04:28.000 --> 00:04:30.500
เราก็จะรู้สึกว่าอันนี้มันขัดกับหลัก

00:04:30.500 --> 00:04:33.300
สิ่งที่เราเข้าใจหรือว่าสิ่งที่เป็น mental model ของเรา

00:04:33.300 --> 00:04:37.000
นะครับ อันนี้มันก็จะ apply คล้ายๆ กับแนว UX

00:04:37.000 --> 00:04:38.700
นิดนึงนะครับ UX เนี่ยคือแบบว่า

00:04:38.700 --> 00:04:40.900
เวลาเราทํา product ให้ user เนี่ย

00:04:40.900 --> 00:04:44.100
คือเราก็จะทําตามที่ mental model ของกลุ่มเป้าหมาย

00:04:44.100 --> 00:04:47.400
เราเข้าใจเนาะ ไม่ใช่แบบตามที่เราต้องการอะไรเงี้ยครับ

00:04:47.400 --> 00:04:58.700
โดยปกติแล้วอะครับ เวลาเราพูดว่า variable เนี่ย

00:04:58.700 --> 00:05:00.300
variable ทุกคนรู้จัก variable เนาะ

00:05:00.300 --> 00:05:02.200
variable เนี่ยหรือว่าตัวแปรเนี่ย

00:05:02.200 --> 00:05:04.900
เรามักจะเปรียบเทียบเป็นอะไร แต่เมื่อกี้

00:05:04.900 --> 00:05:06.300
สปอยไปแล้ว มือเร็วไปหน่อย

00:05:06.300 --> 00:05:08.400
เราก็จะเปรียบเทียบเป็นกล่องเนาะ

00:05:08.400 --> 00:05:13.000
จริงๆ แล้วอะ คือมันก็ไม่ได้ผิดอะไรนะครับ

00:05:13.000 --> 00:05:16.300
เพราะว่าบางทีเนี่ยเราอยากให้คนเนี่ยเข้าใจเร็วๆ

00:05:16.300 --> 00:05:19.000
หรือว่าเรียนรู้ได้ง่ายเลยคือมันก็คือแบบว่าแบบ

00:05:19.000 --> 00:05:20.700
โอเค กําหนดตัวแปร a ขึ้นมา

00:05:20.700 --> 00:05:23.100
ตัวแปร a เป็นกล่อง กล่องนึง แล้วเอา 10 ใส่เข้าไป

00:05:23.100 --> 00:05:25.900
อะไรอย่างเงี้ยครับ คือทําให้คนเข้าใจง่ายเนาะ

00:05:25.900 --> 00:05:30.800
แต่ว่าจริงๆ แล้วอะครับ ผมจะบอกว่าตัวแปรอะ

00:05:30.800 --> 00:05:32.800
มันไม่ใช่กล่อง มันเป็นอย่างอื่น อะไรอย่างเงี้ย

00:05:32.800 --> 00:05:34.900
ถ้าหลายๆ คนก็อาจจะรู้แล้ว

00:05:34.900 --> 00:05:37.100
แต่ว่าถ้าใครที่ยังไม่รู้ก็ไม่เป็นไร

00:05:37.100 --> 00:05:39.500
ก็ถือว่าปกติ เพราะว่าเราถูกสอนมาแบบนี้เนาะ

00:05:44.200 --> 00:05:44.700
ต่อไป

00:05:44.700 --> 00:05:47.800
รู้สึกสะมะกึ๊กสะมะกั๊กมากเลยเนี่ย

00:05:48.800 --> 00:05:52.700
โค้ดนี้ยากขึ้นมาหน่อยอันนี้

00:05:52.700 --> 00:05:53.700
เห็นกันนะครับ

00:05:54.000 --> 00:05:57.100
โอเคอันนี้เป็นฟังก์ชัน duplicate spreadsheet

00:05:57.400 --> 00:05:59.200
ชื่อก็ตามที่มันบอกเลยเนาะ

00:05:59.600 --> 00:06:03.600
ฟังก์ชั่นนี้ก็จะรับออบเจ็กต์ที่เป็นออริจินอลออบเจ็กต์

00:06:03.600 --> 00:06:05.300
เข้ามาครับซึ่งเราจะเช็คก่อนว่า

00:06:05.300 --> 00:06:08.600
มันมี pending changes ไหม

00:06:08.600 --> 00:06:10.000
เม้าส์อยู่ไหนน้า

00:06:10.900 --> 00:06:15.300
ไม่เป็นไรไม่ต้องใช้ด้วยนะ

00:06:15.300 --> 00:06:18.600
ถ้ามัน pending changes เนี่ย ก็คือไม่ให้

00:06:18.600 --> 00:06:20.100
ไม่ให้ก็อปปี้

00:06:20.100 --> 00:06:22.600
ไม่ duplicate ก็คือ throw error เลยว่ากรุณาเซฟก่อน

00:06:22.600 --> 00:06:26.600
duplicate อะไรงี้ครับแต่ว่าถ้ามันเซฟแล้ว

00:06:26.600 --> 00:06:29.700
สิ่งที่มันทำก็คือมันก็จะทำการก๊อปปี้ file original

00:06:29.700 --> 00:06:32.000
อย่างที่เห็นเห็นว่าเราเค้าประกาศตัวแปรก๊อปปี้ขึ้นมา

00:06:32.000 --> 00:06:33.800
ตัวแปรหนึ่งเป็นออบเจ็กต์ก่อนละก็

00:06:33.900 --> 00:06:36.100
แต่ว่า date ก็คือเป็น date ปัจจุบันเนอะ และก็

00:06:36.400 --> 00:06:40.100
ใช้ author น่ะเป็น original author ก็คือเป็นตัว

00:06:40.200 --> 00:06:42.700
ข้อมูลหลักของอริจินอลเนอะละก็

00:06:43.200 --> 00:06:44.800
พวก cell และก็ metadata อะไรอย่างเงี้ย

00:06:44.800 --> 00:06:47.600
แต่ว่าสุดท้ายเนี่ยก็มีการเปลี่ยนชื่อไฟล์

00:06:47.900 --> 00:06:50.300
ฝ่าย duplicate นี้ให้เพิ่มคำว่า "Copy of" เข้าไป

00:06:50.500 --> 00:06:54.400
น่ะครับแล้วมันก็จะได้เป็นชื่อว่า "Copy of" something

00:06:54.400 --> 00:06:55.500
ของ original

00:06:56.000 --> 00:06:57.500
โอเคมาถึงจุดนี้

00:06:57.800 --> 00:07:01.700
มีใครรู้ไหมว่าไอ้ code นี้มันมีบัคอยู่?

00:07:05.100 --> 00:07:07.600
ไม่ต้องยกมือก็ได้นะเดี๋ยวผมกลัวทุกคนรู้

00:07:09.100 --> 00:07:09.900
โอเคครับ.

00:07:10.600 --> 00:07:11.700
อันนี้ผมยกตัวอย่างนะ.

00:07:17.300 --> 00:07:21.600
อันนี้เป็นเป็น origin object เนาะ

00:07:21.600 --> 00:07:25.600
มันก็จะมีชื่อ มีวันที่สร้าง มีชื่อเลยครับก็

00:07:25.600 --> 00:07:28.700
ที่สำคัญที่เราอยากรู้คือตัว metadata ที่เป็นชื่อ title เนาะ

00:07:29.000 --> 00:07:30.800
title ชื่อ My spreadsheet

00:07:31.500 --> 00:07:33.800
ซึ่งตัว dupliacte ก็คือจะรับตัว original เข้าไป

00:07:33.800 --> 00:07:37.400
แล้วก็แก้ไขชื่อ copy of เนี่ยให้เพิ่ม copy of เข้าไปครับ

00:07:37.800 --> 00:07:39.800
อ่าอันนี้ผมจะลองดูนะก็คือ

00:07:39.900 --> 00:07:43.500
ก็คือ โอเค เนี่ยสร้างตัวแปร spreadsheet ขึ้นมาเก็บตัว

00:07:44.100 --> 00:07:46.600
duplicate เดี๋ยวผมจะลอง console.log ดู

00:07:58.000 --> 00:08:01.600
มันไม่ได้เซฟ

00:08:01.600 --> 00:08:04.700
โอเค มันไม่เป็นไร

00:08:04.700 --> 00:08:08.100
ทีนี้ ผมมา console.log มา 2 ตัว คือ

00:08:08.100 --> 00:08:10.500
ลอกตัว original ที่เป็น original spreadsheet เมื่อกี้

00:08:10.500 --> 00:08:11.800
แล้วก็ตัว new sheet ใหม่นะครับ

00:08:11.800 --> 00:08:13.900
แต่เราจะเห็นได้ว่า ทั้ง 2 ตัวครับ

00:08:14.100 --> 00:08:16.500
มันเป็นชื่อ copy of my spreadsheet ทั้งคู่เลย

00:08:17.900 --> 00:08:20.400
ครับ อันนี้แหละ ก็คือ

00:08:20.700 --> 00:08:25.000
ถ้าใครนะครับ เห็น bug ตั้งแต่เมื่อกี้อะ

00:08:25.000 --> 00:08:29.300
ก็โอเค ก็ถือว่าเราเข้าใจ javascript ระดับนึงละเนาะ

00:08:29.300 --> 00:08:31.200
ก็ถือว่าเราวันนี้เรามาทบทวนความรู้

00:08:31.800 --> 00:08:33.300
แต่ว่าถ้าใครไม่เห็น bug มันเมื่อกี้

00:08:33.700 --> 00:08:36.500
ก็ถือว่า อีก 15 นาที หรือว่า 20 นาทีต่อจากไปนี้

00:08:36.500 --> 00:08:38.800
ก็คือถือว่าจะเป็นความรู้ใหม่ของเรา

00:08:38.800 --> 00:08:41.100
หรือว่ามันจะเปลี่ยนความคิด วิธีคิดของเราเนาะ

00:08:42.500 --> 00:08:45.000
โอเค ต่อไป

00:08:45.600 --> 00:08:55.000
ในการสไลด์วันนี้ครับ ผมอยากจะสโคปตัว context นะเนาะ

00:08:55.000 --> 00:08:59.700
ให้อยู่ประมาณว่า ถ้าใน universe

00:08:59.700 --> 00:09:02.000
ถ้าในจักรวาลของ javascript ทั้งหมดเนี่ย

00:09:02.000 --> 00:09:03.900
คือมันจะมีวิธีการเรียนรู้อยู่ 2 แบบนะครับ

00:09:04.000 --> 00:09:06.000
ก็คือเรียนจาก outside กับเรียนจาก inside เนอะ

00:09:06.200 --> 00:09:08.800
เรียนจาก outside เนี่ยก็จะเป็นการที่เราเข้าใจว่า

00:09:09.200 --> 00:09:12.700
เวลาเราสร้างตัวแปรเนี่ย มันไปเขียนตรงไหนใน memory

00:09:13.200 --> 00:09:15.800
แล้วมันไปชี้ เอา memory ไปชี้ตรงจุดไหน

00:09:15.800 --> 00:09:18.600
ของเป็นแบบ pointer หรือว่าเป็นจุดไหนของใน memory

00:09:18.800 --> 00:09:20.400
อะไรอย่างเนี้ยครับ มันจะอารมณ์ประมาณนั้น

00:09:20.400 --> 00:09:22.700
หรือว่ามันจะแบบ มันจะ execute bytecode ยังไง

00:09:22.700 --> 00:09:25.100
หรือว่ามันจะ optimize ยังไง มันจะเป็น way

00:09:25.300 --> 00:09:28.700
แบบ outside แต่ว่าวันนี้ครับ
ผมจะชวนทุกคนมาคุยกันใน inside มากกว่า

00:09:29.000 --> 00:09:31.200
ก็คือ ใน inside เนี่ยก็คือ

00:09:31.200 --> 00:09:32.700
เป็นในสโคปของ javascript

00:09:32.700 --> 00:09:35.400
ก็คือ เราแค่เข้าใจว่า string เนี่ยก็คือ value ตัวหนึ่ง

00:09:35.400 --> 00:09:38.400
โดยที่เราไม่สนว่ามันจะ declare

00:09:38.400 --> 00:09:40.200
หรือว่ามันจะประกาศไว้ตรงไหนใน memory ของโลก

00:09:40.900 --> 00:09:44.000
อะไรอย่างเนี้ย ขอให้เราทุกคนมองภาพตรงกันก่อนเนาะ

00:09:45.200 --> 00:09:48.900
นะ อันนี้เป็น quote ที่ผมชอบนะครับ ดึงมาเนาะ ก็

00:09:48.900 --> 00:09:53.400
The stars are bright when I look at them

00:09:53.600 --> 00:09:54.900
ก็คือเหมือนกับว่า ไอ้ดวงดาวยังสว่างอยู่ตอนที่ฉันมองมัน

00:09:54.900 --> 00:09:57.500
อะไรอย่างเนี้ย แต่ว่าพอที่ฉันหลับตาแล้วอะ มันยังอยู่มั้ย

00:09:58.000 --> 00:09:59.800
แล้วฉันก็ยักไหล่ เพราะว่าฉันไม่สนใจ

00:10:00.000 --> 00:10:03.000
เพราะว่ามันเป็น implementation details อะไรประมาณนี้ครับ

00:10:04.900 --> 00:10:08.600
อันที่ 1 ครับ จริงๆ แล้วมันมีประมาณ 5 mental model

00:10:08.700 --> 00:10:12.400
ที่ผมจะมาคุยวันนี้ อันแรกเนี่ย ก็คือ โค้ดเนี่ย

00:10:12.400 --> 00:10:13.200
ไม่เท่ากับ value นะครับ

00:10:14.800 --> 00:10:17.500
อันนี้คือ ถ้าเราเห็นเนี่ย ก็คือมันจะเป็นโค้ดของเรา

00:10:17.900 --> 00:10:19.700
ซึ่งจริงๆ แล้ว เราทุกคนอาจจะเข้าใจว่า

00:10:19.900 --> 00:10:22.600
เวลาเราเขียนอย่างนี้ มันมักจะทำให้เราเข้าใจว่า

00:10:23.200 --> 00:10:26.900
โค้ดกับ value มันเป็นส่วนเดียวกันเนาะ

00:10:26.900 --> 00:10:29.600
แต่ว่าจริงๆ แล้วครับ value อย่างที่ผมบอกว่า

00:10:30.000 --> 00:10:33.300
value มันถูกสร้างขึ้นอยู่ในจักรวาลของ JavaScript

00:10:33.300 --> 00:10:35.600
อยู่แล้ว จักรวาลของ JavaScript value มีอะไรบ้าง

00:10:35.600 --> 00:10:38.100
ก็คือมี undefined มี null มี string มี number

00:10:38.300 --> 00:10:39.600
มี boolean มีนู่นนี่นั่น

00:10:40.000 --> 00:10:43.800
ซึ่งพวกนี้ครับ มันมีมาตั้งแต่เราเปิด JavaScript ขึ้นมา

00:10:43.800 --> 00:10:46.600
เราไม่ได้สร้างมันขึ้นมา ดังนั้น มันไม่ได้เป็นส่วนหนึ่ง

00:10:46.600 --> 00:10:49.100
ของโค้ดเรา มันเป็นของ universe JavaScript

00:10:49.100 --> 00:10:51.900
อยากให้เรามองภาพอย่างนี้ก่อนครับ ก็คือ

00:10:52.200 --> 00:10:54.500
หมายความว่า โค้ดไม่เท่ากับ value เนาะ

00:10:55.200 --> 00:10:58.700
บอกทำไม เดี๋ยวสักพักไป มันก็จะมีอะไรที่มัน

00:10:58.700 --> 00:11:02.300
relate เกี่ยวกับอันนี้เนาะ เดี๋ยวผมขอดูเผื่อตกหล่นอะไร

00:11:06.000 --> 00:11:11.400
อันนี้ก็พูดไปแล้ว อันนี้คือเมื่อกี้คือเปรียบเทียบ

00:11:11.400 --> 00:11:14.600
เมื่อกี้เนาะว่า โค้ดเนี่ยก็เหมือนตัวเราเนี่ย

00:11:14.600 --> 00:11:19.200
ที่ถือแบบ execution instruction ที่อยู่ในมือเนี่ย

00:11:19.400 --> 00:11:21.800
แล้วเราก็มองเห็นข้างนอกเนี่ย คือดวงดาว

00:11:21.800 --> 00:11:24.000
ที่เราทำอะไรกันไม่ได้เลย เนี่ยจะเป็นพวก string object

00:11:24.000 --> 00:11:24.300
อะไรเงี้ย

00:11:24.400 --> 00:11:26.900
ก็คือเหมือนกับว่า เปรียบพวกนี้คือเหมือนเป็น

00:11:26.900 --> 00:11:29.300
JavaScript universe ซึ่งเราไม่สามารถไปแก้ไข

00:11:29.300 --> 00:11:33.400
ลบ delete เพิ่มมันได้ ไอ้พวก value พวกนี้

00:11:33.400 --> 00:11:37.100
ที่เป็นอยู่บนดาวเนี่ย แต่ว่าเราสามารถมองดูมันได้

00:11:37.100 --> 00:11:39.600
หรือว่าไป interact กับมันได้บางอย่าง

00:11:39.600 --> 00:11:41.100
ในบางตัวอะไรเงี้ยครับ

00:11:43.400 --> 00:11:44.900
อันที่ 2 ครับ

00:11:45.900 --> 00:11:48.800
primitive แป๊บนึง

00:11:49.800 --> 00:11:53.200
primitive คือ immutable

00:11:53.200 --> 00:11:55.800
immutable คือแก้ไม่ได้ หรือว่า read-only นะครับ

00:11:57.600 --> 00:12:00.300
primitive เนี่ยมันจะมีอะไรบ้างเนาะ ก็คนอาจจะรู้แล้ว

00:12:00.400 --> 00:12:03.700
ก็คือมันก็มี undefined null booleans number string

00:12:03.700 --> 00:12:04.600
แล้วก็ symbol นะครับ

00:12:04.900 --> 00:12:07.500
ไอ้ symbol นี้ไม่ต้องถามผม ผมก็ไม่รู้เหมือนกันมันคืออะไรครับ

00:12:07.700 --> 00:12:09.500
อันนี้มันเขียนมาผมก็เลยพูดไปด้วย

00:12:10.000 --> 00:12:14.000
แล้วก็ส่วน non-primitive ที่ไม่ใช่ตัว primitive เนี่ย

00:12:14.100 --> 00:12:16.200
ก็คือจะมีแค่ type เดียวก็คือ object

00:12:16.700 --> 00:12:21.100
อ้าว แล้วพวกอะไรพวกนี่นั่นล่ะ พวกนั้นก็คือ object เหมือนกัน

00:12:21.200 --> 00:12:22.200
ถ้าหลายๆ คนก็น่าจะรู้เนาะ

00:12:22.600 --> 00:12:25.700
ฟังก์ชันคือ object array คือ object เหมือนกันอย่างหนึ่งเนาะ

00:12:26.000 --> 00:12:30.500
แต่ว่าฟังก์ชันเป็น object ที่มีความสามารถพิเศษเพิ่มเติมขึ้นมา

00:12:30.800 --> 00:12:31.200
อะไรอย่างเงี้ยครับ

00:12:33.600 --> 00:12:39.400
โอ้โห เวลาเร็วเหมือนกันนะเนี่ย สมมุติว่ายกตัวอย่างตัวเนี้ย

00:12:39.800 --> 00:12:44.300
ถ้าเราคือดูใน string อ่ะ ใน string มันจะมีเค้าเรียกว่ามี

00:12:44.700 --> 00:12:48.300
method พิเศษที่สามารถทำให้เราเข้าถึงบางตัวได้ เช่นสมมุติว่า

00:12:48.500 --> 00:12:49.700
เราแบบเขียน

00:12:50.300 --> 00:12:54.100
เรียก reaction[0] อย่างเงี้ย มันก็จะเป็นตัว y ใช่มั้ยขึ้นมา

00:12:54.600 --> 00:12:55.400
แต่ว่าถ้าเราไปแก้

00:12:56.000 --> 00:13:00.600
แก้จาก ถ้าไอ้คนเนี้ยเราแก้จาก y เป็น i ให้เปลี่ยนจาก

00:13:00.900 --> 00:13:02.200
yikes เป็น likes เงี้ย

00:13:02.300 --> 00:13:02.500
คิดว่าทำได้มั้ยครับ

00:13:03.500 --> 00:13:04.200
คิดว่าได้มั้ย

00:13:06.300 --> 00:13:06.800
เดี๋ยวผมลองดูเนาะ

00:13:19.400 --> 00:13:21.900
ครับ ก็อย่างที่บอกว่า primitive

00:13:21.900 --> 00:13:25.600
มันแก้ไขไม่ได้เนาะ ก็ดังนั้นหมายถึง

00:13:25.600 --> 00:13:28.200
ว่าถึงแม้ว่ามันจะเหมือนเราจะแก้มัน

00:13:28.200 --> 00:13:30.000
ได้เหมือนแบบเราแก้ array อะไรอย่างเงี้ย

00:13:30.100 --> 00:13:33.300
แต่มันก็แก้ไม่ได้อยู่ดีนะครับ อันนี้ที่สิ่ง

00:13:33.400 --> 00:13:33.900
ที่อยากจะพูด

00:13:36.700 --> 00:13:39.300
ทีนี้ แต่ถ้าเป็นทางกลับกัน ถ้าเป็น

00:13:39.600 --> 00:13:43.500
พวก non-primitive หรือว่า object เนี่ย

00:13:43.600 --> 00:13:44.800
หรือว่าจริงๆ มันจะมีอีกชื่อนึงก็คือชื่อ

00:13:44.800 --> 00:13:46.200
reference เนาะ เดี๋ยวเราจะรู้ว่าทำไม

00:13:46.300 --> 00:13:48.200
มันถึงเรียกว่า reference เนาะ ไอ้พวกนี้

00:13:48.200 --> 00:13:50.500
ก็คือสามารถแก้ไขได้ สมมุติถ้าเราเปลี่ยน

00:13:50.500 --> 00:13:52.900
จาก array ตัวที่ 1 ตำแหน่งที่ 1

00:13:54.900 --> 00:13:58.900
ให้เปลี่ยนเป็น 428 อะไรอย่างเงี้ย

00:13:59.000 --> 00:14:10.200
มันก็จะเปลี่ยนให้เนาะ โอเค

00:14:14.500 --> 00:14:16.400
อาจจะต้องรีบหน่อย เพราะว่าเหลือ 15 นาที

00:14:16.800 --> 00:14:18.200
โอเค ตัวที่ 3 ครับ

00:14:19.000 --> 00:14:21.300
อย่างที่บอกไปตอนต้นเมื่อกี้ว่า ตัว

00:14:21.400 --> 00:14:23.100
variable น่ะ ไม่ใช่กล่องเนาะ

00:14:23.300 --> 00:14:25.900
แต่ว่ามันคืออะไร นะครับ เดี๋ยว

00:14:26.200 --> 00:14:28.500
ผมจะทำให้ดู

00:14:28.500 --> 00:14:30.900
ตัว variable นะครับ จริงๆ แล้วครับ

00:14:31.100 --> 00:14:33.300
ถ้าสรุปเลยนะ มันไม่ใช่กล่อง แต่มันคือ

00:14:33.400 --> 00:14:34.600
เส้นเชื่อมนะครับ มันจะเป็นแบบนี้ เดี๋ยวผม

00:14:34.600 --> 00:14:34.800
จะลองทำให้ดู

00:15:03.100 --> 00:15:05.000
โอเคครับ สมมุติว่า บรรทัดแรกครับ

00:15:05.200 --> 00:15:07.400
สมมุติว่าเราเขียนว่า declare ตัว pet

00:15:07.500 --> 00:15:10.000
นะครับขึ้นมา แล้วเราบอกว่า pet เนี่ยมันคือ

00:15:10.200 --> 00:15:13.000
ค่าของ cat สิ่งที่เกิดขึ้นนะครับ

00:15:13.200 --> 00:15:15.600
ใน JavaScript อ่ะ มันก็จะไปสร้าง

00:15:15.900 --> 00:15:17.200
ตัวแปรชื่อ pet ขึ้นมา แล้วก็จะ

00:15:17.300 --> 00:15:18.800
ไปสร้าง string ตัวหนึ่งที่ชื่อ

00:15:19.000 --> 00:15:20.900
ว่า cat ที่ไหนโลกไม่รู้

00:15:21.100 --> 00:15:23.000
นะครับ แล้วมันก็จะบอกว่าโอเค

00:15:23.700 --> 00:15:26.900
pet คุณชี้ไปที่ cat นะ มามันเป็น

00:15:26.900 --> 00:15:29.000
ลักษณะนี้ครับ มันไม่ใช่กล่องเนาะ

00:15:29.700 --> 00:15:31.400
แต่ว่าอย่างบรรทัดที่ 2 พอเรา

00:15:31.400 --> 00:15:32.200
บอกว่าโอเค เมื่อเอาล่ะ pet

00:15:32.200 --> 00:15:34.300
เปลี่ยนเป็น dog สิ่งที่เกิดขึ้นครับ

00:15:34.500 --> 00:15:36.000
มันก็จะไปสร้าง string dog

00:15:36.100 --> 00:15:37.800
ขึ้นมาที่ไหนสักหนึ่งสักแห่งในโลก

00:15:37.900 --> 00:15:39.300
และมันก็จะชี้ไปที่ตัว dog

00:15:39.600 --> 00:15:42.500
แบบนี้ครับ อันเนี้ยคือเรื่อง

00:15:43.600 --> 00:15:46.400
ของ variable ไม่ใช่กล่อง แต่ว่า

00:15:46.400 --> 00:15:49.000
เป็นเรื่องของตัวเป็นตัวชี้เนาะ

00:15:49.300 --> 00:15:51.800
เป็นลิงก์ เป็น pointer ครับ

00:15:51.900 --> 00:15:52.800
ประมาณนั้นครับ

00:15:53.900 --> 00:15:57.700
สุดท้ายล่ะ Reading variable of

00:15:57.700 --> 00:16:03.200
value นะครับ จริงๆ แล้วครับ

00:16:03.600 --> 00:16:06.100
อันนี้จะชวนคุยเนาะว่าเวลาเรา

00:16:06.600 --> 00:16:08.200
โยนค่าอะไรเข้าไปในฟังก์ชัน

00:16:08.300 --> 00:16:10.700
เนี่ย สมมุติว่าค่า double เนี่ย อาจจะมี

00:16:10.700 --> 00:16:12.800
หลายๆ คนนะครับเข้าใจว่าสิ่งที่

00:16:12.900 --> 00:16:14.700
เราโยนเข้าไปใน double เนี่ย ใน

00:16:14.900 --> 00:16:16.500
กรณีนี้คือ money เนาะ คือเรา

00:16:17.200 --> 00:16:20.700
โยนตัวแปร money เข้าไป แต่จริงๆ

00:16:20.900 --> 00:16:22.600
แล้วเราไม่ได้โยนตัวแปร money

00:16:22.700 --> 00:16:25.000
สิ่งที่เกิดขึ้นก็คือตอนที่มัน

00:16:25.100 --> 00:16:26.800
evaluate นะครับ ตอนที่มัน

00:16:27.100 --> 00:16:28.500
execute อ่ะ มันจะไปดูว่า ณ

00:16:28.500 --> 00:16:30.100
ปัจจุบันเนี้ย money อ่ะมีค่าเท่าไหร่

00:16:30.500 --> 00:16:32.400
แล้วมันจะเอาตัวค่าของ money

00:16:32.500 --> 00:16:34.800
ใส่เข้าไป ดังนั้นในตัวเนี้ย ใน

00:16:34.900 --> 00:16:36.700
ตัว double เนี่ย ก็จะเป็น double

00:16:37.000 --> 00:16:40.100
10 ไม่ใช่ double money ครับ เพราะว่า

00:16:40.100 --> 00:16:42.200
ไม่งั้นเนี่ย ถ้าเราส่ง money เข้าไปเนี่ย

00:16:42.500 --> 00:16:44.300
มันก็จะไป มันก็จะ

00:16:44.400 --> 00:16:46.200
มี side effect กับตัว money เนาะ

00:16:46.500 --> 00:16:48.500
แบบถ้าเรารันฟังก์ชันปุ๊บเนี่ย

00:16:48.600 --> 00:16:50.000
money เนี่ยก็จะกลายเป็น 20 นาที

00:16:50.000 --> 00:16:51.300
อะไรอย่างเงี้ยครับ ตัวแปร money เนาะ

00:16:52.000 --> 00:16:54.700
จริงๆ ก็คือมีตัวอย่างให้ดู

00:16:54.900 --> 00:16:55.600
แต่ว่ามันจะไม่ทันอ่ะ

00:16:57.700 --> 00:16:59.800
สุดท้ายล่ะ สุดท้าย

00:17:01.000 --> 00:17:02.600
เนี่ย ขอยาวหน่อย อันนี้จะยาว มันจะ

00:17:02.600 --> 00:17:04.500
เป็นรวมเรื่องรวมของ

00:17:04.500 --> 00:17:07.200
ทั้งหมดเลยนะครับ ก็คือเรื่อง

00:17:07.200 --> 00:17:09.300
non-primitive เนี่ย ก็คือเท่ากับ

00:17:09.300 --> 00:17:11.300
mutable นะครับ หรือเราเรียกอีก

00:17:11.500 --> 00:17:13.200
อย่างหนึ่งว่าเป็น reference type

00:17:13.200 --> 00:17:15.700
หรือว่า object นั่นเองนะครับ object

00:17:16.100 --> 00:17:18.900
มีอะไรบ้างก็คือมี object มี

00:17:19.100 --> 00:17:21.700
array มี date มี regular

00:17:21.700 --> 00:17:24.000
expression มี math object มี

00:17:24.300 --> 00:17:26.000
function แล้วก็อื่นๆ อีกมากมายที่

00:17:26.000 --> 00:17:28.300
ไม่ได้พูดถึงในนี้เนาะ อ่ะ

00:17:30.000 --> 00:17:33.100
สมมุติว่าเราสร้าง object

00:17:33.100 --> 00:17:36.300
sherlock ขึ้นมานะครับ เดี๋ยวผมจะ

00:17:36.500 --> 00:17:38.100
วาดรูปให้ดู สิ่งที่เกิดขึ้นนะ

00:17:44.900 --> 00:17:52.200
สิ่งที่เกิดขึ้นนะครับ มันก็จะสร้างตัวแปรที่ชื่อว่า

00:17:52.200 --> 00:17:53.500
เชอร์ล็อกขึ้นมาเนาะ

00:17:55.700 --> 00:18:01.200
ทีนี้มันก็จะสร้างสิ่งที่เรียกว่า object reference ขึ้นมาครับ

00:18:02.600 --> 00:18:02.900
แบบนี้

00:18:06.000 --> 00:18:08.800
ถามว่าทำไมถึงชื่อ object reference นะครับ เพราะว่า

00:18:09.200 --> 00:18:12.800
ค่าของหรือเราเรียกว่า property เนี่ย ที่เป็น

00:18:12.800 --> 00:18:14.200
surname หรือว่า age เนี่ย

00:18:14.600 --> 00:18:18.500
มันไม่ได้เก็บไว้ใน object physically นะครับ แต่ว่า

00:18:18.600 --> 00:18:21.000
โค้ดเรามันทำให้ดูเหมือนมันเก็บใน object เนาะ

00:18:21.200 --> 00:18:22.800
แต่จริงๆแล้วมันก็เหมือนกับ

00:18:22.800 --> 00:18:25.800
การเราประกาศตัวแปรแหละ มันก็คือเก็บที่อื่น

00:18:25.800 --> 00:18:27.900
แต่ว่าตัว object เนี่ย

00:18:28.300 --> 00:18:30.700
ทำหน้าที่ reference ไปว่ามันจะไปที่ไหน

00:18:31.300 --> 00:18:35.300
เนี่ย มันก็เลยเป็นที่มาของชื่อว่า reference type นะครับ

00:18:36.400 --> 00:18:41.000
สมมุติว่ามี Holmes งี้เนาะ

00:18:41.400 --> 00:18:45.500
แล้วก็มี age ที่ชื่อว่า 64 ครับ

00:18:46.100 --> 00:18:49.600
ทีนี้สิ่งที่เกิดขึ้น object เนี่ย มันก็จะสร้าง

00:18:49.600 --> 00:18:51.900
ลิงก์ไปที่ string ที่ชื่อว่า Holmes

00:18:52.200 --> 00:18:54.000
สิ่งนี้มันเรียกว่า property เนาะ

00:18:54.300 --> 00:18:55.800
property ก็ชื่อว่า surname

00:18:57.700 --> 00:19:04.600
แล้วก็ตัวนี้ก็จะชื่อว่า age แบบนี้

00:19:05.000 --> 00:19:09.100
แล้วเชอร์ล็อกก็จะชี้ไปที่

00:19:09.500 --> 00:19:11.500
ตัว object ตัวนี้ครับ

00:19:11.500 --> 00:19:14.100
อันนี้ก็คือสิ่งที่เกิดขึ้นจริงๆ

00:19:15.000 --> 00:19:18.900
ดังนั้นผมอยากให้ทุกคนเนี่ย เปลี่ยน ถ้าใครแบบ

00:19:18.900 --> 00:19:22.400
มองภาพว่า object เนี่ย hold แบบเก็บค่าทั้งหมดเนี่ย

00:19:22.400 --> 00:19:24.900
ก็อาจจะต้องเปลี่ยน mental model นิดนึงนะครับ

00:19:25.200 --> 00:19:28.900
เพราะว่ามันจะส่งผลต่อวิธีการคิดของเราเนาะ

00:19:28.900 --> 00:19:31.200
เสร็จแล้วปุ๊บเนี่ย สมมุติว่าถ้าเราเรียก

00:19:31.200 --> 00:19:34.000
console.log อย่างงี้ sherlock.age
สิ่งที่มันเกิดขึ้น console.log ก็จะไปดูว่า

00:19:34.000 --> 00:19:37.000
โอเค ตัวแปร sherlock มันชี้ไปที่ไหน

00:19:37.000 --> 00:19:39.000
โอเค ตัวแปร sherlock ตอนนี้
ชี้ไปที่ object

00:19:39.000 --> 00:19:42.200
แล้ว age เนี่ย age ใน object เนี่ยชี้ไว้ไหน

00:19:42.200 --> 00:19:43.000
ก็คือชี้ไปที่ 64

00:19:43.000 --> 00:19:45.600
งั้นมันก็คือ 64 เนาะ

00:19:45.600 --> 00:19:46.400
อันนี้ basic ไม่มีอะไรนะครับ

00:19:46.400 --> 00:19:50.600
แต่ว่าถ้าเราเปลี่ยนเป็น sherlock.age เท่ากับ 65 นะครับ 

00:19:50.600 --> 00:19:54.800
สิ่งที่เกิดขึ้นก็คือคล้ายๆกับ variable เลยครับ

00:19:54.800 --> 00:19:56.500
มันก็จะสร้างตัวแปร มันก็สร้าง number

00:19:56.500 --> 00:19:57.700
ที่เป็น 65 ขึ้นมา

00:19:59.200 --> 00:20:03.800
แล้วแก้ตัว age เนี่ย เปลี่ยนจาก 64 เป็น 65 แบบนี้

00:20:03.800 --> 00:20:06.500
อันนี้ก็จะหายไปหรือจะอยู่ เราไม่สนใจ

00:20:06.500 --> 00:20:10.600
เพราะว่ามันเป็นหน้าที่ของ garbage collector นะครับ

00:20:11.600 --> 00:20:14.800
อันเนี้ยก็เป็น basic เนาะคร่าวๆ

00:20:16.100 --> 00:20:21.100
อันต่อไปนะครับ คือสมมุติว่าผมอยากสร้าง object

00:20:21.400 --> 00:20:26.500
ที่ชื่อว่า john เหมือนกัน แต่ว่าใช้ sherlock.address

00:20:26.800 --> 00:20:27.800
ประมาณนี้

00:20:29.600 --> 00:20:34.400
เดี๋ยวผมขออนุญาตลบย้ายอันนี้ก่อนเนาะ

00:20:34.400 --> 00:20:35.500
sherlock เหมือนเดิมเลย

00:20:35.500 --> 00:20:37.800
sherlock ไม่เหมือนเดิมนี่หว่า มี city ด้วย

00:20:37.800 --> 00:20:38.600
sherlock surname Holmes

00:20:38.600 --> 00:20:40.300
แต่ว่าไม่มี age แล้ว เปลี่ยนเป็น city

00:20:43.300 --> 00:20:47.200
อันต่อไปนะครับ สิ่งที่ mental model อีกอันนึง

00:20:47.200 --> 00:20:48.200
ที่เราอาจจะต้องจำไว้นะครับ

00:20:48.200 --> 00:20:50.700
object ไม่ซ้อน object เนาะ

00:20:50.700 --> 00:20:51.700
object ก็คือจะแยกกันต่างหาก

00:20:52.000 --> 00:20:54.200
แต่ว่า visual ของการเขียน code อ่ะ

00:20:54.200 --> 00:20:57.300
มันทำให้เรารู้สึกว่า object มันอยู่ใน object นะครับ

00:20:58.000 --> 00:21:02.100
เพราะว่าเดี๋ยวมันจะส่งผล เดี๋ยวมันจะมีอีกอันนึง

00:21:02.100 --> 00:21:03.500
ที่จะให้ดูนะครับ

00:21:05.600 --> 00:21:10.100
ทีเนี้ยอย่าง sherlock เนี่ย มันก็จะมี object ตัวนึงเนาะ

00:21:10.100 --> 00:21:16.500
sherlock มี object ตัวนึงที่มี London อยู่ข้างใน … London

00:21:18.600 --> 00:21:22.000
แล้วมันก็จะชี้ไปที่ London อย่างงี้

00:21:22.000 --> 00:21:23.700
ซึ่งมี property ที่ชื่อว่า city

00:21:25.700 --> 00:21:30.400
แล้ว object sherlock เนี่ย ก็จะชี้ไปที่ object นี่อีกที

00:21:30.400 --> 00:21:36.000
โดยใช้ property ที่ชื่อว่า address แบบนี้ครับ

00:21:37.900 --> 00:21:38.500
9 นาที โอเค

00:21:39.000 --> 00:21:41.500
ทีนี้สมมุติว่าผมอยากสร้าง John ขึ้นมานะครับ

00:21:41.900 --> 00:21:43.400
John surname Watson

00:21:43.400 --> 00:21:46.100
แต่ว่าใช้ address กับ sherlock

00:21:47.500 --> 00:21:51.500
สิ่งที่เกิดขึ้นนะครับ มันก็จะมี John ขึ้นมาเนาะ

00:21:51.500 --> 00:21:56.400
อันนี้ทุกคนน่าจะพอเริ่มตามทันละ John Watson

00:22:01.800 --> 00:22:02.400
วัตสัน

00:22:02.800 --> 00:22:04.400
แล้วก็มี object ขึ้นมาตัวหนึ่ง

00:22:07.300 --> 00:22:08.800
john ชี้ไปที่ object ตัวนี้

00:22:09.700 --> 00:22:12.400
ใช่มั้ย john เท่ากับก็คือชี้ไปที่เนาะ

00:22:13.500 --> 00:22:14.800
ชี้ไปที่ object แล้วก็

00:22:15.800 --> 00:22:18.000
surname นี่ก็เป็น Watson - surname

00:22:18.900 --> 00:22:20.400
เป็น property ที่ชื่อว่า surname

00:22:21.000 --> 00:22:21.400
ทีนี้

00:22:23.000 --> 00:22:24.100
มันจะใช้

00:22:25.400 --> 00:22:26.800
sherlock.address เนี่ย

00:22:27.500 --> 00:22:28.900
มันก็จะเข้าไปอีล็อกที่

00:22:29.400 --> 00:22:32.500
ตอนแรกที่เราถาม

00:22:32.600 --> 00:22:35.200
ว่าทำไมมันถึงแก้ตัวข้างบนด้วยอ่ะครับ

00:22:35.600 --> 00:22:37.000
เวลาเรา reference นะครับ

00:22:37.000 --> 00:22:38.800
ตามที่ชื่อมันบอกเนาะ reference ตัว

00:22:38.800 --> 00:22:40.100
object อ่ะ สิ่งที่มันเกิดขึ้นนะครับ

00:22:40.100 --> 00:22:41.200
มันไม่ได้ก๊อปมาเนาะ

00:22:41.300 --> 00:22:42.400
มันจะเป็น reference

00:22:43.000 --> 00:22:44.300
ตามที่เราต้องการครับ

00:22:44.800 --> 00:22:46.000
อย่างตัว address ตัวนี้

00:22:46.200 --> 00:22:47.700
มันจะเป็น reference ที่ชื่อว่า sherlock.address

00:22:47.700 --> 00:22:48.900
ซึ่งมันก็คือ object ตัวนี้

00:22:49.100 --> 00:22:50.000
สิ่งที่เกิดขึ้นคือเป็นอย่างนี้ครับ

00:22:50.500 --> 00:22:51.500
ชี้มาที่เดียวกัน

00:22:53.600 --> 00:22:54.500
ตัวนี้ก็เป็น address

00:22:55.800 --> 00:22:57.000
ประมาณนี้

00:22:57.000 --> 00:22:58.800
มันก็เป็นสาเหตุว่าทำไมโค้ด

00:22:59.200 --> 00:23:00.400
ไอ้อันแรกเมื่อกี้ครับ

00:23:00.400 --> 00:23:01.500
ที่ว่า copy of อ่ะครับ

00:23:01.500 --> 00:23:03.000
ทำไมเราแก้ใน object ตัวนี้

00:23:03.000 --> 00:23:04.800
แล้วมันไปแก้ตัว original ด้วยอะไรอย่างเงี้ยครับ

00:23:05.300 --> 00:23:07.800
อันนี้เป็นที่มาของมันเนาะ

00:23:09.300 --> 00:23:11.100
ทีนี้ สมมุติว่าถ้าเรา

00:23:11.500 --> 00:23:13.500
ไปแก้ john city อะไรเงี้ยครับ

00:23:14.100 --> 00:23:15.000
เนี่ย บรรทัดที่ 12 เนี่ย

00:23:16.300 --> 00:23:17.500
อันนี้ช่างหัวมันบรรทัด 11 เนี่ย

00:23:17.500 --> 00:23:19.000
บรรทัด 12 เลย เราอยากแก้

00:23:19.000 --> 00:23:21.800
john.address.city เป็น Malibu

00:23:22.200 --> 00:23:23.300
สิ่งที่เกิดขึ้นนะครับ

00:23:24.100 --> 00:23:25.500
เราก็จะไปดูว่าโอเค john

00:23:25.800 --> 00:23:27.300
object john เนี่ย ชี้

00:23:27.500 --> 00:23:29.100
ชี้ไปที่ address ใช่มั้ย

00:23:29.200 --> 00:23:31.000
address คือตรงนี้ แล้วเปลี่ยน city ตรงนี้

00:23:31.600 --> 00:23:32.800
ถ้าเราเปลี่ยน city ตรงนี้

00:23:32.800 --> 00:23:35.100
เป็น Malibu

00:23:35.500 --> 00:23:36.900
สิ่งที่เกิดขึ้นก็คือ

00:23:38.000 --> 00:23:39.500
sherlock ก็เปลี่ยนด้วยครับ

00:23:39.800 --> 00:23:42.200
อันนี้ก็เป็นที่มาของ

00:23:42.200 --> 00:23:43.700
คำว่า reference type

00:23:44.000 --> 00:23:46.600
อยากให้ทุกคนเข้าใจตรงกันนะครับจะได้

00:23:47.000 --> 00:23:48.100
ไปสอนลูกสอนหลาน

00:23:49.500 --> 00:23:51.300
ครับ

00:23:53.300 --> 00:23:55.600
อันนี้ก็เป็นที่ผม

00:23:56.000 --> 00:23:58.700
บอกว่า ตอบคำถามแก่เพราะว่าทำไมมันถึงแก้น่ะ

00:23:58.700 --> 00:23:59.300
เพราะว่าเราเนี่ย

00:24:00.500 --> 00:24:02.200
ไป reference กับตัว original น่ะ

00:24:02.200 --> 00:24:03.300
เราไม่ได้ก๊อปปีมาเนาะ

00:24:03.600 --> 00:24:05.700
แต่ว่าพอเรามาเปลี่ยนปุ๊บตรงนี้

00:24:05.700 --> 00:24:06.900
ตัว original ก็จะเปลี่ยนด้วย

00:24:06.900 --> 00:24:08.200
แต่ถามว่าเมื่อกี้

00:24:08.200 --> 00:24:17.900
ถ้าอยากเปลี่ยนแค่ address ของจอห์น
โดยที่ไม่กระทบของเชอร์ล็อก มันทำได้มั้ย

00:24:18.500 --> 00:24:21.200
มันก็พอทำได้เนาะ มันก็น่าจะมีเทคนิคอยู่อะไรเงี้ยครับ

00:24:25.200 --> 00:24:27.100
จริงๆแล้วครับ

00:24:27.500 --> 00:24:30.300
ปกติเราเขียน john.address.city เงี้ยเนาะ

00:24:35.300 --> 00:24:37.100
เราถ้าเราอยากเปลี่ยนน่ะ ปกติเราทำไง

00:24:37.300 --> 00:24:37.800
เราก็อย่างงี้

00:24:37.800 --> 00:24:43.600
john.address.city = { city: 'Malibu' }

00:24:43.600 --> 00:24:45.000
ใช่มั้ย

00:24:49.500 --> 00:24:50.200
ใช่ๆ

00:24:50.200 --> 00:24:55.000
เอ่อ ไม่ใช่ ไม่ต้องอย่างงี้อ่ะ

00:24:56.300 --> 00:24:57.000
โอเค

00:24:57.000 --> 00:24:59.100
ก็คือสร้าง object city ขึ้นมา

00:24:59.100 --> 00:25:00.100
ให้มันใหม่เลย

00:25:00.100 --> 00:25:01.100
อะไรอย่างเงี้ยครับ สิ่งที่มันเกิดขึ้น

00:25:01.100 --> 00:25:03.200
มันก็จะสร้างมาตัวใหม่

00:25:03.300 --> 00:25:03.800
แบบนี้

00:25:04.600 --> 00:25:07.300
แล้วก็เปลี่ยนจากชี้ตรงเนี้ย มาข้างล่างนี้เนี่ย

00:25:07.700 --> 00:25:09.200
ซึ่งตัวนี้ก็ยังเหมือนเดิมนะ

00:25:10.500 --> 00:25:12.600
อะไรวะ เมื่อกี้แล้ว

00:25:12.600 --> 00:25:14.700
อะไรไม่รู้อ่ะ เออ ประมาณนี้ครับ

00:25:17.300 --> 00:25:18.400
เหลือ 5 นาทีอ่ะ

00:25:20.100 --> 00:25:21.000
โอเค

00:25:22.600 --> 00:25:23.800
สุดท้ายแล้วอ่ะครับ

00:25:27.200 --> 00:25:28.100
มันจะมี meme ตัวนึง

00:25:28.100 --> 00:25:30.800
ที่เราชอบเห็น ที่เค้าชอบล้อ JavaScript อ่ะครับ

00:25:32.100 --> 00:25:32.700
ไอ้เนี้ย เดี๋ยวนะ

00:25:32.700 --> 00:25:34.700
แป๊บนึง

00:25:34.700 --> 00:25:39.500
1 == 1 = true

00:25:41.200 --> 00:25:41.400
เดี๋ยวนะ

00:25:42.600 --> 00:25:43.700
1 == 1

00:25:44.400 --> 00:25:45.000
เอ้ย console.log

00:25:45.700 --> 00:25:45.900
เดี๋ยวนะ

00:25:45.900 --> 00:25:45.900
console.log(1 == 1)

00:25:51.000 --> 00:25:53.300
1 เท่ากับ 1 มันก็คือ true ใช่มั้ย

00:25:54.500 --> 00:25:56.600
ถ้าอันนี้คือ number เท่ากับ number

00:25:56.600 --> 00:25:57.700
ถ้าตรงกันเค้าก็ true

00:25:58.200 --> 00:25:58.700
ถ้าเป็น string

00:26:01.100 --> 00:26:01.500
one

00:26:02.400 --> 00:26:02.800
กับ

00:26:02.800 --> 00:26:03.200
one

00:26:04.800 --> 00:26:05.600
true เหมือนกัน

00:26:05.900 --> 00:26:06.700
แต่ว่า

00:26:07.500 --> 00:26:08.600
มันเป็นเพราะอะไรวะ

00:26:09.300 --> 00:26:10.000
ทำไม

00:26:12.200 --> 00:26:13.500
พอเราทำอย่างเงี้ย

00:26:15.700 --> 00:26:17.000
มันหน้าตาเหมือนกันน่ะ

00:26:17.200 --> 00:26:19.300
แต่มันไม่ true ได้ไงวะ

00:26:21.200 --> 00:26:21.800
ใช่ไหม

00:26:24.600 --> 00:26:27.400
เหตุผลก็เพราะว่าที่เราดูไปเมื่อกี้

00:26:27.400 --> 00:26:29.500
เพราะว่า object 2 ตัวเนี่ย

00:26:29.500 --> 00:26:30.400
มันคนละตัวกัน

00:26:32.000 --> 00:26:32.700
แค่นั้นเอง

00:26:33.000 --> 00:26:34.000
อย่างที่บอกว่า

00:26:35.600 --> 00:26:39.000
ตัวที่เป็น

00:26:43.300 --> 00:26:46.300
พวกที่เป็น primitive อ่ะครับ

00:26:46.600 --> 00:26:49.000
ใน JavaScript ในจักรวาลของ JavaScript อ่ะ

00:26:49.900 --> 00:26:51.700
เวลาชี้อ่ะครับ มันจะชี้ไปที่ตำแหน่ง

00:26:51.700 --> 00:26:54.000
เดียวกัน มันก็คือมี 2 คือ ถ้ามันมี 2 อ่ะ

00:26:54.000 --> 00:26:55.200
มันก็เป็น 2 ตัวเดียวกัน

00:26:55.200 --> 00:26:57.900
ในทุกๆ ที่ของโค้ดเรา ดังนั้นเวลาเรา

00:26:58.100 --> 00:27:00.200
ไป reference มัน เอา

00:27:01.000 --> 00:27:04.000
in the background นะ เวลาเราเขียนว่า y เท่ากับ 2

00:27:04.500 --> 00:27:06.000
มันจะชี้ไปที่เดียวกันทั้งหมด

00:27:06.300 --> 00:27:09.800
แต่ว่า ถ้าเป็นไม่ใช่พวก primitive น่ะครับ

00:27:09.800 --> 00:27:12.200
มันจะสร้างขึ้นมาใหม่ทุกครั้ง

00:27:12.200 --> 00:27:12.900
ที่เราเรียกใช้มัน

00:27:12.900 --> 00:27:15.300
ดังนั้นเป็นสาเหตุว่าทำไมเวลาเรา

00:27:15.300 --> 00:27:15.600
เท่ากับมันน่ะ

00:27:15.600 --> 00:27:18.000
มันไม่เท่ากับ มันก็คือจะไม่ true

00:27:18.000 --> 00:27:19.300
เพราะว่ามันเป็นคนละตัวกัน

00:27:19.600 --> 00:27:20.600
แค่นั้นเองครับ

00:27:21.000 --> 00:27:21.600
โอเค

00:27:22.000 --> 00:27:23.100
น่าจะประมาณนี้

00:27:23.800 --> 00:27:24.800
สุดท้ายแล้ว

00:27:24.800 --> 00:27:25.600
หวังว่า

00:27:27.100 --> 00:27:28.900
หวังอย่างน้อยนะทุกคนน่าจะ

00:27:28.900 --> 00:27:30.900
วันนี้กลับบ้านไปน่าจะเข้าใจว่าทำไม

00:27:31.000 --> 00:27:32.500
อีตัวนี้ ที่ผมพูด อันสุดท้ายเนี่ย

00:27:32.500 --> 00:27:34.300
ทำไมมันเท่ากับกันแล้วไม่เป็น true เนาะ

00:27:34.900 --> 00:27:37.100
อ่ะ ทีนี้เหลือ 3 นาที ผมอยากฝากครับ

00:27:37.800 --> 00:27:39.000
ใครเขียน React บ้างครับ

00:27:40.200 --> 00:27:41.100
รู้จักคนนี้ไหมครับ

00:27:43.900 --> 00:27:45.700
ถ้าใครไม่รู้จักต้องรู้จักนะครับ เพราะว่าเค้า

00:27:45.700 --> 00:27:47.700
เป็น core team ของ React เนาะ

00:27:47.700 --> 00:27:49.400
talk ทั้งหมดที่ผมมาวันนี้ครับ

00:27:49.600 --> 00:27:51.100
มันเกิดจากการที่ผมไปอ่าน

00:27:51.100 --> 00:27:51.800
หนังสือเค้า

00:27:52.300 --> 00:27:55.600
ต่อไปนี้ เป็นหนังสือที่ผมอ่ะ
อยากจะแนะนำให้ไปอ่านครับ

00:27:55.800 --> 00:27:57.300
มันเป็น ebook เนาะ มันเป็น website

00:27:57.400 --> 00:27:58.600
website ตัวนี้ชื่อว่า

00:27:58.800 --> 00:28:00.700
JustJavaScript.com ทุกคน

00:28:00.800 --> 00:28:01.800
ตามไปตำเลยครับ

00:28:02.200 --> 00:28:02.700
ดีโคตรๆ

00:28:02.900 --> 00:28:04.400
เอาไว้ซื้อให้ลูก ให้หลานนะครับ

00:28:04.600 --> 00:28:07.700
ใครที่เป็นหน้าใหม่เข้ามาในวงการ
กรุณาไปอ่าน

00:28:08.000 --> 00:28:10.000
อันนี้ recommend มากนะครับ

00:28:10.300 --> 00:28:12.000
ผมบอกเลยว่าอันนี้ยเปลี่ยนชีวิต

00:28:12.000 --> 00:28:13.000
ผม ทำให้ผมจาก

00:28:13.000 --> 00:28:13.800
การที่เป็นแบบ

00:28:13.800 --> 00:28:15.700
เป็น JavaScript ที่ไม่รู้เรื่องอ่ะ

00:28:15.700 --> 00:28:17.600
เปลี่ยนผมเป็นอีกคนนึงเลยอะไรเงี้ยครับ

00:28:18.000 --> 00:28:18.600
โอเค

00:28:19.500 --> 00:28:21.300
น่าจะประมาณนี้ครับ ขอบคุณครับ

00:28:36.800 --> 00:28:38.300
ไม่ให้ถามนะครับ เพราะว่าไม่รู้

00:28:41.100 --> 00:28:42.500
พูดเล่นครับ มีใครมีอะไรถามมั้ยครับ

00:28:43.200 --> 00:28:45.900
ถ้าตอบได้ก็จะตอบ ถ้าตอบไม่ได้ก็จะให้คนอื่นตอบแทน

00:28:47.900 --> 00:28:50.300
โอเคครับ มีคำถามอีกมั้ยครับ

00:28:53.400 --> 00:28:58.200
ครับผม ในฐานะที่เราเปลี่ยนจาก UX มาเป็น javascript เนี่ย

00:28:59.100 --> 00:29:02.800
มันมี barrier อะไรที่เรารู้สึกว่า

00:29:03.000 --> 00:29:06.500
ถ้าเรารู้แต่แรก เราน่าจะรู้ได้เลยกว่านี้มั้ยครับ

00:29:08.000 --> 00:29:11.900
ถ้าเรารู้แต่แรก ก็คือ ผมมา realize ว่า

00:29:11.900 --> 00:29:16.300
ไม่ว่าเราจะเรียนรู้อะไรอะ พื้นฐานเป็นอะไรที่สำคัญที่สุดในชีวิต

00:29:16.700 --> 00:29:18.200
ดังนั้นเวลาที่ผมจะเรียนอะไร

00:29:18.200 --> 00:29:20.000
ผมมักจะเรียนพื้นฐานของมันก่อนเสมอครับ

00:29:20.100 --> 00:29:23.800
ช่วยได้ดีมาก แล้วก็ไม่เป็น skill dev

00:29:24.300 --> 00:29:29.100
เรียกว่า technical dev ก็ไม่ใช่ - เป็น skill dev ในอนาคตอะไรอย่างเงี้ยครับ ว่าแบบ สิ่งที่เราทำไปคืออะไรไม่รู้อย่างเงี้ยครับ

00:29:29.300 --> 00:29:33.000
อย่างน้อยทุกโค้ดที่เราเขียนไป ทุกบรรทัดที่เรา execute

00:29:33.200 --> 00:29:35.500
เราเข้าใจว่ามันเกิดอะไรขึ้น under the hood อะไรอย่างเงี้ยครับ

00:29:35.800 --> 00:29:38.600
มันก็ช่วยให้เราเป็น dev ที่ดีขึ้นน่ะแหละ ประมาณนี้ครับ

00:29:42.200 --> 00:29:42.800
โอเคครับ
