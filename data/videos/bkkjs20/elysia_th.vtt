WEBVTT - automatically generated

0:00:0.400 --> 0:00:1.000
ปั๊บ

0:00:1.900 --> 0:00:5.500
เดี๋ยวขอเสียงปรบมือให้ออมนะครับผม

0:00:5.900 --> 0:00:10.700
กับหัวข้อ พูดชื่อเองแล้วกันนะครับ

0:00:11.500 --> 0:00:12.900
ได้ครับ ก็วันนี้ไม่มี

0:00:13.900 --> 0:00:14.800
ขอบคุณมากครับ

0:00:16.900 --> 0:00:17.400
เอ๊ย

0:00:17.400 --> 0:00:20.500
โอเค วันนี้ก็จะมาพูดเรื่องว่า

0:00:20.500 --> 0:00:24.400
ในการทำ framework อ่ะ มันมีสกิลต้องแบบ

0:00:24.400 --> 0:00:26.000
ต้องมีสกิลตอแหลนิดนึง ก็คือ

0:00:26.000 --> 0:00:27.300
Social Engineering นี่แหละ

0:00:28.700 --> 0:00:30.800
ก็คือ แนะนำตัวนิดนึงก็คือ

0:00:30.800 --> 0:00:33.900
ผมทำ framework ชื่อ Elysia คือตัวนี้

0:00:34.100 --> 0:00:35.300
ตอนนี้มี

0:00:36.700 --> 0:00:37.500
อุ้ย เขิน

0:00:38.200 --> 0:00:42.000
มีดาวอยู่ประมาณ 8.5 ดาวมั้ง ประมาณ

0:00:42.000 --> 0:00:44.400
8,500 นั่นแหละ ก็

0:00:45.800 --> 0:00:46.900
เจมส์จับเวลาด้วย

0:00:46.900 --> 0:00:48.700
8.5 นี่คือมี 8 คน แล้วอีกครึ่งคน

0:00:50.100 --> 0:00:50.500
ใช่ 8 คนแล้วอีกครึ่งคน

0:00:50.500 --> 0:00:51.100
ฮะ โอเค

0:00:51.800 --> 0:00:52.900
นั่นแหละ ก็

0:00:52.900 --> 0:00:55.000
จะมาเล่านิดนึงว่า จริงๆแล้วเนี่ย

0:00:55.000 --> 0:00:57.200
คือแบบ อันนี้มันเป็นเหมือน framework

0:00:57.200 --> 0:00:58.500
ในการทำแบบเว็บเซิร์ฟเวอร์เนาะ ก็

0:00:58.500 --> 0:01:0.700
API มันจะคล้ายๆ Express นี่แหละ

0:01:1.000 --> 0:01:3.100
ทีนี้เนี่ย มันจะมีฟีเจอร์บางอัน

0:01:3.100 --> 0:01:5.900
ที่มันแบบค่อนข้างดูเป็นเมจิกนิดนึง ก็คือ

0:01:5.900 --> 0:01:7.600
อันนึงเรียกว่า End-to-End Type Safety

0:01:7.600 --> 0:01:11.300
ก็คือ เราเขียนโค้ดบนเซิร์ฟเวอร์อ่ะ หน้าตาเป็นอย่างงี้

0:01:11.300 --> 0:01:14.000
ปึ๊บ อ่ะ เป็นปกติเลย แล้วเราก็ export type มา

0:01:14.500 --> 0:01:14.800
ทีนี้

0:01:14.800 --> 0:01:17.200
เราย้ายไปอีก repo นึง มาที่หน้าบ้านเนาะ

0:01:17.500 --> 0:01:18.900
แล้วทีนี้ เราก็จะสามารถ

0:01:19.100 --> 0:01:21.600
import แค่ type มา ปึ๊บ เราก็จะสามารถ

0:01:21.600 --> 0:01:23.500
interact กับตัวเซิร์ฟเวอร์ได้ โดยที่แบบ

0:01:23.500 --> 0:01:24.800
ปกติจะต้องเขียน fetch เนาะ

0:01:24.800 --> 0:01:26.000
แต่ปัญหาก็คือ

0:01:26.000 --> 0:01:27.400
พอเราเขียน fetch เงี้ย

0:01:27.400 --> 0:01:29.900
สมมุติ endpoint เรา เขียน type มาเรียบร้อยละ

0:01:29.900 --> 0:01:31.900
อ่ะ เราก็ต้องมาเขียนหน้าบ้าน หลังบ้านแยกกันเนาะ

0:01:31.900 --> 0:01:34.800
เขียน type ทีนี้ สมมุติหลังบ้านเนี่ย

0:01:34.800 --> 0:01:36.100
เค้าเกิดแบบเปลี่ยนใจว่า

0:01:36.400 --> 0:01:37.900
โปรเจคเมเนเจอร์ อยากให้แบบ

0:01:37.900 --> 0:01:39.900
เปลี่ยนฟิลด์ เพิ่มฟิลด์นู่น เพิ่มฟิลด์นี่

0:01:39.900 --> 0:01:41.400
หรืออาจจะเปลี่ยน structure อะไรเงี้ย

0:01:41.500 --> 0:01:43.800
มันก็จะมีปัญหาว่า หน้าบ้านกับหลังบ้าน

0:01:43.800 --> 0:01:44.600
มันไม่ซิงค์กันเนาะ

0:01:44.800 --> 0:01:46.800
ก็แต่ฟีเจอร์เนี่ย มันสามารถทำให้เรา

0:01:46.800 --> 0:01:48.500
สามารถซิงค์ type กันได้ ก็คือ

0:01:48.500 --> 0:01:50.700
ถ้าคุณเขียนหน้าบ้านอย่างงี้อ่ะ เดี๋ยวเรา

0:01:50.700 --> 0:01:52.100
จะเอาเข้า code editor ให้ดูเลย

0:01:52.100 --> 0:01:52.900
ว่ามันทำงานยังไงเนาะ

0:01:53.800 --> 0:01:55.100
ก็ก๊อปปี้นี่มา นะ

0:01:55.400 --> 0:01:56.000
ก็

0:01:56.400 --> 0:01:58.700
วิธีการเริ่มเขียนเนาะ ง่ายมาก ก็คือ

0:01:58.900 --> 0:02:0.200
ปึ๊บ เปิด

0:02:0.600 --> 0:02:3.600
ใหญ่สุดแล้วป่ะ ใหญ่สุดได้แค่นี้ โอเค ไม่เป็นไร

0:02:3.600 --> 0:02:5.000
ปึ๊บ เราก็ไป demo เนาะ

0:02:5.000 --> 0:02:7.900
ปึ๊บ เราก็รัน bun create

0:02:7.900 --> 0:02:9.600
Elysia แล้วก็ชื่อโฟลเดอร์ ปึ๊บ

0:02:9.600 --> 0:02:10.500
ก็จะได้เป็น

0:02:12.400 --> 0:02:13.600
ทำไมบันชาจัง

0:02:13.800 --> 0:02:14.700
โอ้ยมันไม่มีแคช

0:02:14.700 --> 0:02:16.700
ไม่ได้ลงมานานแล้วปุ๊บเราก็จะได้ฟีเจอร์

0:02:16.700 --> 0:02:18.300
Elysia มาปุ๊บรันเซิร์ฟเวอร์

0:02:18.800 --> 0:02:20.400
เปิด localhost

0:02:20.500 --> 0:02:21.800
ก็จะรันเซิร์ฟเวอร์ปุ๊บ

0:02:22.300 --> 0:02:23.100
ได้อย่างงี้

0:02:23.300 --> 0:02:25.200
ทีนี้เรารอลองดู

0:02:25.300 --> 0:02:26.300
โค้ดดูแล้วกันมา

0:02:26.500 --> 0:02:28.200
ปุ๊บเรียกโค้ด with code เนาะ

0:02:28.600 --> 0:02:30.400
อุ้ย ผิดอัน

0:02:30.800 --> 0:02:32.400
index.ts ปุ๊บ

0:02:32.700 --> 0:02:34.400
หน้าตาจะเป็นประมาณอย่างงี้เนาะ

0:02:34.600 --> 0:02:36.800
ก็เรียกมา มีเซิร์ฟเวอร์มีอะไรเรียบร้อย

0:02:37.100 --> 0:02:38.200
รันปุ๊บมันก็จะได้เซิร์ฟเวอร์มา

0:02:38.800 --> 0:02:39.800
โค้ดสว่าง

0:02:42.000 --> 0:02:44.200
คือถ้าเราใช้จอมืดบนหน้าเนี่ย

0:02:44.200 --> 0:02:45.200
มันจะมองไม่เห็น

0:02:45.200 --> 0:02:46.500
ผมเคยทำมาหลายรอบแล้ว

0:02:46.500 --> 0:02:47.800
ก็เลยใช้เป็นธีมขาว

0:02:47.800 --> 0:02:48.500
อันนี้โม้นะแหละ

0:02:48.500 --> 0:02:50.400
เพราะว่าจริงๆ แล้วผมติดตาเฉยๆ

0:02:50.400 --> 0:02:51.400
สมมุติเราอยากเพิ่ม endpoint

0:02:51.700 --> 0:02:53.400
endpoint อันนึงเราก็เขียนอย่างงี้เนาะ

0:02:53.400 --> 0:02:53.900
แล้วก็

0:02:54.200 --> 0:02:55.900
ปุ๊บ return something มาประมาณ

0:02:55.900 --> 0:02:56.600
เป็นอย่างงี้

0:02:56.600 --> 0:02:58.100
อยากส่งค่าอะไรกลับไปก็จะได้

0:02:58.100 --> 0:02:58.900
endpoint อย่างงี้มา

0:02:59.300 --> 0:03:0.000
ทีนี้สมมุติ

0:03:0.400 --> 0:03:1.700
ผมเกิดอยากได้ body มา

0:03:1.700 --> 0:03:2.900
ก็คืออยากให้แบบ

0:03:3.300 --> 0:03:4.600
API มันรับ endpoint มา

0:03:4.600 --> 0:03:6.500
ผมก็จะเขียน body แล้วกำหนด type มา

0:03:6.500 --> 0:03:8.000
ปุ๊บ สมมุติเอาเป็น object

0:03:8.400 --> 0:03:9.100
แล้วก็

0:03:9.200 --> 0:03:10.100
ส่ง name มา

0:03:10.100 --> 0:03:11.200
อะไรประมาณอย่างงี้

0:03:11.200 --> 0:03:11.700
ปุ๊บ

0:03:11.700 --> 0:03:13.200
เราก็จะได้ endpoint มาอันนึงเนาะ

0:03:13.200 --> 0:03:13.900
แต่อันนี้

0:03:13.900 --> 0:03:15.200
เรายังไม่มีหน้าตาเนาะ

0:03:15.200 --> 0:03:16.700
เพราะฉะนั้นเดี๋ยวผมโหลด Swagger มา

0:03:16.700 --> 0:03:17.200
นิดนึง

0:03:17.600 --> 0:03:18.100
ก็คือโหลด

0:03:18.900 --> 0:03:22.000
Elysia/tsoa/swagger ปุ๊บ

0:03:22.000 --> 0:03:24.100
แล้วเราก็ยัด Swagger ใส่

0:03:24.700 --> 0:03:26.400
useSwagger ปุ๊บ

0:03:27.500 --> 0:03:28.600
โอเค มา

0:03:28.900 --> 0:03:30.100
ก็จะได้อย่างงี้

0:03:30.100 --> 0:03:31.300
รันปุ๊บแล้วก็ไปที่

0:03:31.600 --> 0:03:32.500
หน้าบ้านเนาะ

0:03:33.400 --> 0:03:35.800
ปุ๊บ เรา /swagger ปุ๊บ

0:03:36.000 --> 0:03:37.700
ก็จะได้หน้า Swagger มาอย่างงี้

0:03:38.300 --> 0:03:39.700
ทีนี้เนี่ย

0:03:40.100 --> 0:03:41.900
มันจะมีเมจิกนิดนึงก็คือ

0:03:42.400 --> 0:03:43.800
คือมันไม่ใช่ Swagger ด้วยซ้ำ

0:03:44.600 --> 0:03:47.000
เฮ้ย มันปรับเป็น Swagger ได้ด้วยนะ

0:03:47.900 --> 0:03:48.500
เนี่ย เรา

0:03:48.500 --> 0:03:49.100
เราปรับเป็น

0:03:49.700 --> 0:03:50.600
มันชื่ออะไรวะ

0:03:50.800 --> 0:03:52.300
มันชื่ออะไรวะ ลืมละ

0:03:52.400 --> 0:03:54.400
provider ใช่

0:03:54.400 --> 0:03:55.500
แล้วก็ swaggerUI ปุ๊บ

0:03:55.800 --> 0:03:57.300
เซฟ แล้วก็รีโหลด

0:03:57.300 --> 0:03:58.300
มันก็จะได้มาเป็น

0:04:0.200 --> 0:04:1.300
Swagger

0:04:1.300 --> 0:04:2.200
ได้ Swagger มา

0:04:5.700 --> 0:04:9.300
ทีนี้ endpoint เนี่ย สมมุติว่าเรามี endpoint นี้ใช่ไหม

0:04:9.400 --> 0:04:10.300
บอกเนี่ย endpoint เนี่ย

0:04:10.400 --> 0:04:12.800
มันรับ name มา แล้วก็จะส่งค่ากลับมาเนาะ

0:04:12.800 --> 0:04:14.500
สมมุติในอนาคตเนี่ย

0:04:15.100 --> 0:04:18.900
เราอยากเพิ่ม field 1 อัน แล้วก็เพิ่ม age มา

0:04:19.200 --> 0:04:20.800
ปึ๊บ มันก็จะมาโผล่ในนี้เนาะ

0:04:20.800 --> 0:04:22.600
แต่ทีนี้ปัญหาคือ สมมุติเราทำอย่างงี้

0:04:23.300 --> 0:04:24.700
frontend ที่เขียนหน้าบ้านเราเนี่ย

0:04:24.900 --> 0:04:26.600
ก็จะไม่รู้ว่า type ตรงนี้มันเปลี่ยน

0:04:26.700 --> 0:04:28.900
แล้วก็ต้องไป slack ไปบอก frontend ว่า

0:04:29.300 --> 0:04:32.300
มันมี field ตรงนี้เพิ่มมานะ แล้วคิดภาพสมมุติว่า

0:04:32.600 --> 0:04:35.600
เราทำการ migration ครั้งใหญ่เงี้ย field มันเปลี่ยนหมดเลย

0:04:35.700 --> 0:04:37.800
หรือแบบเพิ่ม endpoint แบบ v1 v2 อะไรเงี้ย

0:04:38.000 --> 0:04:39.100
มันก็จะมีปัญหาใช่ไหม

0:04:39.600 --> 0:04:43.100
ทีนี้ เราก็เลยแก้ปัญหาด้วยการเพิ่มตัว end-to-end type safety

0:04:43.100 --> 0:04:47.400
เมื่อกี้ก็คือเราลง plugin ชื่อ eden เนาะ

0:04:47.600 --> 0:04:49.100
แล้วก็โหลดเข้ามา รอแป๊บนึง

0:04:49.400 --> 0:04:52.900
ทีนี้ อันนี้มันเป็นปกติจะใช้ monorepo เนาะ

0:04:53.100 --> 0:04:54.500
แต่อันนี้ขอเป็นไฟล์เดียวเลย

0:04:54.600 --> 0:04:55.700
จะได้เห็นว่ามันทำอะไรได้เนาะ

0:04:55.900 --> 0:04:57.900
เพราะว่า setup monorepo มันนานนิดนึง

0:04:58.200 --> 0:05:1.600
แล้วก็ import มา eden entity ปึ๊บ

0:05:1.700 --> 0:05:2.200
import function นี้มา

0:05:2.300 --> 0:05:4.500
แล้วเราก็สร้าง type ขึ้นมา 1 อัน

0:05:4.900 --> 0:05:7.200
type App แล้วกัน type of App ปึ๊บ

0:05:7.400 --> 0:05:10.400
ทีนี้ ตัวหน้าบ้านเนี่ย คิดสภาพว่าอันนี้เป็นหน้าบ้านแล้วกัน

0:05:10.500 --> 0:05:12.900
ผมสร้างไฟล์ใหม่แล้วกัน จะได้เห็นเนาะ

0:05:13.400 --> 0:05:18.000
เอา b.ts ปึ๊บ สร้างหน้าบ้านมา

0:05:18.200 --> 0:05:21.900
โอเค ประมาณอย่างงี้ ผมก็ import ตัวเมื่อกี้มา

0:05:22.100 --> 0:05:24.700
eden ปึ๊บ entity ปึ๊บ

0:05:25.600 --> 0:05:31.500
แล้วก็ import type เมื่อกี้มาเนาะ index ปึ๊บ App ปึ๊บ ได้อย่างงี้

0:05:32.200 --> 0:05:35.000
ทีนี้ สมมุติไฟล์ซ้ายคือ server ไฟล์ขวาคือหน้าบ้านเนาะ

0:05:35.400 --> 0:05:40.300
ผมก็สามารถทำอย่างงี้ได้ ก็คือเรียก treaty อันนี้

0:05:40.600 --> 0:05:43.700
แล้วผมก็เขียนว่า endpoint เนี่ย อยากให้มันคุยไปที่ไหน

0:05:43.900 --> 0:05:47.600
ผมก็เขียนเป็น localhost 3000 เนาะ

0:05:47.900 --> 0:05:49.400
import declaration not far

0:05:49.500 --> 0:05:51.600
อ๋อ มัน name มันซ้ำกัน เอาเป็น api อะไรประมาณอย่างงี้

0:05:52.000 --> 0:05:54.400
ผมก็เรียก function นี้มา ผ่าน type เข้าไปในนี้

0:05:54.800 --> 0:05:55.800
แล้วก็เขียน endpoint

0:05:56.100 --> 0:05:58.100
ทีนี้ ตัว api ของเราก็จะสามารถคุยได้ว่า

0:05:58.300 --> 0:06:1.300
เหมือนจะมี auto complete ว่าเราอยาก get ที่ index ปึ๊บ

0:06:1.600 --> 0:06:4.400
แล้วก็มี method ขึ้นใช่ไหม ความเจ๋งก็คือ

0:06:4.600 --> 0:06:5.400
อันนี้มันก็จะบอกว่า

0:06:5.600 --> 0:06:7.200
ถ้าสมมุติผมตัด body ออกเนาะ ปึ๊บ

0:06:8.700 --> 0:06:10.600
ปึ๊บจะเห็นว่าตรงนี้ type มันไม่ error แล้ว

0:06:10.700 --> 0:06:12.800
เพราะว่าตรงนี้มันบอกไม่ต้องมี body อะไร

0:06:12.800 --> 0:06:13.500
แต่ถ้าเราใส่ body มา

0:06:13.600 --> 0:06:15.000
มันก็จะมี type ขึ้นอย่างนี้เนาะ

0:06:15.800 --> 0:06:17.000
อะไรประมาณอย่างนี้เราก็ใส่ให้ครบปึ๊บ

0:06:17.800 --> 0:06:18.800
age

0:06:19.700 --> 0:06:21.300
ใช่ มันก็จะ auto-complete ให้

0:06:21.300 --> 0:06:23.300
แล้วสมมติในอนาคตเรามี field เพิ่มขึ้นมาอีก

0:06:23.700 --> 0:06:24.400
ก็เอาเป็น

0:06:25.200 --> 0:06:25.900
อะไรดี

0:06:26.500 --> 0:06:29.800
boolean

0:06:30.300 --> 0:06:33.500
มันจะฟ้องว่า field เนี่ยมันขาดไปอันนึงนะ

0:06:33.600 --> 0:06:35.800
เพราะฉะนั้นเนี่ยมันก็เลยสามารถ sync type กันได้ใช่มั้ย

0:06:36.000 --> 0:06:38.100
ทีนี้เนี่ยอันนี้มันแอบ magic นิดนึง

0:06:38.300 --> 0:06:39.000
ก็คือตรงที่ว่า

0:06:39.300 --> 0:06:40.700
สิ่งที่มันทำจริงๆ แล้วเนี่ย

0:06:41.000 --> 0:06:42.600
มันไม่มีการ เห็นไหม มันไม่มีการ compile

0:06:42.700 --> 0:06:43.900
มันไม่มีอะไรเลย เราสามารถ run ได้เลย

0:06:44.000 --> 0:06:45.800
เดี๋ยวผม run ไฟล์นี้ให้ดูเลยว่าเกิดอะไรขึ้นเนาะ

0:06:46.800 --> 0:06:50.200
อันนี้ return body อันนี้กลับมาด้วย

0:06:50.400 --> 0:06:52.500
แล้วเราก็จะใส่ age มาอย่างนี้

0:06:53.200 --> 0:06:56.700
ปึ๊บ เอา await data error มา

0:06:57.200 --> 0:06:58.300
ทีนี้ถ้าเราลองดู

0:06:58.500 --> 0:06:59.700
มันจะเห็นว่า

0:07:0.100 --> 0:07:3.700
data ตรงนี้มันก็จะได้ data กับที่เรา return กลับมาเนาะ

0:07:4.200 --> 0:07:5.800
ทีนี้ไอ้ตรงนี้ไม่มี magic ก็คือ

0:07:6.100 --> 0:07:7.600
ตรงนี้มันไม่ได้มีการ compile

0:07:7.700 --> 0:07:8.600
ไม่ได้มีการทำอะไรๆ เลย

0:07:8.700 --> 0:07:11.000
มันแค่ import type มาแล้วเราก็ได้ทุกอย่างออกมา

0:07:11.200 --> 0:07:14.300
ปัญหาคือตอนเขียน JavaScript จริงๆ แล้วเนี่ย

0:07:15.100 --> 0:07:17.000
เวลาเรา compile TypeScript เนี่ย

0:07:17.200 --> 0:07:19.000
เวลาเรา compile TypeScript type

0:07:19.300 --> 0:07:20.400
มาเป็น JavaScript เนี่ย

0:07:20.800 --> 0:07:22.400
ตัว type เนี่ยมันจะหายไปก็คือ

0:07:22.800 --> 0:07:23.600
มันจะละลายหายไปเลย

0:07:23.800 --> 0:07:25.900
คือ JavaScript เนี่ยมันจะไม่เห็นว่ามันมี type อะไรอยู่เนาะ

0:07:26.800 --> 0:07:29.200
เพราะฉะนั้นเนี่ย

0:07:29.600 --> 0:07:30.700
สิ่งที่เกิดขึ้นจริงๆ ตรงนี้

0:07:31.600 --> 0:07:32.800
คือมันเป็นอะไรที่

0:07:32.900 --> 0:07:34.400
คุณลองคิดภาพ สมมติผมเปลี่ยนไฟล์นี้เป็น JavaScript เนี่ย

0:07:34.500 --> 0:07:37.200
มันก็ยังไม่มี auto-complete ไม่มีอะไร type check อะไรเลยใช่มั้ย

0:07:37.500 --> 0:07:39.000
แต่ว่ามันก็ยังทำงานได้อยู่นะ

0:07:39.800 --> 0:07:40.400
เพราะว่ามันใช้

0:07:40.900 --> 0:07:41.800
สิ่งที่เรียกว่า

0:07:42.300 --> 0:07:44.300
พูดง่ายๆ คือเราใช้

0:07:44.400 --> 0:07:47.100
type เนี่ยมาบอกว่า user ควรเขียนอะไร

0:07:47.300 --> 0:07:48.000
แต่จริงๆ แล้วเนี่ย

0:07:48.300 --> 0:07:49.100
ถ้าสมมติผมเขียนผิดเงี้ย

0:07:49.600 --> 0:07:50.700
มันก็ยัง run อยู่นะ

0:07:50.700 --> 0:07:51.900
เพียงแค่มัน run ไม่ถูก

0:07:52.200 --> 0:07:52.900
สมมติผม run ว่า

0:07:53.800 --> 0:07:54.300
ตรงนี้

0:07:54.600 --> 0:07:56.800
ผมเปลี่ยนอันนี้เป็น something else ละกัน

0:07:57.400 --> 0:07:57.900
เอาเป็น

0:07:58.000 --> 0:07:58.800
stage อะไรประมาณเงี้ย

0:07:59.100 --> 0:08:0.300
มันก็จะเห็นว่ามัน error ใช่มั้ย

0:08:0.500 --> 0:08:1.400
แต่จริงๆ แล้วเนี่ย

0:08:1.700 --> 0:08:3.300
ถึงแม้มันจะ error มันก็ยัง run ได้อยู่

0:08:3.700 --> 0:08:4.100
เพราะว่าจริงๆ แล้วเนี่ย

0:08:4.400 --> 0:08:6.900
ไอ้ตัวนี้ ตัว type ตัวนี้มันเป็นการเตือนว่า

0:08:7.300 --> 0:08:8.400
มันควรเขียนอย่างนี้นะ

0:08:8.600 --> 0:08:10.100
แต่จริงๆ แล้วคุณก็ยังเขียนได้อยู่

0:08:10.500 --> 0:08:12.400
ก็คือมันแบบว่า เรา

0:08:12.700 --> 0:08:13.300
แต่ว่า

0:08:13.300 --> 0:08:13.300
ปิ๊บ

0:08:14.100 --> 0:08:16.400
คือในความเป็นจริงแล้วเนี่ยคุณเห็น type error

0:08:16.400 --> 0:08:17.000
แล้วคุณก็คงไม่เขียนแล้วล่ะ

0:08:17.000 --> 0:08:18.700
ผมก็เลยจริงๆ แล้วเนี่ยอันนี้

0:08:18.800 --> 0:08:20.800
หลักการการทำงานของอันนี้มันง่ายมากเลย

0:08:20.900 --> 0:08:25.700
ก็คือคิดภาพว่า JavaScript เนาะเราก็จะใช้ API ตัวนึงที่ชื่อว่า proxy

0:08:25.800 --> 0:08:27.700
proxy เนี่ยเหมือนเป็นการบอกว่าเอ้ย

0:08:27.700 --> 0:08:32.000
ถ้าตัวนี้มันถูก access แล้วให้เราทำอะไรก็ได้เช่นผมบอกว่า get

0:08:32.400 --> 0:08:34.800
มันชื่อ get ป่ะผมจำไม่ได้เหมือนกัน

0:08:34.800 --> 0:08:35.900
เดี๋ยวนะ อ่า object อันนึงก่อน

0:08:35.900 --> 0:08:38.600
ทีนี้มันก็สามารถบอกว่าเอ้ยสมมุติ API ไอ้ตัวนี้

0:08:38.600 --> 0:08:41.200
ทำอะไรก็ตามที่อยู่ในนี้ get ก็คือ

0:08:41.500 --> 0:08:42.800
สมมุติผมเรียก get เนาะ

0:08:42.900 --> 0:08:45.900
get เนี่ยก็คือบอกว่าเอ้ยถ้าเราเรียก a.something

0:08:45.900 --> 0:08:47.800
อะไรประมาณนี้เป็น object ปกติ

0:08:48.100 --> 0:08:50.800
มันก็จะไป run ฟังก์ชันนี้แล้วให้เรา return อะไรกลับมาก็ได้

0:08:50.800 --> 0:08:52.000
เหมือนเป็นการดักว่าเอ้ย

0:08:52.300 --> 0:08:53.700
ถ้าฟังก์ชันนี้ถูกเรียกอ่ะ

0:08:53.800 --> 0:08:57.800
ก็ให้เราสามารถแบบเอ้ยอ่าน key อ่าน value

0:08:57.800 --> 0:08:59.300
ว่ามันพยายามจะทำอะไรอยู่

0:08:59.600 --> 0:09:3.000
สิ่งที่ผมทำจริงๆ เนี่ยด้วยความที่เราไม่รู้ว่า type มันคืออะไรเนาะ

0:09:3.000 --> 0:09:5.700
มันไม่สามารถอ่าน type ได้ผมก็เลยทำการบอกว่าเอ้ย

0:09:6.400 --> 0:09:10.500
หลักการของอันนี้ง่ายมากเลยคุณอยากได้ endpoint เท่าไหร่อ่ะ

0:09:10.500 --> 0:09:12.700
state a/b/c อย่างเงี้ย

0:09:12.700 --> 0:09:13.600
ผมก็บอกว่าเอ้ย

0:09:13.700 --> 0:09:17.800
ถ้าเรามี api.state.a.b.c

0:09:17.800 --> 0:09:21.300
อันนี้ก็คือสิ่งที่ TypeScript เห็นก็คือสิ่งที่เราเห็นเนาะ

0:09:21.300 --> 0:09:22.700
เป็น end user เห็นแล้วเราก็ยัด type ลงไป

0:09:22.700 --> 0:09:25.100
สิ่งที่ code เห็นจริงๆ เนี่ยคือการทำอย่างเงี้ย

0:09:25.300 --> 0:09:27.200
ทำอย่างเงี้ยซ้ำไปเรื่อยๆ แล้วก็เรียกเอ้ย

0:09:27.900 --> 0:09:31.000
ถ้า method ตรงนี้มันอาจจะเอาเป็นว่า

0:09:31.600 --> 0:09:34.400
HTTP เนี่ยมันจะมีวิธีการเรียก method บางอันอยู่

0:09:34.400 --> 0:09:37.900
เช่นแบบ get post put อะไรพวกนี้แล้วผมก็แบบแก๊สไลท์ว่าเอ้ย

0:09:38.400 --> 0:09:40.500
ผมก็หลอก user ว่าด้วยความที่ผมน่ะ

0:09:40.800 --> 0:09:42.600
เราอยากให้ user อ่ะรู้ว่า

0:09:43.100 --> 0:09:43.800
ด้วยความที่แบบ

0:09:43.800 --> 0:09:46.900
เออเราอยากให้มันตรงนี้มันใช้งานได้ผมก็เลยแก๊สไลท์ user ว่า

0:09:47.500 --> 0:09:49.300
เอ้ยถ้าไอ้ตรงนี้

0:09:49.300 --> 0:09:53.300
ตรงนี้เป็นการเรียก method แล้วเป็นการเรียกฟังก์ชัน

0:09:54.100 --> 0:09:58.200
ผมก็เดาว่าเอ้ยตรงนี้มันก็น่าจะเป็นการเรียก endpoint แล้วมันไม่น่า

0:09:58.200 --> 0:10:1.100
ปกติสมมุติเป็น a อย่างเงี้ย .a อย่างเงี้ยคุณก็คงแบบว่าเอ้ย

0:10:1.100 --> 0:10:4.000
มันคงเรียกผ่านแหละมันไม่น่าใช่แบบการเรียกฟังก์ชัน

0:10:4.000 --> 0:10:6.400
ไม่น่าใช่การเรียก method เพื่อเรียก endpoint หรอกเนาะ

0:10:6.700 --> 0:10:9.300
ผมก็แก๊สไลท์ว่าเอ้ยถ้าคุณอยาก

0:10:9.300 --> 0:10:9.700
ผมก็

0:10:9.900 --> 0:10:10.300
เออ

0:10:10.600 --> 0:10:14.900
คือการเขียนอันนี้มันเป็นการแก๊สไลท์อย่างนึงแบบขั้นสุดเลยเว้ยก็คือตรงนี้

0:10:15.100 --> 0:10:20.100
เราไม่รู้ว่า user เนี่ยจะเรียก endpoint เมื่อไหร่

0:10:20.100 --> 0:10:21.900
สิ่งที่ผมทำก็คือบอกว่าแก๊สไลท์ว่าเอ้ย

0:10:22.200 --> 0:10:24.500
ถ้าคุณอยากเรียก endpoint นะคุณเรียก

0:10:24.500 --> 0:10:27.400
HTTP method แล้วก็ใส่ body เข้ามา

0:10:28.100 --> 0:10:31.400
ซึ่งเคสที่มันมีโอกาสเรียกจริงๆ เนี่ยอ่ะสมมุติ

0:10:31.400 --> 0:10:34.600
สมมุติผมเขียนอย่างงี้อ่ะเป็น state แล้ว get ใช่มั้ย

0:10:34.600 --> 0:10:35.000
อ่ะอย่างงี้เนาะ

0:10:35.000 --> 0:10:35.300
ปี

0:10:36.700 --> 0:10:37.500
ก็สามารถบอกว่า

0:10:38.100 --> 0:10:39.400
เรียก api.space.get

0:10:39.400 --> 0:10:42.100
แต่เห็นไหมว่าตรงนี้มันไม่มีการเรียกฟังก์ชัน

0:10:42.100 --> 0:10:43.700
เพราะว่ามันยังมีผาดด้านหลังอยู่

0:10:44.100 --> 0:10:45.800
แต่สมมุติว่าผมเรียก

0:10:45.800 --> 0:10:46.900
เป็นประมาณอย่างนี้

0:10:47.600 --> 0:10:49.800
api.stage.get

0:10:49.800 --> 0:10:51.200
ด้วยความที่ตรงนี้

0:10:51.200 --> 0:10:53.000
มันยังไม่ใช่การเรียก

0:10:53.000 --> 0:10:54.400
มันยังไม่ใช่การเรียกครั้งสุดท้าย

0:10:54.400 --> 0:10:56.100
เพราะฉะนั้นเนี่ยผมก็สามารถแกะไล่ได้ว่า

0:10:56.100 --> 0:10:57.200
ถ้ามันเป็นครั้งสุดท้าย

0:10:57.200 --> 0:10:58.500
แล้วมันเป็นการเรียก

0:10:58.500 --> 0:11:0.900
ถ้ามันเป็นครั้งสุดท้ายแล้วไปต่อเนี่ย

0:11:0.900 --> 0:11:1.900
มันชื่อตรงกับ

0:11:2.200 --> 0:11:3.600
http verb อันนึง

0:11:3.800 --> 0:11:5.100
ก็ให้มันไปเรียก

0:11:5.100 --> 0:11:6.700
เราก็แทนที่จะรีเทิร์นอันนี้

0:11:6.700 --> 0:11:7.700
recursive เนาะ

0:11:7.700 --> 0:11:9.100
แล้วก็ไปเรียก fetch endpoint มา

0:11:9.100 --> 0:11:10.300
มันก็จะทำการ

0:11:10.300 --> 0:11:11.700
เรียก endpoint อีกทีนึง

0:11:11.700 --> 0:11:13.500
เพราะฉะนั้นเนี่ยสิ่งที่ผมทำจริงๆแล้วเนี่ย

0:11:13.500 --> 0:11:14.100
มันไม่ใช่ว่า

0:11:14.100 --> 0:11:15.700
เราเอา type แล้วเราก็

0:11:15.700 --> 0:11:17.800
get type แล้วก็

0:11:17.800 --> 0:11:18.600
แก้ something

0:11:18.600 --> 0:11:20.300
แต่มันเป็นการแบบว่าบอกว่า

0:11:20.300 --> 0:11:22.900
เราตรงนี้มาทำงานได้แบบ magic เลย

0:11:22.900 --> 0:11:24.300
คุณไม่ต้องไปซีเรียสเรื่องแบบ

0:11:24.300 --> 0:11:25.100
implementation หรอก

0:11:25.100 --> 0:11:26.000
เดี๋ยวเราจัดการเอง

0:11:26.000 --> 0:11:27.700
ซึ่ง implementation ด้านหลังจริงๆแล้วเนี่ย

0:11:27.700 --> 0:11:31.500
มันมี limit ทาง engineering อยู่

0:11:31.500 --> 0:11:32.200
ก็คือแบบว่า

0:11:32.500 --> 0:11:34.000
เราไม่สามารถ

0:11:34.000 --> 0:11:35.100
ดูได้ว่า

0:11:35.100 --> 0:11:37.400
proxy สุดท้ายที่มันถูกเรียกเนี่ย

0:11:37.400 --> 0:11:38.800
มันเป็นอันสุดท้ายหรือเปล่า

0:11:39.000 --> 0:11:41.100
เพราะฉะนั้นสิ่งที่เราสามารถทำได้ก็คือ

0:11:41.100 --> 0:11:43.600
บอกว่า user

0:11:43.600 --> 0:11:45.100
ถ้าคุณเรียกประมาณอย่างนี้

0:11:45.100 --> 0:11:46.700
แล้วเราเขียน method ที่ว่า

0:11:46.700 --> 0:11:48.600
มันน่าจะเป็นการเรียก endpoint เนี่ย

0:11:48.600 --> 0:11:49.700
เราก็เรียก endpoint

0:11:49.700 --> 0:11:50.600
ถ้าไม่ใช่แล้วก็ค่อย

0:11:50.600 --> 0:11:51.800
เรียกอย่างอื่น

0:11:51.800 --> 0:11:52.800
อะไรประมาณอย่างนี้

0:11:52.800 --> 0:11:54.500
ซึ่งมันเป็นสกิลการที่แบบว่า

0:11:54.500 --> 0:11:56.900
บางทีเนี่ยคุณเขียนแบบว่า

0:11:56.900 --> 0:11:58.600
เก่งมากๆแต่ว่า

0:11:59.100 --> 0:12:0.700
มัน มี edge case แหละ

0:12:0.700 --> 0:12:2.300
เราก็เลยบอก user ว่า

0:12:2.300 --> 0:12:4.000
ถ้าคุณเขียนประมาณอย่างนี้

0:12:4.000 --> 0:12:5.500
เราจะสามารถเลี่ยง edge case

0:12:5.500 --> 0:12:7.000
ที่เราเจอแล้วเรายังไม่สามารถแกะได้

0:12:7.000 --> 0:12:7.600
ก็บอกว่า

0:12:7.800 --> 0:12:9.000
ใน api.doc เนี่ย

0:12:9.000 --> 0:12:10.000
เราเขียนประมาณอย่างนี้นะ

0:12:10.000 --> 0:12:11.800
แล้วมันจะเจอโอกาสที่แบบ

0:12:11.800 --> 0:12:13.100
เลี่ยง edge case ที่แบบว่า

0:12:13.100 --> 0:12:13.900
ที่เราบอกไปเนี่ย

0:12:13.900 --> 0:12:14.800
มันให้มันลดลง

0:12:14.800 --> 0:12:16.400
เพราะฉะนั้นสิ่งที่เราทำจริงๆแล้วเนี่ย

0:12:16.400 --> 0:12:17.600
ในการเขียน framework

0:12:17.600 --> 0:12:18.400
มันไม่ใช่แค่แบบว่า

0:12:18.400 --> 0:12:20.600
คุณต้องเขียนแบบวางแพลนโคตรเก่งเลย

0:12:20.600 --> 0:12:21.700
แล้วก็แบบว่าเขียน implementation

0:12:21.700 --> 0:12:23.400
บางทีมันมีแบบ

0:12:23.400 --> 0:12:25.100
limit บางอย่างที่แบบเรา

0:12:25.100 --> 0:12:26.300
แก้ได้ค่อนข้างยาก

0:12:26.300 --> 0:12:27.900
แต่เราสามารถเลี่ยงได้ด้วยการแบบว่า

0:12:27.900 --> 0:12:29.600
เราเขียน

0:12:29.600 --> 0:12:31.800
illusion something ที่แบบ

0:12:31.800 --> 0:12:33.200
สร้างภาพรวม

0:12:33.200 --> 0:12:34.000
อันนึงออกมาว่า

0:12:34.000 --> 0:12:34.800
ถ้าเขียนอย่างนี้

0:12:34.800 --> 0:12:36.700
มันจะโอกาสที่เป็นไปได้

0:12:36.700 --> 0:12:37.800
มันน่าจะมากกว่านะ

0:12:37.800 --> 0:12:38.500
อะไรประมาณอย่างนี้

0:12:38.500 --> 0:12:39.000
แล้วก็แบบว่า

0:12:39.000 --> 0:12:40.500
หลอกให้ user เนี่ย

0:12:40.500 --> 0:12:42.100
เขียนเป็นประมาณที่เราต้องการ

0:12:42.100 --> 0:12:43.000
แล้วก็มันก็จะได้

0:12:43.000 --> 0:12:44.400
ตัว API ออกมาที่แบบ

0:12:44.400 --> 0:12:45.500
ที่เราต้องการเลย

0:12:45.500 --> 0:12:46.600
ก็ประมาณนี้ครับ

0:12:49.000 --> 0:12:50.300
12 นาทีพอดีด้วย
