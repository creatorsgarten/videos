WEBVTT

00:00:00.100 --> 00:00:04.433
ก็จริงๆ ขอบคุณสปีกเกอร์ทั้ง 3 ท่านไปนะ
ที่วันนี้มาแชร์เรื่อง

00:00:04.500 --> 00:00:10.633
ค่อนข้าง technical นิดนึง วันนี้ผมก็อยาก
มาแชร์อะไรที่มันสบายๆ แล้วกัน เพราะว่า

00:00:10.700 --> 00:00:14.133
ก็คือตอนนี้ผมทำงานที่ Metabase นะครับ ถ้าเกิดใคร

00:00:14.200 --> 00:00:19.033
ถ้าใครไม่รู้จักก็เดี๋ยวจะอธิบายให้ฟังมันคืออะไร
แต่ว่าหลักๆ คือมันเป็นบริษัทที่

00:00:19.100 --> 00:00:24.833
อยู่ต่างประเทศ แล้วก็โปรดักต์เราทำเป็น open source

00:00:24.900 --> 00:00:29.833
เดี๋ยวแนะนำตัวเร็วๆ ก่อนดีกว่า
สวัสดีครับ ผมชื่อ Kelvin นะครับ

00:00:29.900 --> 00:00:35.633
ก็คือทำงานเป็น front end engineer
อยู่ที่ Metabase ตอนนี้ ก็คือ Metabase เนี่ย

00:00:35.700 --> 00:00:39.633
เรียกว่าเป็นโปรดักต์ตัวหนึ่งละกัน
ที่เป็น open source

00:00:39.700 --> 00:00:46.333
อยู่ใน GitHub นะครับ มีดาวเยอะมาก
จำได้เหมือนกับ GitHub star 20,000 กว่าดาวมั้ง
แต่ก็คือเป็น tool ที่เอาไว้

00:00:46.400 --> 00:00:50.133
เล่นกับ data ก็คือคุณมี data คุณอยากเข้าใจ

00:00:50.200 --> 00:00:57.133
ว่า data ของคุณมันเป็นยังไง
อยากเข้าไปเล่น เข้าไป visualize หรือว่า

00:00:57.200 --> 00:01:02.733
สงสัยอะไรเกี่ยวกับ data ของตัวเอง
ก็คือใช้ Metabase นะครับ

00:01:02.800 --> 00:01:08.733
แล้วเนื่องๆ ด้วยที่มันเป็น open source

00:01:08.800 --> 00:01:15.733
คนส่วนใหญ่คือเป็น remote หมดเลย
ก็คือไม่มีออฟฟิศเนอะ แล้วก็จ้างคนทั่วโลก
ก็เลยรู้สึกว่ามันน่าจะเป็นแบบ topic ที่

00:01:15.800 --> 00:01:22.233
หลายๆ คนน่าจะไม่เคยรับรู้มาก่อน
ก็เลยอยากจะมาแชร์ให้ฟัง
ว่าการทำงานภายในบริษัท

00:01:22.300 --> 00:01:27.032
ที่เขาทำเป็น open source เนี่ยเขาเป็นยังไง
ตอนแรกที่ผมเข้ามาผมก็ว้าวมากนะเพราะว่า

00:01:27.100 --> 00:01:30.532
core product มันเป็น open source ใช่ไหม
ปกติเราไม่เคยคิดว่าแบบ

00:01:30.600 --> 00:01:36.933
open source แล้วมันจะแบบ commercialize ยังไง
มันจะขายยังไง open source
แต่ก็สุดท้ายมันก็ขายได้

00:01:37.000 --> 00:01:42.133
หลักๆ ก็คือ topic วันนี้จะพูดประมาณนี้นะครับ
การทำงานข้างในเป็นยังไงของบริษัทนี้

00:01:42.200 --> 00:01:47.032
การคุยกันอะไรเป็นยังไงนะครับ
ทุกคน remote หมดเลย

00:01:47.100 --> 00:01:54.032
culture เป็นยังไง สั้นๆ แค่นี้
อยากจะมาคุยเป็นเบาๆ
แล้วก็อยากจะเน้น Q&A มากกว่านะครับ

00:01:54.100 --> 00:02:01.032
ก่อนอื่นนะครับ ก็อยากจะขอ plug หน่อย
จริงๆ plug ก็คือถ้าใครไม่ชิน
ก็คือ advertise นั่นแหละ

00:02:01.100 --> 00:02:04.633
ก็คืออันนี้ต้อง props to น้องจุ้น

00:02:04.700 --> 00:02:09.032
เห็นเขาเป็นคนริเริ่มอันนี้ขึ้นมา
เป็น English Club for Developer

00:02:09.100 --> 00:02:13.033
ช่วงนี้ห้องก็ใน Discord เขาค่อนข้างร้างๆ นิดนึง
อยากจะชวนคนเข้ามา

00:02:13.100 --> 00:02:18.433
เข้ามาคุยหน่อยนะครับ จริงๆ ผมก็ลืมนะ
ผมลืมเข้าไปบ้าง

00:02:18.500 --> 00:02:23.433
ตอนแรกน้องจุ้นเขาขยันมากเข้ามาช่วยโฮสต์อีเวนต์
แต่จริงๆ ผมอยากเห็นเป็น

00:02:23.500 --> 00:02:30.033
ให้เป็นพื้นที่ที่ทุกคนเข้ามา แล้วเข้ามาคุยกันเอง
ห้องมีอยู่แล้ว เข้ามาก็ไปจอย

00:02:30.100 --> 00:02:33.733
join voice channel
แล้วก็ไปหาคนคุยได้ คืออันนี้

00:02:33.800 --> 00:02:39.233
จุดประสงค์คือเราอยาก encourage ให้ developers
จริงๆ ก็ไม่ใช่แค่ developers นะ

00:02:39.300 --> 00:02:45.632
เป็นใครก็ได้ในประเทศไทยเนี่ย
เข้าไปอยากจะฝึก practice English ก็เข้าไปได้

00:02:45.700 --> 00:02:52.933
จริงๆ ตอนแรกทอล์กนี้ผมก็เตรียมมาเป็นอังกฤษ
นั่นแหละ แต่ก็พูดไทยก็ได้ครับ ง่ายดีนะฮะ

00:02:53.000 --> 00:02:59.132
อ่ะ มีใครอยากจะสแกนจอย Discord
แล้วยังไม่ได้เข้าอีกไหม

00:02:59.200 --> 00:03:04.933
โอเค ไปต่อแล้วนะ ก็ถ้าเกิดใครจอยเข้าไปแล้ว
ว่างๆ เข้ามาคุยกันได้
ผมอยากเห็นทุกคนเข้ามาฝึกพูดกันนะครับ

00:03:05.000 --> 00:03:10.632
เราจะได้ international นะครับ international
การทำงานใน Metabase เป็นยังไงครับ

00:03:10.700 --> 00:03:16.733
อันนี้เดี๋ยวพูดถึง statistics ของ Metabase ก่อน
ทุกคนจะได้พอเห็นภาพว่าบริษัท

00:03:16.800 --> 00:03:23.632
Metabase เป็นยังไงนะ บริษัทที่ผมทำงานอยู่
ก็คือตอนนี้มีพนักงานอยู่ 52 คนนะครับ ทำงานอยู่

00:03:23.700 --> 00:03:28.733
16 time zone จริงๆ ไม่ใช่ 16 time zone หรอก
16 ประเทศ มันอาจจะมี time zone เหมือนกันบ้าง
แต่ก็คือ

00:03:28.800 --> 00:03:36.433
เห็นภาพว่าแต่ละคนอยู่ทั่วโลกเลย
เพราะฉะนั้นส่วนใหญ่เวลาเราทำงาน
เราก็จะมักทำงานไม่ค่อยพร้อมกันนะครับ

00:03:36.500 --> 00:03:40.433
แล้วก็ engineers ตอนนี้มีประมาณ 30 คน
ที่เหลือก็เป็นฟังก์ชันอื่นๆ

00:03:40.500 --> 00:03:44.833
ก็ตามรูปที่เห็นนะครับ
รูปนี้ก็ visualize ผ่าน Metabase นะครับ

00:03:44.900 --> 00:03:49.833
ขายของอีกและ ขอถามอีกอย่างหนึ่ง
มีใครใช้ Metabase ไหมครับ

00:03:49.900 --> 00:03:56.733
มีบ้างนะ ผมดีใจมากเลยนะ
ตอนแรกที่ผมเข้ามาทำงานนี่คือคนอื่นรู้จัก Metabase
เพราะผมเนี่ยครับ ผมยังไม่รู้เลยบริษัททำอะไร

00:03:56.800 --> 00:04:01.733
ผมแค่รู้ ผมเข้าไปแบบ โอ้ย UI สวย
อยากทำงานที่นี่นะ

00:04:01.800 --> 00:04:07.533
ต่อไปอันนี้ อันนี้เป็น PR นะครับที่ merge
อันนี้มัน group by อะไรอะ

00:04:07.600 --> 00:04:11.933
มันเล็กมากเลยรายเดือนนะ
ก็คือแต่ละเดือนเนี่ยมีประมาณสัก 300-500

00:04:12.000 --> 00:04:15.533
ก็คือเฉลี่ยประมาณ 10-20 PR
ที่มัน merge ต่อวันนะครับ

00:04:15.600 --> 00:04:22.533
อันนี้ก็คือเป็นตัว core product ก็คืออยากให้
เห็นภาพว่าประมาณนี้ คือสำหรับผมเนี่ย
รู้สึกมันเยอะนะ เพราะผมทำบริษัทที่มันเล็กกว่าก่อน

00:04:22.600 --> 00:04:26.233
บางทีวันหนึ่งอาจจะไม่มี merge เลย
หรืออาจจะแบบสองสามวัน merge ทีอะไรอย่างนี้

00:04:26.300 --> 00:04:31.033
แต่สำหรับใครที่ทำบริษัทใหญ่ๆ
corporate มี 100-200 คน

00:04:31.100 --> 00:04:35.832
เลขอาจจะดูน้อย แต่สำหรับผมคือรู้สึกมันเยอะ
ก็เลยอยากจะสื่อว่าเนี่ย

00:04:35.900 --> 00:04:41.633
วันหนึ่งมี merge ตั้ง 10-20 PR
ก็ทำงานกันยังไง

00:04:41.700 --> 00:04:44.832
เลยอะไรเปล่าวะ ไม่เลยเนอะ อ่ะ มีอะไรอีก

00:04:44.900 --> 00:04:50.832
ก็คือ Metabase มันมีมาตั้งแต่ประมาณต้นปี 2015
นะครับ

00:04:50.900 --> 00:04:56.433
จะเห็นได้ว่าจริงๆ คือมันเป็นโปรเจคที่มันแบบ
establish แล้วอะ เรียกว่าเป็น legacy ได้เลย
เพราะว่ามีมาตั้งแต่เท่าไหร่นะ

00:04:56.500 --> 00:05:04.733
2015 ประมาณ 7 ปีนะครับ เกือบ 7 ปี
ผมว่าผมจำไม่ถูกอะ ประมาณนั้นแหละ
ประมาณ 7-8 ปี

00:05:04.800 --> 00:05:11.533
ที่ว้าวมากครับ คือตอนแรกมันเขียนด้วย Angular 1
แล้วก็ประมาณเกือบ 2 ปีให้หลัง เขาก็ convert เป็น React

00:05:11.600 --> 00:05:16.233
ผมไม่ได้เข้าไปสืบทราบว่าสาเหตุว่า
ทำไมเขาถึงเปลี่ยนนะครับ

00:05:16.300 --> 00:05:22.733
มันก็คงมีเหตุผลอะไรของมัน
เพราะฉะนั้นก็ยินดีกับทุกคนนะครับที่เลือก React
นะครับ / ยินดีด้วย

00:05:22.800 --> 00:05:28.633
จะได้ไม่ต้อง migrate ครับ
ขอโทษน้องเจมส์นะครับ ไม่ได้ว่าอะไรครับ

00:05:28.700 --> 00:05:34.233
ก็ตอนแรกเรา use Flow Type ไม่แน่ใจ ของ
Facebook หรือเปล่า ก็จำไม่ได้เหมือนกัน แต่ว่า

00:05:34.300 --> 00:05:41.233
ถามคนในทีมแล้วเขาบอกว่า ใช้ไปเรื่อยๆ
แล้วพอไฟล์เยอะๆ ปุ๊บ มันแบบ มัน crash อะ
มัน check type ไม่ได้ สุดท้าย

00:05:41.300 --> 00:05:45.633
ก็เลยลบ Flow Type ออกหมดเลย
แล้วก็ใช้ TypeScript แทน

00:05:45.700 --> 00:05:51.633
แต่ว่าค่อยๆ convert นะครับ
gradually convert ไปเป็น TypeScript
ไม่ใช่ว่าแบบ โอ้ Flow Type ออกทุกอย่าง

00:05:51.700 --> 00:05:58.633
JavaScript เป็น TypeScript ตายครับ
เราก็ค่อยๆ convert ไปทีละ file

00:05:58.700 --> 00:06:02.332
คอมเมนต์อะไรพวกนี้ TODO, hack, fix me
อะไรพวกนี้

00:06:02.400 --> 00:06:08.332
คอมเมนต์ที่เก่ากว่า 5 ปีก็ยังอยู่ในโปรเจกต์
นะครับ เพราะฉะนั้นใครที่แบบว่าอยากจะเขียนอะไร

00:06:08.400 --> 00:06:13.933
ลงไปในโปรเจคเนี่ยว่าแบบ เฮ้ย
อย่าลืม refactor ตรงนี้ด้วยนะ

00:06:14.000 --> 00:06:18.433
พยายาม keep in mind นะครับ
มันอาจจะอยู่ไปประมาณ 5 ปีก็ได้นะครับ
comment ของคุณ

00:06:18.500 --> 00:06:23.433
ก็อะไรที่เขียนลงไป
มันจะอยู่ไปตลอดไปนะครับตอนนี้

00:06:23.500 --> 00:06:29.832
อันนี้ก็เป็นตัวอย่างที่ผมชอบที่สุดนะครับ
คอมเมนต์นี้ก็ประมาณ 5 ปีแล้วเหมือนกัน

00:06:29.900 --> 00:06:33.332
มันเป็นฟังก์ชันที่เอาไว้ clone object อะฮะ

00:06:33.400 --> 00:06:41.332
สุดท้ายมันก็ยังเวิร์คของมันอยู่นะ
ผมชอบมากเลย

00:06:41.400 --> 00:06:44.832
โอเค ก็คือ

00:06:44.900 --> 00:06:50.733
เวลาเราทำตัว open source project เนี่ย
เป็นบริษัท

00:06:50.800 --> 00:06:57.332
ตัว core product เป็น open source นะครับ
เราก็ต้อง ship อยู่ตลอดเวลา เราจะมาแบบว่า

00:06:57.400 --> 00:07:04.332
จริงๆ ก็ทุกบริษัทนะ incrementally shipping
แต่ว่าด้วยความที่มันเป็นเรียกว่าไง
บริษัทที่มัน remote

00:07:04.400 --> 00:07:12.832
มันก็ต้องยิ่ง continuously shipping มากกว่าเดิม
เพราะว่าเราไม่ได้มีเวลาอยู่ด้วยกัน
อะไรอย่างนี้ครับ

00:07:12.900 --> 00:07:18.933
เพราะฉะนั้นทำยังไงให้เราสามารถ ship ของได้
บ่อยๆ เรื่อยๆ เยอะๆ
อันดับแรกก็คือเราต้องพยายาม

00:07:19.000 --> 00:07:26.133
ไม่ introduce complexity เข้าไป
จริงๆ ผมพยายามคิดคำไทยเยอะมาก
ตอนแรกคือเตรียม talk เป็นภาษาอังกฤษเลย

00:07:26.200 --> 00:07:33.133
พยายามจะพูดเป็นไทยให้ได้เยอะที่สุดนะครับ
ผมถ้านึกอะไรไม่ออก

00:07:33.200 --> 00:07:36.633
pardon ผมไว้หน่อยแล้วกันนะครับ
ผมนึกคำไทยไม่ออกบางคำนะ

00:07:36.700 --> 00:07:42.433
ก็คือพยายามอย่าใส่ความวุ่นวายเข้าไปในโปรเจค
อย่างเยอะๆ พยายามแบบ favor อะไรที่มันซิมเปิลๆ

00:07:42.500 --> 00:07:48.233
คือไม่ต้องคิดว่า product ที่มันแบบดูว้าว
ดูหรูหราอะไรอย่างนี้ต้องใช้อะไรที่มันยุ่งยาก

00:07:48.300 --> 00:07:51.133
อะไรเสมอไปนะ พยายามใช้เรื่องที่มันง่ายๆ
ไว้ก่อนนะครับ

00:07:51.200 --> 00:07:56.133
เพราะว่าการทำงานกับหลายๆ คนไง
ถ้าเกิดหลายๆ คนพยายามใส่อะไรที่มันแบบดู

00:07:56.200 --> 00:08:03.033
ดูหล่อ ดู geek ดูแบบอะไรอย่างเนี่ยเข้ามา
มันจะทำให้สุดท้ายมันจะวุ่นวายแล้วมันจะ

00:08:03.100 --> 00:08:09.533
มันจะแก้ไขยากครับ การแก้ไขยาก
การ maintain ยาก การ extend ยาก มันทำให้

00:08:09.600 --> 00:08:16.433
product ล่มสลายได้ ควรระวังเอาไว้
แล้วก็การที่เราจะ ship ได้เรื่อยๆ
เราก็ต้องมีเทส

00:08:16.500 --> 00:08:23.033
มีเทสเพื่อที่เราจะได้มั่นใจว่าสิ่งที่เรา ship
สิ่งที่เราโค้ดลงไป มันไม่ทำให้ของเดิมมันพัง

00:08:23.100 --> 00:08:27.933
มันไม่ทำให้เกิด regression อะไรอย่างนี้
ก็จะพูดคร่าวๆ ว่าแบบเนี่ยคือ
Metabase มีเทสเป็นพันแหละ

00:08:28.000 --> 00:08:31.733
มีเยอะมาก front-end unit test
คือมีแบบหลายพันอะ 4-5 พันเทส

00:08:31.800 --> 00:08:35.332
back-end เองก็คงมีเป็นพันมั้ง
cypress test ก็มีเป็นพันเหมือนกัน

00:08:35.400 --> 00:08:42.033
แล้วก็ยังมีใช้ Percy test ด้วย
Percy ก็คือเป็นเหมือนแบบ screenshot
เขาเรียกว่าอะไรวะ visual testing อะ

00:08:42.100 --> 00:08:49.033
visual testing คือเหมือนแบบเช็คว่า
UI เปลี่ยนหน้าตาเปลี่ยนอะไรประมาณนี้
เหมือนแบบเช็คพิกเซลเพอร์พิกเซลประมาณนั้น

00:08:49.100 --> 00:08:53.133
คล้ายๆ Selenium อะไรอย่างนี้เปล่าฮะ
/ เอ่อ Selenium มันเป็น

00:08:53.200 --> 00:09:00.133
Selenium เรียกว่ามันเทียบเหมือนก็คือ Cypress
ปกติดีกว่าซึ่งเป็น E2E test
แต่ว่า Selenium มันไม่ได้แบบ

00:09:00.200 --> 00:09:04.633
ผมไม่แน่ใจนะว่ามันทำ visual testing ได้ไหม
แต่คือมันเหมือนแบบ มันเป็น

00:09:04.700 --> 00:09:10.933
เรียกว่าไงดีอะ มันเป็น scaffold
สำหรับการทำเทสอื่นๆ ต่อไปได้

00:09:11.000 --> 00:09:17.933
แล้วก็จริงๆ คือแต่ละ PR ที่เปิดไปในแต่ละ change
มัน run นานมาก เทสส่วนใหญ่ run 20 กว่านาที

00:09:18.000 --> 00:09:24.933
อันนี้ก็พูดเป็นคำขำนะ
ว่าให้เห็นภาพว่ามันเยอะจริงๆ

00:09:25.000 --> 00:09:31.433
เวลามี PR แบบเปิดก็นั่นแหละ
วันหนึ่ง merge 10-20
มันก็ต้องมีเปิดมาเยอะเหมือนกัน

00:09:31.500 --> 00:09:34.933
เวลาหลักการในการที่เรารีวิว PR คือเราพยายาม

00:09:35.000 --> 00:09:40.133
favor ไปทางที่ไม่ให้มัน block เค้า
คือเราพยายามจะแบบ approve มากกว่า

00:09:40.200 --> 00:09:43.633
look good to me อะไรแบบนี้มา ประมาณเนี่ย
ถ้าเกิดว่ามันไม่มีอะไรที่มันแบบ

00:09:43.700 --> 00:09:50.633
แย่มากๆ ที่มันควรจะแก้ไขแบบทำให้แบบ
โปรดักต์พังอะไรอย่างเงี้ย เราก็จะคอมเมนต์ไป
แค่แบบว่า โอเคคือคุณต้องไปแก้อย่างงี้ๆ

00:09:50.700 --> 00:09:58.033
ก็ เออ ดูโอเคแล้ว approve
อะไรอย่างนี้ประมาณนี้ครับ

00:09:58.100 --> 00:10:04.033
อันนี้ปัญหาใหญ่ อีกปัญหาใหญ่หนึ่งของบริษัทนี้
คือทุกคนอยู่ทั่วโลกใช่ไหม เพราะฉะนั้น

00:10:04.100 --> 00:10:08.633
บางทีผมตื่น ผมทำงานเนี่ย ทำงานเสร็จปุ๊บ
เพื่อนเพิ่งตื่นมาทำงานอะไรอย่างนี้

00:10:08.700 --> 00:10:14.833
เพราะฉะนั้นมันก็จะเกิดปัญหา
ก็คือปัญหา time zone ไม่พร้อมกัน
เพราะฉะนั้นเราแก้ยังไง

00:10:14.900 --> 00:10:20.233
ก็คือบริษัทที่เป็น remote ส่วนใหญ่อย่างเนี่ย
GitLab เอง หรือว่าอะไรก็ตาม
ส่วนใหญ่ทุกคนน่าจะตาม GitLab กันหมดนะ

00:10:20.300 --> 00:10:27.133
เหมือนแบบเค้าเป็น pioneer มาก่อน
ก็คือเราพยายามที่จะทำทุกอย่างให้มันเป็น
asynchronous

00:10:27.200 --> 00:10:30.833
เพราะว่าแต่ละคนมันตื่นไม่พร้อมไง
เราจะมาแบบว่า

00:10:30.900 --> 00:10:35.633
วันนี้แบบชิลมากประชุม 10 โมง
อีกคนตี 3 อะไรอย่างนี้ มันก็ทำไม่ได้ถูกปะ

00:10:35.700 --> 00:10:41.933
เพราะฉะนั้นเราก็ต้องทำทุกอย่างให้มันเป็น
asynchronous ส่วนใหญ่ by default
ทุกอย่างจะถูกเขียนออกมาเป็นแบบ

00:10:42.000 --> 00:10:47.533
แล้วแต่อย่างบริษัทผมใช้ Notion
ก็จะเขียนลงมาปึ๊บๆๆ

00:10:47.600 --> 00:10:51.033
แล้วก็อย่างส่วนตัวผมเองคือที่เนี่ย

00:10:51.100 --> 00:10:55.133
เฉลี่ยๆ ประชุมน้อยมาก
ก็คืออาทิตย์นึงประชุมไม่ถึง 2 ชั่วโมง

00:10:55.200 --> 00:10:59.833
ไม่รู้ว่าสำหรับทุกคนคือรู้สึกว่าเยอะไหม
หรือน้อยไหม แต่บริษัทเก่าเยอะกว่านี้มาก ของผม

00:10:59.900 --> 00:11:06.533
อาทิตย์หนึ่งผมประชุมไม่ถึง 2 ชั่วโมง
ที่เหลือก็คือโค้ดรัวๆ เลยนะครับ

00:11:06.600 --> 00:11:11.033
ก็ไม่ได้โค้ดรัวๆ หรอก ก็มีตามอ่าน
อะไรพวกนี้แหละ ไม่ได้โค้ดรัวๆ แต่ว่า

00:11:11.100 --> 00:11:16.333
ให้เห็นว่าเวลาที่ควรว่าเราต้องไป
attend meeting อะไรอย่างนี้มันน้อยมาก

00:11:16.400 --> 00:11:21.933
แล้วก็ต้องเน้นทุกอย่างเป็น long form writing
หมดเลยนะครับ ก็คือ

00:11:22.000 --> 00:11:27.533
เวลาอย่าง ทุกอย่างที่มันจะแทนที่ประชุมได้
เราก็จะเน้นเป็นแบบ เขียนออกมาเป็น

00:11:27.600 --> 00:11:31.933
พารากราฟ ยาวๆ คุณอยากจะทำอะไร
what, where, when, why, how อะไรประมาณนี้

00:11:32.000 --> 00:11:38.333
ทุกอย่างโปรเจกต์ แทนที่เราจะต้องมามี planning
มีอะไรอย่างนี้ๆ ทุกคนเข้ามาคุยกัน
discuss กัน เราก็เขียนเป็นอย่างนี้

00:11:38.400 --> 00:11:43.733
เราก็เขียนเป็นเรียกว่า writing
ออกมาอย่างหนึ่ง เหตุผลเพราะว่า
อย่างที่บอกคือทุกคนทำงานไม่พร้อมกัน

00:11:43.800 --> 00:11:49.333
บางที stakeholder ของเราที่เกี่ยวกับ
โปรเจคๆ หนึ่ง เขาอาจจะอยู่คนละ time zone ก็ได้

00:11:49.400 --> 00:11:56.033
การที่เราเขียนออกมาเป็น writing
ทำให้ทุกคนสามารถเข้ามา contribute ได้
ในเวลาที่ตัวเอง

00:11:56.100 --> 00:12:02.533
เหมาะสมอะ เพราะว่าแต่ละคนมันทำงาน
ไม่พร้อมกันไงประมาณนี้เนอะ

00:12:02.600 --> 00:12:07.833
เดี๋ยวจะพูดเรื่อง long form writing นี้ต่อไปนะครับ

00:12:07.900 --> 00:12:11.033
มีอีกพอยต์หนึ่งจะขยายเข้าไปหน่อย

00:12:11.100 --> 00:12:16.933
แล้วก็พยายาม over communicate เยอะๆ
อันนี้เป็นอีกอันหนึ่งเลยที่ค่อนข้างสำคัญมากๆ

00:12:17.000 --> 00:12:22.933
คือถ้าเกิดว่าเวลาเราอยากจะคุยอะไร
เราอยากจะสื่อสารอะไรกับใครสักอย่างเนี่ย
อย่างเช่นเอาง่ายๆ เลย

00:12:23.000 --> 00:12:29.333
อย่างเช่นแบบคอมเมนต์ PR แบบ
ตรงนี้ทำไมไม่ปุ๊บๆ อะไรอย่างนี้
ถ้าเกิดเราเขียนน้อยมาก

00:12:29.400 --> 00:12:33.933
แล้วสมมติเรานอนไปใช่ไหม อีกคนหนึ่งตื่นมา
แล้วมาอ่านคอมเมนต์เราแล้วแบบ อิหยังวะ

00:12:34.000 --> 00:12:40.833
คำถามคือมันจะเกิดอะไรขึ้น
มันจะเกิด turnaround time สูงมาก
เพราะว่าเราอันนี้เรียกว่า เรา under communicate

00:12:40.900 --> 00:12:47.633
เพราะแทนที่จะแบบ มันจะแบบรอบเดียวแล้วมันจบ
มันกลายเป็นแบบ อ่ะ ก็สงสัยก็ถามต่อ

00:12:47.700 --> 00:12:54.333
แล้วเราก็วันถัดมาก็ตื่นมา บอกไม่ใช่อย่างนี้ๆ
เราก็นอน วันถัดมาก็ตื่นมาเราก็คุย
เนี่ยเคยเป็นอย่างเนี่ย

00:12:54.400 --> 00:13:00.033
ผมเคยเป็นอย่างนี้เลยที่เนี่ย
มันทำให้แบบบางทีสิ่งที่มันควรจะจบภายในวันเดียว
มันกลายเป็นแบบ 2-3 วัน

00:13:00.100 --> 00:13:04.433
เพราะฉะนั้นเราไม่มีทางที่เราจะ
over communicate ได้

00:13:04.500 --> 00:13:11.133
คือ communicate ไปเยอะๆ เลย
over มันไม่สร้างผลเสีย
แต่ under เนี่ยคือสร้างผลเสียมากๆ

00:13:11.200 --> 00:13:16.733
เพราะฉะนั้นเวลามีอะไรอย่างนี้พยายาม
over communicate ไว้ก่อนนะครับ

00:13:16.800 --> 00:13:22.033
แล้วก็สร้าง rapport นะครับ
อันนี้อ่านว่า rapport นะครับ ไม่ใช่ rapport นะครับ

00:13:22.100 --> 00:13:26.433
rapport ก็คือเราสร้างความสัมพันธ์ที่ดีกับ

00:13:26.500 --> 00:13:31.833
เพื่อนร่วมงานนะครับ มันจะทำให้เราทำงาน
ด้วยกันดีขึ้น เนื่องด้วยว่าบริษัทมันเป็น remote
ถูกปะ

00:13:31.900 --> 00:13:36.633
แล้วแบบเราแทบไม่เจอใครเลยอะ
คือเพื่อนผมก็แบบอยู่คนละประเทศหมดเลย
อะไรอย่างเงี้ย

00:13:36.700 --> 00:13:40.833
การที่เราได้มี session บางอันที่แบบ

00:13:40.900 --> 00:13:45.833
2-3 อาทิตย์ครั้งเราเข้ามาคุยกัน
คือบริษัทก็มีใช้ tool บางอย่างที่ทำให้แบบ
match

00:13:45.900 --> 00:13:52.133
พนักงานการเข้ามาคุยเพื่อให้ทำความรู้จักกันว่า
แบบ เอ๊ย คนนี้เป็นยังไงเนี่ย
มันทำให้เรารู้สึกแบบ connect กับ

00:13:52.200 --> 00:13:58.033
เพื่อนร่วมงานมากขึ้น
ทำให้เราทำงานด้วยกันง่ายมากขึ้นครับ

00:13:58.100 --> 00:14:01.533
เรื่องต่อไปเป็นเรื่อง communication นะครับ

00:14:01.600 --> 00:14:07.533
ก็คืออันนี้เดี๋ยวจะพูดคร่าวๆ ว่าเราใช้สิ่งที่มา
เรียกว่า PodOS ก็คือ

00:14:07.600 --> 00:14:11.733
คือบริษัทผมเนี่ยมันคิดขึ้นมาเองแหละ
เออ มันคืออะไร

00:14:11.800 --> 00:14:15.233
ก็คือ PodOS เป็นวิธีการทำงานแบบหนึ่ง

00:14:15.300 --> 00:14:22.233
จะคิดว่ามันเป็นอีกแบบ alternative หนึ่งของ
Scrum หรือว่า agile อะไรประมาณนี้ก็ได้นะครับ
ก็คือ PodOS เนี่ย

00:14:22.300 --> 00:14:28.733
มา optimize throughput ก็คืออยากจะทำให้งาน
ออกมาได้มากสุดนะครับ วิธีทำก็คือ

00:14:28.800 --> 00:14:34.833
เขาจะกรุ๊ปโปรเจกต์ต่างๆ นะครับ
โปรเจกต์อาจจะเรียกว่าเป็น task
หรือว่าเป็น user story ก็ได้

00:14:34.900 --> 00:14:41.833
ก็คือเขาจะกรุ๊ปโปรเจกต์ ให้มันอยู่ในธีมเดียวกัน
อาจจะอยู่ในแอเรียเดียวกัน อาจจะกรุ๊ปเป็นปึ๊บ

00:14:41.900 --> 00:14:47.433
เป็นๆ อย่างงี้ใช่ไหมครับ
แล้วก็แต่ละ cycle เนี่ย 2 เดือน ก็จะ

00:14:47.500 --> 00:14:51.833
ฟอร์มทีมขึ้นมาใหม่ทุกๆ 2 เดือน
เพื่อมาทำงานในแต่ละ theme

00:14:51.900 --> 00:14:55.533
ของมันไป อันนี้ก็จะเรียกว่าเป็น PodOS นะครับ

00:14:55.600 --> 00:14:59.133
พูดคร่าวๆ เพราะว่าเดี๋ยวต่อไปจะพูดถึง
เรื่อง pod นิดหนึ่ง

00:14:59.200 --> 00:15:06.133
แล้วก็อันนี้เป็นสิ่งที่สำคัญในการทำงาน
จริงๆ ทุกอันสำคัญหมดแหละ พูดไปงั้นแหละ

00:15:06.200 --> 00:15:12.433
ทุกอย่างสำคัญหมดเลยที่บอกมาอย่างนี้
แต่ว่าการที่เราพยายามทำความเข้าใจก่อน

00:15:12.500 --> 00:15:17.333
ก็สำคัญมากๆ ในการทำงาน
เพราะว่าบางทีอย่างเนี้ย ถ้าเกิดว่าเรา

00:15:17.400 --> 00:15:21.133
เราไม่พยายามที่ทำความเข้าใจก่อน
มันจะแบบ มันจะทำให้

00:15:21.200 --> 00:15:28.133
เหมือนบางทีเรา jump ไปที่ solutions
อะไรอย่างเงี้ย คือมันไม่ได้นะครับ
ก็คืออันดับแรกก่อนที่เราจะเริ่มทำงาน
เราต้องเข้าใจปัญหาก่อน

00:15:28.200 --> 00:15:34.233
ก็คือปัญหาที่มันถูกตั้งมาได้อย่างดีแล้วอะ

00:15:34.300 --> 00:15:39.333
เรียกได้ว่ามันแทบจะเกือบถูกแก้ไปแล้ว
ครึ่งหนึ่งเลย

00:15:39.400 --> 00:15:43.033
ยังไม่ต้องโค้ดเลยด้วยซ้ำ

00:15:43.100 --> 00:15:48.233
มันแทบจะแบบเสร็จถูกแก้ไปแล้วครึ่งหนึ่งเลยอะ
ถ้าเกิดว่าคุณตั้งปัญหามาดีพอ

00:15:48.300 --> 00:15:55.133
ใช้ long form writing ใช่ไหม
ตั้งมา state มาเลยปัญหานี้ ปึ๊บๆ
คน stakeholder เป็นใคร user เป็นใคร

00:15:55.200 --> 00:16:02.633
ใช้วันไหน อะไรๆ เขียนมาให้หมด ปุ๊บ

00:16:02.700 --> 00:16:08.033
แล้วก็เวลาที่เรา contribute กับ

00:16:08.100 --> 00:16:11.733
กับ conversation อะไรบางอย่างเนี้ย
พยายาม state observation

00:16:11.800 --> 00:16:17.033
ก็คือคุณเห็นอะไรกับสิ่งๆ นั้นอะ
อย่าพยายามแชร์ opinion

00:16:17.100 --> 00:16:24.033
เพราะว่า opinion แต่ละคนแบบสะเปะสะปะมาก
observation คือสมมติเนี่ย
เรามองสิ่งๆ นึง เช่นแบบปุ่ม

00:16:24.100 --> 00:16:28.133
ปุ่มเบี้ยว ก็คือคุยกันเรื่องปุ่มเบี้ยว

00:16:28.200 --> 00:16:31.833
ผมคิดว่าปุ่มมันควรจะไปอยู่ทางบนซ้ายนะครับ
ปุ่มจะไปอยู่บนขวา

00:16:31.900 --> 00:16:36.033
ปุ่มไปอยู่ข้างล่าง ปุ่มมันจะวิบวับ
แบบน้องเฟิร์สใช่ไหมครับ

00:16:36.100 --> 00:16:39.733
อย่าไม่ต้องอย่างนั้น การที่คุณแชร์ opinion อะ

00:16:39.800 --> 00:16:44.133
คือ opinion ของร้อยคนไม่สามารถเอามารวมกัน
แล้วหารได้

00:16:44.200 --> 00:16:48.633
แต่ observation ของ 100 คนสามารถเอามารวมกัน
แล้วหาออกมาเป็นอะไรบางอย่างได้

00:16:48.700 --> 00:16:52.133
เพราะว่าแต่ละคนกำลังคุยๆ เรื่องเดียวกันอยู่
คือปุ่มเบี้ยว

00:16:52.200 --> 00:16:59.033
อีกคนบอกว่าปุ่มมันอยู่ทางซ้ายไป 50px
มันก็คือเรื่องเดียวกัน เพราะนั้นพยายามแชร์
observation มากกว่าแชร์

00:16:59.100 --> 00:17:02.933
opinion นะครับ แล้วก็

00:17:03.000 --> 00:17:07.032
ไม่ใช่ว่าทุกปัญหามันคุ้มค่าที่จะ

00:17:07.099 --> 00:17:11.633
แก้ในเวลานั้น ก็ต้องเข้าใจตรงนี้ด้วย
นั่นเป็นเหตุผลว่าทำไมเราต้องเข้าใจปัญหา

00:17:11.700 --> 00:17:19.433
อย่างมาก ไม่ใช่ว่าทุกปัญหาแบบว่า ปุ่มเบี้ยว
เราต้องเสียเวลา 3 เดือนในการแก้อะไรอย่างนี้
มันก็ไม่ใช่

00:17:19.500 --> 00:17:26.433
ถ้าเราเข้าใจปัญหาว่าปุ่มเบี้ยวมันแทบไม่ได้
affect ใครเลยหรือว่าไม่มี user complain

00:17:26.500 --> 00:17:30.133
ก็ไม่ต้องแก้ป่ะ ก็จบแล้ว ประมาณนี้

00:17:30.200 --> 00:17:37.133
assume good faith ครับ เนื่องด้วยว่าแต่ละคน
ไม่เคยเห็นหน้ากัน บางทีใครมา disagree กับเรา
หรือมี conflict อะไรบางอย่าง

00:17:37.200 --> 00:17:41.033
แล้วอย่าไปแบบ

00:17:41.100 --> 00:17:45.533
เขาเรียกว่าอะไรวะ อย่าไปตั้ง defensive อะ

00:17:45.600 --> 00:17:52.033
อย่าไปแบบว่ามองว่า เฮ้ย ทำไมเขามองเราไม่ดี
ทำไมเขา disagree กับเราอะไรอย่างนี้
คือคุณต้องคิดก่อนว่าทุกคนเนี่ย

00:17:52.100 --> 00:17:57.033
มี good faith ก็คืออยากให้โปรดักต์มันดีใช่ไหม

00:17:57.100 --> 00:18:02.633
บริษัทมันไปได้ด้วยดี อยากให้โปรดักต์ออกมาดี
อยากให้ทุกอย่างออกมาดี
เพราะนั้นคุณต้องคิดอย่างนั้นไว้ก่อนนะครับ

00:18:02.700 --> 00:18:09.233
อย่าพยายามที่จะ defend ตัวเอง
อย่าพยายามที่จะ debate ฉันจะเอาไอเดียฉัน
พยายามเข้าใจปัญหาก่อนว่า

00:18:09.300 --> 00:18:14.933
ที่เขา disagree มาเพราะว่าอะไรอย่างนี้
จริงๆ มันอาจจะกลับไปข้อแรกก็ได้ว่า
ปัญหาคุณมันอาจจะ

00:18:15.000 --> 00:18:22.233
ไม่มีค่าพอให้มันแก้หรือเปล่า อะไรประมาณนี้
อย่าไปแบบ defensive ประมาณนี้

00:18:22.300 --> 00:18:26.933
แล้วก็การใช้ long form writing เนี่ย
พูดในตรงเมื่อกี้ไปแล้ว มันจะทำให้

00:18:27.000 --> 00:18:33.233
ทุกคนเข้าใจคุณได้ง่ายมากขึ้น
เพราะว่าการที่คุณเขียนออกมาเป็น long form
มัน force ให้คุณพยายามที่จะคิด

00:18:33.300 --> 00:18:40.233
ออกมาเป็นรูปเป็นร่างใช่ไหม ไม่ใช่ว่าแบบ
บางทีการมาพูดอย่างเนี้ย การประชุมกัน
การพูดกันก็พูดเป็นเรื่อยอะ

00:18:40.300 --> 00:18:43.933
พูดน้ำไหลไฟดับวนเป็นเรืออยู่

00:18:44.000 --> 00:18:48.133
ครึ่งชั่วโมงแล้วก็วนเรื่องเดิมอะไรอย่างงี้
แต่การที่เขียนออกมาเป็น long form writing
มัน force ให้แบบ

00:18:48.200 --> 00:18:55.133
อะไรบางอย่างที่มันแบบขยุกขยิกอยู่ในหัวคุณ
เอาออกมาให้มันเป็นรูปเป็นร่าง
การที่เขียน long form writing มันทำให้

00:18:55.200 --> 00:19:01.033
คนที่อยู่อีกฝั่งหนึ่งสามารถรับสารของคุณ
ได้ง่ายกว่าด้วยครับผม

00:19:01.100 --> 00:19:07.833
พยายามใส่ context เข้าไปเยอะๆ อย่าไป assume
ว่าทุกคนรู้หมดแล้ว บางทีเรื่องที่มันแบบโง่ๆ

00:19:07.900 --> 00:19:13.333
ใส่ context ไปให้ก็ได้
ก็ไม่ใช่ว่าทุกคนจะรู้ทุกเรื่อง เรามาทำงานกัน

00:19:13.400 --> 00:19:17.233
บางคนก็ไม่รู้เรื่องนี้ บางคนก็ไม่รู้เรื่องนั้น
เพราะฉะนั้นเวลาพูดถึงอะไรบางอย่าง

00:19:17.300 --> 00:19:20.833
ใส่ context เข้าไปเยอะๆ เลย
ผมพูดถึงเรื่องนี้ ยัด screenshot เข้าไป

00:19:20.900 --> 00:19:27.833
เขียน form เสร็จไม่พอ ยัด screenshot เข้าไป
อัดวิดีโอเข้าไปด้วย ผมหมายถึงตรงนี้ ใช่ไหม
บางทีการคุยถึงเรื่อง interaction เนี่ยยาก

00:19:27.900 --> 00:19:33.333
อย่างสมมติให้ไอ้เฟิร์สมันเขียนเป็น form ยาวๆ
อธิบายว่าเมื่อกี้ผมทำอะไร มันอาจจะยาก

00:19:33.400 --> 00:19:39.133
แล้วก็ default เป็น long form ไว้ก่อน
เพื่อให้คนสามารถทำความเข้าใจได้
แต่ใส่ context เข้าไปเยอะๆ

00:19:39.200 --> 00:19:43.033
ด้วยอย่างนู้นด้วยอย่างนี้ด้วยอย่างนั้น
ประมาณนี้นะครับผม

00:19:43.100 --> 00:19:46.633
แล้วก็อันนี้เป็นอีก culture หนึ่งของเรา
ก็คือ work in the open

00:19:46.700 --> 00:19:51.833
เนื่องด้วยว่าทุกคนก็แทบไม่เจอกันอยู่แล้ว
การที่ทุกคนทำงาน

00:19:51.900 --> 00:19:55.333
work in the dark อยู่แล้วอะ
คือเราไม่เห็นเลยว่าเพื่อนเราทำอะไรอยู่ถูกไหม

00:19:55.400 --> 00:20:00.233
ดังนั้นการที่ work in the open มันบังคับให้คุณ

00:20:00.300 --> 00:20:06.533
ระวังมากๆ เช่นแบบว่า

00:20:06.600 --> 00:20:12.133
ประมาณว่ายังไงไม่ทำให้คุณ
ทำงานผิดพลาดอะไรประมาณเนี้ย

00:20:12.200 --> 00:20:19.133
แทนที่เราอยู่เงียบๆ คนเดียว สมมติเราทำงาน
เงียบๆ คนเดียว ไม่ได้สื่อสารกับใคร
อีกหนึ่งอาทิตย์ออกมาแล้วบอกว่า

00:20:19.200 --> 00:20:25.233
ติดมากเลยครับผม อีกอาทิตย์หนึ่ง
หนึ่งอาทิตย์ที่ผ่านมางานที่ทำมาต้องโยนทิ้ง
มันก็ไม่เวิร์กถูกไหม

00:20:25.300 --> 00:20:32.933
เพราะฉะนั้นเราก็ควรจะทำทุกอย่างใน open

00:20:33.000 --> 00:20:40.433
แล้วก็ communicate progress ใน open เหมือนกัน
อย่างในบริษัทนี้ก็มี

00:20:40.500 --> 00:20:43.933
มันจะมี pod channel แล้วก็มี

00:20:44.000 --> 00:20:50.933
weekly update ทุกๆ อาทิตย์ แต่ละทีมก็จะมาเขียน
update ว่า project ที่แต่ละคนเขาทำกันไป
มันไปถึงไหนแล้ว

00:20:51.000 --> 00:20:57.833
อะไรดีบ้าง อะไรไม่ดี อะไรเป็นยังไง
เพราะเราทำสิ่งเหล่านี้ มันจะเกิด

00:20:57.900 --> 00:21:02.933
มันจะเกิด surface area ที่ให้ทุกคนสามารถ
เข้ามา contribute feedback ได้

00:21:03.000 --> 00:21:07.333
อันนี้ก็เป็นสิ่งที่สำคัญมากเพราะว่าเราทำงาน
ต้องการ feedback มา iterate

00:21:07.400 --> 00:21:11.233
ใช่ไหมครับ ไม่ใช่ว่าแบบเราทุกคนจะเขียนงาน
ออกไปแล้วมันดีเลย

00:21:11.300 --> 00:21:14.933
การทำงานมันเป็นการทำงานร่วมกันกับหลายๆ คน
ไม่ใช่การทำงานคนเดียว

00:21:15.000 --> 00:21:21.933
เพราะฉะนั้นการที่เราสร้าง surface area
work in the open คนอื่นที่เขามาเห็น
เขาอาจจะ spot ได้ว่าแบบ เฮ้ย

00:21:22.000 --> 00:21:28.733
ตรงนี้เคยมีคนอาจจะทำ util ไว้แล้วอันหนึ่งนะ
คุณไม่ต้องเขียนซ้ำอะไรประมาณนี้ หรือว่ามีคนบอกว่า

00:21:28.800 --> 00:21:35.133
คนอีกทีมนึงเขากำลังมา address ปัญหานี้อยู่
เออ ลองไปคุยกันไหม ลองไปจอยกันว่า
มีแบบ solution อะไร

00:21:35.200 --> 00:21:43.933
สามารถ middle ground สามารถ compromise
ซึ่งแบบ มันทำให้มันอาจจะ resolve ทั้งสองอันนี้
อาจจะประหยัดกว่าอะไรประมาณนี้ครับ

00:21:44.000 --> 00:21:46.733
แล้วก็อันนี้เริ่ม

00:21:46.800 --> 00:21:51.833
สายแล้วเดี๋ยวเราไปเร็วๆ นะครับ
ก็ culture และก็ process ก็สั้นๆ จริงๆ อันนี้

00:21:51.900 --> 00:21:56.933
อันนี้เป็นอะไรที่สำหรับผมว้าวมาก one-on-one เนี่ย
คือของผมเป็นปัญหาคือ

00:21:57.000 --> 00:22:04.033
manager ผมเนี่ยอยู่ใน time zone ที่แบบ US อะ
แล้วตลอดประมาณ 5-6 เดือนเนี่ย

00:22:04.100 --> 00:22:09.933
เจอกัน 2 ครั้ง ผมก็แบบเครียดมาก
ช่วงนึงเครียดมาก

00:22:10.000 --> 00:22:13.633
เราทำงานดีป่ะวะ เราจะแบบว่าเราจะโดนปลิว

00:22:13.700 --> 00:22:17.933
ไปเมื่อไหร่ไหมวะ อะไรอย่างนี้
แต่ว่าพอมี one-on-one ปุ๊บ

00:22:18.000 --> 00:22:24.933
พอเขาเริ่มมาเซต one-on-one มาจริงๆ
พอเริ่มมาคุยอย่างเนี้ย ก็ทำให้แบบ
ผมเองเรารู้สึกว่า เออ ที่จริงที่ผ่านมาเราคิดไปเองว่า

00:22:25.000 --> 00:22:29.833
เวลาเราคิดอะไรไปเอง พยายามที่จะขอ one-on-one เลย
แม้แต่เขาไม่มี

00:22:29.900 --> 00:22:35.133
พยายามขอ one-on-one เลย จัด one-on-one
กับ manager ก็ได้ หรือจัด one-on-one
กับคนที่ senior กว่าก็ได้ เพื่อแบบขอ feedback เลย

00:22:35.200 --> 00:22:38.333
อย่างผมก็ one-on-one แล้วก็ขอ feedback ว่า
เอ้อเนี่ย คิดว่า

00:22:38.400 --> 00:22:42.433
ผมเองทำงานเป็นยังไง มีปัญหาไหม
เพราะเค้าบอกว่าจริงๆ ไม่มีปัญหา

00:22:42.500 --> 00:22:47.833
ชีวิตดีเลยอะ คือแทนที่เราแบบตัวเองมานั่งเครียด
ไปเองว่าแบบ เฮ้ย เราทำงานอยู่กับแบบ

00:22:47.900 --> 00:22:51.733
คนที่แบบเก่งๆ อย่างเนี้ย แล้วเรา doubt ตัวเองอะ
การที่เรา doubt ตัวเองมันทำให้แบบ

00:22:51.800 --> 00:22:55.233
เหมือนกดตัวเองต่ำ เพราะเรารู้สึกตัวเล็กเนี่ย
เราก็ทำงานมาไม่ดีไหมครับ

00:22:55.300 --> 00:23:01.433
เราก็ต้อง มีอะไรสงสัย อย่าคิดไปเอง ถามนะครับ

00:23:01.500 --> 00:23:05.933
แล้วก็เรามีสิ่งที่เรียกว่า guild
อันนี้ก็ค่อนข้าง inspire มาจาก Spotify เหมือนกัน

00:23:06.000 --> 00:23:11.933
เนื่องจากว่า pod เนี่ยเป็น cross-functional team
ถูกไหม คือแต่ละทีมเนี่ย self-sufficient สามารถ

00:23:12.000 --> 00:23:18.233
ทำงาน product ของตัวเองไปได้ตั้งแต่ต้นน้ำยันปลายน้ำ
มี product designer มี

00:23:18.300 --> 00:23:24.033
product manager, engineer, frontend, backend
แต่ว่า guild เนี่ยคือ

00:23:24.100 --> 00:23:28.433
คือคนที่อยู่ในฟังก์ชันงานเดียวกัน เช่น front-end

00:23:28.500 --> 00:23:33.333
ก็คือมันจะมี ตอนนี้มี 2 guild มี front-end guild
กับ back-end guild คนที่อยู่ใน

00:23:33.400 --> 00:23:36.833
work function เดียวกันก็จะเข้ามา guild meeting
เพื่อคุยกับเรื่องต่างๆ

00:23:36.900 --> 00:23:43.333
ในเกี่ยวกับ work function ตัวเอง
อย่างเช่น front-end ก็มีคุยถึงเรื่อง front-end
ทั่วไปอะไรอย่างเงี้ยครับ เพื่อให้เรียกว่าไง

00:23:43.400 --> 00:23:48.533
เพื่อให้ช่วยกันพัฒนาตัวเอง
การที่คนอยู่ในฟังก์ชันเดียวกัน

00:23:48.600 --> 00:23:55.033
เรียกว่าไง rate หรือว่าให้ feedback กันเอง
มันดีกว่าให้คนคนละฟังก์ชันมาให้ feedback

00:23:55.100 --> 00:24:00.333
เพราะว่า feedback ที่ดีที่สุด ไม่ใช่ว่าไม่ดีนะ
คือคน cross-functional feedback ก็ดี

00:24:00.400 --> 00:24:05.633
feedback ที่ดีที่สุดกับตัวเราคือมาจากฟังก์ชันเดียวกัน
อย่างเช่นเราเป็น engineering อยากพัฒนา

00:24:05.700 --> 00:24:12.533
การเขียนโค้ดใช่ไหม ให้ designer มาให้ feedback
ก็ไม่ได้ถูกไหม ประมาณนั้นเนอะ

00:24:12.600 --> 00:24:23.233
แล้วก็ hiring อันนี้ผมว่าเป็นอะไรที่ว้าวเหมือนกัน
ของ Metabase เขาบอกว่า- แป๊บนึง

00:24:23.300 --> 00:24:27.633
เขาบอกว่าเรา "hire for strength,
not lack of weaknesses"

00:24:27.700 --> 00:24:34.633
ก็คือเวลาเราจ้างคน เราดูว่าคนนั้นเขาเก่งอะไร
เราก็จ้างเขา ไม่ใช่ว่าเราจ้างเพราะว่า

00:24:34.700 --> 00:24:38.633
คุณเป็นคนแบบไม่มี weakness อะไรเลยอะ
ไม่ใช่มีคนเป็นกลางๆ

00:24:38.700 --> 00:24:43.833
คือไม่ได้บอกว่ากลางๆ ไม่ดีนะ
แต่บอกว่าอันนี้คือแชร์ว่าอันนี้เป็นเหมือนแบบ

00:24:43.900 --> 00:24:49.533
mindset ที่เขาใช้หาคน ว่าแบบเออเขาอยากหาคน
ที่แบบมี strength อะไรบางอย่างเนี้ย

00:24:49.600 --> 00:24:54.633
คือคุณจะกากอะไรก็ได้ แต่คุณต้องมีเทพ
อะไรบางอย่างอะไรประมาณนี้

00:24:54.700 --> 00:24:59.733
แล้วด้วยการที่เขาจ้างคนแบบเนี้ย
ส่วนใหญ่เขาจะจ้างที่ผมเจอนะ
เขาจะจ้างแต่ senior นั้นเลย

00:24:59.800 --> 00:25:05.933
เพราะว่าสิ่งที่เขาให้กับคนในบริษัทนี้คือ autonomy
autonomy ก็คือ

00:25:06.000 --> 00:25:09.833
แปลเป็นไทยว่าอะไรไม่รู้
แต่คือมันคือเขาให้ทุกอย่างกับคุณอะ

00:25:09.900 --> 00:25:13.933
คุณอยากทำงานกี่โมงก็ได้ คุณอยากลากี่วันก็ได้
วันหยุดไม่นับกัน

00:25:14.000 --> 00:25:18.833
คุณอยากวันไหนไม่เอาทำงาน
อยากจะไปข้างนอกไปทำธุระอะไรอย่างนี้ก็ได้

00:25:18.900 --> 00:25:22.733
แต่ว่าสิ่งเดียวที่คุณต้องทำคือ
คุณต้องรับผิดชอบงานของคุณ

00:25:22.800 --> 00:25:26.533
communicate อะไรไปต้องทำให้ได้
สิ่งนี้คือเรียกว่า autonomy

00:25:26.600 --> 00:25:30.133
ก็คือผมชอบ manager ผมพูดคำนึงมากเลยว่า
แบบเข้ามา

00:25:30.200 --> 00:25:35.433
we are all grown-ups เราโตๆ กันแล้ว ทำงาน
แบบคนโตๆ กันแล้ว ดูแลตัวเองนะ อะไรประมาณนี้

00:25:35.500 --> 00:25:42.033
ก็แบบเจ๋งดีว่ะ คือบริษัทผมแทบไม่ค่อยมี junior
ที่ต้องเข้ามา

00:25:42.100 --> 00:25:50.133
คอย coach คอยอะไรอย่างเนี้ย
ถ้าไม่มีเลยส่วนใหญ่มันจะเป็น senior มากกว่า
อันนี้ก็บอกว่าวิธีการ hiring ของ Metabase เป็นแบบนี้

00:25:50.200 --> 00:25:58.533
จบครับ Q&A จริงๆ ครึ่งชั่วโมงพอดีเลย
อยากจะไปให้เร็วกว่านี้ แต่ว่าก็ประมาณนั้นแหละ
ใครมีคำถามไหมครับ

00:25:58.600 --> 00:26:05.533
ก็คือเมื่อกี้คำถามคือขยายความ async communication
ให้หน่อยใช่ไหม synchronous แปลว่าอะไร
synchronous แปลว่าพร้อมๆ กัน

00:26:05.600 --> 00:26:09.033
asynchronous แปลว่าอะไร แปลว่าไม่พร้อมกัน

00:26:09.100 --> 00:26:13.133
asynchronous communication แปลว่า communication
ที่เกิดเมื่อตอนที่ไม่พร้อมกัน

00:26:13.200 --> 00:26:17.833
เช่น ผมพูดวันนี้ปุ๊บ มี Facebook Live
พรุ่งนี้มีคนมาดู

00:26:17.900 --> 00:26:21.833
asynchronous communication แต่ว่าถ้าเกิดว่าวันนี้ผม

00:26:21.900 --> 00:26:30.533
ทุกคนเข้ามาดูคุยกับผม คุณสามารถถามคำถามได้
เป็น synchronous communication ประมาณนี้ครับ

00:26:30.600 --> 00:26:37.133
เพราะว่าผมเห็นว่าปัญหาจากการที่ทำ time zone
มันต่างกันอย่างเงี้ย แล้วใช้วิธีนี้คือ

00:26:37.200 --> 00:26:41.433
มันโต้ตอบยากซึ่งอย่างที่บอกว่าเราใช้เรื่อง

00:26:41.500 --> 00:26:47.433
long form writing เป็นการแก้ปัญหานี้เป็นหลักเลย
ใช่ไหมครับ / ใช่ครับ

00:26:47.500 --> 00:26:51.433
ผมลองถามให้คิดแล้วกันว่าถ้าเกิด

00:26:51.500 --> 00:26:57.033
บริษัทผมลองคิดภาพด้วย context แบบนี้ที่พูดมา
แล้วทุกคนทำงานแบบ synchronous

00:26:57.100 --> 00:27:03.933
ต้องมี engineering ทุกคนที่เป็น front-end
ต้องมาประชุมพร้อมกัน
ลองจินตนาการว่ามันจะเกิดปัญหาอะไรได้บ้าง

00:27:04.000 --> 00:27:07.533
ก็ลองไปคิดดู อย่างผมเองผม suffer มาก

00:27:07.600 --> 00:27:13.733
ส่วนใหญ่ที่เขามีมีตติ้งกัน เขามีมีตติ้งกันตี 1 ตี 2
ไง ผมเข้าไม่ไหวนะ ใช่ไหม อันนี้ก็เป็น pain point หนึ่ง

00:27:13.800 --> 00:27:18.733
การที่เราไป favor time zone หนึ่ง บุ๊บ
อีก 3 โซนหนึ่งก็ suffer เพราะฉะนั้นมัน force ให้มัน

00:27:18.800 --> 00:27:26.333
เป็น synchronous ทั้งหมดไม่ได้อยู่แล้ว
ถ้าเกิดว่าเรา hire globally แบบนี้ครับ คำถามดีครับ

00:27:26.400 --> 00:27:32.833
แล้วที่ synchronous นี่มีประมาณกี่เปอร์เซ็นต์ครับ
แล้วทำอะไรกันบ้าง

00:27:32.900 --> 00:27:38.433
ที่อยากรู้ว่าแบบอะไรที่เห็นหลายๆ บริษัท
เขา synchronous กันแล้ว

00:27:38.500 --> 00:27:43.433
แล้วสุดท้ายมันเป็น asynchronous ก็ได้
แล้วก็อันไหนที่มันควรจะ sync จริงๆ

00:27:43.500 --> 00:27:49.333
ครับ ก็คือจริงๆ ส่วนใหญ่เรียกว่าโดย nature
เป็น asynchronous หมดเลยดีกว่า

00:27:49.400 --> 00:27:52.933
แต่ว่า synchronous เนี่ย ส่วนใหญ่จะมีพวก

00:27:53.000 --> 00:27:57.433
อย่างของผม pod หนึ่ง ทำงานเป็น cycle แล้ว 2 เดือน

00:27:57.500 --> 00:28:02.333
ทุกๆ อาทิตย์เราก็จะมีมาคุยกันว่า progress
เป็นยังไง อันนี้เป็น synchronous

00:28:02.400 --> 00:28:05.833
ก็คือเหมือนแบบเรียกว่าแบบแชร์ progress กัน

00:28:05.900 --> 00:28:11.733
เหมือนแบบเขาเรียกว่าอะไรวะ daily stand-up meeting
จะเป็นแบบ weekly stand-up meeting
อะไรประมาณนั้น

00:28:11.800 --> 00:28:18.733
คือผมมองว่าอันนี้มันดี มันคุยกันไม่นานเกินไป
เพราะว่าจริงๆ ระหว่างอาทิตย์เรามีการเขียน

00:28:18.800 --> 00:28:24.333
จริงๆ daily stand-up meeting เราไม่มี
แต่เราเขียนทุกวันว่าวันนี้เราจะทำอะไร
วันนี้เราทำอะไร

00:28:24.400 --> 00:28:27.933
ได้บ้าง เขาจะเรียกว่า start of day
วันนี้คุณอยากทำอะไร

00:28:28.000 --> 00:28:33.033
แล้วก็ end of day วันนี้คุณเสร็จอะไรบ้าง
บางคนก็อาจจะเขียนว่าเสร็จอันนี้นี่นั่น
ติดปัญหานู่นนี่นั่น

00:28:33.100 --> 00:28:39.933
เพราะฉะนั้นระหว่างทางมันมี async มาเยอะๆ
อยู่แล้ว แล้วก็ทุกๆ อาทิตย์เราก็มาคุย
synchronous กันทีนึง

00:28:40.000 --> 00:28:45.833
แต่ก็ต้องบอกอีกว่าอย่างผมเป็นแค่ engineer
ผมอาจจะมี synchronous meeting น้อยกว่าคนอื่น

00:28:45.900 --> 00:28:52.133
คนอื่นที่เลเวลสูงกว่าก็จะมีคุย อาจจะคุยกับ
management ข้างบน มันมี meeting อื่นๆ เอง

00:28:52.200 --> 00:28:59.133
ที่ผมไม่ได้เข้า / มีคำถามต่อไปนิดหนึ่งครับ

00:28:59.200 --> 00:29:06.033
เรื่องโค้ดรีวิวนี่ก็คือต้องรอนานไหมครับ
ถ้ามันหลาย time zone แล้ว

00:29:06.100 --> 00:29:11.733
มันเป็น pain ไหม เรื่องโค้ดรีวิว
เพราะบางทีพอ asynchronous แล้ว
ผม submit โค้ดไป สมมติว่า

00:29:11.800 --> 00:29:17.033
ต้องรอ 1 วันกว่าจะ merge ได้
มันมี pain อะไรแบบนั้นไหม หรือว่าแก้กันยังไงครับ

00:29:17.100 --> 00:29:23.833
มันก็มี pain ครับ
คือไม่ใช่ว่าทุกคนเขาจะมารีวิว PR เป็นปกติ

00:29:23.900 --> 00:29:30.233
เท่าที่ผมลองสังเกตดูว่า จะมีแค่บางคนที่ชอบรีวิว
PR เยอะมากๆ

00:29:30.300 --> 00:29:37.233
คือมันจะมีทุกๆ อาทิตย์อะ เราก็จะแบบส่ง
Metabase มันจะส่งเหมือนแบบ

00:29:37.300 --> 00:29:43.933
digest มาว่าเราก็จะเห็นว่าคนนี้รีวิว approve ไป
20-30 อัน บางคนอาจจะไม่ approve เลย

00:29:44.000 --> 00:29:51.233
เพราะฉะนั้นมันก็จะมีบางคนที่คอยช่วยรีวิวโค้ด
ให้คนอื่นอยู่

00:29:51.300 --> 00:29:57.833
แต่ว่า pain มันก็มีแหละ ที่ผมเห็นส่วนใหญ่คือ
ถ้าเกิด PR ใหญ่มากๆ แทบไม่มีใครรีวิวเลย

00:29:57.900 --> 00:30:01.933
พอแบบเกิน 200-300 ไลน์อะไรอย่างเงี้ย

00:30:02.000 --> 00:30:06.333
เห็นวันนี้หรือเปล่านะที่เห็นใครแชร์
พี่แม็กซ์หรือเปล่า จำไม่ได้

00:30:06.400 --> 00:30:10.433
PR ยาวๆ มากๆ อย่างเนี่ย คือพอ PR อย่างเนี่ย
ผมเห็นผมปิดแล้วอะ

00:30:10.500 --> 00:30:17.433
แต่สมมติน้องไท submit PR มา +20 -20
อะไรอย่างเงี้ย มันก็แบบน่ารีวิวถูกปะ

00:30:17.500 --> 00:30:23.533
เราก็ไม่อยากให้ PR มันค้าง ผมอะคือผมเข้าไปปุ๊บ
ผม sort แล้วผมจิ้มๆ มีอะไรต้องรีวิวบ้าง

00:30:23.600 --> 00:30:27.033
แล้วก็เอาน้อยสุดไว้ข้างหน้า รีวิวน้อยสุดก่อน

00:30:27.100 --> 00:30:31.533
เพราะฉะนั้นถ้า pain เนี่ย เท่าที่ผมเห็นนะครับ
ส่วนใหญ่จะเป็น PR ที่มันยาวๆ

00:30:31.600 --> 00:30:36.733
ก็คือถ้า PR ใหญ่ก็รับกรรมไปอะไรประมาณนั้นแหละครับ
ประมาณนั้นนะครับ ใช่ แต่คือมัน

00:30:36.800 --> 00:30:43.533
ผมมองว่าบางทีมันก็ห้ามกันไม่ได้ คือปัญหาบางอย่าง
มัน complex มันก็ต้องยาวใช่ไหมครับ

00:30:43.600 --> 00:30:49.133
PR ยาว แล้วก็ถ้าเกิดว่ามันนานเกินไป เรียกว่าคน

00:30:49.200 --> 00:30:54.833
เปิด PR ก็ต้องดูแลตัวเอง เราก็ไปปิงในห้อง
engineering ใช่ไหม อันนี้คือ work in the open

00:30:54.900 --> 00:31:01.033
เราก็ work in the open ว่านี่ตั้ง 3 วันแล้ว
ไม่มีใครมารีวิวของเราเลย ช่วยไปรีวิวหน่อย

00:31:01.100 --> 00:31:05.633
ก็ใช้วิธีแบบนี้ ไม่ใช่ว่าแบบเปิดไปแล้ว
เดี๋ยวก็มีคนมา review เองแหละ

00:31:05.700 --> 00:31:12.533
- ก็คือเจ้าของ PR ก็ต้องคอย ping ถ้าเริ่มรู้สึกว่านานเกินไปแล้ว
- ใช่ คือเราก็ต้อง ask for help เราก็ต้องรู้ว่าเมื่อไหร่ที่แบบ

00:31:12.600 --> 00:31:19.433
- จมน้ำแล้ว เราต้องไปต่ออะไรแบบเนี้ย
- แต่มัน mandatory ใช่ไหมครับ คือต้องมีรีวิว ก่อนมันถึงจะ merge ได้

00:31:19.500 --> 00:31:22.933
- ถ้าไม่มีรีวิวจะไม่ merge ครับ
- อ๋อครับ เพราะผมเห็นบางเจ้า

00:31:23.000 --> 00:31:27.933
ที่เขาทำ continuous delivery กันโหดๆ
เขาก็บอกว่า

00:31:28.000 --> 00:31:31.433
คุณ pair programming กันสิ เวลา commit ปุ๊บ

00:31:31.500 --> 00:31:38.133
15 นาทีขึ้น production อะไรแบบนี้ ก็ได้ครับ
บางทีก็สับสนข้างในว่าโอเค

00:31:38.200 --> 00:31:41.633
- แบบแต่ละแบบเป็นยังไง
- จริงๆ ก็คือ give context อย่างนี้

00:31:41.700 --> 00:31:48.633
เนื่องด้วยจริงๆ เอ็นจิเนียร์ยังถือว่าน้อย 30 คนทั่วโลก
มันแบบโอกาส pair อย่างผมมีโอกาส pair กับใคร

00:31:48.700 --> 00:31:52.333
แทบไม่มีแหละ มันน้อยมาก ก็แบบไม่ได้เป็น default
แบบเรา

00:31:52.400 --> 00:31:59.333
เข้ามาออฟฟิศเดียวกัน แล้วก็ทำงานด้วยกัน
แล้วก็พูดไปได้ มันก็ดีอย่างเสียอย่าง
อะไรประมาณนี้ครับ

00:31:59.400 --> 00:32:02.033
ขอบคุณมากครับ

00:32:02.100 --> 00:32:08.233
มีคำถามอีกไหมครับ เราจำเป็นต้องอ่าน
long form writing ของทุกคนไหมครับ
หรือว่าอ่านแค่เฉพาะที่เกี่ยวกับเรา

00:32:08.300 --> 00:32:15.033
อันเฉพาะที่เกี่ยวกับเราแล้วก็เราสนใจครับ
คือมันเป็นไปไม่ได้เลยที่เราจะรู้ everything ในบริษัท

00:32:15.100 --> 00:32:19.733
คำถามคือ ทำได้ไหม ทำได้
แต่คำถามคือคุ้มไหม

00:32:19.800 --> 00:32:26.733
สมมติเราไปอ่าน discussion ของ product manager
หรืออ่าน discussion ของ designer
โดยที่เราเป็น engineer

00:32:26.800 --> 00:32:33.733
คำถามคือคุ้มเวลาเราไหม เวลานั้นมันเอาไปทำ
อย่างอื่นได้ไหม ไม่ใช่ว่าทุก problem worth solving

00:32:33.800 --> 00:32:40.733
กลับไปที่อันแรกประมาณนั้น ก็เราก็อาจจะอ่าน
เฉพาะอันที่เราสนใจ เช่นแบบว่าตรงนี้มันเป็น
ดีไซน์เกี่ยวกับ

00:32:40.800 --> 00:32:45.433
area ที่เราทำอยู่พอดี มันคล้ายๆ กันอะไรอย่างนี้
เราก็เข้าไปอ่าน

00:32:45.500 --> 00:32:49.633
เป็นเรื่องที่ดีแต่ก็ต้อง weigh กันนะครับ
ต้องบาลานซ์ว่า

00:32:49.700 --> 00:32:56.433
เราอยากจะไปอ่านอะไรของใครบ้าง ส่วนใหญ่ผมก็อ่าน
แค่ weekly update คร่าวๆ เพื่อไม่ให้มันเสียเวลามาก

00:32:56.500 --> 00:33:05.133
ไม่งั้นถ้าตามอ่านของคนอื่น ผมว่าผมสามารถอ่านได้
ทุกวัน โดยไม่ต้องโค้ดเลยก็ได้ มันมีเยอะมาก

00:33:05.200 --> 00:33:12.133
แล้วเวลาบางทีถ้ามันสำคัญที่ต้องการ opinion ของเรา
คนอื่นจะแท็กเรามาเองเหมือนกัน เพราะว่ามันเป็น

00:33:12.200 --> 00:33:15.233
culture ของการ work in the open ใช่ไหมครับ

00:33:15.300 --> 00:33:24.333
เราก็ต้อง state ไปเลย ผมทำงานนี้อยู่
ผมต้องการ input ผมต้องการ feedback จากคุณ
1 2 3 4 5 อะไรอย่างนี้ประมาณนี้

00:33:24.400 --> 00:33:29.533
- rate หมายถึงเงินเดือนใช่ไหมครับ
- ใช่ หมายถึงว่าเราทำงานอยู่ที่นี่ คนอื่นทำงานอยู่ที่นั่น

00:33:29.600 --> 00:33:33.033
- rate มันใกล้ๆ กันไหม
- ผมไม่ทราบครับ

00:33:33.100 --> 00:33:39.233
แต่สามารถแชร์ได้ว่ามันเป็น public ว่า
average salary ประมาณ 400,000 บาทครับ

00:33:39.300 --> 00:33:46.433
- ต่อเดือนเหรอครับ
- ครับ มันมีตัวเลขตัวเลขนี้ แต่เพราะผมไม่รู้ว่าคนอื่นได้เท่าไหร่

00:33:46.500 --> 00:33:50.833
ผมเดาว่าจริงๆ ปกติเวลาจ้างเนี่ย

00:33:50.900 --> 00:33:54.633
มัน per area อยู่แล้วอะ เท่าที่ผมเห็นอะนะ

00:33:54.700 --> 00:34:01.033
ก็คือโซนแถวๆ เราก็คงได้ต่ำๆ หน่อยครับ

00:34:01.100 --> 00:34:06.333
อยากให้ลิสต์บริษัทที่คล้ายๆ กับ Metabase
คล้ายๆ ในแง่ครับ remote

00:34:06.400 --> 00:34:09.632
งาน remote

00:34:09.699 --> 00:34:14.533
เอาจริงๆ ถ้าจริงๆ ผมหางาน remote
ผมอันดับแรกเลยที่ผมดูคือ GitLab

00:34:14.600 --> 00:34:23.533
GitLab ครับ แล้ว GitLab ทำผมไปแสบมาก
เรียกผมไปสัมภาษณ์แล้วบอกว่าขอโทษครับ
รับคนไทยไม่ได้

00:34:23.600 --> 00:34:29.333
เราชอบคุณมากเลยนะแต่เรารับคนไทยไม่ได้
เพราะเราไม่มี entity ในไทย ผมก็เลยบายจ้ะ

00:34:29.400 --> 00:34:34.632
จริงๆ มันมีเว็บชื่ออะไรนะ ผมไม่แน่ใจ

00:34:34.699 --> 00:34:41.632
Remote OK อะไรประมาณนี้ คือมันเป็นเหมือนพอร์ทัล
ของเว็บที่รวม remote job อะไรอย่างนี้ครับ
ลองเข้าไปดูได้

00:34:41.699 --> 00:34:46.933
แต่ว่าเอาจริงๆ นะ อันนี้เป็นแชร์เทคนิค
ในการหางานส่วนตัวนะ

00:34:47.000 --> 00:34:51.132
ชอบโปรดักต์ไหนเข้าไปแล้วก็สมัครอันนั้น
คือมันถ้าแบบ

00:34:51.199 --> 00:34:56.933
ผมมองว่าการที่เรามี passion กับอะไรบางอย่าง
มันทำให้เราเข้าไปทำมันสุด

00:34:57.000 --> 00:35:03.433
เหมือน Metabase ผมเห็นเข้าไปแล้วว่า UI สวย
อันดับแรกเลย UI สวย แล้วมันดูง่าย มันเรียกว่าไง

00:35:03.500 --> 00:35:09.133
values มันคลิกกันอะ เพราะเข้าไปทำงานแล้ว
มันมีความสุขมาก มันไม่ใช่ว่าเหมือนทำไปเฉยๆ
อะไรอย่างเนี้ย

00:35:09.200 --> 00:35:16.133
อย่างเช่นใช้อะไรอะ ใช้ Figma ใช้ VS Code
ใช้ MUI อะไรอย่างเงี้ย ไปสมัคร ลองไปสมัครดู

00:35:16.200 --> 00:35:20.333
อันนี้เป็นเทคนิคของงานของผม ชอบ tool อะไร
สมัครไปเลย

00:35:20.400 --> 00:35:30.333
แล้วก็ไปดูว่าเขามี remote หรือเปล่า
ถ้าไม่มีก็หาไปเรื่อยๆ Reddit อะไรอย่างนี้
พวกนี้ก็มีนะ Reddit, Discord อะไรพวกนี้ครับ

00:35:30.400 --> 00:35:36.533
ก็ถ้าไม่มีแล้วก็คงประมาณนี้มั้งครับ
ก็อยากมาแชร์ประสบการณ์

00:35:36.600 --> 00:35:43.533
ตั้งแต่ทำงานมา 8 ปี ไม่ค่อยรู้จักใครที่ทำ
open source เลยนะครับ จริงๆ เพิ่งมารู้จัก
น้องจุ้นก็ไม่นาน

00:35:43.600 --> 00:35:47.733
น้องจุ้นได้ทำงานที่ MUI มันก็เป็น open source
เหมือนกัน

00:35:47.800 --> 00:35:54.033
เขาทำก่อนผม แล้วผมก็เพิ่งมาทำ Metabase ได้
ประมาณเกือบ 1 ปีแล้ว ผมพึ่งมองว่ามันเป็น
อะไรที่แบบ

00:35:54.100 --> 00:36:01.433
ว้าวดีอะนะ เราทำงาน เราทำโปรเจกต์ที่มันเป็น
open source ด้วยแล้วมันทำเงินได้ด้วย
อะไรอย่างนี้ครับ มันว้าวมาก

00:36:01.500 --> 00:36:07.033
ก็ขอบคุณทุกคน และขอบคุณทุกคำถามนะครับ
ก็เดี๋ยวคืน

00:36:07.100 --> 00:36:13.033
เซสชันให้กับออร์แกไนเซอร์แล้วกันเนอะ
ขอเสียงปรบมือด้วยครับ

00:36:13.100 --> 00:36:18.133
มีคำถามเพิ่มครับผม มีคำถามจากทางบ้านครับ

00:36:18.200 --> 00:36:23.633
- PodOS นี่ทำงานกันยังไงครับ
- อ๋อ จริงๆ คือ ตามเมื่อกี้ที่บอกแหละ

00:36:23.700 --> 00:36:29.433
PodOS คือ เรา optimize throughput
คือเราจะไม่แบบมีคน

00:36:29.500 --> 00:36:33.233
ปกติบางที่เขาจะฟอร์ม-
ไม่แน่ใจว่าบางที่หรือหลายที่นะ

00:36:33.300 --> 00:36:37.833
ถ้าเกิดมีพนักงานเยอะๆ เขาก็จะมีทีมที่มัน fixed

00:36:37.900 --> 00:36:41.933
fix อยู่แล้ว แล้วแต่ละทีมอาจจะดูแล area
อะไรบางอย่าง

00:36:42.000 --> 00:36:48.933
ใช่ไหมครับ อาจจะดูแล เช่น เซอร์วิสนี้
หรือว่าพาร์ตของโปรดักต์นี้ ฟีเจอร์นี้
อะไรอย่างนี้ แต่ว่า

00:36:49.000 --> 00:36:53.933
management ที่ Metabase บอกว่า
มองว่าอันนั้นมันไม่ optimize throughput

00:36:54.000 --> 00:36:59.133
มันไม่สามารถทำงานออกมาได้เท่าที่เขาอยากทำ
เพราะฉะนั้นสิ่งที่เขาอยาก

00:36:59.200 --> 00:37:04.033
ก็คือเขาอยากจะให้โปรเจกต์มันเสร็จเยอะมากที่สุด
เขาก็กรุ๊ปมาว่าแบบ

00:37:04.100 --> 00:37:11.033
ช่วงนี้อาจจะมี user request มี bug
มีอะไรมากรุ๊ปมาเป็นเรื่องเดียวกัน
เพราะฉะนั้นเวลาคนไปทำงานในเรื่องนี้

00:37:11.100 --> 00:37:17.133
มันจะเห็นทุกอย่างในภาพรวม ในภาพใหญ่ holistic
ไม่ใช่ว่าแบบ อ่ะ ในทีมๆ นึง

00:37:17.200 --> 00:37:23.233
แยกไปสิ่งๆ หนึ่ง แล้วแบบดูแลแค่ area นั้นเล็กๆ อะ
บางทีมันไม่สามารถ

00:37:23.300 --> 00:37:29.233
สร้าง impact ได้ครับ การที่ทำเป็น PodOS เนี่ย
ทุกอย่างมันกรุ๊ปกัน แต่ละอย่างมัน connect กัน

00:37:29.300 --> 00:37:35.933
บางทีเรา solve อย่างหนึ่งมันไป solve อีก
หลายอย่างได้ อย่างเนี้ย management
เขาเลยมองว่ามัน throughput ดี

00:37:36.000 --> 00:37:39.433
ทำงานประมาณนี้ครับ เน้นจากโปรเจกต์ไว้ก่อน

00:37:39.500 --> 00:37:45.433
ทุกๆ 2 เดือนเขาก็จะสร้างมาว่ามีธีมนี้ ธีมนี้ ธีมนี้
แล้วก็ assign คนลง pod เพราะนั้นคนจะเปลี่ยนไปเรื่อยๆ

00:37:45.500 --> 00:37:50.733
engineer ก็สามารถใส่ input ไปได้นิดนึงว่าแบบ
ผมอยากลองทำอันนี้เนี่ย ลองทำนี้

00:37:50.800 --> 00:37:55.933
อย่างของผมบอกว่าผมอยากทำ visualization
พวกวาดกราฟอะไรอย่างนี้

00:37:56.000 --> 00:38:03.733
ผมก็บอกไปแล้วก็ได้เข้ามาทำ cycle นี้ สนุกดีนะ

00:38:03.800 --> 00:38:15.233
ครับ ขอบคุณพี่เควินมากครับผม

00:38:15.300 --> 00:38:18.933
โอเค ครับ จบแล้ว

00:38:19.000 --> 00:38:25.333
ถ้าเกิดว่าหลังจากนี้ใครอยากรู้เรื่องอะไรเพิ่ม
จริงๆ มีอย่างหนึ่งที่พี่ไม่ได้พูดใช่ไหม
ก็คือเรื่อง

00:38:25.400 --> 00:38:30.433
รายได้ แต่ว่า อ่า ถามแล้วใช่มั้ย
อ๋อ average สี่แสน

00:38:30.500 --> 00:38:38.033
โอเค สุดยอดมาก ผมว่านั่นแหละคือสิ่งที่
เย้ายวนใจ มาลอง

00:38:38.100 --> 00:38:44.633
จริงๆ อยากพูดอย่างหนึ่งคือ ผมก็ไปดู live ของน้องจุ้นเนี่ย
บอก US เงินหนาใช่ไหม

00:38:44.700 --> 00:38:51.633
คือหนาจริงครับ คือทุนหนามาก ยังบริษัทผมเนี่ย
raise funding Series B มา 30 ล้านเหรียญ

00:38:51.700 --> 00:38:57.533
เงินก็ยังเหลืออยู่ แล้วก็รายได้คือรายได้เยอะมากอะ
ผมจำไม่ได้แล้วประมาณ 4 ล้านเหรียญต่อปีมั้งรายได้

00:38:57.600 --> 00:39:02.833
ก็ไปคิดเองเท่าไหร่ จำไม่ได้ 4×3=12, 4×4=16

00:39:02.900 --> 00:39:06.833
แล้วราคา sales คุยกับ sales แล้ว
คนละ job function กัน

00:39:06.900 --> 00:39:13.833
คือถ้าเกิดว่าคุณเข้าไปจอย English Club for
Developer คุณจะมีโอกาสที่จะ

00:39:13.900 --> 00:39:20.033
สมัครงานต่างประเทศได้ เพราะอันนี้จริงเป็น
อันหนึ่งที่ไม่ได้พูด คือถ้าเกิดว่าแบบ
บางทีถึงแม้ว่าคุณเก่งมาก แต่ถ้าเกิดบางทีแบบ

00:39:20.100 --> 00:39:25.133
การสื่อสารมันติดขัดไปนิดนึงอะ
มันทำให้มันเกิด flow ไม่ได้
หรือมันทำให้เกิด product team ไม่ได้

00:39:25.200 --> 00:39:30.233
จริงๆ ผมมองว่ามันเป็นเรื่องที่น่าเสียดาย
ที่ developer เก่งๆ ในไทยหลายคน

00:39:30.300 --> 00:39:37.233
ขาดโอกาสที่จะไปทำงานกับต่างประเทศ
อะไรอย่างเงี้ย เพราะฉะนั้นภาษาอังกฤษ
เป็นอะไรที่สำคัญมากๆ ครับ

00:39:37.300 --> 00:39:39.933
เพราะงั้นก็มาจอยที่ Discord กันนะครับ
