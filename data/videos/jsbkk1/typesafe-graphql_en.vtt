WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:07.530 --> 00:00:12.487
Next is the topic of End-to-end Type-Safe GraphQL Apps

00:00:12.570 --> 00:00:16.117
by Mr. Carlos Rufo from Spain,

00:00:16.200 --> 00:00:19.207
the organizer of GraphQL from Hong Kong.

00:00:19.290 --> 00:00:20.610
So please stay tuned.

00:00:40.440 --> 00:00:42.427
If any one of you would like to talk personally

00:00:42.510 --> 00:00:47.017
to each of the speakers once they finished their sessions,

00:00:47.100 --> 00:00:50.970
they will be standby in the Q&A room.

00:00:51.090 --> 00:00:54.487
The Q&A room is out of the theater,

00:00:54.570 --> 00:00:56.617
turn right and you will see the room, okay?

00:00:56.700 --> 00:00:58.027
Next, ladies and gentlemen,

00:00:58.110 --> 00:01:01.357
a big round of applause to welcome Mr. Carlos Rufo

00:01:01.440 --> 00:01:06.930
from Spain, the organizer of GraphQL from Hong Kong!

00:01:19.800 --> 00:01:20.887
Wow, that's incredible.

00:01:20.970 --> 00:01:23.490
How many people here? That's great.

00:01:25.260 --> 00:01:26.580
How's everyone doing?

00:01:28.080 --> 00:01:28.830
Come on, guys.

00:01:29.400 --> 00:01:30.997
I know this is after lunch and we good,

00:01:31.080 --> 00:01:33.030
but how's everyone doing here?

00:01:34.740 --> 00:01:35.220
What?

00:01:36.060 --> 00:01:37.687
Okay, I have something for you guys today.

00:01:37.770 --> 00:01:41.130
So let me just start here.

00:01:41.310 --> 00:01:43.440
So before introduce myself,

00:01:46.590 --> 00:01:49.537
I really wanna say kudos to JavaScript Bangkok

00:01:49.620 --> 00:01:51.457
and thanks to you all.

00:01:51.540 --> 00:01:54.187
Thanks to speakers, sponsors, organizers,

00:01:54.270 --> 00:01:56.377
but especially to you all because without you,

00:01:56.460 --> 00:01:57.727
we couldn't be here.

00:01:57.810 --> 00:01:59.677
And I don't know if you have realized this yet,

00:01:59.760 --> 00:02:04.627
but I think we are around like 700, 800 people

00:02:04.710 --> 00:02:07.477
gathering together for a JavaScript conference.

00:02:07.560 --> 00:02:09.277
And I think, if I'm not wrong,

00:02:09.360 --> 00:02:13.357
we're in the largest JavaScript conference in Asia.

00:02:13.440 --> 00:02:17.070
So please, a round of applause for everyone of you here.

00:02:22.560 --> 00:02:24.517
So great. A bit about myself.

00:02:24.600 --> 00:02:26.587
So I'm Carlos, I'm a software consultant,

00:02:26.670 --> 00:02:28.687
I'm the GraphQL Hong Kong organizer,

00:02:28.770 --> 00:02:32.160
and last year, I created the SpaceX GraphQL API.

00:02:32.310 --> 00:02:34.890
You can find me on the internet @swcarlosrj.

00:02:35.050 --> 00:02:38.707
I gonna go super quickly with the slides

00:02:38.790 --> 00:02:43.140
and we are gonna just going full in live coding demo.

00:02:43.260 --> 00:02:45.547
So I'm gonna go to a GraphQL intro

00:02:45.630 --> 00:02:48.150
for those that they don't know what is GraphQL yet.

00:02:48.330 --> 00:02:53.077
Then we are gonna see why TypeScript loves GraphQL

00:02:53.160 --> 00:02:57.900
and then we are gonna do a server and client-side live coding.

00:02:58.290 --> 00:02:59.460
But before start,

00:03:00.240 --> 00:03:03.127
I think we like tech and we love stuff,

00:03:03.210 --> 00:03:05.977
but we like to have fun here, right?

00:03:06.060 --> 00:03:07.867
So we are gonna start with some dev jokes.

00:03:07.950 --> 00:03:10.807
So you can go to github.com/shrutikapoor08/devjoke

00:03:10.890 --> 00:03:14.377
and check a lot of super fun jokes.

00:03:14.460 --> 00:03:15.960
So my first question is,

00:03:16.560 --> 00:03:19.590
how do you comfort a JavaScript bug?

00:03:19.710 --> 00:03:21.720
Any guess in the room?

00:03:21.990 --> 00:03:22.680
Nobody?

00:03:23.130 --> 00:03:27.847
So basically, you console it.

00:03:27.930 --> 00:03:30.967
And also we can see this, right?

00:03:31.050 --> 00:03:34.537
Like, you are in your IDE and everything looks great.

00:03:34.620 --> 00:03:36.990
It's Friday, 4 PM, push to production,

00:03:37.200 --> 00:03:39.270
and then you see your CEO is calling you, 7 PM,

00:03:39.420 --> 00:03:42.157
"Hey, man, what's going on here? Runtime error."

00:03:42.240 --> 00:03:45.510
So we are gonna see later in the live coding demo

00:03:45.660 --> 00:03:48.540
that how TypeScript is gonna solve these problems.

00:03:49.020 --> 00:03:50.310
I have another question for you.

00:03:51.060 --> 00:03:54.780
Why do functions always break up?

00:03:56.260 --> 00:03:57.220
Any guess here?

00:03:57.820 --> 00:04:01.930
So basically, because they have constant arguments.

00:04:02.530 --> 00:04:04.450
This is not a good one, yeah.

00:04:04.870 --> 00:04:08.200
And yeah, I couldn't be here without this one.

00:04:08.320 --> 00:04:13.120
I added a joke.

00:04:15.370 --> 00:04:18.190
If you don't find it you can go.

00:04:18.880 --> 00:04:21.467
Okay, and the last joke and then we go through the demo.

00:04:21.550 --> 00:04:24.527
So, what did the developer say to the repository?

00:04:24.610 --> 00:04:26.837
And I'm pretty sure that you guys, you have said this

00:04:26.920 --> 00:04:29.387
to your colleagues a lot of times.

00:04:29.470 --> 00:04:31.300
So, it says, "Fork you."

00:04:31.450 --> 00:04:35.807
Okay, so let's start with an intro to GraphQL.

00:04:35.890 --> 00:04:38.027
I have a question for you all.

00:04:38.110 --> 00:04:39.677
Please raise your hand.

00:04:39.760 --> 00:04:43.367
How many of you have heard or just know about what is

00:04:43.450 --> 00:04:44.050
GraphQL?

00:04:44.410 --> 00:04:45.400
Please raise your hand.

00:04:45.970 --> 00:04:48.107
Okay, I cannot see that much in the top.

00:04:48.190 --> 00:04:51.670
Okay, I will say like a 40%, 50%, which is a lot.

00:04:52.600 --> 00:04:54.917
And now, the second question is like, how many of you

00:04:55.000 --> 00:04:58.097
are working with GraphQL in production in your

00:04:58.180 --> 00:04:58.810
companies?

00:05:00.280 --> 00:05:04.457
Okay, so it's like 20%, yeah, 20% kind of.

00:05:04.540 --> 00:05:06.347
I'm pretty sure that next year is going to be like

00:05:06.430 --> 00:05:07.217
double, triple that.

00:05:07.300 --> 00:05:08.537
I'm almost sure.

00:05:08.620 --> 00:05:12.077
Great, so we're going to go quickly through what, why,

00:05:12.160 --> 00:05:13.270
and how GraphQL.

00:05:13.960 --> 00:05:18.317
So, first, GraphQL is a, and this is super important,

00:05:18.400 --> 00:05:21.947
please, it's not a library, it's not a fancy new

00:05:22.030 --> 00:05:22.847
framework.

00:05:22.930 --> 00:05:26.717
It's a language-agnostic specification to build APIs.

00:05:26.800 --> 00:05:29.290
So, please remember, if you don't know GraphQL yet:

00:05:29.620 --> 00:05:32.567
GraphQL, specification, and APIs.

00:05:32.650 --> 00:05:35.237
And you can see in the bottom all the languages where

00:05:35.320 --> 00:05:38.380
you can implement a solution for creating GraphQL APIs.

00:05:38.680 --> 00:05:41.627
Next, again, it's important, GraphQL is not a library,

00:05:41.710 --> 00:05:42.557
it's not a framework.

00:05:42.640 --> 00:05:45.467
It's a graph query language to build APIs, where we are

00:05:45.550 --> 00:05:46.847
going to describe our data.

00:05:46.930 --> 00:05:49.817
We are going to ask for whatever we want, avoiding

00:05:49.900 --> 00:05:51.977
over-fetching, and then we are going to get

00:05:52.060 --> 00:05:53.320
predictable results.

00:05:54.550 --> 00:05:57.640
Next, we are going to see the main features, which are:

00:05:57.910 --> 00:06:01.577
- It's strongly typed with a GraphQL schema definition

00:06:01.660 --> 00:06:03.647
- It is introspectable by specification

00:06:03.730 --> 00:06:06.227
- It's based in queries to fetch data, mutation to

00:06:06.310 --> 00:06:08.627
mutate data, and subscription to subscribe to data

00:06:08.710 --> 00:06:11.627
- It's efficient and reusable, avoiding over-fetching

00:06:11.710 --> 00:06:12.880
and under-fetching data

00:06:13.000 --> 00:06:14.987
- Transport agnostic

00:06:15.070 --> 00:06:17.500
- It improves a lot the product development

00:06:17.620 --> 00:06:21.730
Great, and here, I left some resources to learn.

00:06:22.180 --> 00:06:24.767
And I'm going to leave the slide later with a QR code.

00:06:24.850 --> 00:06:25.742
So, please check it out.

00:06:25.825 --> 00:06:30.737
But before going into any framework or library, please

00:06:30.820 --> 00:06:32.980
check the core fundamentals in graphql.org.

00:06:33.160 --> 00:06:34.937
It's super important to understand what is GraphQL and

00:06:35.020 --> 00:06:37.870
which problems it solves in order to start using it.

00:06:39.160 --> 00:06:42.317
Why we should consider GraphQL, like if we compare with

00:06:42.400 --> 00:06:43.420
REST, for example.

00:06:43.990 --> 00:06:44.957
We have several topics.

00:06:45.040 --> 00:06:46.210
I'm going to go super fast.

00:06:46.600 --> 00:06:49.817
Type system: we have to define any single field that we

00:06:49.900 --> 00:06:51.790
are going to expose, but also its types.

00:06:52.330 --> 00:06:53.807
It's predictable by default.

00:06:53.890 --> 00:06:55.577
So, we are going to be able to introspect those types,

00:06:55.660 --> 00:06:57.317
and also reuse those types.

00:06:57.400 --> 00:06:59.597
We're going to see later all these topics in the live

00:06:59.680 --> 00:07:00.340
coding.

00:07:00.850 --> 00:07:02.652
There are two common issues: over-fetching and

00:07:02.736 --> 00:07:03.612
under-fetching.

00:07:03.696 --> 00:07:05.717
Over-fetching, let's define them.

00:07:05.800 --> 00:07:08.057
It's fetch more data that the client actually needs.

00:07:08.140 --> 00:07:10.967
So, as a client, I would like to ask for what I need

00:07:11.050 --> 00:07:13.667
and just get that, whether I'm in my mobile client,

00:07:13.750 --> 00:07:16.390
tablet client, or desktop client.

00:07:16.540 --> 00:07:19.817
Under-fetching, instead, is fetch not enough data that

00:07:19.900 --> 00:07:21.070
the client actually needs.

00:07:21.160 --> 00:07:23.537
I think it could be really nice if we could ask for

00:07:23.620 --> 00:07:26.867
nested resources within our data sources, and then

00:07:26.950 --> 00:07:30.370
return back all the data in one single server call.

00:07:31.240 --> 00:07:34.757
I would like to have auto-generated types and always

00:07:34.840 --> 00:07:36.077
up-to-date documentations.

00:07:36.160 --> 00:07:39.730
And I would like to move faster with powerful dev tools.

00:07:40.030 --> 00:07:41.597
Great, how we are going to do that?

00:07:41.680 --> 00:07:43.547
We are going to see in the live coding demo in just

00:07:43.630 --> 00:07:44.447
two minutes.

00:07:44.530 --> 00:07:47.567
So, now we are going to see why TypeScript loves

00:07:47.650 --> 00:07:48.520
GraphQL.

00:07:48.640 --> 00:07:52.967
TypeScript, if you don't know yet, is a type superset

00:07:53.050 --> 00:07:54.947
of JavaScript that compiles to plain JavaScript.

00:07:55.030 --> 00:07:57.167
So, JavaScript with types.

00:07:57.250 --> 00:07:59.867
And yeah, we want types, even if you don't like them

00:07:59.950 --> 00:08:00.370
yet.

00:08:00.490 --> 00:08:03.407
Types, we agree, are really good with GraphQL because

00:08:03.490 --> 00:08:05.230
it starts and ends with JavaScript.

00:08:05.860 --> 00:08:07.907
It contains such a strong tooling for large

00:08:07.990 --> 00:08:08.747
applications.

00:08:08.830 --> 00:08:12.347
TypeScript is backed from Microsoft, and GraphQL, in the

00:08:12.430 --> 00:08:15.107
beginning, was backed by Facebook, and now both

00:08:15.190 --> 00:08:16.660
communities are working hard on it.

00:08:16.930 --> 00:08:19.127
And I would like to call it the state-of-the-art of

00:08:19.210 --> 00:08:21.917
JavaScript, because every single week we've got new

00:08:22.000 --> 00:08:26.267
features and new companies and new contributors like

00:08:26.350 --> 00:08:29.267
creating really cool stuff around these technologies.

00:08:29.350 --> 00:08:33.407
So, we would like to introspect our API with GraphQL,

00:08:33.490 --> 00:08:36.520
but also introspect our codebase with TypeScript.

00:08:37.390 --> 00:08:40.007
So, we are going to have a single source of truth with

00:08:40.090 --> 00:08:42.970
our GraphQL schema, that is going to contain all our

00:08:43.900 --> 00:08:45.527
types and all the fields that we are going to expose

00:08:45.610 --> 00:08:46.097
to our API.

00:08:46.180 --> 00:08:48.827
And then, we are going to extend those types to both

00:08:48.910 --> 00:08:51.287
or the different layers of our application, which are

00:08:51.370 --> 00:08:52.397
backend and frontend.

00:08:52.480 --> 00:08:55.097
And that's what we are going to do in the live coding.

00:08:55.180 --> 00:08:58.577
You see, the type generator, GraphQL Codegen, is an

00:08:58.660 --> 00:09:01.067
open-source library created by The Guild.

00:09:01.150 --> 00:09:03.167
So, anybody can go and just use it.

00:09:03.250 --> 00:09:05.327
And we are going to auto-generate the TypeScript types

00:09:05.410 --> 00:09:07.937
based on our GraphQL schema for both backend and

00:09:08.020 --> 00:09:08.440
frontend.

00:09:08.680 --> 00:09:11.200
So, I think we get.

00:09:12.160 --> 00:09:13.457
Live coding, the agenda.

00:09:13.540 --> 00:09:15.407
We're going to see first what is a GraphQL API

00:09:15.490 --> 00:09:16.607
and how you can test it.

00:09:16.690 --> 00:09:20.260
Then we are going to jump into the IDE coding real code

00:09:20.500 --> 00:09:23.380
and see to the server first and then go to the client.

00:09:23.590 --> 00:09:26.920
And we are going to be using the SpaceX GraphQL API.

00:09:27.160 --> 00:09:28.547
I know, because there's a lot of rockets.

00:09:28.630 --> 00:09:31.450
So I'm going to my IDE.

00:09:32.260 --> 00:09:34.390
And we are going to start here the fun thing.

00:09:34.570 --> 00:09:36.407
I'm using hotspot with my phone,

00:09:36.490 --> 00:09:38.717
so we're going to see how everything works.

00:09:38.800 --> 00:09:40.037
And I don't have much space here,

00:09:40.120 --> 00:09:41.920
but I can just do this.

00:09:42.100 --> 00:09:42.700
Awesome.

00:09:43.180 --> 00:09:46.340
So first, we're going to open the code base.

00:09:46.580 --> 00:09:48.860
I'm going to make sure that everything looks okay.

00:09:49.280 --> 00:09:51.320
So we're going to have the server and the client.

00:09:51.650 --> 00:09:52.707
So we're going to go to server,

00:09:52.790 --> 00:09:54.297
we're going to go to our source folder

00:09:54.380 --> 00:09:56.150
and we are going to open the index.

00:09:56.330 --> 00:09:58.167
So we can check here,

00:09:58.250 --> 00:10:02.157
we are going to have a GraphQL server and a REST server.

00:10:02.240 --> 00:10:03.297
That's going to be interesting.

00:10:03.380 --> 00:10:04.407
So before that,

00:10:04.490 --> 00:10:06.207
I'm going to go to my server side

00:10:06.290 --> 00:10:08.517
and I'm going to execute 𝚢𝚊𝚛𝚗 𝚜𝚝𝚊𝚛𝚝.

00:10:08.600 --> 00:10:10.587
So we are going to run our server.

00:10:10.670 --> 00:10:11.097
Great.

00:10:11.180 --> 00:10:12.717
So we can see here two servers,

00:10:12.800 --> 00:10:14.187
the REST and the GraphQL.

00:10:14.270 --> 00:10:15.740
And it's going to be interesting because,

00:10:16.220 --> 00:10:18.327
even if we are here to talk about GraphQL,

00:10:18.410 --> 00:10:20.127
I'm going to show you some really cool stuff.

00:10:20.210 --> 00:10:21.440
So I'm going to go to my localhost 4000.

00:10:22.850 --> 00:10:24.747
I'm not cheating anyone here, you can see it.

00:10:24.830 --> 00:10:26.510
And I'm going to go to REST.

00:10:26.960 --> 00:10:29.877
And what is happening here is,

00:10:29.960 --> 00:10:31.910
if we let's say get some rockets.

00:10:32.570 --> 00:10:33.590
I like rockets.

00:10:33.950 --> 00:10:36.950
So we're going to have one, two, three, four rockets.

00:10:37.100 --> 00:10:38.637
And we are going to contain all the information,

00:10:38.720 --> 00:10:42.987
for example, this is the Falcon Heavy rocket,

00:10:43.070 --> 00:10:45.597
probably here in the bottom, we can find it.

00:10:45.680 --> 00:10:47.337
So basically, what is happening here,

00:10:47.420 --> 00:10:50.397
if we go to our REST file,

00:10:50.480 --> 00:10:53.930
is that within 34 lines of code,

00:10:54.890 --> 00:10:58.707
we are going to be able to auto-generate a REST API,

00:10:58.790 --> 00:11:00.710
fully typed and fully documented,

00:11:01.010 --> 00:11:05.547
only passing our GraphQL schema, which is incredible.

00:11:05.630 --> 00:11:09.687
So I'm using this open source Sofa API to do this.

00:11:09.770 --> 00:11:11.457
If you have any question about it,

00:11:11.540 --> 00:11:14.217
in the slides, everything is open source,

00:11:14.300 --> 00:11:15.057
so you can go to the repo

00:11:15.140 --> 00:11:16.887
and see how this was implemented.

00:11:16.970 --> 00:11:20.450
But today we are here to talk about GraphQL.

00:11:20.840 --> 00:11:22.767
So in the GraphQL application,

00:11:22.850 --> 00:11:24.777
we are going to pass the node instance

00:11:24.860 --> 00:11:25.947
and also a configuration

00:11:26.030 --> 00:11:28.557
that is going to contain the schema and the context.

00:11:28.640 --> 00:11:30.057
So let's go to the context first.

00:11:30.140 --> 00:11:33.897
So the context is going to contain some utils.

00:11:33.980 --> 00:11:35.637
So it's going to contain some sorting,

00:11:35.720 --> 00:11:39.447
finding, and limiting functions, and also a database.

00:11:39.530 --> 00:11:42.477
So for you to understand how we are going to do

00:11:42.560 --> 00:11:43.520
the live coding today,

00:11:44.030 --> 00:11:47.247
we are going to be using a SpaceX MongoDB

00:11:47.330 --> 00:11:49.827
public database where we are going to connect

00:11:49.910 --> 00:11:50.967
with a MongoDB client

00:11:51.050 --> 00:11:52.257
and we are going to just fetch data

00:11:52.340 --> 00:11:53.750
because it's read only.

00:11:54.560 --> 00:11:55.647
So you can see here the URL,

00:11:55.730 --> 00:11:57.710
you can go later and just check by yourself

00:11:58.100 --> 00:11:59.510
all the tables and all the data.

00:11:59.720 --> 00:12:00.267
Great.

00:12:00.350 --> 00:12:03.597
And then we are going to check here utils, the types.

00:12:03.680 --> 00:12:04.767
We don't have just types yet,

00:12:04.850 --> 00:12:06.680
we have like just the context, everything is any.

00:12:06.890 --> 00:12:08.967
And then we are going to have the schema,

00:12:09.050 --> 00:12:10.347
which is our single source of truth

00:12:10.430 --> 00:12:12.657
and is the most important part of our applications.

00:12:12.740 --> 00:12:13.497
So in the schema,

00:12:13.580 --> 00:12:15.987
we might see that we've got capsules,

00:12:16.070 --> 00:12:21.087
and launches, and histories, and missions,

00:12:21.170 --> 00:12:22.190
and rockets.

00:12:22.730 --> 00:12:25.520
So in the rockets, I'm going to go to type definitions.

00:12:25.850 --> 00:12:28.137
As we have mentioned before, in GraphQL,

00:12:28.220 --> 00:12:30.417
we are going to define query entry points,

00:12:30.500 --> 00:12:32.037
whether are queries to fetch data,

00:12:32.120 --> 00:12:33.267
mutation to mutate data,

00:12:33.350 --> 00:12:34.797
or subscription to subscribe to data.

00:12:34.880 --> 00:12:39.267
And we are going to specify which field we want to use.

00:12:39.350 --> 00:12:41.337
So in this case, if we want to fetch rockets,

00:12:41.420 --> 00:12:45.110
as we have done in REST as a /rockets,

00:12:45.290 --> 00:12:48.717
in GraphQL, we are going to specify the field name,

00:12:48.800 --> 00:12:51.170
but also which data we are going to return.

00:12:51.620 --> 00:12:53.247
In this case when we are asking for

00:12:53.330 --> 00:12:54.410
just one single rocket,

00:12:54.530 --> 00:12:55.347
we are going to get rocket,

00:12:55.430 --> 00:12:56.480
we are going to specify the ID,

00:12:56.630 --> 00:12:59.990
and that ID is going to be required because makes sense.

00:13:00.140 --> 00:13:02.007
In order to go to database with that ID,

00:13:02.090 --> 00:13:03.267
which is coming from the params,

00:13:03.350 --> 00:13:06.230
and then I'm going to just return one single rocket.

00:13:06.410 --> 00:13:09.627
And it's important because when you are specifying

00:13:09.710 --> 00:13:11.187
the data that you return,

00:13:11.270 --> 00:13:15.477
GraphQL is going to ensure you that your API

00:13:15.560 --> 00:13:18.567
API call is going to be valid only if those types match.

00:13:18.650 --> 00:13:20.540
And that's going to be good and we are going to see later why.

00:13:20.960 --> 00:13:23.870
So then we can see that rocket is going to contain

00:13:24.530 --> 00:13:26.697
different graphical primitive types.

00:13:26.780 --> 00:13:30.147
As you know in JavaScript, you can find booleans,

00:13:30.230 --> 00:13:32.247
integers, numbers or string or text.

00:13:32.330 --> 00:13:37.137
Or also it could contain graphical complex types.

00:13:37.220 --> 00:13:38.660
As for example, rocket first stage, right?

00:13:38.780 --> 00:13:42.807
We can go here and we can see all its subtypes, right?

00:13:42.890 --> 00:13:46.287
So you might ask where this is like,

00:13:46.370 --> 00:13:48.417
okay, you are going to specify that we are going to get

00:13:48.500 --> 00:13:51.657
rockets, but where these rockets are coming from, right?

00:13:51.740 --> 00:13:54.657
So that's where now we are going to see where we are

00:13:54.740 --> 00:13:57.567
going to resolve and return the data in our resolvers.

00:13:57.650 --> 00:14:00.357
So in our resolvers, if you see here the code base,

00:14:00.440 --> 00:14:02.060
we are going to have a query.

00:14:02.210 --> 00:14:05.337
When we are asking for query, we are going to specify

00:14:05.420 --> 00:14:08.307
the different query fields that we have implementing

00:14:08.390 --> 00:14:09.950
in our graphical schema.

00:14:10.070 --> 00:14:13.047
And here in the rocket, I'm pretty sure even if you

00:14:13.130 --> 00:14:15.237
don't know JavaScript that you are in a JavaScript

00:14:15.320 --> 00:14:17.607
conference and you are going to follow this.

00:14:17.690 --> 00:14:19.730
So we are going to get the context,

00:14:19.940 --> 00:14:21.897
we are going to get the database from the context.

00:14:21.980 --> 00:14:24.147
We are going to go to our rocket collection.

00:14:24.230 --> 00:14:27.747
We are going to do filtering and finding,

00:14:27.830 --> 00:14:29.037
sorting, skipping and limiting.

00:14:29.120 --> 00:14:31.617
We are going to convert to array and return the data.

00:14:31.700 --> 00:14:34.017
And with the rocket ID, we are going to do the same,

00:14:34.100 --> 00:14:37.077
only that we are going to get the ID that is required

00:14:37.160 --> 00:14:40.047
for our second argument in our resolver function.

00:14:40.130 --> 00:14:41.397
And then we are going to filter by ID,

00:14:41.480 --> 00:14:43.137
we are going to get just one element and

00:14:43.220 --> 00:14:44.787
we are going to destructure that element.

00:14:44.870 --> 00:14:46.857
So here we are going to get an object.

00:14:46.940 --> 00:14:49.730
So then if we go to GraphQL in order to understand

00:14:49.880 --> 00:14:51.530
what is GraphQL, this is what you get.

00:14:52.550 --> 00:14:54.417
This is nice because let's say even I don't know

00:14:54.500 --> 00:14:57.357
anything about GraphQL at all, but I know that I can

00:14:57.440 --> 00:15:00.177
have a type system and it's going to be introspectable

00:15:00.260 --> 00:15:02.307
and I'm going to avoid over-fetching and under-fetching.

00:15:02.390 --> 00:15:04.880
So let's do all of it in one.

00:15:05.030 --> 00:15:06.867
Let's say that I don't know what is going on here,

00:15:06.950 --> 00:15:08.517
but I know that doing control space,

00:15:08.600 --> 00:15:11.817
I'm going to have autocompletion about all my types

00:15:11.900 --> 00:15:13.707
and it's going to be introspectable because

00:15:13.790 --> 00:15:14.997
I'm able to see everything.

00:15:15.080 --> 00:15:17.937
So I'm going to get histories and from those histories,

00:15:18.020 --> 00:15:19.857
I'm going to get the ID.

00:15:19.940 --> 00:15:21.657
I don't know, I'm going to just try to find a name.

00:15:21.740 --> 00:15:23.510
There's no name, probably title.

00:15:23.600 --> 00:15:26.577
Then this history is going to be in the history table.

00:15:26.660 --> 00:15:28.737
Now I'm going to go to my launch table.

00:15:28.820 --> 00:15:31.977
I'm going to get launches for every single history

00:15:32.060 --> 00:15:33.147
and then from every single launch,

00:15:33.230 --> 00:15:34.137
I'm going to get rocket.

00:15:34.220 --> 00:15:36.410
And you are going to see how I'm accessing

00:15:36.570 --> 00:15:38.077
all the different tables in my database

00:15:38.160 --> 00:15:41.557
and I'm sending back just one request.

00:15:41.640 --> 00:15:43.567
So I think I'm going to go to flight

00:15:43.650 --> 00:15:45.637
and I can even create alias for it.

00:15:45.720 --> 00:15:47.557
So this is going to be a launch.

00:15:47.640 --> 00:15:49.770
Let me check, launch and this is going to be a flight.

00:15:50.370 --> 00:15:52.500
And then for the flight, I'm going to get the ID.

00:15:52.830 --> 00:15:53.977
And then I'm going to get the name

00:15:54.060 --> 00:15:55.687
that is going to be a mission name.

00:15:55.770 --> 00:15:57.007
So let's put name here.

00:15:57.090 --> 00:15:58.537
And then we are going to get a rocket

00:15:58.620 --> 00:16:05.827
and that rocket is going to contain ID and name

00:16:05.910 --> 00:16:08.887
and we can do the cost per launch putting another alias.

00:16:08.970 --> 00:16:10.507
So now if we open the console here,

00:16:10.590 --> 00:16:12.787
we are going to see how we are going through

00:16:12.870 --> 00:16:14.280
all these different databases.

00:16:14.640 --> 00:16:16.777
What is happening is GraphQL,

00:16:16.860 --> 00:16:18.630
we are sending this smart query.

00:16:18.720 --> 00:16:20.317
We are going to the history table.

00:16:20.400 --> 00:16:21.667
When we are getting this data,

00:16:21.750 --> 00:16:23.467
we are before sending it back,

00:16:23.550 --> 00:16:26.647
so we don't have to do any extra round trip HTTP calls.

00:16:26.730 --> 00:16:28.177
We are going again to the database,

00:16:28.260 --> 00:16:29.587
we are getting all this information and

00:16:29.670 --> 00:16:31.507
when everything is ready, we are going to send it back.

00:16:31.590 --> 00:16:34.687
So we can check this is going to be super expensive.

00:16:34.770 --> 00:16:38.040
So let me just limit to a couple of them,

00:16:38.430 --> 00:16:39.480
just two of them.

00:16:40.020 --> 00:16:41.807
And we are going to see here with one round trip

00:16:41.890 --> 00:16:45.127
HTTP call, we are going to get and go through

00:16:45.210 --> 00:16:48.480
different database tables, get all this information.

00:16:50.100 --> 00:16:52.297
So we are going to process all our data

00:16:52.380 --> 00:16:56.287
in our physical servers instead of going to

00:16:56.370 --> 00:16:59.917
different round trip network calls to get that stuff.

00:17:00.000 --> 00:17:02.587
So you can see here one round trip HTTP call

00:17:02.670 --> 00:17:04.957
and you are going to get a JSON, which is no type.

00:17:05.040 --> 00:17:06.727
And then we are going to see how we can extend

00:17:06.810 --> 00:17:09.307
the types to our front side and back end side

00:17:09.390 --> 00:17:11.947
and the data in this case, two histories

00:17:12.030 --> 00:17:13.890
and you can see the launch and the rocket

00:17:14.130 --> 00:17:15.277
and all the information.

00:17:15.360 --> 00:17:16.327
I don't know if it's big enough,

00:17:16.410 --> 00:17:18.217
but you can kind of see here, right.

00:17:18.300 --> 00:17:20.617
So this is GraphQL, avoiding over-fetching,

00:17:20.700 --> 00:17:25.027
under-fetching, we've got automatically generated type,

00:17:25.110 --> 00:17:27.360
fully documented, always up to date.

00:17:27.630 --> 00:17:30.427
And now we are going to see the tooling, right?

00:17:30.510 --> 00:17:31.200
And TypeScript.

00:17:31.800 --> 00:17:32.370
Cool.

00:17:33.720 --> 00:17:36.097
Let me go back here and now what we are going to do

00:17:36.180 --> 00:17:38.047
is evolve our API.

00:17:38.130 --> 00:17:40.567
That's I think what we do like every day, right?

00:17:40.650 --> 00:17:43.267
But before that, let me just show you guys

00:17:43.350 --> 00:17:47.317
that you can also do a rocket by ID and

00:17:47.400 --> 00:17:51.937
this is going to be a Falcon Heavy and then

00:17:52.020 --> 00:17:54.480
we are going to just get the name and the ID.

00:17:56.430 --> 00:17:57.840
The ID and the name.

00:17:58.110 --> 00:17:58.650
Awesome.

00:17:59.040 --> 00:17:59.617
That's will be up.

00:17:59.700 --> 00:18:00.937
So we got the data back.

00:18:01.020 --> 00:18:03.997
And now we are going to just evolve our API.

00:18:04.080 --> 00:18:05.047
So I'm going to go here.

00:18:05.130 --> 00:18:07.380
I'm going to go to my Visual Code extension,

00:18:07.500 --> 00:18:10.897
GitHub extension in order to check my pull requests.

00:18:10.980 --> 00:18:14.767
So I can see here that there is a pull request

00:18:14.850 --> 00:18:18.337
which is called, let me check if this going to open, okay.

00:18:18.420 --> 00:18:19.867
Is add rocket by name query field.

00:18:19.950 --> 00:18:21.810
So I'm going to check out the branch.

00:18:21.990 --> 00:18:22.987
We are going to see the diff.

00:18:23.070 --> 00:18:23.617
This is the diff.

00:18:23.700 --> 00:18:27.607
We can see here that we have include a new query

00:18:27.690 --> 00:18:31.147
entry point field called rocketByName that its input

00:18:31.230 --> 00:18:31.687
is a name.

00:18:31.770 --> 00:18:33.360
This is a string that's going to be required.

00:18:33.840 --> 00:18:36.637
But also we have see here that we have changed the ID

00:18:36.720 --> 00:18:38.017
from lowercase to uppercase,

00:18:38.100 --> 00:18:41.167
which means that we might have some problems.

00:18:41.250 --> 00:18:43.957
So let's see what's going on here.

00:18:44.040 --> 00:18:46.117
So we can go to our type def again.

00:18:46.200 --> 00:18:47.970
We can see the new evolution of our API.

00:18:48.210 --> 00:18:50.557
And maybe we have to implement the business logic

00:18:50.640 --> 00:18:52.590
about this new query entry point field.

00:18:52.710 --> 00:18:53.167
Great.

00:18:53.250 --> 00:18:56.557
So before anything, I'm going to go back to my API.

00:18:56.640 --> 00:18:57.337
I'm going to run it.

00:18:57.420 --> 00:18:58.500
And I'm going to test.

00:18:58.860 --> 00:19:00.637
I'm going to just run my CI with all my tests

00:19:00.720 --> 00:19:02.227
in order to see that everything is working

00:19:02.310 --> 00:19:03.420
with my new evolution.

00:19:04.320 --> 00:19:06.427
And then we go back to the API.

00:19:06.510 --> 00:19:09.907
And then we can check that the rockets are working.

00:19:09.990 --> 00:19:11.370
Just let me copy this.

00:19:11.460 --> 00:19:12.637
And this is working.

00:19:12.720 --> 00:19:13.927
We're going to get like four rockets.

00:19:14.010 --> 00:19:17.070
And then we go to the rocket by ID.

00:19:19.050 --> 00:19:19.807
GraphQL is going to tell me,

00:19:19.890 --> 00:19:21.697
hey, it's not ID lowercase anymore,

00:19:21.780 --> 00:19:22.987
it's ID uppercase.

00:19:23.070 --> 00:19:24.847
So I can just do auto completion here

00:19:24.930 --> 00:19:26.287
and execute the query.

00:19:26.370 --> 00:19:27.157
And I'm getting a null,

00:19:27.240 --> 00:19:29.557
but I know that this data is in my database

00:19:29.640 --> 00:19:30.787
and that ID is correct.

00:19:30.870 --> 00:19:32.197
So what is going on here?

00:19:32.280 --> 00:19:34.357
So basically what is going on is if we go

00:19:34.440 --> 00:19:35.467
to the resolvers,

00:19:35.550 --> 00:19:38.047
in the resolvers, we might see that we are accessing

00:19:38.130 --> 00:19:39.037
to ID lowercase.

00:19:39.120 --> 00:19:40.507
So we are finding for null.

00:19:40.590 --> 00:19:42.127
Finding for null is going to return null.

00:19:42.210 --> 00:19:45.127
So that means that we are exposing our APIs

00:19:45.210 --> 00:19:46.297
to millions of users.

00:19:46.380 --> 00:19:48.300
Let's say that we are Facebook or Twitter or Airbnb

00:19:49.860 --> 00:19:52.747
with an inconsistent state of our APIs.

00:19:52.830 --> 00:19:55.357
And this is going to lead to break

00:19:55.440 --> 00:19:56.287
a lot of applications.

00:19:56.370 --> 00:19:59.317
So we are in 2020 and we have solution

00:19:59.400 --> 00:20:01.597
for solving this problem.

00:20:01.680 --> 00:20:02.797
So basically what we are going to do is

00:20:02.880 --> 00:20:03.637
I'm going to go to the server.

00:20:03.720 --> 00:20:06.390
I'm going to run just GraphQL gen.

00:20:06.660 --> 00:20:08.557
So I'm going to auto generate all my type,

00:20:08.640 --> 00:20:10.860
all the TypeScript that based in my GraphQL schema.

00:20:11.040 --> 00:20:12.337
And I'm going to type my resolvers

00:20:12.420 --> 00:20:14.047
in order to have auto completion

00:20:14.130 --> 00:20:19.147
and run checks in compile time in my codebase.

00:20:19.230 --> 00:20:20.437
So you can see here,

00:20:20.520 --> 00:20:25.117
we have generate almost 5,000 types.

00:20:25.200 --> 00:20:26.880
And even if you don't like types,

00:20:27.870 --> 00:20:31.170
but your CTO is telling you that you have to use types,

00:20:31.470 --> 00:20:33.277
the first type that you want to use

00:20:33.360 --> 00:20:35.197
are those that you don't have to write at all.

00:20:35.280 --> 00:20:36.367
You are going to auto generate them

00:20:36.450 --> 00:20:37.867
from your single source of truth.

00:20:37.950 --> 00:20:39.067
And from there,

00:20:39.150 --> 00:20:41.047
you are going to just type your codebase.

00:20:41.130 --> 00:20:42.787
So basically what we are going to do right now

00:20:42.870 --> 00:20:45.727
in order to fix this is go to the resolvers.

00:20:45.810 --> 00:20:46.957
And in the resolvers,

00:20:47.040 --> 00:20:48.577
we are going to just go to our query

00:20:48.660 --> 00:20:51.217
and do query resolvers.resolvers.

00:20:51.300 --> 00:20:53.677
And we can see here the checks.

00:20:53.760 --> 00:20:57.517
So that means if now I try to run again my API,

00:20:57.600 --> 00:20:59.167
my API is not going to run.

00:20:59.250 --> 00:21:01.687
And that's great because I don't want to expose my API

00:21:01.770 --> 00:21:03.090
when it's not consistent.

00:21:05.340 --> 00:21:07.327
So now I try to go to the API

00:21:07.410 --> 00:21:08.767
and this is not working at all.

00:21:08.850 --> 00:21:10.417
So in order to fix it quickly

00:21:10.500 --> 00:21:11.640
and jump into the client,

00:21:11.970 --> 00:21:14.707
I'm going to just remove this, do control space.

00:21:14.790 --> 00:21:15.547
I'm going to get my ID.

00:21:15.630 --> 00:21:17.070
This is going to be I'm going to find ID by ID.

00:21:17.850 --> 00:21:21.487
And then let's say that now I have to evolve

00:21:21.570 --> 00:21:25.387
my resolvers to include the new query entry point field

00:21:25.470 --> 00:21:27.360
that I defined before, which is rocketByName.

00:21:27.460 --> 00:21:29.417
So basically what I'm going to do is control space.

00:21:29.500 --> 00:21:30.527
I'm going to find rocketByName.

00:21:30.610 --> 00:21:31.697
Oh, it's here, perfect.

00:21:31.780 --> 00:21:32.657
And I don't know about you guys,

00:21:32.740 --> 00:21:34.487
but what I usually do in my day-to-day

00:21:34.570 --> 00:21:35.897
is just copy and paste stuff.

00:21:35.980 --> 00:21:37.870
So I just going to copy this.

00:21:38.260 --> 00:21:39.497
I'm going to paste it here.

00:21:39.580 --> 00:21:41.657
And even I'm going to have auto completion

00:21:41.740 --> 00:21:43.097
about the arguments for my new type

00:21:43.180 --> 00:21:45.707
because I already generate its types.

00:21:45.790 --> 00:21:47.777
So I can just remove this, do control space.

00:21:47.860 --> 00:21:48.737
I'm going to get the name.

00:21:48.820 --> 00:21:50.297
And then I'm going to go here,

00:21:50.380 --> 00:21:51.677
and I'm going to do just name.

00:21:51.760 --> 00:21:53.297
So now if I save this,

00:21:53.380 --> 00:21:56.350
if I go back and I run again my API,

00:21:56.590 --> 00:22:00.377
if I'm not getting any compile time error in my IDE,

00:22:00.460 --> 00:22:02.687
it means that my API is going to be consistent.

00:22:02.770 --> 00:22:05.560
So now when I'm going back, if I reload,

00:22:06.040 --> 00:22:07.697
I can just check my rocket.

00:22:07.780 --> 00:22:08.897
Now it's working.

00:22:08.980 --> 00:22:11.140
And then I can go to my rocketByName.

00:22:11.890 --> 00:22:14.837
And we can check that now this name,

00:22:14.920 --> 00:22:21.910
and now we are going to find for Falcon nine.

00:22:22.120 --> 00:22:24.917
And then we can add another field here,

00:22:25.000 --> 00:22:25.907
for example, active.

00:22:25.990 --> 00:22:27.077
And we are going to get the data

00:22:27.160 --> 00:22:28.967
and everything is going to work as expected.

00:22:29.050 --> 00:22:29.957
That's great.

00:22:30.040 --> 00:22:32.207
And this is incredible developer experience.

00:22:32.290 --> 00:22:34.157
So now to finish this talk,

00:22:34.240 --> 00:22:35.807
now I'm going to go to the client side.

00:22:35.890 --> 00:22:39.040
Let me just go back to the initial state of the app

00:22:40.090 --> 00:22:42.437
and check the client in a bit.

00:22:42.520 --> 00:22:44.237
And then we are done here.

00:22:44.320 --> 00:22:47.050
So let me just go here, exit review mode.

00:22:47.380 --> 00:22:49.990
And then let's go to the client.

00:22:50.740 --> 00:22:53.837
And first we are going to yarn start.

00:22:53.920 --> 00:22:54.047
Start.

00:22:54.130 --> 00:22:59.320
And then we can just go here and go to the client side.

00:22:59.530 --> 00:23:02.620
Also, we're going to have just two files, index and app.

00:23:03.010 --> 00:23:04.757
If you don't know React, I'm pretty sure that you're going

00:23:04.840 --> 00:23:05.830
to understand this.

00:23:06.760 --> 00:23:08.357
So, first, let's check the app.

00:23:08.440 --> 00:23:13.487
So, we have an array where we are going to display all

00:23:13.570 --> 00:23:14.710
the launches for SpaceX.

00:23:14.830 --> 00:23:17.327
So, we are going to have here the mission name,

00:23:17.410 --> 00:23:20.297
the rocket name, the description, and one image.

00:23:20.380 --> 00:23:23.927
And I don't know if you guys like SpaceX or not,

00:23:24.010 --> 00:23:27.677
you like rockets, but for me, it's just incredible

00:23:27.760 --> 00:23:28.967
what these guys are doing.

00:23:29.050 --> 00:23:32.207
You can see the scale of the car in the bottom and see

00:23:32.290 --> 00:23:34.877
the rockets, which is just wow, incredible.

00:23:34.960 --> 00:23:36.250
So, okay, going back.

00:23:36.370 --> 00:23:37.307
Right.

00:23:37.390 --> 00:23:39.647
So, we got Apollo Client from Apollo hooks.

00:23:39.730 --> 00:23:41.807
We are passing the GraphQL URL.

00:23:41.890 --> 00:23:45.197
Then we are going to use the Apollo provider, passing

00:23:45.280 --> 00:23:46.870
the client instance as a prop.

00:23:46.990 --> 00:23:50.500
And we are going to just import the app using React Lazy.

00:23:50.680 --> 00:23:52.355
And then in the app, even if you don't know React,

00:23:52.438 --> 00:23:54.520
you are going to see here that we've got HTML.jsx,

00:23:55.480 --> 00:23:57.977
and we've got some data, and we are going to display

00:23:58.060 --> 00:23:59.477
the mission name, the rocket name, the details,

00:23:59.560 --> 00:24:00.107
and the image.

00:24:00.190 --> 00:24:01.630
Where this data is coming from?

00:24:01.720 --> 00:24:03.947
Basically, we are going to use useQuery from Apollo

00:24:04.030 --> 00:24:05.890
React Hook, and we are going to get the data.

00:24:05.980 --> 00:24:08.387
You can see here already it's any, so we didn't have

00:24:08.470 --> 00:24:08.950
types yet.

00:24:09.130 --> 00:24:12.017
And then we are going to have our query, right?

00:24:12.100 --> 00:24:13.787
So, in order to finish, because probably I'm running

00:24:13.870 --> 00:24:17.807
out of time, what I'm going to do is first, I'm going

00:24:17.890 --> 00:24:22.270
to go to my extensions, activate the Apollo GraphQL

00:24:22.450 --> 00:24:25.097
Visual Code extension in order to have autocompletion

00:24:25.180 --> 00:24:28.067
inside of my IDE, which is just incredible because

00:24:28.150 --> 00:24:31.150
you don't have to jump into browser and IDE.

00:24:31.480 --> 00:24:34.007
And then, so basically what we have to do is go to

00:24:34.090 --> 00:24:34.847
Apollo config.

00:24:34.930 --> 00:24:38.530
We have to specify the GraphQL API URL.

00:24:38.650 --> 00:24:39.520
I'm going to save it.

00:24:39.670 --> 00:24:41.627
You are going to see here how we are going to load

00:24:41.710 --> 00:24:44.057
the schema and all the fields and the types.

00:24:44.140 --> 00:24:46.397
And then also, what I'm going to do is I'm going to

00:24:46.480 --> 00:24:49.457
auto-generate all my types based on my GraphQL queries.

00:24:49.540 --> 00:24:50.710
So, I'm going to go to the client.

00:24:50.800 --> 00:24:53.320
I'm going to send GraphQL gen.

00:24:53.830 --> 00:24:55.157
We are going to auto-generate the types.

00:24:55.240 --> 00:24:57.917
So, we are going to see here if everything goes well,

00:24:58.000 --> 00:24:58.667
that is true.

00:24:58.750 --> 00:25:01.667
So, we are loading the GraphQL schema, and yeah,

00:25:01.750 --> 00:25:02.777
let's hope that it's going to work.

00:25:02.860 --> 00:25:06.707
And so, first, let's say that now I want to browse my API.

00:25:06.790 --> 00:25:08.087
I don't want to check documentation.

00:25:08.170 --> 00:25:09.497
I don't want to do console.log anymore.

00:25:09.580 --> 00:25:12.557
I want to introspect my API from my IDE and then

00:25:12.640 --> 00:25:14.027
auto-generate the types for it.

00:25:14.110 --> 00:25:15.767
So, here we can see the types.

00:25:15.850 --> 00:25:19.277
And in this case, we've got a 500 kind of, but we can see

00:25:19.360 --> 00:25:23.177
our getLaunches with our launchpads and all our data here.

00:25:23.260 --> 00:25:23.657
Great.

00:25:23.740 --> 00:25:27.347
So, basically now, let's say that you are starting

00:25:27.430 --> 00:25:31.307
tomorrow in a new company, and the front-end lead tells

00:25:31.390 --> 00:25:32.897
you, "Okay, you got to display the ships."

00:25:32.980 --> 00:25:37.390
So, I'm going to show you guys how a production-ready

00:25:37.750 --> 00:25:41.297
application with GraphQL helps you to achieve a superb

00:25:41.380 --> 00:25:42.107
developer experience.

00:25:42.190 --> 00:25:44.537
So, what I'm going to do first is like, do control space

00:25:44.620 --> 00:25:45.197
within my editor.

00:25:45.280 --> 00:25:47.177
I'm going to have autocompletion about all my fields

00:25:47.260 --> 00:25:48.557
available in my API.

00:25:48.640 --> 00:25:50.500
So, I'm going to just look for ships.

00:25:50.980 --> 00:25:54.017
I'm going to know that this is a complex type, so I might

00:25:54.100 --> 00:25:59.500
have to say ID, name, and let me check more,

00:25:59.650 --> 00:26:00.707
it's going to be a port.

00:26:00.790 --> 00:26:03.287
Even I can create the alias for it, and then I'm going

00:26:03.370 --> 00:26:04.067
to do an image.

00:26:04.150 --> 00:26:06.670
So, now when I'm saving this, I'm going to auto-generate

00:26:07.030 --> 00:26:09.677
the types for the new evolution of my query.

00:26:09.760 --> 00:26:11.627
So, we are going to see here, hopefully,

00:26:11.710 --> 00:26:12.797
the types generated.

00:26:12.880 --> 00:26:15.437
And then only we have to go to our return function.

00:26:15.520 --> 00:26:16.997
Here, we are going to set the div.

00:26:17.080 --> 00:26:20.057
So, we can see the new ships with the information.

00:26:20.140 --> 00:26:22.840
And so, basically now, you don't have to check that stuff,

00:26:22.990 --> 00:26:25.247
just to show you guys, but now what you can do is just

00:26:25.330 --> 00:26:27.707
basically to finish this talk, it's going to be do

00:26:27.790 --> 00:26:28.690
control space.

00:26:28.810 --> 00:26:31.307
You are going to find, hopefully here, you should find

00:26:31.390 --> 00:26:33.550
the ships, that is not for some strange reason.

00:26:34.090 --> 00:26:35.020
Because, okay, perfect.

00:26:35.380 --> 00:26:38.507
Before that, so let's say that we have this, and this is

00:26:38.590 --> 00:26:39.887
the same that we have in a JSON, right?

00:26:39.970 --> 00:26:42.347
So, everything looks great, and you don't know rocket,

00:26:42.430 --> 00:26:44.680
it's 4:00 p.m., you don't know, man.

00:26:44.800 --> 00:26:48.227
And then you go to your UI, boom, like exploding

00:26:48.310 --> 00:26:49.060
your face, right?

00:26:49.750 --> 00:26:53.057
So, we can solve this because we have types for do that.

00:26:53.140 --> 00:26:55.847
So, we are going to type our return data, and then we are

00:26:55.930 --> 00:26:58.577
going to have a compile-time check in order to fix this.

00:26:58.660 --> 00:27:00.760
Because you can spend hours, you are not going to

00:27:01.240 --> 00:27:02.807
differentiate between A and O.

00:27:02.890 --> 00:27:04.577
So, you are going to just fix it.

00:27:04.660 --> 00:27:07.667
And then to finish this talk, I just going to click in

00:27:07.750 --> 00:27:08.357
control space.

00:27:08.440 --> 00:27:09.437
I'm going to have the ships.

00:27:09.520 --> 00:27:12.820
And then I just can go here, and I'm going to get my ships.

00:27:13.150 --> 00:27:16.847
I know that this is, TypeScript knows that this is an array.

00:27:16.930 --> 00:27:19.107
So, I do dot, and I'm going to get all the functions

00:27:19.190 --> 00:27:20.060
that I can apply to arrays.

00:27:20.630 --> 00:27:23.787
I'm going to do some filter, and then I'm going to

00:27:23.870 --> 00:27:24.620
just map it.

00:27:24.860 --> 00:27:28.227
And this is going to be kind of, let me check if I can

00:27:28.310 --> 00:27:30.117
do quickly, and this is going to be a div.

00:27:30.200 --> 00:27:32.787
And even I can introspect the complex type of the ship.

00:27:32.870 --> 00:27:35.637
So, I can see here, doing control space, that I'm going

00:27:35.720 --> 00:27:37.557
to have the name.

00:27:37.640 --> 00:27:40.250
I'm going to get the port, and I'm going to get the image.

00:27:40.520 --> 00:27:42.927
And basically, in order to finish, I just going to,

00:27:43.010 --> 00:27:43.917
don't forget the key.

00:27:44.000 --> 00:27:45.897
This is super important in terms of performance.

00:27:45.980 --> 00:27:48.680
And then we are going to do an H2.

00:27:48.980 --> 00:27:50.390
This is going to be the name.

00:27:50.570 --> 00:27:54.657
I'm going to put here a bold, and then bold, and then

00:27:54.740 --> 00:27:56.337
we are going to just finish.

00:27:56.420 --> 00:27:59.487
So, name, H3, this is going to be the port.

00:27:59.570 --> 00:28:03.740
And to finish, it's going to be the, if I can do that,

00:28:04.190 --> 00:28:06.950
it's going to be the image that is going to contain

00:28:07.100 --> 00:28:08.007
the image.

00:28:08.090 --> 00:28:13.047
And then we are going to do a width of 200 here.

00:28:13.130 --> 00:28:15.327
So, now when I'm saving this, if I'm not having any error

00:28:15.410 --> 00:28:19.137
in my IDE, means that when I'm switching back to the app,

00:28:19.220 --> 00:28:21.140
and it's working, please give me an applause because

00:28:22.640 --> 00:28:25.077
the live coding is difficult always with GraphQL and

00:28:25.160 --> 00:28:26.217
server calls and TypeScript.

00:28:26.300 --> 00:28:30.567
So, now if I'm going back, everything is displayed as we

00:28:30.650 --> 00:28:31.377
have implemented here.

00:28:31.460 --> 00:28:35.937
So, let's finger cross, and yes, we have here all

00:28:36.020 --> 00:28:38.630
the ships for every single launch.

00:28:42.410 --> 00:28:42.830
Thanks.

00:28:43.070 --> 00:28:44.450
We can see all the ships here.

00:28:45.170 --> 00:28:45.447
Cool.

00:28:45.530 --> 00:28:46.647
So, yeah.

00:28:46.730 --> 00:28:48.207
So, that's everything for me.

00:28:48.290 --> 00:28:52.227
If you want to learn more about GraphQL, there is an

00:28:52.310 --> 00:28:54.237
incredible meetup here in Bangkok.

00:28:54.320 --> 00:28:56.007
It's been running for a year and a half.

00:28:56.090 --> 00:28:59.457
This last week, they've got a meetup and a workshop

00:28:59.540 --> 00:28:59.907
for free.

00:28:59.990 --> 00:29:01.377
They provide pizza, they provide everything.

00:29:01.460 --> 00:29:04.167
So, go to meetup.com/graphql-bangkok.

00:29:04.250 --> 00:29:06.327
For the new members, if you click and join, we are going

00:29:06.410 --> 00:29:08.900
to raffle two t-shirts for free.

00:29:09.140 --> 00:29:11.697
And same, if you want to learn more, in two weeks,

00:29:11.780 --> 00:29:15.927
there is going to happen the GraphQL largest conference

00:29:16.010 --> 00:29:16.347
in Asia.

00:29:16.430 --> 00:29:19.550
It's going to happen this year in Bangalore, India.

00:29:19.730 --> 00:29:23.007
Like 500 people, two days of talks, one dedicated workshop,

00:29:23.090 --> 00:29:26.847
more than 25 speakers from around the world, PayPal, AWS,

00:29:26.930 --> 00:29:28.250
all the best companies.

00:29:28.490 --> 00:29:32.690
And yeah, it was a pleasure to be here with you.

00:29:33.170 --> 00:29:35.337
I'm really looking forward to meeting all of you.

00:29:35.420 --> 00:29:36.087
I'm going to be around.

00:29:36.170 --> 00:29:37.940
Please, let's chat about GraphQL, JavaScript.

00:29:38.090 --> 00:29:39.627
I'm super fun about those technologies.

00:29:39.710 --> 00:29:41.457
So, there you got the slides.

00:29:41.540 --> 00:29:43.947
And if you have any questions, please reach me on Twitter

00:29:44.030 --> 00:29:44.517
@swcarlosrj.

00:29:44.600 --> 00:29:47.120
Thank you so much.

00:29:47.270 --> 00:29:48.200
Thank you.

00:29:49.280 --> 00:29:50.270
Thank you, Carlos.

00:29:51.770 --> 00:29:55.617
I told to my friends that you are as handsome like

00:29:55.700 --> 00:29:56.847
Orlando Bloom.
