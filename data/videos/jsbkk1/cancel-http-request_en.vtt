WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:30.560 --> 00:00:33.040
A big round of applause to welcome Mr. Younes Jaaidi,

00:00:33.440 --> 00:00:36.600
developer and extreme programming coach from

00:00:36.760 --> 00:00:38.158
Marmicode Wishtack.

00:00:38.440 --> 00:00:55.280
A big round of applause, please.

00:00:55.800 --> 00:00:56.636
Hello everyone.

00:00:56.719 --> 00:00:58.320
Is that all the welcoming you got?

00:00:58.559 --> 00:00:59.519
How are you all doing?

00:01:00.680 --> 00:01:02.357
Okay, so we're going to start with you.

00:01:02.440 --> 00:01:03.400
Okay, you're doing good?

00:01:03.719 --> 00:01:05.239
So, I assume everyone is okay.

00:01:05.680 --> 00:01:07.560
Okay, so thank you for having me here.

00:01:07.840 --> 00:01:12.879
And I'm going to first start with a question.

00:01:13.159 --> 00:01:17.199
Did you ever have to implement a live search form?

00:01:17.680 --> 00:01:19.517
Like, you know, you don't want to hit the search button,

00:01:19.600 --> 00:01:22.160
you want some type ahead or live search.

00:01:22.320 --> 00:01:24.119
Who did that?

00:01:24.799 --> 00:01:25.720
Okay, good.

00:01:25.960 --> 00:01:26.837
Was it easy?

00:01:26.920 --> 00:01:28.640
Was it fun?

00:01:29.400 --> 00:01:30.320
Okay, no one.

00:01:30.560 --> 00:01:31.320
Okay, good.

00:01:31.520 --> 00:01:34.480
Then it makes my talk useful maybe.

00:01:34.960 --> 00:01:38.920
So, my clicker isn't working.

00:01:39.360 --> 00:01:39.840
Great.

00:01:40.240 --> 00:01:41.480
And my finger.

00:01:41.920 --> 00:01:42.237
Okay.

00:01:42.320 --> 00:01:43.716
So, here it's simple.

00:01:43.799 --> 00:01:48.439
I just want my search form to go hit my old grumpy API

00:01:49.520 --> 00:01:54.480
that's going to fetch some data on a random database.

00:01:54.840 --> 00:01:58.157
And the problem is I have some quick typing,

00:01:58.240 --> 00:01:59.639
some fast typing users.

00:02:00.320 --> 00:02:03.600
And it's going to fill my form quite quickly

00:02:03.960 --> 00:02:06.560
and it's going to send a lot of requests to my API

00:02:06.840 --> 00:02:09.636
then to my database which might,

00:02:09.719 --> 00:02:16.200
I said it might, burn up all my servers and back end.

00:02:17.080 --> 00:02:18.240
Okay, some of you will say,

00:02:18.480 --> 00:02:21.319
"I don't care, I'm full serverless."

00:02:21.480 --> 00:02:24.040
So, it's just going to pop a lot of instances of stuff.

00:02:24.440 --> 00:02:28.960
And okay, maybe, but maybe you care about money.

00:02:29.480 --> 00:02:32.160
So, you want to reduce your costs.

00:02:32.680 --> 00:02:33.080
Okay.

00:02:33.200 --> 00:02:34.999
So, how can we solve this?

00:02:35.319 --> 00:02:36.197
How can we solve this?

00:02:36.280 --> 00:02:38.677
Just think one second about what the first thing

00:02:38.760 --> 00:02:41.240
that comes to your mind about how can we reduce

00:02:41.640 --> 00:02:44.800
this load on our API and our database?

00:02:45.080 --> 00:02:48.119
So, the first thing that comes to mind is,

00:02:48.879 --> 00:02:49.919
does the clicker work?

00:02:50.400 --> 00:02:51.277
Okay, it works.

00:02:51.360 --> 00:02:53.600
So, the first thing that comes to mind is,

00:02:54.040 --> 00:02:57.400
let's put some timer somewhere, like a debounce.

00:02:58.360 --> 00:02:59.876
So, how does the debounce work?

00:02:59.959 --> 00:03:01.639
It means we're going to slow down

00:03:02.560 --> 00:03:04.119
how the data is sent to the API.

00:03:04.239 --> 00:03:08.160
For instance, if I have a user who's writing Marmicode.

00:03:10.560 --> 00:03:12.720
Okay, so he's typing quite fast.

00:03:13.120 --> 00:03:16.277
And as you can see, the keyword string is getting

00:03:16.360 --> 00:03:17.277
longer and longer,

00:03:17.360 --> 00:03:20.239
but we're not sending it thanks to the debounce.

00:03:20.480 --> 00:03:22.076
So, we'll see how we implement this,

00:03:22.159 --> 00:03:24.960
but the debounce will wait for the user to stop

00:03:25.080 --> 00:03:27.917
touching his keyboard for a few milliseconds

00:03:28.000 --> 00:03:31.156
and then it's going to send that result, okay?

00:03:31.239 --> 00:03:33.680
So, instead of sending nine requests to the API,

00:03:34.120 --> 00:03:37.160
we reduce this to two requests because the user

00:03:37.480 --> 00:03:40.600
somewhere slowed down in the middle and at the end.

00:03:41.080 --> 00:03:41.480
Okay?

00:03:41.799 --> 00:03:43.240
So, how does that work?

00:03:44.159 --> 00:03:47.720
Are there any Angular developers here?

00:03:48.400 --> 00:03:49.279
Okay, see ya.

00:03:50.159 --> 00:03:50.399
Alright.

00:03:51.519 --> 00:03:54.040
Okay, are there any RxJS users?

00:03:54.640 --> 00:03:56.160
Are you familiar with RxJS?

00:03:56.760 --> 00:03:58.040
Okay, so I'm going to explain RxJS

00:03:58.200 --> 00:03:59.360
to your friends around you.

00:04:00.360 --> 00:04:02.880
And so I don't have much time here.

00:04:03.000 --> 00:04:04.677
So, how does RxJS work?

00:04:04.760 --> 00:04:07.799
So, we have a stream of data somewhere like keywords$.

00:04:08.560 --> 00:04:11.076
The $ is for streams, it's like a naming convention.

00:04:11.159 --> 00:04:14.197
So, anyway, it's a stream of data, think about it like that.

00:04:14.280 --> 00:04:15.840
And then we go through some pipes

00:04:16.320 --> 00:04:19.280
which are like operators that will transform our stream

00:04:19.400 --> 00:04:20.919
and we get the final results.

00:04:21.120 --> 00:04:25.997
So, the first operator we'll be using is the debounce,

00:04:26.080 --> 00:04:29.600
but first, when we create that observable,

00:04:29.759 --> 00:04:31.717
it doesn't do anything until we subscribe.

00:04:31.800 --> 00:04:33.760
And when we subscribe to that data,

00:04:34.000 --> 00:04:36.437
we're going to call that console.log function

00:04:36.520 --> 00:04:39.480
that will show the results on our console.

00:04:39.680 --> 00:04:40.720
So, how does that work?

00:04:40.880 --> 00:04:43.477
So, first, we're going to add the debounceTime operator,

00:04:43.560 --> 00:04:46.157
which means it's going to wait for 100 milliseconds

00:04:46.240 --> 00:04:47.960
before emitting any values,

00:04:48.560 --> 00:04:49.997
if while the user is typing,

00:04:50.080 --> 00:04:51.880
it's not going to emit any value.

00:04:52.400 --> 00:04:55.399
And then we're going to make a query

00:04:55.639 --> 00:04:58.480
thanks to the switchMap operator.

00:04:58.759 --> 00:05:02.357
So, switchMap is a flattening operator,

00:05:02.440 --> 00:05:05.877
which means it will fetch some asynchronous data

00:05:05.960 --> 00:05:07.960
somehow with an observable

00:05:08.160 --> 00:05:12.680
and it's going to produce it will emit the results, okay?

00:05:13.080 --> 00:05:14.437
I'll put some slides at the end.

00:05:14.520 --> 00:05:18.317
I'll put some link to some slides about how flattening

00:05:18.400 --> 00:05:20.799
works in RxJS and which operators you should use.

00:05:21.039 --> 00:05:23.717
So, here, the cool thing with switchMap is that

00:05:23.800 --> 00:05:26.197
it will every time we have new keywords,

00:05:26.280 --> 00:05:28.877
it's going to cancel the previous requests,

00:05:28.960 --> 00:05:29.757
which is quite cool.

00:05:29.840 --> 00:05:32.116
It will unsubscribe from the previous observable

00:05:32.199 --> 00:05:33.477
and subscribe to the new one.

00:05:33.560 --> 00:05:35.956
That way, it's going to cancel the previous request

00:05:36.039 --> 00:05:40.239
and we don't have like parallel requests to the server.

00:05:40.759 --> 00:05:43.039
Problem is with the debounce,

00:05:43.319 --> 00:05:46.599
I have this thing which is artificial latency.

00:05:47.039 --> 00:05:49.116
I mean, come on, we're all paying a lot of money,

00:05:49.199 --> 00:05:53.000
a lot of time to make like zero latency stuff

00:05:53.199 --> 00:05:55.357
and to reduce the latency everywhere

00:05:55.440 --> 00:05:56.997
on our databases and everything.

00:05:57.080 --> 00:05:59.719
And then we add this 100 milliseconds

00:06:00.360 --> 00:06:03.157
hardcoded latency to the user input.

00:06:03.240 --> 00:06:03.956
Isn't that crazy?

00:06:04.039 --> 00:06:05.480
So, we have to get rid of this.

00:06:05.639 --> 00:06:06.997
If I get rid of this,

00:06:07.080 --> 00:06:09.680
it means I'm going to send a request to the API

00:06:09.840 --> 00:06:13.319
for every keywords the user is writing.

00:06:13.759 --> 00:06:15.757
And it will every time we have new keywords,

00:06:15.840 --> 00:06:17.197
we're going to cancel the previous request

00:06:17.280 --> 00:06:18.400
and send a new one.

00:06:19.000 --> 00:06:21.040
So, how does that work?

00:06:22.800 --> 00:06:23.157
Okay.

00:06:23.240 --> 00:06:26.757
So, the thing is every time the user is sending new keywords,

00:06:26.840 --> 00:06:29.556
we're going to cancel the previous request,

00:06:29.639 --> 00:06:30.800
as you can see here.

00:06:31.400 --> 00:06:34.319
Problem is, okay, we're canceling the previous request,

00:06:34.440 --> 00:06:36.197
we're not consuming bandwidth and stuff,

00:06:36.280 --> 00:06:37.477
but what happens on the back end?

00:06:37.560 --> 00:06:39.116
Is the code still executed?

00:06:39.199 --> 00:06:40.317
What happens with the database?

00:06:40.400 --> 00:06:42.039
Is the query still executed?

00:06:42.240 --> 00:06:45.040
Are we consuming CPU and RAM and stuff or not?

00:06:45.800 --> 00:06:49.000
And what about calling another API somewhere?

00:06:49.280 --> 00:06:51.400
Are we still waiting for the results or not?

00:06:51.639 --> 00:06:52.277
What's happening?

00:06:52.360 --> 00:06:53.639
We still don't know.

00:06:54.560 --> 00:06:59.157
So, that brings us to this thing I want to share with you

00:06:59.240 --> 00:07:02.197
is what happens when we cancel an HTTP request?

00:07:02.280 --> 00:07:04.236
Because it's quite cool to cancel an HTTP request

00:07:04.319 --> 00:07:05.360
when you don't need the data,

00:07:05.560 --> 00:07:08.120
but is the API still working there or not?

00:07:09.520 --> 00:07:09.680
So,

00:07:10.680 --> 00:07:11.599
Let me present myself.

00:07:11.759 --> 00:07:15.039
I'm Younes, from Lyon in France.

00:07:15.479 --> 00:07:18.318
And I run a company called Marmicode.

00:07:18.440 --> 00:07:21.637
We help companies cook like better apps through

00:07:21.720 --> 00:07:24.157
consulting and extreme programming coaching.

00:07:24.240 --> 00:07:25.717
I'm very passionate about extreme programming if you

00:07:25.800 --> 00:07:26.800
want to talk about that.

00:07:27.240 --> 00:07:32.357
And I'm also a Google Developer Expert for Angular

00:07:32.440 --> 00:07:33.796
and web technologies,

00:07:33.879 --> 00:07:36.840
which basically means I don't know everything about

00:07:36.960 --> 00:07:40.077
web technologies, so just don't ask me everything.

00:07:40.160 --> 00:07:42.236
But I can help you with that.

00:07:42.319 --> 00:07:46.079
And I'm here to really help you and to connect you

00:07:46.639 --> 00:07:49.559
with the right teams or resources if you need.

00:07:49.840 --> 00:07:53.879
So if you have any questions about your experience

00:07:54.280 --> 00:07:55.800
with frameworks, with the web today,

00:07:56.120 --> 00:07:59.039
what can we do to help you, just let me know.

00:08:00.400 --> 00:08:03.676
And the other thing I do is extreme programming

00:08:03.759 --> 00:08:04.076
coaching.

00:08:04.159 --> 00:08:08.597
So how to pair program, how to be more pragmatic,

00:08:08.680 --> 00:08:10.319
how to write tests and stuff like that.

00:08:10.720 --> 00:08:17.037
Okay, so without any advertising in between, let's

00:08:17.120 --> 00:08:18.037
talk about NestJS.

00:08:18.120 --> 00:08:21.200
Is anyone familiar with NestJS? Or heard of it?

00:08:21.720 --> 00:08:22.877
Okay, good.

00:08:22.960 --> 00:08:31.076
So NestJS is a feature-rich JavaScript framework for

00:08:31.159 --> 00:08:33.999
the back-end, Node.js framework.

00:08:34.279 --> 00:08:34.919
Based on Node.js.

00:08:35.120 --> 00:08:38.320
So it's based on Express, but not only, you can use

00:08:39.360 --> 00:08:41.640
other frameworks underneath.

00:08:41.760 --> 00:08:44.397
And the cool thing, it's very inspired from Angular,

00:08:44.480 --> 00:08:47.436
so we'll find a lot of similar concepts like

00:08:47.519 --> 00:08:50.280
decorators, TypeScript and stuff like that.

00:08:50.560 --> 00:08:53.357
So instead of explaining how Nest works, I'm going

00:08:53.440 --> 00:08:56.000
to show you some code from Nest.

00:08:56.399 --> 00:09:00.720
This is a controller that handles the `/files` route.

00:09:01.120 --> 00:09:03.717
So the first thing you can see is that we have a

00:09:03.800 --> 00:09:05.196
decorator that describes this.

00:09:05.279 --> 00:09:07.800
Okay, so this is handled by `/files`.

00:09:08.320 --> 00:09:12.436
And then we have the dependency injection, just like

00:09:12.519 --> 00:09:13.037
in Angular.

00:09:13.120 --> 00:09:14.597
So I'm going to inject the service called

00:09:14.680 --> 00:09:15.478
`FileSearch`.

00:09:16.079 --> 00:09:19.597
And we have a decorator here that says that this

00:09:19.680 --> 00:09:22.680
method will handle the GET request.

00:09:23.040 --> 00:09:26.876
And we can inject the query parameters through the

00:09:26.959 --> 00:09:28.520
`@Query` decorator.

00:09:28.640 --> 00:09:31.077
Cool. I mean, if you like decorators, it's really

00:09:31.160 --> 00:09:31.560
cool.

00:09:32.079 --> 00:09:39.077
And then I'm just going to search my files through

00:09:39.160 --> 00:09:39.917
the service.

00:09:40.000 --> 00:09:42.876
So the idea is, it's an API that will search files

00:09:42.959 --> 00:09:44.559
through some query.

00:09:45.079 --> 00:09:47.397
And return the result synchronously, for example,

00:09:47.480 --> 00:09:47.880
here.

00:09:48.279 --> 00:09:52.517
Problem is, we're not going to return a synchronous

00:09:52.600 --> 00:09:53.637
result, of course.

00:09:53.720 --> 00:09:55.920
We're going to do some asynchronous logic there.

00:09:56.040 --> 00:09:59.880
And the cool thing is that Nest works also with RxJS

00:10:00.360 --> 00:10:01.477
and observables.

00:10:01.560 --> 00:10:03.996
So instead of returning a promise or something, I can

00:10:04.079 --> 00:10:04.876
return an observable,

00:10:04.959 --> 00:10:07.397
which has more features than a promise.

00:10:07.480 --> 00:10:09.957
So I can just run `fileSearch` like before,

00:10:10.040 --> 00:10:13.040
and I can pipe my operators to transform the data

00:10:13.160 --> 00:10:16.117
and return that observable that will be transformed

00:10:16.200 --> 00:10:20.200
to an HTTP response and sent to the client.

00:10:20.720 --> 00:10:22.560
So why would I do that?

00:10:22.880 --> 00:10:25.196
What's the why would I use an observable?

00:10:25.279 --> 00:10:27.519
It's not a stream I have here, just having one

00:10:27.920 --> 00:10:28.640
response.

00:10:28.920 --> 00:10:31.917
So we need this because there is an interesting

00:10:32.000 --> 00:10:34.957
feature in observables, it's cancellability.

00:10:35.040 --> 00:10:37.957
I mean, I can cancel an observable.

00:10:38.040 --> 00:10:40.077
Like I can subscribe to an observable, ask it for

00:10:40.160 --> 00:10:40.480
work,

00:10:40.680 --> 00:10:43.717
and then cancel, interrupt that work because I don't

00:10:43.800 --> 00:10:44.957
need that data anymore.

00:10:45.040 --> 00:10:48.679
So how does that work underneath in RxJS?

00:10:49.279 --> 00:10:51.517
Well, it works like this, like you create an

00:10:51.600 --> 00:10:53.957
observable manually like this with `setInterval`,

00:10:54.040 --> 00:10:55.880
for example, which is not a great idea.

00:10:56.040 --> 00:10:57.960
It's not how `interval` works in RxJS.

00:10:58.560 --> 00:11:03.680
And this will produce a value every period.

00:11:04.200 --> 00:11:06.680
But the cool thing is that I can keep the timer.

00:11:07.000 --> 00:11:08.040
What does the timer do?

00:11:08.880 --> 00:11:10.917
We need the timer when we use `setInterval` to clear

00:11:11.000 --> 00:11:11.436
the interval,

00:11:11.519 --> 00:11:13.397
you know, to interrupt it when we don't need that

00:11:13.480 --> 00:11:14.440
data anymore.

00:11:14.680 --> 00:11:18.477
So that's where we return our teardown logic.

00:11:18.560 --> 00:11:21.519
So that's a great concept in observables is that we

00:11:21.639 --> 00:11:24.000
return the kind of destructor,

00:11:24.279 --> 00:11:26.717
you know, like the teardown logic that will be

00:11:26.800 --> 00:11:29.037
executed when we unsubscribe from that observable.

00:11:29.120 --> 00:11:31.237
So every time I unsubscribe from that data, I'm

00:11:31.320 --> 00:11:32.876
like, "Oh, I don't need that data anymore."

00:11:32.959 --> 00:11:35.237
It's going to clear the interval and stop the

00:11:35.320 --> 00:11:35.960
`setInterval`.

00:11:36.800 --> 00:11:38.800
Okay? So let's try it out.

00:11:39.680 --> 00:11:42.756
Wait, got to put my coding clothes and let's cook

00:11:42.839 --> 00:11:46.599
some code.

00:11:47.279 --> 00:11:49.400
I hope it's not going to break the mic.

00:11:51.600 --> 00:11:53.000
I'm the one who cooks at home.

00:11:53.360 --> 00:11:55.599
It's not even true.

00:11:56.279 --> 00:11:58.240
But okay, let's go.

00:12:00.600 --> 00:12:02.040
Didn't work.

00:12:02.720 --> 00:12:03.080
It's gone.

00:12:03.800 --> 00:12:05.600
Okay, so where's my code?

00:12:06.200 --> 00:12:06.960
So here we go.

00:12:07.200 --> 00:12:09.840
I have the controller here, and it's calling the

00:12:10.560 --> 00:12:11.120
service.

00:12:12.639 --> 00:12:16.520
Is the zoom level okay back there?

00:12:17.120 --> 00:12:17.600
Great.

00:12:18.000 --> 00:12:22.436
And so let's search for the function.

00:12:22.519 --> 00:12:25.116
So here, I'm returning just an observable, a

00:12:25.199 --> 00:12:26.957
hardcoded observable with the data.

00:12:27.040 --> 00:12:28.556
So let's create that observable.

00:12:28.639 --> 00:12:31.756
I created, so the idea is I wanted to create, to

00:12:31.839 --> 00:12:34.677
prove my point here,

00:12:34.760 --> 00:12:36.357
I wanted to do something really slow.

00:12:36.440 --> 00:12:37.957
I want to execute something really slow.

00:12:38.040 --> 00:12:41.357
So I was like, "What can I query which is very

00:12:41.440 --> 00:12:41.637
slow?"

00:12:41.720 --> 00:12:45.957
So I thought, maybe if I have a big file in my file

00:12:46.040 --> 00:12:46.600
system,

00:12:46.920 --> 00:12:49.436
and I could search line by line, that could really

00:12:49.519 --> 00:12:50.519
slow down the app.

00:12:50.839 --> 00:12:52.277
And it worked quite well.

00:12:52.360 --> 00:12:53.397
It was not very slow.

00:12:53.480 --> 00:12:55.800
Then I thought, maybe if I have a lot of files,

00:12:56.320 --> 00:12:59.157
like searching through a big directory with lots of

00:12:59.240 --> 00:13:01.560
small files, that could be really slow.

00:13:01.959 --> 00:13:07.600
Then I was like, where can I find a big directory

00:13:07.880 --> 00:13:10.880
with lots of files?

00:13:19.720 --> 00:13:21.240
Okay, let's just do it.

00:13:22.000 --> 00:13:26.157
So, I created this couple of stupid functions just go

00:13:26.240 --> 00:13:28.240
through node modules.

00:13:28.680 --> 00:13:32.116
And here I have an observable that just pops out every

00:13:32.199 --> 00:13:33.600
file path it finds.

00:13:34.120 --> 00:13:41.996
So, I'm going to pipe, map it, and merge map and read

00:13:42.079 --> 00:13:44.200
every lines I find in every path.

00:13:44.680 --> 00:13:47.717
So, merge map just will mix all the results from all

00:13:47.800 --> 00:13:48.196
the files.

00:13:48.279 --> 00:13:51.077
So, for every file, I'm running a stream, I'm trying

00:13:51.160 --> 00:13:54.079
to get a stream of all the lines in there.

00:13:54.199 --> 00:13:56.357
Just reading line by line and creating an object for

00:13:56.440 --> 00:13:59.277
every line which is like super unperformant and I love

00:13:59.360 --> 00:13:59.600
it.

00:14:00.680 --> 00:14:03.440
So, don't do this at home.

00:14:04.120 --> 00:14:06.637
Or if you really don't like your company or something.

00:14:06.720 --> 00:14:07.359
I don't know.

00:14:08.240 --> 00:14:10.879
So, I'm filtering the lines.

00:14:11.399 --> 00:14:13.357
So, every line is an object and I have the content

00:14:13.440 --> 00:14:15.116
because I have like other fields, I guess.

00:14:15.199 --> 00:14:18.959
I have the file and the number and I want the content

00:14:19.120 --> 00:14:22.400
to include my keywords.

00:14:22.880 --> 00:14:23.280
Yeah.

00:14:23.880 --> 00:14:24.480
Here they are.

00:14:25.040 --> 00:14:28.079
And then I don't want this to run for an hour.

00:14:28.759 --> 00:14:31.436
So, and I want to group all the results in an array.

00:14:31.519 --> 00:14:35.358
So, I'm going to use an operator called `bufferTime`.

00:14:35.480 --> 00:14:39.116
So, it will just wait five seconds at most and group

00:14:39.199 --> 00:14:40.559
everything in an array.

00:14:41.079 --> 00:14:43.357
And at the end, I want just one array.

00:14:43.440 --> 00:14:45.160
I don't want like lots of arrays.

00:14:45.279 --> 00:14:47.880
Like once I get my first array, I'm going to stop.

00:14:48.440 --> 00:14:53.037
And last step is here I'm getting all the lines and

00:14:53.120 --> 00:14:57.880
what I really need is an objects with items inside.

00:14:58.040 --> 00:14:58.996
I don't know why I did that.

00:14:59.079 --> 00:15:00.357
I could have used just an array.

00:15:00.440 --> 00:15:01.000
Anyway.

00:15:01.360 --> 00:15:01.760
Okay.

00:15:02.000 --> 00:15:02.316
Good.

00:15:02.399 --> 00:15:04.078
So, this should be really unperformant.

00:15:04.360 --> 00:15:06.240
So, let's check it out.

00:15:07.040 --> 00:15:12.756
So, in order to have like some live memory and CPU

00:15:12.839 --> 00:15:16.876
usage of my node app, I had to create like small app

00:15:16.959 --> 00:15:17.436
for this.

00:15:17.519 --> 00:15:19.399
You will find the source code at the end.

00:15:19.720 --> 00:15:21.839
So, here, look at this.

00:15:22.199 --> 00:15:22.996
Look at the network.

00:15:23.079 --> 00:15:25.957
Every time I write something, the previous request is

00:15:26.040 --> 00:15:26.837
canceled.

00:15:26.920 --> 00:15:28.357
But look at my node.js app.

00:15:28.440 --> 00:15:29.520
It's going crazy.

00:15:30.040 --> 00:15:31.520
And now I get the results.

00:15:31.800 --> 00:15:37.957
Or for example, suppose I just start searching a lot

00:15:38.040 --> 00:15:38.799
of stuff.

00:15:39.399 --> 00:15:45.157
So, every key is every time I add a character to my

00:15:45.240 --> 00:15:48.477
keywords, it's running a search on the API and it

00:15:48.560 --> 00:15:49.640
keeps running.

00:15:50.000 --> 00:15:53.399
And even if I just send the keys and I close the

00:15:54.639 --> 00:15:58.480
window, my back-end is still working at 100% CPU

00:15:59.040 --> 00:16:00.520
which is not crazy.

00:16:01.160 --> 00:16:04.640
So, it's quite a deception because I was expecting

00:16:04.759 --> 00:16:07.756
that canceling the request on the browser would

00:16:07.839 --> 00:16:10.436
unsubscribe from my observable on the back-end and

00:16:10.519 --> 00:16:13.799
stop the processing, but it didn't work.

00:16:14.399 --> 00:16:18.680
And so I had to dive into NestJS code and I realized

00:16:18.920 --> 00:16:23.717
that somewhere it's just grabbing the observable and

00:16:23.800 --> 00:16:27.719
running the `toPromise` method and grabbing the data

00:16:28.000 --> 00:16:32.360
at the end and returning it with Express.

00:16:32.720 --> 00:16:36.957
So, I had to find some way of detecting how the

00:16:37.040 --> 00:16:42.517
request is interrupted and unsubscribe at that moment

00:16:42.600 --> 00:16:43.357
from the observable.

00:16:43.440 --> 00:16:44.799
So, let's go back to our slide.

00:16:44.959 --> 00:16:46.277
So, we tried it out.

00:16:46.360 --> 00:16:48.959
It didn't work as you already guessed.

00:16:49.079 --> 00:16:54.077
So, it didn't work because as I said, Nest doesn't

00:16:54.160 --> 00:16:56.077
unsubscribe automatically.

00:16:56.160 --> 00:17:00.236
So, but NestJS has this common thing we have in great

00:17:00.319 --> 00:17:02.397
frameworks in general is like concepts like

00:17:02.480 --> 00:17:04.637
interceptors and stuff like that that allow us to

00:17:04.720 --> 00:17:06.160
intercept every request.

00:17:06.480 --> 00:17:09.637
So, here what I'm doing is that I'm just writing an

00:17:09.720 --> 00:17:17.317
interceptor that grabs all that intercepts like every

00:17:17.400 --> 00:17:19.596
request coming and then I have a parameter called

00:17:19.679 --> 00:17:22.637
next, which is the handler that will really execute

00:17:22.720 --> 00:17:23.317
the code.

00:17:23.400 --> 00:17:26.277
It will, it's the, it will be mapped to the right

00:17:26.360 --> 00:17:27.360
router there.

00:17:27.559 --> 00:17:30.137
And of course, it's returning an observable because we

00:17:30.220 --> 00:17:31.680
are using observables here.

00:17:33.000 --> 00:17:37.197
So, this is just forwarding the request, nothing more.

00:17:37.280 --> 00:17:38.596
So, I want to transform this.

00:17:38.679 --> 00:17:40.397
So, what I'm going to do is I'm going to grab the

00:17:40.480 --> 00:17:41.040
request.

00:17:41.160 --> 00:17:43.157
Well, I'm switching to HTTP because it could be like a

00:17:43.240 --> 00:17:44.480
websocket or something.

00:17:44.720 --> 00:17:49.557
And I'm subscribing from events is a function from

00:17:49.640 --> 00:17:53.677
RxJS helps us subscribe to an event and unsubscribe at

00:17:53.760 --> 00:17:54.400
the end from it.

00:17:55.159 --> 00:17:57.956
So, I'm subscribing to the close event, which is

00:17:58.039 --> 00:18:01.476
triggered by the socket, you know, from for that HTTP

00:18:01.559 --> 00:18:01.836
request.

00:18:01.919 --> 00:18:02.559
It works even with HTTP2.

00:18:03.520 --> 00:18:07.317
So, and I have now an observable called close that

00:18:07.400 --> 00:18:10.317
will trigger an event when the connection is shut

00:18:10.400 --> 00:18:10.800
down.

00:18:11.280 --> 00:18:15.076
But the cool thing is next.handle returns an

00:18:15.159 --> 00:18:18.637
observable and there is a great operator in RxJS which

00:18:18.720 --> 00:18:22.076
is called `takeUntil` that will subscribe to that

00:18:22.159 --> 00:18:22.797
observable.

00:18:22.880 --> 00:18:26.557
It will subscribe to the response until something

00:18:26.640 --> 00:18:27.280
happens.

00:18:27.600 --> 00:18:30.639
And here the something is close event.

00:18:30.799 --> 00:18:35.037
So, it will subscribe until the connection is closed

00:18:35.120 --> 00:18:36.476
and then it will unsubscribe.

00:18:36.559 --> 00:18:40.076
So, just by adding this interceptor to my app, it

00:18:40.159 --> 00:18:40.840
should work.

00:18:41.039 --> 00:18:43.480
So, let's try it again.

00:18:44.080 --> 00:18:46.240
Okay, getting all impatient.

00:18:46.440 --> 00:18:48.520
And see what happens.

00:18:49.280 --> 00:18:50.160
Where is my code?

00:18:50.559 --> 00:18:57.117
So, here in my module, I'm just adding providers just

00:18:57.200 --> 00:18:57.836
like in Angular.

00:18:57.919 --> 00:19:01.680
I can add an interceptor and it's exactly the code

00:19:02.000 --> 00:19:02.920
from my slide.

00:19:03.440 --> 00:19:04.117
Almost exactly.

00:19:04.200 --> 00:19:06.760
Well, anyway, it's exactly the same code.

00:19:07.360 --> 00:19:08.596
And let's see what happens.

00:19:08.679 --> 00:19:10.517
I didn't change anything in my code.

00:19:10.600 --> 00:19:14.559
I'm just adding this interceptor.

00:19:15.480 --> 00:19:15.800
Okay.

00:19:16.480 --> 00:19:18.400
Look at this.

00:19:19.080 --> 00:19:20.479
Okay, looks better.

00:19:20.679 --> 00:19:22.877
Of course, it's slow because like it's reading node

00:19:22.960 --> 00:19:23.720
modules, come on.

00:19:24.159 --> 00:19:27.517
And now if I do this, send keys, you see, it's not

00:19:27.600 --> 00:19:29.479
like 100% CPU, it's less.

00:19:30.159 --> 00:19:36.197
And the cool thing is if I start a search and stop, it

00:19:36.280 --> 00:19:38.716
immediately stops the processing on the back-end.

00:19:38.799 --> 00:19:43.437
Or if I start search, then I just close the window, it

00:19:43.520 --> 00:19:46.520
just stops all the processing on the back-end.

00:19:46.679 --> 00:19:49.117
So, it's just like if our back-end detected that the

00:19:49.200 --> 00:19:53.879
browser just shut down or the connection was canceled.

00:19:54.840 --> 00:19:55.160
Okay.

00:19:56.080 --> 00:20:02.317
Now, let's go a little bit further and instead of

00:20:02.400 --> 00:20:06.677
using my file search service, going to use dependency

00:20:06.760 --> 00:20:11.357
injection here and instead of using file search, I'm

00:20:11.440 --> 00:20:13.877
going to use file search Mongo.

00:20:13.960 --> 00:20:18.237
It's going to use MongoDB to do this and Mongo was

00:20:18.320 --> 00:20:21.840
really super fast because I put like all the files in

00:20:22.280 --> 00:20:26.317
MongoDB and every line and I couldn't slow it down

00:20:26.400 --> 00:20:26.836
enough.

00:20:26.919 --> 00:20:29.760
So, the only way I found is like this hacky ugly way

00:20:29.960 --> 00:20:34.277
where I'm executing like a function in Mongo to check

00:20:34.360 --> 00:20:37.880
every word in every line, which is not like the best.

00:20:38.200 --> 00:20:39.280
Don't do this at home.

00:20:39.679 --> 00:20:41.600
And but it's really super slow and I love it.

00:20:42.520 --> 00:20:48.000
And the cool thing, so let us see how it works.

00:20:48.600 --> 00:20:53.320
So, without our interceptor that does all the magic,

00:20:53.840 --> 00:20:55.760
this is what we get.

00:20:56.720 --> 00:20:57.120
Wait.

00:20:58.720 --> 00:21:03.040
Stats service.

00:21:03.480 --> 00:21:06.079
I'm going to watch MongoDB stats.

00:21:06.679 --> 00:21:09.557
So, this is not the CPU and memory from my node.js,

00:21:09.640 --> 00:21:16.119
it's the CPU and memory from MongoDB.

00:21:16.559 --> 00:21:17.237
It's really slow.

00:21:17.320 --> 00:21:18.680
It's not great.

00:21:18.880 --> 00:21:20.440
Look at this.

00:21:22.640 --> 00:21:22.880
100% CPU.

00:21:23.640 --> 00:21:28.520
And even if I stop, it's just burning everything here.

00:21:29.360 --> 00:21:31.280
So it's not working.

00:21:31.640 --> 00:21:42.997
But once I just add my interceptor here, look at this.

00:21:43.080 --> 00:21:47.920
Ooh, looks better.

00:21:48.440 --> 00:21:51.160
So here it's really searching for every character.

00:21:51.360 --> 00:21:51.760
Good.

00:21:52.120 --> 00:21:54.840
Or let's search and then stop.

00:21:55.520 --> 00:21:58.677
It's really interrupting the work on the database.

00:21:58.760 --> 00:22:01.797
Closing the window, and it stops immediately.

00:22:01.880 --> 00:22:05.400
So how does this voodoo magic work?

00:22:06.000 --> 00:22:09.280
It's just because there's no more voodoo magic here.

00:22:09.400 --> 00:22:13.757
It's just I wrote like this Mongo find function and I

00:22:13.840 --> 00:22:17.080
create a session in Mongo lib when I do my query.

00:22:17.600 --> 00:22:22.720
And in the teardown logic, I just go really hardcore

00:22:22.840 --> 00:22:25.640
and I kill the session, which is something possible.

00:22:26.159 --> 00:22:28.956
I don't think it's something you should do in

00:22:29.039 --> 00:22:32.120
production, but do it and let me know how it works.

00:22:33.279 --> 00:22:38.476
And because the `session.endSession` didn't cut down,

00:22:38.559 --> 00:22:40.600
stop the request violently.

00:22:41.000 --> 00:22:42.157
It's not very efficient.

00:22:42.240 --> 00:22:45.799
But the `killSession` works quite well and I don't know.

00:22:46.279 --> 00:22:48.800
I'd use it, but use it first, please.

00:22:49.240 --> 00:22:50.200
Help yourself.

00:22:50.919 --> 00:22:51.319
Okay.

00:22:51.919 --> 00:22:53.557
So the click works?

00:22:53.640 --> 00:22:54.040
Good.

00:22:54.159 --> 00:22:57.757
So the idea is now what we change is that every time we

00:22:57.840 --> 00:23:03.080
make a request, it's going to cancel the previous one.

00:23:03.360 --> 00:23:05.677
And it will propagate the cancellation, which is really

00:23:05.760 --> 00:23:05.877
cool.

00:23:05.960 --> 00:23:08.716
It means like if you send a request to an API gateway,

00:23:08.799 --> 00:23:11.357
the gateway will cancel the request on the next server,

00:23:11.440 --> 00:23:12.877
the cloud function, and so on.

00:23:12.960 --> 00:23:17.196
And you can cancel all the work if you have a way to

00:23:17.279 --> 00:23:20.520
implement a teardown, which is not `killSession`, for

00:23:21.000 --> 00:23:21.560
example.

00:23:22.000 --> 00:23:23.997
Anyway, so every request will cancel the rest.

00:23:24.080 --> 00:23:27.800
So the key takeaways are: think reactive.

00:23:28.080 --> 00:23:30.880
It's not easy, but it's really worth it.

00:23:31.240 --> 00:23:33.117
So we have it's a mind shift.

00:23:33.200 --> 00:23:34.117
We have to think reactive.

00:23:34.200 --> 00:23:34.956
It's another way of thinking.

00:23:35.039 --> 00:23:36.600
We think about streams and stuff.

00:23:37.320 --> 00:23:40.360
And the best way to learn is to practice.

00:23:40.640 --> 00:23:43.040
Use observables even for single values.

00:23:43.200 --> 00:23:45.117
Sometimes don't use observables, use promises because

00:23:45.200 --> 00:23:47.877
we're like, "Oh, it's just one value and let's just

00:23:47.960 --> 00:23:48.797
use a promise."

00:23:48.880 --> 00:23:51.037
Use observables even if you have a single value because

00:23:51.120 --> 00:23:53.200
you can cancel the request afterwards.

00:23:53.320 --> 00:23:54.919
You can cancel the processing.

00:23:55.039 --> 00:23:57.677
And do not ignore the teardown logic.

00:23:57.760 --> 00:24:00.517
Implement it because sometimes we implement observables.

00:24:00.600 --> 00:24:02.437
I'm like, "Oh, I'm just going to create an observable.

00:24:02.520 --> 00:24:03.596
I don't care about the teardown.

00:24:03.679 --> 00:24:04.920
I'm not going to do the `clearInterval`."

00:24:05.039 --> 00:24:07.600
So there can be memory leaks there and CPU leaks.

00:24:09.520 --> 00:24:12.757
And yes, you can use RxJS everywhere.

00:24:12.840 --> 00:24:14.797
You can use it in Angular.

00:24:14.880 --> 00:24:16.476
You can use it without Angular.

00:24:16.559 --> 00:24:19.080
You can use it on the back-end with NestJS.

00:24:19.320 --> 00:24:20.760
You can use it without Nest.

00:24:20.880 --> 00:24:21.956
You can use it everywhere.

00:24:22.039 --> 00:24:22.476
It's really cool.

00:24:22.559 --> 00:24:25.316
You can use RxJS in your CLIs, like you write CLI

00:24:25.399 --> 00:24:27.880
command, and you can use observables there.

00:24:29.039 --> 00:24:31.440
So these are the key takeaways.

00:24:31.640 --> 00:24:34.360
And almost the end, I guess.

00:24:34.480 --> 00:24:38.716
And last thing is if you need any help, just get in

00:24:38.799 --> 00:24:39.877
touch with us at Marmicode.

00:24:39.960 --> 00:24:42.196
We do consulting, extreme programming coaching.

00:24:42.279 --> 00:24:44.757
We do online consultations to help you like an hour

00:24:44.840 --> 00:24:48.757
here and there to just unlock issues like, "I run a

00:24:48.840 --> 00:24:52.363
`killSession` on my MongoDB" and such.

00:24:52.559 --> 00:24:56.877
And do code reviews, so we can remove the `killSession`

00:24:56.960 --> 00:24:58.040
stuff from your code.

00:24:58.480 --> 00:25:02.359
And we do workshops and stuff like that on Angular and

00:25:03.039 --> 00:25:05.277
extreme programming and JavaScript in general.

00:25:05.360 --> 00:25:07.196
So you can find me online.

00:25:07.279 --> 00:25:08.476
You can follow me on Twitter.

00:25:08.559 --> 00:25:10.679
I'm going to share a blog post on this soon.

00:25:11.159 --> 00:25:13.877
And you can get in touch through my email here and

00:25:13.960 --> 00:25:14.677
through the website.

00:25:14.760 --> 00:25:18.519
You can find the slides on `bit.ly/cancel-http`.

00:25:19.240 --> 00:25:22.757
You will also find some slides for the RxJS flattening

00:25:22.840 --> 00:25:23.956
strategies and stuff like that.

00:25:24.039 --> 00:25:25.357
And I might add some links.

00:25:25.440 --> 00:25:27.076
Like for example, if you have questions about where do

00:25:27.159 --> 00:25:29.917
I learn RxJS and stuff, I can add links there later if

00:25:30.000 --> 00:25:30.520
you want.

00:25:31.640 --> 00:25:37.357
ขอบคุณครับ and one last thing before you go crazy, can

00:25:37.440 --> 00:25:39.479
I take a picture with you, guys?

00:25:40.159 --> 00:25:40.517
Yeah!

00:25:40.600 --> 00:25:42.877
And you do like you pretend like it was really cool

00:25:42.960 --> 00:25:46.117
talk, like the best ever, and like there is a huge

00:25:46.200 --> 00:25:47.280
party outside.

00:25:47.640 --> 00:25:52.196
I'm going there and raise your hands like crazy.

00:25:52.279 --> 00:25:55.200
Throw out your t-shirts and stuff or all your clothes.

00:25:56.159 --> 00:25:56.479
Yeah!

00:25:57.159 --> 00:25:59.637
I don't know if I see it's just all blurry.

00:25:59.720 --> 00:26:00.757
I'm really bad at selfies.

00:26:00.840 --> 00:26:02.316
I should train at home.

00:26:02.399 --> 00:26:06.720
And the guys from Hey, people from the top there!

00:26:07.320 --> 00:26:07.640
Hey!

00:26:08.080 --> 00:26:10.599
They have like gold tickets.

00:26:11.240 --> 00:26:12.760
They're drinking champagne there.

00:26:12.880 --> 00:26:13.280
Okay.

00:26:13.480 --> 00:26:14.720
Well, thank you very much.

00:26:15.320 --> 00:26:15.640
ขอบคุณครับ

00:26:16.320 --> 00:26:16.840
Thank you, Younes.

00:26:17.399 --> 00:26:17.917
Thank you.

00:26:18.000 --> 00:26:19.240
Thank you.

00:26:20.000 --> 00:26:21.757
Such a pleasure time to be with you.

00:26:21.840 --> 00:26:24.410
อันนี้เป็นหัวข้อของคุณยูเนสนะค่ะ

00:26:24.493 --> 00:26:27.593
ท่านไหนที่สนใจอยากจะคุยกับคุณยูเนสต่อ

00:26:27.677 --> 00:26:29.716
ก็เรียนเชิญได้ที่ห้อง Q&A นะคะ

00:26:29.799 --> 00:26:31.308
ออกจากเธียเตอร์แล้วไปทางขวา

00:26:31.391 --> 00:26:34.757
จะมีห้อง Q&A อยู่ด้านข้างทางฝั่งขวานะคะ

00:26:34.840 --> 00:26:38.440
So if you like to talk to him personally, คุณยูเนส

00:26:39.270 --> 00:26:42.037
Jaaidi, we have a Q&A room once you go out from this

00:26:42.120 --> 00:26:44.679
theater, turn right and you will see the Q&A room,

00:26:44.880 --> 00:26:45.280
okay?

00:27:50.440 --> 00:27:52.480
One more thing for me, one more reminder.

00:27:52.840 --> 00:27:56.397
For anyone of you who haven't choose your special menu

00:27:56.480 --> 00:28:01.479
for lunch yet, please enter to our browser.

00:28:01.919 --> 00:28:05.479
No `www`, just `app.javascriptbangkok.com`.

00:28:07.760 --> 00:28:11.357
`app.javascriptbangkok.com` because we have one more

00:28:11.440 --> 00:28:15.560
session and then we're taking a break for our lunch

00:28:16.080 --> 00:28:16.956
meal together.

00:28:17.039 --> 00:28:20.879
So please choose your lunch meal, your lunch venue.

00:28:21.399 --> 00:28:27.357
And once you choose your lunch meal, please show this

00:28:27.440 --> 00:28:31.277
app, this browser to our staff on the seventh floor.

00:28:31.360 --> 00:28:33.557
You will get the lunch coupon, okay?

00:28:33.640 --> 00:28:35.519
You need to get the lunch coupon first.