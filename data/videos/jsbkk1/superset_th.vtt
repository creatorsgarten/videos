WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:00.760 --> 00:00:01.760
มาต่อกันเลยค่ะ

00:00:01.959 --> 00:00:05.160
ถัดไปก่อนจะไปพักเบรกทานอาหารกลางวันกันนะคะ

00:00:05.279 --> 00:00:12.560
ขอเชิญพบกับทางวิทยากรท่านนี้จะมาเล่าให้ฟังถึงเรื่องของการทำ TypeScript ค่ะ

00:00:12.880 --> 00:00:16.677
ในหัวข้อ How I Met My Superset of JavaScript นะคะ

00:00:16.760 --> 00:00:19.877
ขอเสียงปรบมือต้อนรับคุณสิริรัตน์ รุ่งเพชรรัตน์

00:00:19.960 --> 00:00:36.200
CTO จาก Builk One Group Thailand สวัสดีค่ะ

00:00:36.960 --> 00:00:42.000
ขอกลับมาที่หน้าแรกก่อนนะคะ

00:00:43.000 --> 00:00:47.000
วันนี้ค่ะ ยุ้ยนะคะ มาจากบริษัท Builk One Group ค่ะ

00:00:47.120 --> 00:00:49.956
จะมาเล่าเรื่องราว love comedy แล้วกันค่ะ

00:00:50.039 --> 00:00:53.361
ถือว่ามันเป็น love comedy ในการ transition นะคะ

00:00:53.719 --> 00:00:57.240
จาก AngularJS มาเป็น TypeScript ค่ะ

00:00:58.320 --> 00:01:01.436
ตั้งชื่อมันว่า How I Met My Superset of JavaScript

00:01:01.519 --> 00:01:03.197
ใครเคยดู How I Met Your Mother คะ

00:01:03.280 --> 00:01:05.520
มันเป็นเรื่องราว love comedy ประมาณนั้นแหละค่ะ

00:01:08.119 --> 00:01:10.837
สำหรับ talk นี้นะคะจะแบ่งออกเป็น 2 part

00:01:10.920 --> 00:01:14.396
part แรกเราจะลงกันเรื่อง technical ซักเล็กน้อยว่า

00:01:14.479 --> 00:01:18.080
ตอนที่ทำเนี่ย มันมีอุปสรรคอะไรนะคะ

00:01:18.479 --> 00:01:22.036
แล้วก็อีก part นึงจะเป็นเรื่องของการ convince ค่ะ

00:01:22.119 --> 00:01:26.080
ถ้าหากว่าเราอยากจะ transition เทคโนโลยีอะไรในบริษัทเรา

00:01:26.320 --> 00:01:30.200
เราจะพูดกับทุกคนที่อยู่ในบริษัทว่ายังไงนะคะ

00:01:30.759 --> 00:01:33.316
การเปลี่ยนเทคโนโลยีอะไรซักอย่างสำหรับยุ้ยแล้ว

00:01:33.399 --> 00:01:36.039
มันจะเหมือนกับการพาแฟนใหม่เข้าบ้านค่ะ

00:01:36.680 --> 00:01:40.399
ก็เราจะมีการพบรักกับแฟนคนใหม่ก่อนเนาะ

00:01:40.600 --> 00:01:44.479
ในขณะเดียวกันเราก็ยังมีเทคโนโลยีเก่าที่เป็นแฟนคนเก่า

00:01:44.640 --> 00:01:46.237
นั่งรอเราอยู่ที่บ้านเหมือนกัน

00:01:46.320 --> 00:01:50.477
แถมเรายังมีลูกๆ ที่ร่วมกันพัฒนามันขึ้นมา

00:01:50.560 --> 00:01:52.799
ก็คือเหล่า developer tester

00:01:53.200 --> 00:01:54.437
เท่านั้นยังไม่พอค่ะ

00:01:54.520 --> 00:01:56.279
เรายังมีคุณพ่อคุณแม่ของเรา

00:01:56.479 --> 00:02:00.517
คุณพ่อคุณแม่ของญาติของแฟนเราอีกต่างหากนะคะ

00:02:00.600 --> 00:02:04.757
ที่คอยพร่ำบอกเราว่าคนเก่าเนี่ยเป็นคนที่ดีขนาดไหน

00:02:04.840 --> 00:02:06.320
แล้วทำไมเราถึงไม่ควรเปลี่ยน

00:02:07.039 --> 00:02:10.357
เพราะฉะนั้นเราไปเริ่มกันที่ part technical ก่อนดีกว่าค่ะ

00:02:10.440 --> 00:02:14.117
รักแรกพบนะคะ ครั้งแรกที่เราได้พบ TypeScript นะคะ

00:02:14.200 --> 00:02:16.117
ต้องบอกก่อนว่าสำหรับ Builk One Group เนี่ย

00:02:16.200 --> 00:02:25.880
เชี่ยวชาญเรื่องการใช้งาน AngularJS มาก

00:02:26.200 --> 00:02:27.997
แล้วนอกจากเชี่ยวชาญเรื่องนั้นไม่พอ

00:02:28.080 --> 00:02:30.400
เรายังเชี่ยวชาญเรื่องการมี backend เป็น C#

00:02:30.879 --> 00:02:33.597
พอพูดอย่างงี้แล้วเนี่ย พอจะเข้าใจแล้วใช่มั้ยคะ

00:02:33.680 --> 00:02:36.997
ว่าทำไมเราถึงเลือก TypeScript มาเป็นอาวุธใหม่ของเรา

00:02:37.080 --> 00:02:38.559
มาเป็นแฟนคนใหม่ของเรา

00:02:38.879 --> 00:02:42.917
เพราะว่าเรามีความเชี่ยวชาญในการสร้างป้อมปราการค่ะ

00:02:43.000 --> 00:02:46.717
ทุกคนคงจะเคยชินดีว่าการสร้าง Angular application

00:02:46.800 --> 00:02:49.400
ขึ้นมาซักตัวนึงเนี่ย เหมือนการสร้างป้อมปราการ

00:02:49.840 --> 00:02:52.160
มันไม่ใช่ว่าจะขึ้นมากันได้ง่ายๆ

00:02:52.440 --> 00:02:56.796
มีเทคโนโลยี learning curve ที่ค่อนข้างเยอะพอสมควร

00:02:56.879 --> 00:02:58.160
สำหรับคนที่เป็นมือใหม่

00:02:58.800 --> 00:03:05.040
เพราะฉะนั้นมันถึงเป็นสิ่งที่เราที่เป็นผู้พัฒนา application

00:03:06.040 --> 00:03:07.959
ให้กับวงการก่อสร้างนะคะ

00:03:08.120 --> 00:03:11.557
แน่นอนแต่ละแอปมันตัวใหญ่มาก ERP ซักตัวอะไรอย่างเงี้ย

00:03:11.640 --> 00:03:15.277
ชอบมันมากๆ เพราะว่ามันบริหารจัดการและ maintain ได้ง่าย

00:03:15.360 --> 00:03:19.079
ก็ไม่ได้หมายความว่าตัวอื่นมันจัดการยากเนาะ

00:03:19.879 --> 00:03:23.959
นี่ก็เลยเป็นเหตุผลค่ะ ที่วันนึงน้อง solution architect

00:03:24.400 --> 00:03:25.080
ที่บริษัทค่ะ

00:03:25.519 --> 00:03:28.076
ตอนนี้ก็เป็น solution architect ที่อื่นแล้วนะคะ

00:03:28.159 --> 00:03:29.039
เขามาบอกว่า

00:03:32.000 --> 00:03:32.640
ได้ดีค่ะ

00:03:33.040 --> 00:03:39.317
ก็คือเขาก็บอกว่ามี tech ตัวใหม่พี่ที่น่าสนใจนะคะ

00:03:39.400 --> 00:03:42.560
เขาบอกให้เราฟังว่าเนี่ย มันเป็น strongly typed นะ

00:03:42.920 --> 00:03:46.716
การเปลี่ยนจาก Angular JavaScript ให้กลายเป็น strongly typed

00:03:46.799 --> 00:03:47.516
เป็นไปได้ยังไงวะ

00:03:47.599 --> 00:03:49.076
เพราะว่าเมื่อก่อนนี้เราก็รู้กันเนาะ

00:03:49.159 --> 00:03:51.677
ว่าเราอยากจะประกาศอะไรแล้วโยนมันไปที่ไหน JavaScript

00:03:51.760 --> 00:03:52.440
ก็รับได้หมด

00:03:52.640 --> 00:03:55.080
แต่ทีนี้ มันก็จะตามมาด้วยปัญหาที่ว่า

00:03:56.439 --> 00:03:59.076
เวลาเราจะมา debug เช็กค่ากันสักทีนึงอะ

00:03:59.159 --> 00:04:01.876
กลายเป็นว่าไม่รู้เลยว่าค่านี่มาจากไหน

00:04:01.959 --> 00:04:03.800
เสียเวลาในการ debug ไปมากมาย

00:04:04.159 --> 00:04:07.397
ข้อนี้ก็เลยเป็นจุดเด่นแรกที่น้องเขานำเสนอนะคะ

00:04:07.480 --> 00:04:09.319
แล้วเราก็ซื้อเลย ซื้อเลยตั้งแต่ข้อแรก

00:04:09.799 --> 00:04:11.720
ต่อไปการเป็น OOP concept ค่ะ

00:04:12.439 --> 00:04:15.076
ทุกคนอาจจะไม่รู้เหมือนกันนะ

00:04:15.159 --> 00:04:19.797
อาจจะใช้ class ในการจัดการ JavaScript ของตัวเองรึเปล่า

00:04:19.880 --> 00:04:22.640
แต่ว่าตรงนี้ มันทำให้เกิดความเป็น module

00:04:23.080 --> 00:04:28.320
ความเป็น OOP object-oriented programming ได้ง่ายๆ นะคะ

00:04:29.759 --> 00:04:31.637
ก็เลยเป็นอีกข้อนึงที่เราอยากใช้

00:04:31.720 --> 00:04:33.477
เพราะเมื่อก่อนเราอยากจะทำ class ที

00:04:33.560 --> 00:04:41.396
เราก็ต้องใช้ prototype เนาะ

00:04:41.479 --> 00:04:42.717
ถึงจะทำ class ขึ้นมาได้

00:04:42.800 --> 00:04:46.041
ถึงจะมี function ได้ง่ายๆ แล้วเรียกใช้ไปได้ทุกที

00:04:46.400 --> 00:04:50.477
ต่อไปข้อต่อมาที่เรารู้สึกรักมันก็คือความ compatible ค่ะ

00:04:50.560 --> 00:04:54.200
อันนี้มันเป็นสิ่งที่จำเป็นสำหรับ application

00:04:55.479 --> 00:04:58.076
ที่เราทำมากๆ

00:05:00.199 --> 00:05:01.877
สำหรับความ compatibility นะคะ

00:05:01.960 --> 00:05:04.157
ด้วยความที่ตัว Builk One Group เองเนี่ย

00:05:04.240 --> 00:05:07.159
มี application ตัวนึงที่เป็น ERP ตัวใหญ่มาก

00:05:10.520 --> 00:05:11.836
สำหรับตัวนั้นน่ะนะคะ

00:05:11.919 --> 00:05:16.116
เลยทำให้เรามีการ transition ได้ยากมาก

00:05:16.199 --> 00:05:18.116
พอ transition ยากหมายความว่า

00:05:18.199 --> 00:05:20.520
มันมีโค้ดเยอะมากที่เราจะต้องเปลี่ยนแปลงมัน

00:05:21.160 --> 00:05:24.640
เพราะฉะนั้นการที่มันสามารถ compatible กับตัว

00:05:24.759 --> 00:05:27.437
JavaScript เวอร์ชันเก่า ES เวอร์ชันเก่าได้เนี่ย

00:05:27.520 --> 00:05:30.517
ก็เลยทำให้เราไม่จำเป็นที่จะต้องทิ้ง library

00:05:30.600 --> 00:05:33.479
นับร้อยที่เรามีอยู่กับระบบนั้นไปนะคะ

00:05:33.720 --> 00:05:34.800
ยังใช้ร่วมกันได้

00:05:35.160 --> 00:05:37.717
แล้วก็มันก็กลายเป็นว่าสภาพเราก็เหมือนแฟนเก่ากับ

00:05:37.800 --> 00:05:38.836
แฟนใหม่อยู่ในบ้านเดียวกัน

00:05:38.919 --> 00:05:41.116
จับมือกันอย่าง happy ดีด๊า

00:05:41.199 --> 00:05:45.640
ทีนี้ข้อสุดท้ายที่รู้สึกว่าเป็น strong point ที่เราเลือก

00:05:45.960 --> 00:05:48.396
เพราะว่าเราชอบที่มันเป็น open source

00:05:48.479 --> 00:05:51.160
แล้วก็มี Microsoft community เป็นคน support

00:05:51.360 --> 00:05:52.199
อีกทีนึงนะคะ

00:05:52.360 --> 00:05:53.517
การเป็น open source เนี่ย

00:05:53.600 --> 00:05:57.556
มันจะทำให้ภาษาใดๆ ก็ตามน่ะ มันเติบโตได้รวดเร็วเนาะ

00:05:57.639 --> 00:05:59.956
library อะไรก็ตามที่เป็น open source

00:06:00.039 --> 00:06:02.317
เพราะว่ามันจะมีคนร่วมเดือดร้อนกับเราเยอะมาก

00:06:02.400 --> 00:06:05.160
ถ้าหากว่ามันเจอ bug เจอ defect อะไรขึ้นมา

00:06:05.479 --> 00:06:08.999
อย่างน้อยเราก็รู้ว่าเราไม่ได้ทำงานอยู่คนเดียวค่ะ

00:06:09.360 --> 00:06:12.520
แล้วด้วยความที่มันเป็น Microsoft support อย่างเงี้ย

00:06:12.639 --> 00:06:15.160
ก็แปลว่าอย่างน้อยเวลาเรา pull request เข้าไปอะ

00:06:15.520 --> 00:06:17.117
มันก็จะมีคนที่มีความเชี่ยวชาญ

00:06:17.200 --> 00:06:20.797
เป็นกลุ่มคนกลุ่มนึงที่ทำงานอยู่ตรงนี้มานาน

00:06:20.880 --> 00:06:24.559
และถนัดกับการสร้างป้อมปราการแบบเรามากเลย

00:06:25.199 --> 00:06:27.556
คอย check pull request ให้เรานะคะ

00:06:27.639 --> 00:06:30.359
อย่างน้อยเราก็รู้ว่าเราไม่ทำอะไรผิดพลาดออกไปแน่ๆ

00:06:30.919 --> 00:06:32.956
และนั่นก็เลยเป็นเหตุผลหลักๆ ค่ะ

00:06:33.039 --> 00:06:34.277
จริงๆ มันมีมากกว่านี้ค่ะ

00:06:34.360 --> 00:06:36.521
แต่พูดมากกว่านี้เดี๋ยวเขาจะหาว่าอวย TypeScript

00:06:37.000 --> 00:06:40.519
เพราะฉะนั้นเรามาดูกันดีกว่าว่าระหว่างที่เราทำตัว

00:06:41.919 --> 00:06:45.917
transition จาก AngularJS ให้กลายเป็น TypeScript เนี่ย

00:06:46.000 --> 00:06:49.877
ปัญหาหลักๆ ที่ถือว่าเป็นเรื่องน่าปวดหัวค่ะ

00:06:49.960 --> 00:06:50.917
ของมันมันคืออะไร

00:06:51.000 --> 00:06:53.359
ไม่ใช่การ install webpack ค่ะ อันนั้นง่าย

00:06:53.880 --> 00:06:56.116
แต่ว่าสิ่งที่เราเจอหลักๆ ค่ะ

00:06:56.199 --> 00:06:59.480
ก็คือ product ตัว ERP ของเราที่มัน

00:06:59.680 --> 00:07:01.680
มี tech เทคโนโลยีเก่าๆ อยู่เยอะมาก

00:07:02.199 --> 00:07:07.280
ตอนนี้เราไปเจอปัญหาว่าตอนที่เราพยายามจะ

00:07:07.879 --> 00:07:12.640
transform สัก module นึงเนี่ย ให้มาใช้ TypeScript อะ

00:07:12.840 --> 00:07:14.477
โอเค webpack ไม่ยากเนาะ

00:07:14.560 --> 00:07:16.320
แต่ว่าที่มันไปยากมันกลายเป็นว่า

00:07:16.639 --> 00:07:19.599
มันมีเรื่องราวของ language features

00:07:19.759 --> 00:07:22.279
กับ runtime features ขึ้นมาค่ะ

00:07:22.479 --> 00:07:23.836
เราก็คงรู้กันอยู่แล้วเนาะ

00:07:23.919 --> 00:07:26.119
ว่า developer environment น่ะ

00:07:26.240 --> 00:07:28.359
เราก็ใช้คอมไฮเทคกันสุดๆ

00:07:28.560 --> 00:07:30.597
ไม่ว่า run อะไรเราก็ run ผ่านอยู่แล้วค่ะ

00:07:30.680 --> 00:07:32.956
แล้วด้วยความที่ TypeScript มันยืนพื้นอยู่บน

00:07:33.039 --> 00:07:35.760
modernized JavaScript เนาะ

00:07:36.080 --> 00:07:43.199
มันก็จะเป็นพิษเลยละกัน กับพวก Windows server

00:07:43.560 --> 00:07:47.437
Windows application เก่าๆ ที่เราใช้ IE ตัวเก่าๆ เลย

00:07:47.800 --> 00:07:51.879
แล้วด้วยความที่มันเป็น construction industry ค่ะ

00:07:52.639 --> 00:07:56.076
คนที่ใช้งานระบบ ERP ของเราตัวนี้

00:07:56.159 --> 00:07:59.120
มันไม่ใช่คนที่ไฮเทคอย่างที่ developer เราเป็น

00:07:59.520 --> 00:08:02.720
เพราะฉะนั้น ตอนที่เราเขียนโค้ดไปอะ

00:08:03.159 --> 00:08:05.080
กลายเป็นว่าเราต้องเช็กดีๆ ค่ะ

00:08:05.319 --> 00:08:07.120
ว่าโอเคมันเขียนได้เนาะ

00:08:07.280 --> 00:08:10.160
ใน language เนี่ย ใน language features เนี่ยมันมี

00:08:10.360 --> 00:08:13.439
แต่เวลาพอไป runtime ที่เครื่อง user แล้วอะ

00:08:13.680 --> 00:08:16.836
ไอ้ตัว runtime features ใน browser

00:08:16.919 --> 00:08:19.157
ตัวนั้นมันอาจจะไม่มีสิ่งนี้ให้เรียกใช้อยู่

00:08:19.240 --> 00:08:21.560
ก็กลายเป็น error กันไปกลับมาอย่างมหาศาล

00:08:22.039 --> 00:08:26.157
เพราะฉะนั้น สิ่งที่ดีของเจ้า TypeScript ตัวนี้เลย

00:08:26.240 --> 00:08:28.597
ก็คือเราสามารถกำหนด target มันได้เนาะ

00:08:28.680 --> 00:08:31.159
target ได้ว่าเราจะไปใช้ runtime ตัวไหน

00:08:31.560 --> 00:08:32.880
ในการ compile มัน

00:08:33.200 --> 00:08:36.876
เราจะกำหนด library ตัวไหนเพื่อมาเป็น polyfill ให้มัน

00:08:36.959 --> 00:08:41.876
ถ้าเติมเต็มความ compatible กลับไปใน browser ตัวเก่าๆ

00:08:41.959 --> 00:08:47.720
ถ้าอันนี้ยังไงก็ตามก็คือทำใน config นะคะ tsconfig อะ

00:08:48.480 --> 00:08:50.157
แล้วข้อสุดท้ายเนี่ยค่ะ

00:08:50.240 --> 00:08:52.717
ที่ถือว่าเป็น challenge สุดๆ เลยเหมือนกัน

00:08:52.800 --> 00:08:56.160
ก็คือการขออนุญาต refactor

00:08:56.360 --> 00:08:59.957
อยากรู้ว่าใครที่อยู่ในจุดที่จะต้องขออนุญาต

00:09:00.040 --> 00:09:01.119
refactor บ้างคะ

00:09:01.360 --> 00:09:02.880
ยกมือให้ดูหน่อยได้มั้ยอะ

00:09:03.079 --> 00:09:05.876
นั่นไง เต็มไปหมด 3-4 คนก็ถือว่าเต็มแล้วค่ะ

00:09:05.959 --> 00:09:06.720
ขอบคุณมากค่ะ

00:09:09.600 --> 00:09:12.799
ยากไหมคะ ในการที่จะขอ refactor สักอย่าง

00:09:13.160 --> 00:09:17.560
อย่างที่บอกเมื่อกี้เนาะ เราเหมือน one big family นะคะ

00:09:17.839 --> 00:09:21.277
เราจะมี existing technology ของเราอะค่ะ

00:09:21.360 --> 00:09:22.597
ก็คือเป็นบรรดาแฟนเก่าของเรา

00:09:22.680 --> 00:09:23.957
บางทีไม่ใช่มีคนเดียวเนาะ

00:09:24.040 --> 00:09:28.077
เราก็ต้องยอมรับว่า tech stack ของเรามันสร้างมาจากโลกเก่า

00:09:28.160 --> 00:09:29.800
สารพัดสารเพเหมือนกัน

00:09:30.279 --> 00:09:33.237
นอกจากนี้ เราก็ยังมี dev และ tester ค่ะ

00:09:33.320 --> 00:09:35.200
อย่างที่บอกเค้าเป็นลูกๆของเราเนาะ

00:09:35.320 --> 00:09:37.280
ผู้ร่วมสร้าง product ด้วยกันมา

00:09:38.120 --> 00:09:42.157
PM ค่ะ อันนี้อาจจะเป็นคนที่ยืนขาฝั่ง tech นิดหน่อย

00:09:42.240 --> 00:09:44.117
แล้วก็ฝั่ง business อีกนิดหน่อย

00:09:44.200 --> 00:09:45.960
อันนี้เค้าอาจจะฟังเรารู้เรื่อง

00:09:46.480 --> 00:09:50.717
สุดท้ายค่ะ product owner, business development

00:09:50.800 --> 00:09:53.800
แล้วก็บรรดา C-level และ board ทั้งหลายของเรา

00:09:53.959 --> 00:09:56.520
อันเนี้ยเป็นเหมือนไม้ตายเนาะ

00:09:56.720 --> 00:09:58.640
ถ้าเราพูดกับเค้ารู้เรื่องได้เนี่ย

00:09:58.760 --> 00:10:00.077
ไม่ว่าอะไรเราก็ได้ทำค่ะ

00:10:00.160 --> 00:10:05.557
ทีนี้ก็เลยมีเทคนิคเล็กน้อย ที่อยากจะเล่าให้ฟังละกัน

00:10:05.640 --> 00:10:08.560
ระหว่างที่ขออนุญาตในการ refactor

00:10:08.760 --> 00:10:11.040
เราจะทำยังไงกับกลุ่มคนเหล่านี้บ้าง

00:10:11.240 --> 00:10:15.040
เราขอย้อนกลับมาที่ทีม dev ก่อนนะคะ

00:10:20.200 --> 00:10:23.677
ทีม dev กับ tester เนี่ยถือว่าเป็น tech-savvy people เนาะ

00:10:23.760 --> 00:10:25.480
เค้าคุยกับเรารู้เรื่อง

00:10:26.000 --> 00:10:29.597
จริงๆแล้วสิ่งที่เค้าอยากได้มันมีไม่เท่าไหร่หรอกค่ะ

00:10:29.680 --> 00:10:32.200
ก็คือสิ่งที่ทำให้เค้า performance เพิ่มขึ้น

00:10:32.440 --> 00:10:34.320
สิ่งที่ทำให้ชีวิตเค้าสะดวกขึ้น

00:10:34.720 --> 00:10:39.637
การ debug น้อยลง ของการมี strong type จาก TypeScript เนี่ย

00:10:39.720 --> 00:10:41.959
โอเคอย่างน้อยมันก็ทำให้เค้า dev เร็วขึ้น

00:10:42.360 --> 00:10:45.160
การที่คนใหม่ๆที่เข้ามาเนี่ย

00:10:45.720 --> 00:10:49.477
สามารถทำลายป้อมปราการที่เค้าสร้างเอาไว้แล้วได้ยากขึ้น

00:10:49.560 --> 00:10:50.240
อีกนิดนึง

00:10:50.360 --> 00:10:53.597
อันเนี้ยก็จะทำให้เหล่าพี่ๆเนี่ยเค้าสบายใจมากขึ้น

00:10:53.680 --> 00:10:57.239
อันเนี้ยเป็นสิ่งที่ convince เหล่า dev ได้นะคะ

00:10:58.000 --> 00:11:00.837
แล้วก็ tester เนี่ย จริงๆเค้าก็แค่คาดหวังว่า

00:11:00.920 --> 00:11:04.200
เมื่อ transition ไปแล้วอ่ะ ทุกอย่างมันยัง run ได้ปกติ

00:11:04.800 --> 00:11:08.157
ถ้าหากว่าเราหา library อย่างอะไรสักอย่าง

00:11:08.240 --> 00:11:11.917
ที่จะเอามาใช้แทนสิ่งที่เค้ามีตอนนี้ได้นะคะ

00:11:12.000 --> 00:11:14.876
มันก็ใช้การได้ แค่นี้เค้าก็ happy แล้ว

00:11:14.959 --> 00:11:19.277
ซึ่งจริงๆแล้วเนี่ย ด้วยความที่ TypeScript มัน build on

00:11:19.360 --> 00:11:20.800
JavaScript ธรรมดาเนาะ

00:11:21.040 --> 00:11:25.160
ตัว library เดิมที่เคยใช้ในการทำ test ก็ยังใช้ได้อยู่ค่ะ

00:11:25.279 --> 00:11:26.560
ก็เลยไม่ได้มีปัญหาอะไร

00:11:26.760 --> 00:11:28.477
ตอนนี้เราก็ใช้ Cypress เนาะ

00:11:28.560 --> 00:11:32.280
solution architect เลือกให้มาอีกแล้วค่ะคนนี้นะคะ

00:11:33.120 --> 00:11:36.637
ทีนี้ก็แปลว่าเรื่อง performance เรื่องความเร็วเงี้ย

00:11:36.720 --> 00:11:38.999
เป็นสิ่งที่คุยกันได้ในทีมรู้เรื่อง

00:11:39.279 --> 00:11:40.597
ทุกคนจะเริ่ม buy กับเรา

00:11:40.680 --> 00:11:43.316
และลูกๆเราจะเริ่มโอเคกับเทคโนโลยีใหม่

00:11:43.399 --> 00:11:45.200
พร้อมที่จะมีแม่ใหม่กันมากๆ

00:11:46.200 --> 00:11:48.957
แต่ทีนี้ เราก็ต้องไป convince คนต่อไปค่ะ

00:11:49.040 --> 00:11:52.280
ก็คือ PM คนที่มีความรู้ด้าน tech อยู่ครึ่งนึง

00:11:53.920 --> 00:11:57.277
ถ้าหากว่าสิ่งที่เค้าเข้าใจอ่ะ นอกจากขา tech แล้วอ่ะ

00:11:57.360 --> 00:11:59.000
จะมีอีกเรื่องนึงที่เค้า concern ค่ะ

00:11:59.279 --> 00:12:03.000
ก็คือโปรเจคที่ทำอยู่มันจะเสร็จตามเวลาจริงหรือเปล่า

00:12:03.600 --> 00:12:09.917
ซึ่งตรงเนี้ย มันเป็นสิ่งที่บีบให้เค้าต้องเขี่ยวเข็ญ

00:12:10.000 --> 00:12:11.439
กับเราขึ้นมานิดนึงอะนะคะ

00:12:11.560 --> 00:12:17.320
เพราะฉะนั้นการคุยกับเค้าว่า ตัวเลขที่เค้าจะต้องเสียไป

00:12:17.440 --> 00:12:18.996
cost ที่เราจะต้องเสียไป

00:12:19.079 --> 00:12:21.120
เวลาที่เราจะต้องเสียไปกับการทำสิ่งเนี้ย

00:12:21.560 --> 00:12:22.840
มันมากมายขนาดไหนก็

00:12:23.519 --> 00:12:26.079
ถ้าหากว่าเราหั่นมันเป็นชิ้นเล็กๆค่ะ

00:12:26.440 --> 00:12:28.000
ค่อยๆทำการ refactor ไป

00:12:28.240 --> 00:12:31.079
อย่างของ ERP ตัวเนี้ย เราก็เริ่มจากการ

00:12:31.320 --> 00:12:34.439
เฮ้ย ถ้าหากว่าจะทำ module ใหม่ขึ้นมา

00:12:34.560 --> 00:12:38.040
เราขอ build ขึ้นมาบน stack ใหม่เลยนะ

00:12:38.399 --> 00:12:41.120
อันเนี้ย ก็จะคุยกันได้ง่ายมากกว่าค่ะ

00:12:41.360 --> 00:12:43.480
เพราะว่าเราก็เตรียมลูกๆของเราไว้แล้วว่า

00:12:43.800 --> 00:12:46.839
เดี๋ยวเราจะใช้เทคโนโลยีใหม่เนาะ

00:12:46.959 --> 00:12:49.157
เราส่งเค้าไปเรียน ส่งเค้าไปเตรียมตัวเรียบร้อย

00:12:49.240 --> 00:12:51.679
และแปลว่าเวลาเค้ามา dev อีกทีนึงเนี่ย

00:12:51.880 --> 00:12:55.517
มันก็น่าจะใช้เวลาไม่นานจากที่น่าจะเป็นล่ะ

00:12:55.600 --> 00:12:57.160
เวลาทำ feature

00:12:57.680 --> 00:13:01.160
ทีนี้คนเนี้ยค่ะ PM ก็จะเป็นตัวหลักที่จะช่วยในการ

00:13:02.480 --> 00:13:05.359
convince ของเราต่อไปในขั้นที่สูงขึ้นอะนะคะ

00:13:07.959 --> 00:13:09.840
คุณพ่อของบ้านนะคะ

00:13:10.079 --> 00:13:14.637
คนเนี้ยจริงๆแล้วอ่ะ เคยมีบทความที่อ่านมาเหมือนกันค่ะ

00:13:14.720 --> 00:13:17.556
เค้าบอกว่า บางทีอ่ะเราอาจจะต้องทำอะไรไปก่อน

00:13:17.639 --> 00:13:20.116
เค้าบอกว่าเป็นเรื่องที่คนแต่งงานแล้วน่าจะรู้ดี

00:13:20.199 --> 00:13:22.360
อันนี้ยังไม่รู้อะค่ะ เพราะยังไม่ได้แต่งเนาะ

00:13:22.480 --> 00:13:24.759
เค้าบอกว่าคนแต่งงานน่าจะรู้ดีที่ว่า

00:13:24.959 --> 00:13:27.000
บางทีเราอาจจะต้องทำอะไรไปก่อน

00:13:27.320 --> 00:13:30.519
แล้วค่อยมาขอโทษและขออนุญาตทีหลัง

00:13:30.839 --> 00:13:33.280
ไม่งั้นเราจะไม่มีวันได้ทำนะคะ

00:13:33.399 --> 00:13:35.933
อันนี้ก็ไม่รู้เหมือนกันว่าจริงไหม แต่อาจจะใช้ได้ก็ได้

00:13:36.427 --> 00:13:40.200
จริงๆไม่แนะนำให้ทำแบบนี้นะคะ

00:13:40.480 --> 00:13:41.556
แต่ใครจะลองก็ได้

00:13:41.639 --> 00:13:42.957
เชื่อว่าหลายคนคงลองนะคะ

00:13:43.040 --> 00:13:45.800
อย่าง solution architect คนเก่าเนี่ยก็ลองบ่อยเลยค่ะ

00:13:45.920 --> 00:13:49.037
เพราะว่ามันต้องใช้เวลาในการ research เนาะ เรื่องพวกนี้

00:13:49.120 --> 00:13:53.477
ทีนี้ เหล่าคนเหล่าเนี้ยค่ะ จริงๆแล้วเค้าคือคน

00:13:53.560 --> 00:13:55.357
ที่กำหนดนโยบายบริษัท

00:13:55.440 --> 00:13:59.637
เค้าคือคนที่ตัดสินใจ มีอำนาจสูงอะค่ะ

00:13:59.720 --> 00:14:02.519
ว่าเราจะเลือกเดิน way นี้ หรือเลือกเดินทางอื่น

00:14:02.680 --> 00:14:04.759
หรือจะเลือกจมอยู่กับสิ่งเก่าของเรา

00:14:04.880 --> 00:14:07.519
เพราะฉะนั้นทางที่ดีคือการทำให้เค้าเข้าใจค่ะ

00:14:07.920 --> 00:14:09.597
ซึ่งการทำให้เค้าเข้าใจเนี่ย

00:14:09.680 --> 00:14:16.436
เดี๋ยวสรุปมาให้ดูเป็นอีกสไลด์นึง ง่ายๆ

00:14:16.519 --> 00:14:18.196
ฝั่งนั้นเดี๋ยวเราค่อยพูดกันอีกทีนะคะ

00:14:18.279 --> 00:14:19.436
มาดูฝั่งสีน้ำเงินกันก่อนนะคะ

00:14:19.519 --> 00:14:20.957
non-tech-savvy people นะคะ

00:14:21.040 --> 00:14:22.556
ทำให้เราเข้าใจค่ะ

00:14:22.639 --> 00:14:25.196
ซึ่งสิ่งที่เค้าเข้าใจอย่างที่บอกเมื่อกี้ คล้ายๆ PM ค่ะ

00:14:25.279 --> 00:14:26.480
เค้าเข้าใจเรื่องตัวเลข

00:14:27.639 --> 00:14:31.320
บอกเค้าว่า เวลาที่จะใช้มันคือเท่าไหร่

00:14:31.759 --> 00:14:33.957
ถ้าหากว่าเรา design ระบบมาแล้ว

00:14:34.040 --> 00:14:36.717
เราเตรียมแล้วว่า transition มันต้องเจอกับอะไรบ้าง

00:14:36.800 --> 00:14:38.237
research มาเรียบร้อยอย่างเงี้ย

00:14:38.320 --> 00:14:40.316
เราค่อนข้างจะวางได้ไม่พลาดหรอกค่ะ

00:14:40.399 --> 00:14:43.560
ว่ามันจะใช้เวลาเพิ่มจากเดิมอีกซักกี่วัน

00:14:43.680 --> 00:14:46.760
แล้วก็อย่างที่บอกแนะนำให้ทำกับ module ใหม่ก่อน

00:14:47.320 --> 00:14:49.517
หรือค่อยๆ refactor ทีละส่วนก่อน

00:14:49.600 --> 00:14:52.717
โอเค เดี๋ยวตอนเนี้ยเราลองเปลี่ยน .js เป็น .ts

00:14:52.800 --> 00:14:54.077
ง่ายๆดูก่อนเนาะ

00:14:54.160 --> 00:14:57.759
อะไรอย่างเงี้ยจะทำให้พอคุยกันได้ คุยกันรู้เรื่อง

00:14:58.279 --> 00:15:03.320
ทีนี้ ต่อไปค่ะ เค้าบอกว่าอย่าใช้คำว่า refactor

00:15:03.600 --> 00:15:06.799
อยากรู้ว่ามีใครที่ใช้แล้วโดนเสยกลับมาบ้างไหมคะ

00:15:07.320 --> 00:15:09.760
อย่างยุ้ยเนี่ย จะโดนบ่อยมากนะคะ

00:15:10.000 --> 00:15:12.116
ก็เลยเรียนรู้ค่ะ ที่จะไม่ใช้คำนี้

00:15:12.199 --> 00:15:15.237
แต่ว่ามันคือ improvement

00:15:15.320 --> 00:15:23.357
แล้วก็พยายามบอกเขามากกว่าว่า

00:15:23.440 --> 00:15:25.880
ถ้าหากว่าไม่ทำในตอนนี้

00:15:26.480 --> 00:15:28.359
เราจะเจอกับอะไรในอนาคต

00:15:29.319 --> 00:15:34.360
อย่างยกตัวอย่างเป็นอันนึงแล้วกันที่ใช้แล้วก็ค่อนข้างได้ผลค่ะ

00:15:34.560 --> 00:15:42.199
ก็คือมันมีเรื่อง application ที่เป็น monolithic อยู่ 1 ตัวเนาะ

00:15:42.759 --> 00:15:46.640
เราเชื่อว่าตอนนี้เรากำลังจะทำ software as a service

00:15:46.759 --> 00:15:48.917
เราอยากจะเปลี่ยนตัว monolithic นี้

00:15:49.000 --> 00:15:52.199
ให้กลายเป็น multi-tier application

00:15:52.399 --> 00:15:54.093
เพราะว่ามันจะได้ scale ได้เนาะ

00:15:54.187 --> 00:15:56.199
monolithic คือมันไปไหนก็ไปกันเป็นก้อนน่ะค่ะ

00:15:56.360 --> 00:15:58.316
จะ scale ทีเดียวก็เอาตังค์ฟาดเข้าไปค่ะ

00:15:58.399 --> 00:15:59.637
อัพ server เข้าไป

00:15:59.720 --> 00:16:01.797
ซึ่งเราไม่ได้มีเงินมากขนาดนั้นเนาะ

00:16:01.880 --> 00:16:03.840
ต้องยอมรับความเป็น tech startup

00:16:03.959 --> 00:16:07.519
ทีนี้ก็เลยต้องบอกเขาค่ะว่า

00:16:09.360 --> 00:16:14.437
ตอนนี้ค่ะ เรายังรับได้ที่ระดับหมื่นกว่าคน

00:16:14.520 --> 00:16:16.799
พันคนหรืออะไรก็ว่าไปนะคะ

00:16:17.040 --> 00:16:19.559
แต่ถ้าหากว่าในวันพรุ่งนี้พี่วางแผน

00:16:20.000 --> 00:16:22.800
คือแน่นอนทาง business เขามีการวางแผนอยู่แล้วค่ะ

00:16:22.959 --> 00:16:25.236
ว่าเขาอยากจะได้ตัวเลขยอดต่อไปที่เท่าไหร่

00:16:25.319 --> 00:16:28.399
เขาก็จะบอกเรามาค่ะว่า

00:16:29.079 --> 00:16:31.996
สักปีหน้าหรือว่าสัก 6 เดือนข้างหน้าเนี่ย

00:16:32.079 --> 00:16:36.676
ฉันจะเพิ่ม user จากตอนนี้หลักหมื่นให้กลายเป็นหลักแสนน่ะค่ะ

00:16:36.759 --> 00:16:38.357
ถึงตอนนี้เราบอกเขาได้แล้วค่ะว่า

00:16:38.440 --> 00:16:40.517
server ที่พี่มีอยู่มันกำลังจะไม่ไหวค่ะ

00:16:40.600 --> 00:16:41.920
เรานับถอยหลังให้เขาได้

00:16:42.240 --> 00:16:44.196
ว่ามันกำลังจะไปตายตรงไหน

00:16:44.279 --> 00:16:46.920
คือการนับถอยหลังนี่คือการบอกจำนวนเหมือนกันค่ะ

00:16:47.240 --> 00:16:51.157
ว่าเทคโนโลยีเนี่ยมันต้องการการเปลี่ยนแปลง

00:16:51.240 --> 00:16:55.400
แล้วถ้าหากว่าเปลี่ยนไม่ทันในเวลานี้มันกำลังจะเกิดอะไรขึ้นนะคะ

00:16:55.639 --> 00:16:59.116
ซึ่งกลายเป็นว่าถ้ายังดึงดันที่จะทำอย่างนั้นต่อไป

00:16:59.199 --> 00:17:02.400
กลายเป็นว่าเขาจะเสีย opportunity ซะอีกนะคะ

00:17:04.799 --> 00:17:07.476
ก็เลยถือว่าเป็นการ big improvement ไปเรื่อยๆ ค่ะ

00:17:07.559 --> 00:17:08.996
แล้วก็วางแผนออกมาเป็นระยะว่า

00:17:09.079 --> 00:17:10.800
เราจะเริ่ม improve จากอะไรก่อน

00:17:11.199 --> 00:17:13.400
แล้วค่อยทำอะไรถัดไปนะคะ

00:17:15.520 --> 00:17:17.317
แต่สุดท้ายที่สุดเขาก็บอกว่า

00:17:17.400 --> 00:17:19.960
เออมันก็มีเนาะที่มันเป็นไปไม่ได้

00:17:20.720 --> 00:17:26.000
คือจริงๆแล้วถ้าหากว่าเราอยู่ใน level ที่สูงขึ้นมาสักหน่อยอ่ะค่ะ

00:17:26.720 --> 00:17:30.799
มันจะมีเวลาที่มากขึ้นให้เราทำการ research อะไรอย่างเงี้ย

00:17:31.720 --> 00:17:33.397
ก็จริงๆแล้วในจังหวะนั้นน่ะค่ะ

00:17:33.480 --> 00:17:35.280
คือจังหวะที่เราจะทำอะไรไปก่อน

00:17:35.520 --> 00:17:36.879
แล้วค่อยมาขอโทษทีหลัง

00:17:37.760 --> 00:17:40.440
ซึ่งนั่นก็คือการแอบ research ไปก่อนนะคะ

00:17:40.559 --> 00:17:44.956
ลองขึ้น project ลองเปลี่ยนตัว stack จาก project เดิมไปก่อน

00:17:45.039 --> 00:17:47.557
เพื่อเราจะได้มีตัวเลขมาบอกเขาได้เหมือนกันค่ะ

00:17:47.640 --> 00:17:49.720
สุดท้ายทำเพื่อ serve ตัวเลขล้วนๆ เลย

00:17:50.360 --> 00:17:51.917
ว่าเราจะต้องใช้เวลาเท่าไหร่

00:17:52.000 --> 00:17:53.440
ต้องใช้คนกี่คนนะคะ

00:17:54.080 --> 00:17:58.037
ซึ่งอันนี้กลายเป็นว่าถ้าหากว่าเขาทำเสร็จแล้วเนี่ย

00:17:58.120 --> 00:18:04.799
มันจะไปเปิดโอกาสให้กับธุรกิจของเขาได้มากขึ้นกว่าที่เขาคิดอ่ะค่ะ

00:18:05.039 --> 00:18:07.716
คือสุดท้ายแล้วทั้งสองฝั่งเนี้ยค่ะ

00:18:07.799 --> 00:18:09.157
สุดท้ายนี้ก็ใกล้จะจบแล้วค่ะ

00:18:09.240 --> 00:18:10.956
ใกล้จะจบแล้วเราจะได้กินข้าวกันแล้ว

00:18:11.039 --> 00:18:13.237
ก็คือฝั่ง tech savvy อ่ะค่ะ

00:18:13.320 --> 00:18:14.437
สุดท้ายยังไงก็ตามอ่ะ

00:18:14.520 --> 00:18:18.037
เขาก็ต้องการที่จะทำให้ชีวิตเขาดีขึ้นเท่านั้นเองนะคะ

00:18:18.120 --> 00:18:20.400
ไม่ว่าจะโค้ดได้เร็วขึ้น bug น้อยลง

00:18:20.840 --> 00:18:22.919
อีกอย่างนึงที่อยากจะบอกก็คือ

00:18:23.720 --> 00:18:26.520
อย่างฝั่งของ Builk One Group เองเนี่ยนะคะ

00:18:26.679 --> 00:18:28.360
เรามีระบบ pool dev อ่ะค่ะ

00:18:28.919 --> 00:18:30.197
มี dev กองกลางค่ะ

00:18:30.280 --> 00:18:32.397
แล้วก็มี application เป็น asset รอยอยู่

00:18:32.480 --> 00:18:33.320
นั่นหมายความว่า

00:18:33.480 --> 00:18:37.730
ถ้าหากว่าเราส่ง dev 1 กองกำลังเข้าไปแก้ไข

00:18:37.813 --> 00:18:40.199
application ไหน asset ตัวไหนอย่างเงี้ย

00:18:40.600 --> 00:18:42.640
เมื่อถึงเวลาเขาทำเสร็จเขาออกมา

00:18:43.320 --> 00:18:45.076
เขาอาจจะทิ้ง bug ไว้ก็ได้

00:18:45.159 --> 00:18:47.719
ถ้าหากว่าเราไม่มีระบบแข็งแกร่งพอ

00:18:47.840 --> 00:18:53.240
ที่จะป้องกันไม่ให้ newbie ทั้งหลายเข้าไปทำอะไรที่เขาไม่รู้จักอ่ะค่ะ

00:18:53.880 --> 00:18:56.836
เพราะฉะนั้นตอนนี้เราเลยเลือก tech stack

00:18:56.919 --> 00:18:58.716
ให้กลายเป็น TypeScript ซะทั้งหมดเลย

00:18:58.799 --> 00:19:01.517
ทั้ง backend เป็น strong type อยู่แล้ว C#

00:19:01.600 --> 00:19:03.997
frontend ก็กลายเป็น TypeScript หมดแล้ว

00:19:04.080 --> 00:19:06.997
นั่นหมายความว่าการเกิด bug มันจะน้อยลงค่ะ

00:19:07.080 --> 00:19:08.237
แค่นี้ tester ก็ happy

00:19:08.320 --> 00:19:09.476
dev เราก็ happy ไปด้วย

00:19:09.559 --> 00:19:12.039
PM ก็ happy อยู่แล้วค่ะไม่ต้องวนกลับมาแก้ซ้ำ

00:19:12.799 --> 00:19:15.797
ทีนี้ฝั่ง non-tech savvy อ่ะค่ะ

00:19:15.880 --> 00:19:17.399
สิ่งที่เขาต้องการก็แค่ว่า

00:19:17.720 --> 00:19:21.197
มันจะยังได้ opportunity ที่เขาอยากได้อยู่หรือเปล่า

00:19:21.280 --> 00:19:23.839
แล้วถ้าเราสามารถสื่อสารกับเขาได้นะคะ

00:19:24.159 --> 00:19:28.680
ว่าเราจะต้องทำให้เขาเสีย cost อีกเท่าไหร่

00:19:28.960 --> 00:19:30.757
แล้วก็การเสีย cost ครั้งนี้

00:19:30.840 --> 00:19:32.997
อาจจะเปิด opportunity อะไรให้เขา

00:19:33.080 --> 00:19:35.440
ซึ่งนั่นอาจจะเป็นเงินมูลค่าอีกหลายล้านก็ได้

00:19:35.720 --> 00:19:37.480
แค่นี้ค่ะเขาก็จะ happy แล้ว

00:19:38.440 --> 00:19:42.956
ถ้ายังไงก็ขอจบเรื่องราวของวันนี้ไว้เท่านี้ก่อนนะคะ

00:19:43.039 --> 00:19:45.120
ขอให้ happy transition กันค่ะ

00:19:45.720 --> 00:19:48.560
ขอบคุณค่ะ

00:19:49.320 --> 00:19:50.880
ขอบคุณคุณสิริรัตน์นะคะ

00:19:51.320 --> 00:19:54.197
ขอบคุณ speaker ทุกท่านในช่วงครึ่งวันเช้าด้วยนะคะ

00:19:54.280 --> 00:19:56.716
เดี๋ยวตอนนี้เราจะไปพักเบรกและรับประทานอาหารกลางวันกัน

00:19:56.799 --> 00:19:58.560
ท่านไหนยังไม่ได้เลือกเมนูนะคะ

00:19:59.039 --> 00:20:04.317
อย่าลืมเข้าไปที่ browser app.javascriptbangkok.com นะคะ

00:20:04.400 --> 00:20:06.076
ท่านไหนที่กำลังทยอยเดินออกนะคะ

00:20:06.159 --> 00:20:08.476
เดี๋ยวเราเริ่ม section บ่ายตอนบ่ายโมงตรงนะคะ

00:20:08.559 --> 00:20:10.320
เริ่มตรงเวลานะคะบ่ายโมงตรง

00:20:10.559 --> 00:20:12.917
ท่านไหนเลือกเมนูอาหารแล้ว

00:20:13.000 --> 00:20:15.520
ก็เอาหน้าจอเนี่ยไปโชว์ไว้กับพี่ๆเจ้าหน้าที่ที่ชั้น 7

00:20:15.760 --> 00:20:16.836
ตรงจุดลงทะเบียนนะคะ

00:20:16.919 --> 00:20:18.520
เขาจะแจกเป็นคูปองอาหาร

00:20:19.039 --> 00:20:22.317
แล้วก็เรายังมีแจกของที่ระลึกฟรีด้วย

00:20:22.400 --> 00:20:25.277
ท่านใดที่ยังไม่ได้รับก็เอา badge เนี่ยแหละค่ะ

00:20:25.360 --> 00:20:26.817
ป้ายชื่อเนี่ยไปโชว์เจ้าหน้าที่

00:20:26.900 --> 00:20:30.277
เขาก็จะแจกเป็นของที่ระลึกฟรีเหมือนกันนะคะ

00:20:30.360 --> 00:20:32.400
แล้วก็ยังมีสินค้าอื่นๆ ต่างๆ มากมาย

00:20:32.760 --> 00:20:35.037
สินค้าที่เราจำหน่ายเป็นเซตเนี่ย

00:20:35.120 --> 00:20:36.836
ก็จะเป็นราคาพิเศษด้วยนะคะ

00:20:36.919 --> 00:20:39.880
ลดพิเศษก็เรียนเชิญได้ที่บริเวณชั้น 7 เช่นกันนะคะ

00:20:44.679 --> 00:20:47.237
เดี๋ยวเจอกันตอนบ่ายโมงตรงนะคะ

00:20:47.320 --> 00:20:49.600
section ถัดไปเริ่มบ่ายโมงตรงนะคะ

00:20:50.760 --> 00:20:55.359
Do not forget to choose your lunch meal at

00:20:56.340 --> 00:20:57.321
app.javascriptbangkok.com

00:20:57.600 --> 00:21:01.480
and then show us there you can get the lunch coupon

00:21:02.440 --> 00:21:03.760
on the seventh floor.

00:21:04.520 --> 00:21:06.960
See you again over here at 1 o'clock sharp.

00:21:07.200 --> 00:21:10.357
And for the free souvenir we have provided for you too.

00:21:10.440 --> 00:21:13.196
Just show our staff at the registration

00:21:13.279 --> 00:21:15.517
on the seventh floor your badge

00:21:15.600 --> 00:21:17.920
and then you will get the free souvenir.

00:21:18.400 --> 00:21:21.160
Okay, so see you at 1 o'clock sharp. Thank you.

00:21:21.279 --> 00:21:23.476
ก็เรียนเชิญพักผ่อนรับประทานอาหารตามอัธยาศัย

00:21:23.559 --> 00:21:27.760
เจอกันบ่ายโมงตรงค่ะ