WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:00.139 --> 00:00:04.700
So the next topic is talking about scale...

00:00:04.839 --> 00:00:09.237
Takeaways from our attempt on scaling a small system

00:00:09.320 --> 00:00:11.640
in the Gojek Universe

00:00:46.360 --> 00:00:49.160
Hello. Welcome to the talk.

00:00:52.640 --> 00:00:56.839
Let me fix this real quick.

00:01:02.440 --> 00:01:06.080
All right.

00:01:09.080 --> 00:01:11.680
Hi. Are you guys sleepy yet?

00:01:12.360 --> 00:01:13.680
Just get back from lunch.

00:01:14.600 --> 00:01:15.680
But hang on.

00:01:18.640 --> 00:01:21.120
I have some interesting stories to tell.

00:01:21.720 --> 00:01:26.837
It's going to be helpful, so please listen and

00:01:26.920 --> 00:01:28.120
let's get started.

00:01:32.040 --> 00:01:33.600
Story time.

00:01:34.280 --> 00:01:37.917
My squad has been working on this product for a

00:01:38.000 --> 00:01:39.000
little over a year.

00:01:39.479 --> 00:01:44.356
And it is a customer-facing product that is already

00:01:44.439 --> 00:01:47.840
live on production when I join.

00:01:48.360 --> 00:01:52.277
Our main task is to maintain, develop, and scale

00:01:52.360 --> 00:01:53.200
this system.

00:01:53.719 --> 00:01:57.960
And to be honest, scaling the system is actually

00:01:58.240 --> 00:01:59.200
quite tricky.

00:02:00.360 --> 00:02:05.000
And imagine you need to scale a system which, one,

00:02:05.680 --> 00:02:09.239
it has been inherited from people who already

00:02:10.879 --> 00:02:11.440
moved on.

00:02:11.760 --> 00:02:14.156
So when you have any kinds of question at the code,

00:02:14.239 --> 00:02:17.240
like how it works, you cannot ask them.

00:02:18.200 --> 00:02:23.637
Second, using different tools from other department

00:02:23.720 --> 00:02:25.720
inside the same chapters.

00:02:26.080 --> 00:02:29.680
So we are calling our department chapters and team

00:02:30.120 --> 00:02:32.560
squad for some reason.

00:02:33.000 --> 00:02:36.360
And we only have a handful of engineers working on it.

00:02:37.120 --> 00:02:39.796
And one of them is actually the team lead that is

00:02:39.879 --> 00:02:42.559
always drowning in meetings all days.

00:02:43.040 --> 00:02:47.640
So a lot of weird things happens.

00:02:48.080 --> 00:02:52.236
So one day, we receive a task to add a new pretty

00:02:52.319 --> 00:02:56.120
straightforward features into our system.

00:02:56.640 --> 00:02:58.876
And I asked my teammate back then.

00:02:58.959 --> 00:03:01.997
So he is more familiar with the code and he has

00:03:02.080 --> 00:03:02.557
more context.

00:03:02.640 --> 00:03:05.076
So I asked him like, "How much time do you think

00:03:05.159 --> 00:03:06.320
this is going to take?"

00:03:07.599 --> 00:03:10.796
And he replied, "It's probably going to take only

00:03:10.879 --> 00:03:14.076
a day or two. It's quite straightforward."

00:03:14.159 --> 00:03:17.839
And I was like, "Okay. Sounds reasonable."

00:03:17.959 --> 00:03:19.159
And what do we need to do?

00:03:19.360 --> 00:03:20.317
Let's get started.

00:03:20.400 --> 00:03:26.400
And we start adding code, writing SQL queries,

00:03:26.840 --> 00:03:27.639
adding tests.

00:03:28.080 --> 00:03:30.199
Yes, we write tests after we write code.

00:03:30.480 --> 00:03:31.680
No TDD here.

00:03:32.959 --> 00:03:35.480
And then fixing tests, adding more code.

00:03:37.000 --> 00:03:41.240
And this turns out to be a three weeks worth of

00:03:41.360 --> 00:03:44.400
effort in adding these small features.

00:03:44.760 --> 00:03:49.319
So it was a pretty painful experience.

00:03:49.519 --> 00:03:50.197
What happened?

00:03:50.280 --> 00:03:52.796
What happened with the code?

00:03:52.879 --> 00:03:56.356
And why is this new trivial features took such

00:03:56.439 --> 00:03:58.360
a long time?

00:04:00.239 --> 00:04:03.999
Our main codebase is actually a backend service

00:04:04.439 --> 00:04:08.557
which serve as a backend for mobile app and a

00:04:08.640 --> 00:04:11.677
transactional system for the wider distributed

00:04:11.760 --> 00:04:14.799
system in the Gojek Universe.

00:04:15.159 --> 00:04:17.876
It has several sections that serve different

00:04:17.959 --> 00:04:21.400
purposes written by multiple people.

00:04:21.720 --> 00:04:25.200
So if you look at this picture, right?

00:04:25.800 --> 00:04:29.640
You can compare one section of the code to this house.

00:04:30.240 --> 00:04:34.317
Some sections of our code is actually pretty messy.

00:04:34.400 --> 00:04:36.720
I would call it like a hoarded code.

00:04:37.320 --> 00:04:41.159
It's mostly overrun by clutter and stuff that

00:04:41.759 --> 00:04:44.920
renders it's actually unusable.

00:04:45.280 --> 00:04:49.360
And we cannot really easily find things that we need.

00:04:49.880 --> 00:04:53.277
And it is quite hard to find the right place to

00:04:53.360 --> 00:04:55.320
put new things in.

00:04:56.479 --> 00:04:59.520
And this is what we have to live with, part of it.

00:05:00.120 --> 00:05:03.956
We fight with it daily just to get ourselves around

00:05:04.039 --> 00:05:07.599
it and try to ship things and get things done.

00:05:08.199 --> 00:05:11.717
And we kind of hope that we'll get to rewrite the

00:05:11.800 --> 00:05:15.040
whole thing one day.

00:05:15.800 --> 00:05:17.317
We wouldn't make the same mistake, right?

00:05:17.400 --> 00:05:19.039
Because we know better.

00:05:19.479 --> 00:05:23.200
We can rewrite jQuery with React.

00:05:23.720 --> 00:05:27.317
We can tear down monolith application to a bunch of

00:05:27.400 --> 00:05:28.879
different microservices.

00:05:31.319 --> 00:05:35.239
So for us, it might work well for a little while.

00:05:35.639 --> 00:05:38.757
But if the team still keeping this habit of not

00:05:38.840 --> 00:05:41.917
cleaning up after themself, it will get back to

00:05:42.000 --> 00:05:47.239
this ugly mess in no time.

00:05:47.919 --> 00:05:51.077
And on the other hand, some parts of our code is

00:05:51.160 --> 00:05:54.800
actually quite clean code.

00:05:55.240 --> 00:05:57.517
I'm not sure if I can actually call it clean code,

00:05:57.600 --> 00:06:01.637
but when you see the code, it has a lot of patterns,

00:06:01.720 --> 00:06:02.919
over patterns.

00:06:03.199 --> 00:06:04.880
The classes are small.

00:06:05.319 --> 00:06:07.956
If you find that it's getting bigger, then they

00:06:08.039 --> 00:06:10.599
split it to multiple classes.

00:06:11.039 --> 00:06:12.959
And it is super DRY.

00:06:13.160 --> 00:06:15.157
So DRY is don't repeat yourself.

00:06:15.240 --> 00:06:20.080
So there is no duplicates, and it looks pretty nice.

00:06:20.680 --> 00:06:26.037
But when you work with that piece of code, and you

00:06:26.120 --> 00:06:28.040
try to add something to it.

00:06:32.199 --> 00:06:33.800
where should this piece of code be?

00:06:34.400 --> 00:06:36.560
like maybe I should put it in this class.

00:06:37.080 --> 00:06:40.637
oh wait, this class extends some base classes.

00:06:40.720 --> 00:06:42.200
maybe I should read there.

00:06:42.720 --> 00:06:45.717
so you need to dig through all these layers and layers

00:06:45.800 --> 00:06:48.600
of abstraction until you find the right place

00:06:49.120 --> 00:06:52.157
that is responsible for that piece of new functionality

00:06:52.240 --> 00:06:53.760
that you're trying to add.

00:06:54.520 --> 00:06:57.157
and you might not even be able to find one

00:06:57.240 --> 00:06:58.520
in the existing code.

00:07:00.919 --> 00:07:05.400
this piece of code, I want to compare it to this showroom,

00:07:05.520 --> 00:07:10.120
this kind of stage house, which looks nice.

00:07:10.599 --> 00:07:13.239
like we want to have a house that kind of look like this

00:07:15.400 --> 00:07:18.000
but if you look closely to the house,

00:07:18.520 --> 00:07:21.040
it's actually pretty hard to live in.

00:07:21.800 --> 00:07:23.040
like you can see the couch.

00:07:23.560 --> 00:07:25.760
if you want to sit on the couch and watch TV,

00:07:26.000 --> 00:07:28.880
it's going to be a bit weird because sitting sideways.

00:07:29.039 --> 00:07:32.236
and where can I charge my phone when I was sitting

00:07:32.319 --> 00:07:32.757
on the couch?

00:07:32.840 --> 00:07:35.319
like there's no plug or anything near.

00:07:35.720 --> 00:07:38.239
and why is that table sits on the floor?

00:07:38.520 --> 00:07:39.637
if I want to put something on the table,

00:07:39.720 --> 00:07:41.639
I need to do something like this.

00:07:41.919 --> 00:07:46.437
it's actually not possible to comfortably live

00:07:46.520 --> 00:07:49.120
in this kind of house.

00:07:50.080 --> 00:07:54.159
so we need something more in between.

00:07:55.120 --> 00:07:58.839
and we need a house that is livable.

00:07:59.199 --> 00:08:02.840
so I have took this concept from Salami,

00:08:03.879 --> 00:08:07.396
which is she is a really good developer

00:08:07.479 --> 00:08:10.997
and she has really well thought out ideas

00:08:11.080 --> 00:08:12.760
that we take from.

00:08:13.520 --> 00:08:19.039
so what does it mean to be livable?

00:08:19.479 --> 00:08:24.796
so livable code is clutter enough to be comfortable.

00:08:24.879 --> 00:08:28.796
we know where to find things and we have enough space

00:08:28.879 --> 00:08:32.399
for flexibility.

00:08:32.519 --> 00:08:36.076
so when the squad decided it's time to actually discuss

00:08:36.159 --> 00:08:40.159
because our code is both of the extreme.

00:08:41.120 --> 00:08:42.840
some parts are hoarded code.

00:08:43.279 --> 00:08:47.677
the other part are pretty much abstraction layers

00:08:47.760 --> 00:08:50.957
over layers of abstraction and it's pretty hard

00:08:51.040 --> 00:08:51.880
to work with.

00:08:52.560 --> 00:08:59.040
so we decided to discuss about the way our codebase

00:08:59.480 --> 00:09:06.439
should be and why and where are we going to put things.

00:09:06.959 --> 00:09:09.316
essentially, we are discussing how to live with this

00:09:09.399 --> 00:09:14.240
codebase together as a team.

00:09:14.920 --> 00:09:19.520
so I would like to ask if anyone of you know this woman?

00:09:20.120 --> 00:09:25.520
so she is the author of the technique called KonMari.

00:09:26.200 --> 00:09:33.040
and the KonMari technique boils down every decision

00:09:33.320 --> 00:09:37.557
to keep or get rid of or donate things into

00:09:37.640 --> 00:09:40.280
one simple question.

00:09:40.640 --> 00:09:43.920
does this item give me joy?

00:09:44.680 --> 00:09:48.799
it reframes the problems into new aspects from

00:09:49.040 --> 00:09:55.597
"should I keep this item" to "how does this item

00:09:55.680 --> 00:09:56.440
make me feel?"

00:09:56.959 --> 00:09:58.520
and coming back to our code,

00:09:59.760 --> 00:10:03.639
what's the right question to ask?

00:10:04.399 --> 00:10:08.200
so during the discussion, we ask ourselves a lot

00:10:08.320 --> 00:10:11.200
and then there are certain questions that I find

00:10:11.880 --> 00:10:15.917
really useful when you are trying to make your code

00:10:16.000 --> 00:10:17.360
more livable.

00:10:17.800 --> 00:10:21.919
so the question is when you look at the code,

00:10:22.040 --> 00:10:27.080
do we understand the purpose of the code?

00:10:27.480 --> 00:10:29.440
like why is this here?

00:10:30.360 --> 00:10:33.080
what's the purpose of that piece of code?

00:10:33.760 --> 00:10:38.120
and then if the answer is no, we don't know why it's here,

00:10:39.079 --> 00:10:43.119
then it is most likely because it's either

00:10:43.639 --> 00:10:47.077
it was a hoarded code, a piece of code that put together

00:10:47.160 --> 00:10:51.637
in the hurry and it's quite messy that you cannot find

00:10:51.720 --> 00:10:54.520
the purpose of the code itself.

00:10:55.680 --> 00:10:59.160
or it was overly abstracted to the point where

00:10:59.440 --> 00:11:01.477
the purpose is actually hidden under the layers

00:11:01.560 --> 00:11:04.519
of abstraction.

00:11:04.639 --> 00:11:07.077
and we keep doing this for couple months

00:11:07.160 --> 00:11:11.720
and the result is quite useful.

00:11:12.480 --> 00:11:15.237
so we make one change at a time.

00:11:15.320 --> 00:11:19.556
we follow this one leadership advice.

00:11:19.639 --> 00:11:21.840
he said, "you touch it, you improve it."

00:11:22.480 --> 00:11:27.357
so we actually do that and now the codebase

00:11:27.440 --> 00:11:31.480
has transformed into a place or a piece of code

00:11:31.639 --> 00:11:34.200
that the whole team could live in.

00:11:35.040 --> 00:11:38.960
we know where things are and why they are there.

00:11:39.480 --> 00:11:42.837
so adding new features, we have less cognitive load

00:11:42.920 --> 00:11:45.600
on trying to find the place for those new things.

00:11:46.040 --> 00:11:52.960
refactoring and adding new things has never been easier.

00:11:53.480 --> 00:11:56.600
that was our first story.

00:11:57.200 --> 00:11:58.040
here's the other one.

00:11:58.240 --> 00:12:00.477
so one peaceful afternoon, right?

00:12:00.560 --> 00:12:04.277
when I was having a serious discussion with my squad

00:12:04.360 --> 00:12:07.357
on which size of BonChon wings do they want?

00:12:07.440 --> 00:12:11.080
like we always have this snack time every afternoon.

00:12:11.360 --> 00:12:14.199
and our product owner come in and then ask us

00:12:14.480 --> 00:12:17.797
to gather some data for him from the production database.

00:12:17.880 --> 00:12:21.880
so I said, "okay, sure.

00:12:22.480 --> 00:12:25.959
I'll just run a simple query and then probably get

00:12:26.160 --> 00:12:27.200
that result for you."

00:12:27.600 --> 00:12:31.677
then I walk back to my desk and open up my laptop,

00:12:31.760 --> 00:12:36.800
thinking about the query for a bit and then start typing.

00:12:37.320 --> 00:12:38.520
then I run the test.

00:12:38.639 --> 00:12:40.996
I run the query on the staging environment.

00:12:41.079 --> 00:12:43.160
I press enter.

00:12:43.760 --> 00:12:48.280
okay, looks like the result is what I expected.

00:12:48.560 --> 00:12:50.996
maybe I should just try and get the data

00:12:51.079 --> 00:12:53.400
from our production data.

00:12:54.000 --> 00:12:58.157
I copy the same exact code, paste it in the terminal

00:12:58.240 --> 00:12:59.240
and then press enter.

00:13:00.720 --> 00:13:07.159
it took a bit long, but it looks like everything is fine.

00:13:07.839 --> 00:13:13.880
so little that I know, our self-managed Postgres instances,

00:13:14.160 --> 00:13:18.559
the load has skyrocketed without giving any alert

00:13:19.079 --> 00:13:22.837
and it was pure luck that one of our teammates

00:13:22.920 --> 00:13:25.677
was actually looking at the dashboard

00:13:25.760 --> 00:13:28.200
for our infrastructure and saw the spike.

00:13:28.720 --> 00:13:34.516
then we just cancel the query and no BonChon

00:13:34.600 --> 00:13:35.840
was actually ordered that day.

00:13:37.000 --> 00:13:42.080
so that leads to my next topic that I want to talk about,

00:13:42.600 --> 00:13:44.077
the infrastructure.

00:13:44.160 --> 00:13:49.400
so I guess generally when people are asking about scale,

00:13:49.920 --> 00:13:53.040
they think about infrastructure, right?

00:13:53.560 --> 00:13:58.640
more specifically, SRE or site reliability engineering.

00:14:02.800 --> 00:14:03.040
and

00:14:03.800 --> 00:14:09.200
software system are pretty dynamic and unstable.

00:14:09.560 --> 00:14:14.037
and the only perfectly stable system is actually

00:14:14.120 --> 00:14:17.240
the dead system that has no development anymore.

00:14:17.600 --> 00:14:21.676
and our job as engineers or an SRE or people who

00:14:21.759 --> 00:14:23.837
maintain that piece of infrastructure

00:14:23.920 --> 00:14:28.119
is to maintain the balance of shipping features

00:14:28.399 --> 00:14:31.079
and the stability of the system.

00:14:31.519 --> 00:14:34.440
this is kind of a trade-off that we need to make.

00:14:35.399 --> 00:14:38.599
back then we had no dedicated SRE

00:14:39.399 --> 00:14:43.040
and our team needed to hold our own

00:14:43.160 --> 00:14:47.756
and needed to maintain our own infrastructure

00:14:47.839 --> 00:14:49.717
and make sure our system is stable enough

00:14:49.800 --> 00:14:54.040
to serve our rapidly growing user base.

00:14:55.480 --> 00:14:58.759
we actually did and tried a lot of things.

00:15:01.839 --> 00:15:03.880
based on the team experience,

00:15:04.000 --> 00:15:07.277
the most important aspect of scaling

00:15:07.360 --> 00:15:11.879
any kind of system is actually monitoring.

00:15:12.480 --> 00:15:15.120
so this sounds boring, right?

00:15:15.880 --> 00:15:17.800
why what's scaling?

00:15:18.040 --> 00:15:20.440
what's monitoring has to do with scaling

00:15:21.040 --> 00:15:24.640
and it sounds so boring, just looking at graphs.

00:15:25.240 --> 00:15:25.996
but hear me out

00:15:26.079 --> 00:15:28.960
so you won't get into the bunch of incidents like me.

00:15:32.680 --> 00:15:38.876
you might wonder why we need to monitor our infrastructure.

00:15:38.959 --> 00:15:42.876
there are multiple reasons that it is crucial

00:15:42.959 --> 00:15:45.720
to monitor your own system.

00:15:46.240 --> 00:15:51.040
the first one is to analyze the long-term trends.

00:15:51.560 --> 00:15:53.239
answer these questions like

00:15:53.839 --> 00:15:56.920
how quickly our user base is growing?

00:15:57.360 --> 00:16:02.200
how long till we need to increase our instances' size

00:16:02.360 --> 00:16:07.320
to accommodate the growing user base?

00:16:08.000 --> 00:16:11.837
the second important reason why we need to monitor

00:16:11.920 --> 00:16:16.119
is to have some kind of alerts.

00:16:16.639 --> 00:16:18.240
something that could tell you that,

00:16:18.639 --> 00:16:22.040
"hey, something is broken on production.

00:16:22.480 --> 00:16:25.120
please someone come and fix it right now."

00:16:26.279 --> 00:16:31.280
or something that is imminent like,

00:16:31.880 --> 00:16:37.039
"okay, your SSL certificates will be expired in 15 days.

00:16:37.279 --> 00:16:38.639
you better renew it."

00:16:39.639 --> 00:16:42.676
this kind of alerts is a crucial part of maintaining

00:16:42.759 --> 00:16:48.679
the stability and scaling your system.

00:16:49.199 --> 00:16:52.600
the third one, building a dashboard.

00:16:53.000 --> 00:16:55.196
you should be able to at least answer

00:16:55.279 --> 00:16:58.839
some basic questions about your service.

00:16:58.959 --> 00:17:02.800
I'll actually talk about this in a bit.

00:17:03.480 --> 00:17:06.956
and last, we need to do postmortem

00:17:07.039 --> 00:17:08.799
or post hoc analysis.

00:17:09.079 --> 00:17:12.879
aka we need to debug stuff on production

00:17:13.079 --> 00:17:15.559
to fix some issues such as

00:17:16.319 --> 00:17:20.239
why is our response time spike?

00:17:20.839 --> 00:17:23.800
what else also happens at the same time?

00:17:24.480 --> 00:17:29.080
if we have visibility or monitoring set up properly,

00:17:29.679 --> 00:17:31.037
you might find out that,

00:17:31.120 --> 00:17:36.520
"oh, the DB query is actually taking

00:17:37.760 --> 00:17:41.600
a pretty long time and let's investigate on that."

00:17:41.919 --> 00:17:44.560
so you can narrow down the problem easily.

00:17:45.600 --> 00:17:49.157
monitoring and alerting enable your system

00:17:49.240 --> 00:17:54.800
to tell us what is currently broken

00:17:55.240 --> 00:18:00.600
or it could also tell us what is going to break.

00:18:01.200 --> 00:18:06.280
so when the system isn't able to automatically fix itself,

00:18:06.400 --> 00:18:09.079
they can actually ping human

00:18:10.000 --> 00:18:13.357
and you or your teammates could investigate the problem

00:18:13.440 --> 00:18:15.040
and fix it in time

00:18:15.400 --> 00:18:21.640
before it starts cascading into other systems.

00:18:22.960 --> 00:18:27.040
So our monitoring system or any kind of monitoring

00:18:27.440 --> 00:18:31.879
system would have to give the answer for these two

00:18:32.520 --> 00:18:33.160
questions.

00:18:33.520 --> 00:18:35.960
One is what's broken?

00:18:36.480 --> 00:18:41.880
And second, why is that thing broken?

00:18:42.400 --> 00:18:46.479
We combine what we called black box monitoring.

00:18:46.679 --> 00:18:50.280
So for us, we are using Datadog dashboard and

00:18:50.840 --> 00:18:53.440
white box monitoring.

00:18:53.640 --> 00:18:57.397
We are using Kibana for logs and more details on

00:18:57.480 --> 00:18:58.519
the machines.

00:19:00.080 --> 00:19:05.757
We use these two monitoring tools combined to

00:19:05.840 --> 00:19:09.400
identify and recover from problems.

00:19:10.280 --> 00:19:13.956
So the black box monitoring is actually used to

00:19:14.039 --> 00:19:17.519
identify only the symptoms of the issue.

00:19:18.039 --> 00:19:20.760
I'll give some example on the next slide.

00:19:21.320 --> 00:19:24.716
And when we know there is a problem, we actually

00:19:24.799 --> 00:19:28.476
need a way to dig deeper into the issues, right?

00:19:28.559 --> 00:19:35.037
So that's when white box monitoring tools provides

00:19:35.120 --> 00:19:40.199
more details for us to debug those problems.

00:19:40.559 --> 00:19:46.277
So this is some real scenario that we have

00:19:46.360 --> 00:19:47.240
experienced.

00:19:48.880 --> 00:19:54.157
So one day, our monitoring tools detected that the

00:19:54.240 --> 00:19:58.520
system time has suddenly skyrocketed.

00:19:58.720 --> 00:20:01.476
So after deployment of some config change, the

00:20:01.559 --> 00:20:06.599
response time start increasing for unknown reasons.

00:20:07.520 --> 00:20:10.797
Luckily we have this health dashboard, right?

00:20:10.880 --> 00:20:16.157
We set up a proper black box monitoring that tells

00:20:16.240 --> 00:20:21.119
us, hey, there is something wrong with your system

00:20:21.400 --> 00:20:25.280
and you might want to look at it.

00:20:26.840 --> 00:20:31.000
And also, when we look at the dashboard at the same

00:20:31.640 --> 00:20:36.917
time, we also see the alerts from the machine disk

00:20:37.000 --> 00:20:37.476
space.

00:20:37.559 --> 00:20:42.239
So the disk space is running low or it's full.

00:20:43.159 --> 00:20:46.517
These are all examples of detecting the symptom by

00:20:46.600 --> 00:20:49.040
black box monitoring.

00:20:50.080 --> 00:20:59.237
And after thorough investigation, we found out that

00:20:59.320 --> 00:21:03.159
our log rotation was not working properly by going

00:21:03.880 --> 00:21:06.400
into the machines, looking at the disk size,

00:21:06.640 --> 00:21:09.517
looking at the files, etc. where we have those

00:21:09.600 --> 00:21:12.600
tool to look into the system.

00:21:13.480 --> 00:21:16.920
So the log rotation was not working properly and

00:21:17.080 --> 00:21:20.437
causing the machine disk to be bloated with failed

00:21:20.520 --> 00:21:24.600
log backup and the system ran out of disk space

00:21:25.039 --> 00:21:28.440
and is impacting the performance of our system.

00:21:29.120 --> 00:21:33.560
So this is an example of the cause.

00:21:34.440 --> 00:21:38.557
So we have this black box monitoring that helps

00:21:38.640 --> 00:21:40.960
you identify what's wrong with your system.

00:21:41.400 --> 00:21:44.237
And we have white box monitoring tools that helps

00:21:44.320 --> 00:21:51.880
you identify the inner details of your system.

00:21:52.400 --> 00:21:56.680
So there is four golden signals from Google SRE

00:21:57.159 --> 00:21:59.480
that we followed.

00:21:59.640 --> 00:22:02.997
So these are the four main metrics that you might

00:22:03.080 --> 00:22:07.157
want to detect on your system on your black box

00:22:07.240 --> 00:22:08.120
monitoring.

00:22:08.480 --> 00:22:09.560
First is latency.

00:22:09.799 --> 00:22:13.037
So you should be able to identify any performance

00:22:13.120 --> 00:22:16.956
impact of the system, high load, long wait for a

00:22:17.039 --> 00:22:18.840
certain request or a network issue.

00:22:19.520 --> 00:22:21.677
The key is to identify the benchmark for

00:22:21.760 --> 00:22:28.039
successful and failed response separately so that

00:22:29.400 --> 00:22:31.840
the data is not distorted.

00:22:32.120 --> 00:22:33.720
The second one is the traffic.

00:22:34.320 --> 00:22:36.637
This one is quite straightforward.

00:22:36.720 --> 00:22:39.479
We want to be able to tell the usage of the system

00:22:40.000 --> 00:22:45.076
on the current user base to see how fast the

00:22:45.159 --> 00:22:46.199
traffic is growing.

00:22:46.400 --> 00:22:50.920
How long do we need to consider scaling up?

00:22:51.760 --> 00:22:53.037
The third one is the error rate.

00:22:53.120 --> 00:22:57.640
So this thing is here to alerts us on some kind of

00:22:57.760 --> 00:22:58.801
imminent catastrophe.

00:22:59.279 --> 00:23:01.877
So this metrics will warn you that something bad

00:23:01.960 --> 00:23:05.360
is currently happens on your system.

00:23:05.880 --> 00:23:10.079
The last one is saturation.

00:23:10.279 --> 00:23:13.440
So saturation means how full your system is.

00:23:14.200 --> 00:23:16.599
And this metrics will help you answer the

00:23:16.919 --> 00:23:20.237
question, is it time to actually scale your system

00:23:20.320 --> 00:23:20.560
up?

00:23:21.320 --> 00:23:24.877
Maybe do a horizontal scaling or just upgrading

00:23:24.960 --> 00:23:26.240
your machine.

00:23:26.600 --> 00:23:28.757
The three most common things that we measure for

00:23:28.840 --> 00:23:32.239
this is memory, IO and CPU.

00:23:32.880 --> 00:23:36.997
So we can be sure that our resources is enough to

00:23:37.080 --> 00:23:41.600
serve our current load in the system.

00:23:42.120 --> 00:23:46.836
And after we have track all these signals, we have

00:23:46.919 --> 00:23:49.596
a lot more visibility on the system and the health

00:23:49.679 --> 00:23:53.797
of our service and it's actually helps us mitigate

00:23:53.880 --> 00:23:58.360
some really serious events before it has happened.

00:24:01.760 --> 00:24:02.596
This is the last one.

00:24:02.679 --> 00:24:05.037
So it just happened at the end of the year

00:24:05.120 --> 00:24:07.716
where everyone is going on vacation

00:24:07.799 --> 00:24:09.439
and there's one guy and me left.

00:24:09.880 --> 00:24:11.836
So our product owner come in and said,

00:24:11.919 --> 00:24:15.196
"Hey, I have a problem for you to help fix.

00:24:15.279 --> 00:24:16.157
It's pretty urgent.

00:24:16.240 --> 00:24:17.360
Can you do it by today?"

00:24:17.640 --> 00:24:19.557
I was on the other task and said,

00:24:19.640 --> 00:24:21.836
"Okay, let me prioritize that

00:24:21.919 --> 00:24:26.679
after my current one is finished."

00:24:27.039 --> 00:24:29.520
And then he comes back an hour later and said,

00:24:30.120 --> 00:24:32.517
"Oh, wait, we actually need another one

00:24:32.600 --> 00:24:34.840
which is also urgent."

00:24:35.360 --> 00:24:36.596
And then he comes back again.

00:24:36.679 --> 00:24:40.196
So this has happened quite a number of times

00:24:40.279 --> 00:24:46.076
and it has reduced the team productivity

00:24:46.159 --> 00:24:49.159
for quite a bit.

00:24:49.919 --> 00:24:52.956
It leads to my last point that I want to talk about

00:24:53.039 --> 00:24:56.280
when you want to scale your actual product and system.

00:24:56.720 --> 00:24:58.199
It's the people and the process.

00:25:00.480 --> 00:25:04.196
So our main communication happens via three mediums

00:25:04.279 --> 00:25:07.757
like face-to-face, on instant messaging like Slack,

00:25:07.840 --> 00:25:10.120
and video calls.

00:25:10.720 --> 00:25:13.557
We had less issue when it comes to local team

00:25:13.640 --> 00:25:14.757
because we are face-to-face.

00:25:14.840 --> 00:25:15.437
We can discuss.

00:25:15.520 --> 00:25:17.759
We can actually talk in person.

00:25:18.279 --> 00:25:21.800
But nowadays, companies are open to have remote teams

00:25:22.679 --> 00:25:27.079
and it can increase the talent pool of the companies,

00:25:27.320 --> 00:25:33.680
but it also creates new challenges for the company.

00:25:34.120 --> 00:25:39.319
Because face-to-face conversation is not always possible.

00:25:39.679 --> 00:25:42.719
What we need to do is actually try

00:25:43.760 --> 00:25:46.119
and collaborate remotely.

00:25:46.399 --> 00:25:48.076
So the working environment forces us

00:25:48.159 --> 00:25:52.037
to consistently collaborate remotely.

00:25:52.120 --> 00:25:54.919
It took us for a while to get used to it.

00:25:55.679 --> 00:26:00.640
We have experimented a lot of process changes

00:26:02.080 --> 00:26:04.480
and here are some tips.

00:26:04.840 --> 00:26:06.677
I think we almost ran out of time,

00:26:06.760 --> 00:26:10.997
so I was just going to talk about the first one,

00:26:11.080 --> 00:26:12.519
which is quite important.

00:26:12.640 --> 00:26:17.240
So the key aspect of scaling your product

00:26:17.440 --> 00:26:22.160
and making your process work is actually

00:26:22.520 --> 00:26:24.879
not tagging everything as urgent

00:26:25.120 --> 00:26:28.560
and the team need to be serious about their priority.

00:26:30.799 --> 00:26:33.319
So the product team might want to have

00:26:33.640 --> 00:26:37.920
a portal ship tomorrow and a new feature ship next week,

00:26:38.039 --> 00:26:41.277
but your engineering team also needs to fix

00:26:41.360 --> 00:26:43.117
that technical debt before they do that, right?

00:26:43.200 --> 00:26:46.120
So how would you communicate this

00:26:46.240 --> 00:26:52.320
in a remote environment?

00:26:54.279 --> 00:27:00.760
Our team is actually utilizing this concept

00:27:01.080 --> 00:27:07.160
of prioritization sessions where we sit together

00:27:08.279 --> 00:27:14.320
and prioritizing as a team even though we are remote.

00:27:14.840 --> 00:27:19.237
We have some write-up in a long-form document

00:27:19.320 --> 00:27:22.599
where we discuss how we are going to do things

00:27:23.039 --> 00:27:27.760
and what is the goal of the wider team right now.

00:27:29.919 --> 00:27:33.000
So the process has not only help improve

00:27:33.640 --> 00:27:35.836
the feature delivery of the team,

00:27:35.919 --> 00:27:40.279
but also improve our tech debt, our code quality

00:27:40.679 --> 00:27:44.076
because we can spend some times

00:27:44.159 --> 00:27:48.840
and start pushing for more priority on the tech debt

00:27:49.279 --> 00:27:54.479
while still focusing on the main goals of the product.

00:27:57.760 --> 00:28:00.280
Let me say this.

00:28:00.679 --> 00:28:03.637
Scaling product is actually quite hard.

00:28:03.720 --> 00:28:05.677
It is not only about how much traffic

00:28:05.760 --> 00:28:07.476
your system can handle

00:28:07.559 --> 00:28:10.517
or how would you increase your system capability

00:28:10.600 --> 00:28:11.999
to handle the load.

00:28:12.679 --> 00:28:15.397
Scaling a product requires collaboration

00:28:15.480 --> 00:28:19.877
from all functions to make sure the business

00:28:19.960 --> 00:28:25.800
can operate and grow according to the target.

00:28:26.320 --> 00:28:29.037
As an engineer, I strongly believe that scaling

00:28:29.120 --> 00:28:32.520
does not mean adding more VM instances

00:28:32.720 --> 00:28:35.476
or adding more pods to your Kubernetes cluster

00:28:35.559 --> 00:28:40.920
or optimizing SQL query.

00:28:41.600 --> 00:28:43.719
For me, it means solving business need

00:28:44.399 --> 00:28:46.760
by optimizing available resources

00:28:47.559 --> 00:28:50.840
in a timely manner and consistently doing so.

00:28:51.600 --> 00:28:53.237
So as a team, we are still learning

00:28:53.320 --> 00:28:56.120
to continuously scaling our system

00:28:56.640 --> 00:29:00.357
and I'm proud to say that we are now more content

00:29:00.440 --> 00:29:03.436
than ever with our code, our infrastructure,

00:29:03.519 --> 00:29:04.799
and our process.

00:29:05.039 --> 00:29:08.076
We are shipping things more quickly

00:29:08.159 --> 00:29:10.397
and we are handling production issue

00:29:10.480 --> 00:29:13.800
in more uniform ways.

00:29:14.880 --> 00:29:18.040
So I'm Tino, a product engineer from Gojek.

00:29:18.320 --> 00:29:20.436
I would love to chat more about this type of things,

00:29:20.519 --> 00:29:27.277
so thank you for listening.

00:29:27.472 --> 00:29:27.557
ขอบคุณคุณทีโน่นะคะ

00:29:27.640 --> 00:29:31.476
Thank you so much for คุณทีโน่ from Gojek Thailand

00:29:31.559 --> 00:29:33.120
for sharing your experience with us.