WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:00.599 --> 00:00:02.437
And next, ladies and gentlemen,

00:00:02.520 --> 00:00:05.716
we are going to talk about speed up heavy data

00:00:05.799 --> 00:00:08.800
visualization with Rust and WebAssembly.

00:00:09.400 --> 00:00:13.117
เดี๋ยวถัดไปนะคะจะเป็นการใช้ WebAssembly เข้ามาช่วย

00:00:13.200 --> 00:00:15.956
ให้งานหนักๆ หรือว่า heavy duty ของเราเนี่ย

00:00:16.039 --> 00:00:18.120
สามารถทำได้เร็วมากขึ้นด้วยนะคะ

00:00:18.400 --> 00:00:21.077
วันนี้เนี่ยได้รับเกียรติจากทาง AppMan นะคะ

00:00:21.160 --> 00:00:23.637
ซึ่งเป็นสปอนเซอร์ของเราอีกหนึ่งท่านนะคะ

00:00:23.720 --> 00:00:26.276
ก็คือคุณรุจิรา อักษรศิลป์ค่ะ

00:00:26.359 --> 00:00:29.956
เป็น front-end developer team lead จาก AppMan น่ะ

00:00:30.039 --> 00:00:32.440
จะมาเล่าให้เราฟังถึงเรื่องนี้กันนะคะ

00:00:33.280 --> 00:00:36.720
So please stay tuned for the next one.

00:00:37.320 --> 00:00:39.476
Miss Rujira Aksornsin ค่ะ

00:00:39.559 --> 00:00:43.316
front-end developer team lead from AppMan Thailand.

00:00:43.399 --> 00:00:46.316
She's going to share with us on how to speed up

00:00:46.399 --> 00:00:51.120
the heavy data visualization with Rust and WebAssembly.

00:00:51.320 --> 00:00:52.559
So please stay tuned.

00:00:52.920 --> 00:00:57.156
And after คุณรุจิรา share her experience,

00:00:57.239 --> 00:00:58.956
we are going to have one more topic,

00:00:59.039 --> 00:01:03.757
the last topic about a love story written in JavaScript.

00:01:03.840 --> 00:01:05.320
So please stay tuned.

00:01:05.840 --> 00:01:13.237
We got the special, the expert from Undefined Labs

00:01:13.320 --> 00:01:14.117
from Spain.

00:01:14.200 --> 00:01:16.317
He's the software engineer, คุณ Ramon.

00:01:16.400 --> 00:01:18.600
He's going to share his experience with us too

00:01:18.880 --> 00:01:21.800
on a love story written in JavaScript ค่ะ

00:01:22.200 --> 00:01:25.640
ก็หลังจากที่คุณรุจิรากับคุณ Ramon

00:01:25.759 --> 00:01:27.680
ก็คือเป็น speaker อีกหนึ่งท่านน่ะนะคะ

00:01:28.720 --> 00:01:31.437
มาแชร์ประสบการณ์ดีๆ ให้เราได้ฟังบนเวทีเรียบร้อยแล้วเนี่ย

00:01:31.520 --> 00:01:34.316
เดี๋ยวหลังจากนี้เราก็จะเป็นช่วงของ networking party

00:01:34.399 --> 00:01:36.799
และก็เรียนเชิญทุกท่านนะคะให้เกียรติอยู่ต่อกับเรา

00:01:40.439 --> 00:01:41.837
ที่ชั้น 7 นะคะ ด้านล่าง

00:01:41.920 --> 00:01:43.676
นี่เกือบจะปาร์ตี้บนเวทีต่อแล้ว

00:01:43.759 --> 00:01:45.680
เพราะว่าตะกี้นี่ยังติดลมอยู่นะคะ

00:01:45.960 --> 00:01:49.080
เปิดเพลงแดนซ์กันยัง ยังไม่พอเลยเนาะ

00:01:49.840 --> 00:01:52.277
ก็เดี๋ยวลงไปแดนซ์กันต่อด้านล่างนะคะ

00:01:52.360 --> 00:01:55.080
มีพี่ DJ วันนี้มาเล่นเพลงสนุกๆ

00:01:55.320 --> 00:01:58.560
แล้วก็มีเบียร์เสิร์ฟตลอดนะคะ ฟรีตลอดงาน

00:01:58.680 --> 00:02:01.520
ก็เรียนเชิญได้นะคะ เป็นช่วง networking นะคะ

00:02:02.159 --> 00:02:05.157
Okay, so right now we're setting up a little bit.

00:02:05.240 --> 00:02:09.599
Please stay tuned because our next sessions,

00:02:10.160 --> 00:02:15.077
it's quite technical, right?

00:02:15.160 --> 00:02:21.360
เดี๋ยวตอนนี้เดี๋ยวรอพี่เจ้าหน้าที่ของเราเซ็ตอุปกรณ์แป๊บนึงนะคะ

00:02:22.200 --> 00:02:27.117
สำหรับงานนี้นะคะ JavaScript Bangkok 1.0.0 นะคะ

00:02:27.200 --> 00:02:31.000
เราต้องขอขอบคุณสปอนเซอร์ของเราทั้งหมด 10 บริษัทด้วยกันนะคะ

00:02:31.360 --> 00:02:34.839
ก็คือ KBTG ค่ะ Beyond Tech Capabilities นะคะ

00:02:35.160 --> 00:02:37.997
มี Oozou, Bangkok based digital agency,

00:02:38.080 --> 00:02:41.677
มี ExxonMobil Limited ค่ะ We Are ExxonMobil นะคะ

00:02:41.760 --> 00:02:45.639
แล้วก็มี ODDS, AppMan, มี NEXMO นะคะ

00:02:45.920 --> 00:02:49.317
Eventpop, Next Hop, Hot Now

00:02:49.400 --> 00:02:52.197
แล้วก็ Nextzy Studio นะคะ

00:02:52.280 --> 00:02:55.119
แล้วก็จะมี Seven Peaks Software ด้วยนะคะ

00:02:55.959 --> 00:02:57.480
เพียบเลยนะสปอนเซอร์

00:02:57.599 --> 00:03:00.117
วันนี้เนี่ยเค้าบอกว่ามีของรางวัลมาแจกด้วยนะคะ

00:03:00.200 --> 00:03:02.876
ท่านไหนยังไม่ได้ไปเยี่ยมชมบูธสปอนเซอร์ก็เรียนเชิญนะคะ

00:03:02.959 --> 00:03:06.037
เอ่อ ตอนช่วง networking อ่ะค่ะ

00:03:06.120 --> 00:03:08.397
ด้านล่างเนี่ยนะคะ ก็จะมีกิจกรรมเกม

00:03:08.480 --> 00:03:09.957
แล้วก็มีแจกของรางวัลด้วยนะคะ

00:03:10.040 --> 00:03:10.917
ห้ามพลาดนะคะ

00:03:11.000 --> 00:03:14.397
อ่ะ เอาล่ะ ไปต่อกันเลยกับคุณรุจิรา อักษรศิลป์ค่ะ

00:03:14.480 --> 00:03:18.118
front-end developer team lead จาก AppMan Thailand

00:03:18.360 --> 00:03:20.320
ขอเสียงปรบมือต้อนรับคุณรุจิราค่ะ

00:03:36.280 --> 00:03:37.479
สวัสดีค่ะ

00:03:38.239 --> 00:03:44.516
แสงไฟ… สวัสดีค่ะ

00:03:44.599 --> 00:03:45.920
ยังไม่เบื่อกันใช่มั้ยคะ

00:03:46.480 --> 00:03:47.599
เงียบๆ เลย

00:03:48.000 --> 00:03:50.399
ขอบคุณค่ะ

00:03:50.720 --> 00:03:51.356
โอเคค่ะ

00:03:51.439 --> 00:03:58.356
หัวข้อในวันนี้นะคะ

00:03:58.439 --> 00:04:02.037
เป็นหัวข้อ Speed up heavy data visualization นะคะ

00:04:02.120 --> 00:04:04.360
with Rust และ WebAssembly นะคะ

00:04:06.840 --> 00:04:09.200
ก่อนอื่นนะคะ ก็แนะนำตัวเองก่อนนะคะ

00:04:10.480 --> 00:04:11.277
ชื่อฮอลนะคะ

00:04:11.360 --> 00:04:13.280
เดี๋ยวขอแทนตัวเองว่าฮอลเลยละกันค่ะ

00:04:14.599 --> 00:04:18.840
เป็น frontend developer team lead อยู่ที่บริษัท AppMan นะคะ

00:04:20.280 --> 00:04:26.197
เคยเป็น speaker นะคะ อยู่ที่งาน React Bangkok 3.0 นะคะ

00:04:26.280 --> 00:04:31.080
ตอนนั้นก็ออกมาพูดในหัวข้อ React performance tuning นะคะ

00:04:31.199 --> 00:04:34.317
ครั้งนี้ก็ยังหนีไม่พ้นเรื่อง performance tuning

00:04:34.400 --> 00:04:35.157
อยู่เหมือนเดิมนะคะ

00:04:35.240 --> 00:04:39.320
แต่ว่าก็จะเป็นของใหม่ๆ ที่อยากเอามาแชร์ให้ฟังนะคะ

00:04:41.560 --> 00:04:44.963
ถึงแม้ชื่อจะเป็นคำว่า heavy นะคะ

00:04:46.280 --> 00:04:49.999
ไม่รู้ว่ามีใครคาดหวังมั้ยว่าจะเป็นคอนเทนต์หนักแค่ไหน

00:04:50.639 --> 00:04:55.299
ก็หวังว่าจะมาสร้าง inspire ให้กับคนที่สนใจสิ่งใหม่ๆ นะคะ

00:04:56.759 --> 00:04:59.680
พูดถึง data visualization ก็เข้าเรื่องเลยนะคะ

00:04:59.880 --> 00:05:01.157
หลายๆ คนน่าจะรู้จักอยู่แล้ว

00:05:01.240 --> 00:05:04.479
มันก็คือการที่เรานำข้อมูลเยอะๆ เนี่ย

00:05:05.360 --> 00:05:09.277
มาแสดงผลในรูปแบบที่เข้าใจง่าย ที่สวยงามใช่มั้ยคะ

00:05:09.360 --> 00:05:12.956
ทีนี้ฮอลก็สรุปปัญหาใหญ่ๆ ที่ฮอลโฟกัสว่า

00:05:13.039 --> 00:05:16.676
ทำไมถึงคิดที่จะลองทำอะไรแบบนี้นะคะ

00:05:16.759 --> 00:05:20.757
ก็คือปัญหาที่มักจะเจอก็คือเกี่ยวกับว่า

00:05:20.840 --> 00:05:23.760
มีการคำนวณ data เยอะมากๆ

00:05:23.960 --> 00:05:26.519
ก่อนที่จะทำการ render UI นะคะ

00:05:29.120 --> 00:05:30.560
อีกเรื่องนึงก็คือว่า

00:05:31.039 --> 00:05:34.157
มีความซับซ้อนในการวาดหน้าออกมา

00:05:34.240 --> 00:05:36.280
มันอาจจะเป็นที่การดีไซน์ก็ได้นะคะ

00:05:36.560 --> 00:05:40.240
แล้วก็อีกข้อนึงก็คือน่าจะเป็นเรื่องที่ frontend

00:05:41.319 --> 00:05:43.039
ก็น่าจะเจอเยอะพอสมควรนะคะ

00:05:43.160 --> 00:05:45.956
คือมันเป็น flow ของการทำงานนะคะ

00:05:46.039 --> 00:05:48.717
ว่าในส่วนของ painting หรือพวก force layout เนี่ย

00:05:48.800 --> 00:05:51.920
มันก็จะทำงานหนักอยู่กับพวก DOM อะไรนี้อยู่แล้ว

00:05:52.360 --> 00:05:55.037
ทีนี้ใน limitation ที่ฮอลสร้างมาเป็นโจทย์

00:05:55.120 --> 00:05:56.480
ให้กับตัวเองนะคะ ก็คือว่า

00:05:56.960 --> 00:06:00.597
แล้วเราจะทำยังไงถ้าสมมุติเราอยากจะ tune performance

00:06:00.680 --> 00:06:03.757
แต่ว่าเรามี code ที่เขียนเสร็จแล้ว

00:06:03.840 --> 00:06:05.357
เป็น JavaScript เสร็จแล้ว

00:06:05.440 --> 00:06:08.240
เราจะสามารถ reuse มันได้มั้ยนะคะ

00:06:09.080 --> 00:06:11.396
ก็เลยทำการ research ค่ะ

00:06:11.479 --> 00:06:15.717
ก็เจอของมากมายหลายอย่างนะคะ

00:06:15.800 --> 00:06:18.437
ก็คือได้กลับไปอ่านพวก memory management

00:06:18.520 --> 00:06:23.116
เรื่องเยอะมากค่ะ ที่เกี่ยวกับการทำงานของ JavaScript

00:06:23.199 --> 00:06:25.236
ซึ่งก็อยากให้ทุกคนลองกลับไปอ่านดู

00:06:25.319 --> 00:06:28.240
บางอันก็ลืมแล้วก็รู้สึกว่ามีประโยชน์จริงๆ

00:06:28.560 --> 00:06:32.119
ที่จะทำให้เราได้เข้าใจเกี่ยวกับการทำงานของ WebAssembly

00:06:32.360 --> 00:06:35.719
ด้วยนะคะ

00:06:36.840 --> 00:06:40.681
จากหัวข้อเลยนะคะ วันนี้ก็คือมาโฟกัสที่ WebAssembly

00:06:41.000 --> 00:06:48.920
แล้วก็เลือกใช้ Rust นะคะ มาเป็นภาษาที่ใช้เขียนนะคะ

00:06:51.280 --> 00:06:54.798
ก่อนอื่นนะคะ ก็พูดคร่าวๆ นะคะ ว่า WebAssembly

00:06:55.440 --> 00:06:58.437
ก็คือเป็นภาษาที่เป็น low-level นะคะ

00:06:58.520 --> 00:07:02.877
ก็คือมันเป็นเหมือน bytecode แล้วก็เป็นภาษาเครื่อง

00:07:02.960 --> 00:07:06.637
เพราะฉะนั้นแล้วเนี่ย มันถึงสามารถเข้าถึง

00:07:06.720 --> 00:07:08.757
ประสิทธิภาพของเครื่องได้นะคะ

00:07:08.840 --> 00:07:11.559
ก็คือจัดการพวก memory ต่างๆ ได้

00:07:11.840 --> 00:07:16.637
เพราะฉะนั้นก็เลย มันก็จะค่อนข้างมั่นใจ

00:07:16.720 --> 00:07:21.239
ในเรื่องของ performance ที่จะช่วยทำให้ประสิทธิภาพดีขึ้น

00:07:21.360 --> 00:07:24.199
ก็คือเป็นคำว่า predictable performance นะคะ

00:07:26.720 --> 00:07:29.077
ส่วน Rust ทำไมถึงเลือก Rust มานะคะ

00:07:29.160 --> 00:07:34.040
เพราะว่าจริงๆ Rust เนี่ยตอนนี้คือค่อนข้าง support

00:07:34.560 --> 00:07:37.116
ค่อนข้างเอาใจ WebAssembly มากๆ ค่ะ

00:07:37.199 --> 00:07:41.520
ก็คือเป็นเหมือนเป็น first citizen ของ Rust เลยค่ะ

00:07:41.759 --> 00:07:49.197
แล้วก็การเขียนก็คือเป็นเหมือนเป็น rich type language นะคะ

00:07:49.280 --> 00:07:52.556
ก็คือค่อนข้างโฟกัสเกี่ยวกับการใช้ type

00:07:52.639 --> 00:07:57.119
เพื่อที่จะสามารถ manage เรื่อง thread แล้วก็ memory ได้ค่ะ

00:07:57.280 --> 00:08:00.556
นอกจากนี้ก็จริงๆ ฮอลเขียน feature ที่ฮอลชอบมา

00:08:00.639 --> 00:08:02.558
ก็คือเรื่องของการ correctness นะคะ

00:08:02.680 --> 00:08:06.396
ก็คือว่าปกติเนี่ยเวลาเรา dev นะคะ

00:08:06.479 --> 00:08:08.917
เวลา error เนี่ยมันก็จะพ่น error ออกมา

00:08:09.000 --> 00:08:16.119
เราก็ไม่รู้ว่าแบบมันแค่พ่นออกมาแล้วก็ไปหาต่อเอง

00:08:16.240 --> 00:08:20.877
แต่ว่าอันนี้มันดีมากคือมัน suggest ให้ด้วย

00:08:20.960 --> 00:08:23.796
ว่าเราควรจะต้องเขียนแบบไหน แล้วก็แก้อะไร

00:08:23.879 --> 00:08:27.877
ซึ่งน้อยมากเลยค่ะ ที่ฮอลจะต้องไป Google search

00:08:27.960 --> 00:08:30.639
ก็คือมันแนะนำมาให้เขียนแบบนี้ก็แก้แล้วก็

00:08:30.800 --> 00:08:34.436
ถือว่าเป็นภาษาที่เหมาะกับการเรียนรู้มากเลยค่ะ

00:08:34.519 --> 00:08:40.120
แม้แบบถ้าเป็นคนมือใหม่ก็น่าจะเรียนได้ไม่ยาก

00:08:40.880 --> 00:08:46.079
การทำงานนะคะ ก็คือว่า Rust เนี่ยจะเป็นภาษาที่

00:08:46.320 --> 00:08:49.196
สุดท้ายแล้วก็จะต้อง compile ออกมาเป็น WebAssembly นะคะ

00:08:49.279 --> 00:08:51.720
WebAssembly เนี่ยใช้งานยังไงก็คือ

00:08:51.959 --> 00:08:55.397
ก็แค่ import พอมันเป็น module แล้วอะค่ะ

00:08:55.480 --> 00:08:57.557
ก็ import เข้าไปใช้ใน JavaScript ได้เลย

00:08:57.640 --> 00:09:02.196
ตัว module อันนึงที่สำคัญนะคะ

00:09:02.279 --> 00:09:05.957
สำหรับ web developer ก็คือ 𝚠𝚊𝚜𝚖-𝚋𝚒𝚗𝚍𝚐𝚎𝚗 นะคะ

00:09:06.040 --> 00:09:08.436
มันจะทำหน้าที่เหมือนเป็น bridging อะค่ะ

00:09:08.519 --> 00:09:12.237
เป็นสะพานให้สำหรับการ calling function

00:09:12.320 --> 00:09:14.797
ระหว่าง JavaScript กับตัว WebAssembly นะคะ

00:09:14.880 --> 00:09:19.797
โอเคค่ะ ก่อนที่จะเริ่ม

00:09:19.880 --> 00:09:22.316
ที่จะลองเล่าว่าไปทำอะไรมาบ้างนะคะ

00:09:22.399 --> 00:09:26.756
ก็โจทย์ทั้งหมด ถามว่าทำไมถึงคิดที่จะทำเรื่องนี้

00:09:26.839 --> 00:09:28.876
เพราะว่าอย่างงานที่บริษัทอะค่ะ

00:09:28.959 --> 00:09:32.040
มันก็จะมีอะไรที่เกี่ยวกับการ present data

00:09:34.279 --> 00:09:38.157
คือที่ AppMan เนี่ยเป็น insurance company นะคะ

00:09:38.240 --> 00:09:41.359
เพราะฉะนั้นงานส่วนใหญ่ก็จะต้องมีการคำนวณ

00:09:41.760 --> 00:09:43.436
มีข้อมูลของลูกค้าเยอะมาก

00:09:43.519 --> 00:09:46.436
เพราะฉะนั้นแล้วเนี่ย ก็จะหนีไม่ค่อยพ้นเรื่องนี้

00:09:46.519 --> 00:09:49.000
ทีนี้ก็เลยทำอันนี้เป็น side project ค่ะ

00:09:49.160 --> 00:09:51.557
ก็คือทำเพื่อ proof ว่า เอ้ย มันโอเค

00:09:51.640 --> 00:09:56.880
แล้วเพื่อที่จะไปปล่อยของเหมือนที่ talk เมื่อกี้ได้บอกไปนะคะ

00:09:58.519 --> 00:10:00.876
เริ่มแรกเลยฮอลก็เอาโจทย์แรกเลยค่ะ

00:10:00.959 --> 00:10:03.360
คือถ้าเกิดมี code อยู่แล้วเนี่ยจะทำยังไง

00:10:03.800 --> 00:10:07.600
โดยที่เป็น type แบบขี้เกียจนะคะ

00:10:07.720 --> 00:10:11.440
ก็คืออยากจะเอา code นั้นไปใช้ได้เลย จะทำยังไงได้บ้าง

00:10:14.120 --> 00:10:16.756
อันนี้คือ show code นะคะ ที่เขียนใน Rust

00:10:16.839 --> 00:10:21.077
ก็คือว่ามันจะมี function

00:10:21.160 --> 00:10:23.357
อย่างเช่นการใช้ 𝚠𝚊𝚜𝚖-𝚋𝚒𝚗𝚍𝚐𝚎𝚗 เนี่ย

00:10:23.440 --> 00:10:26.960
มันสามารถ import module JavaScript เข้ามาได้เลย

00:10:27.720 --> 00:10:30.080
อาจจะเห็นว่าใช้ชื่อว่า Agassi นะคะ

00:10:30.720 --> 00:10:34.157
เป็น core library ที่บริษัท AppMan นะคะ

00:10:34.240 --> 00:10:37.280
เราตั้งชื่อเป็นนักเทนนิสค่ะ

00:10:39.120 --> 00:10:42.680
เราสามารถ import ตัว calculate ออกมาได้

00:10:43.440 --> 00:10:44.837
เข้ามาใน Rust ได้นะคะ

00:10:44.920 --> 00:10:47.840
เสร็จแล้วเราก็สร้าง function เพื่อที่จะเอาไว้

00:10:48.959 --> 00:10:51.159
publish ออกไปให้ JavaScript นะคะ

00:10:52.079 --> 00:10:55.837
หลังจากที่ compile ออกมาเป็น module แล้วนะคะ

00:10:55.920 --> 00:10:58.397
ในฝั่งของ JavaScript ก็สามารถ import ได้ปกติ

00:10:58.480 --> 00:11:00.917
เหมือนเรา import library ทั่วไปเลย

00:11:01.000 --> 00:11:05.439
แล้วก็ลอง call ทุกคนคิดว่ามันจะเร็วหรือช้าคะ

00:11:05.920 --> 00:11:09.759
มีใครเคยลองรึเปล่าคะ

00:11:10.519 --> 00:11:15.919
โอเคค่ะ ลองเดาเล่นๆ นะคะว่ามันจะเร็วรึเปล่า

00:11:17.200 --> 00:11:18.040
3 4 ไปเลยค่ะ

00:11:19.240 --> 00:11:23.917
อันนี้เป็นผลนะคะ จากการที่ลองเรียก function เมื่อกี้นะคะ

00:11:24.000 --> 00:11:27.756
ในฝั่งของ P

00:11:27.839 --> 00:11:29.800
ใช้เวลา 1,900 มิลลิวินาที

00:11:30.240 --> 00:11:34.240
แต่ว่าฝั่ง WebAssembly ก็คือ 2,700 มิลลิวินาทีเลย

00:11:36.440 --> 00:11:40.037
สำหรับฮอลนะคะ ก็พบว่าวิธีนี้คือใช้ไม่ได้

00:11:40.120 --> 00:11:46.040
ก็ไม่แนะนำให้ทุกคนทำ มาบอกความผิดพลาด ความพ่ายแพ้ค่ะ

00:11:46.240 --> 00:11:53.756
ก็พ่ายแพ้กับเรื่องนี้ก็ทำให้ต้องกลับไป plan B นะคะ

00:11:53.839 --> 00:11:55.480
ก็คือต้องเขียน Rust ใหม่

00:11:56.399 --> 00:12:01.000
ซึ่งเป็นอะไรที่ไม่เคย แล้วก็วินาทีแรกคือไม่อยากลอง

00:12:01.760 --> 00:12:04.399
แต่ก็สุดท้ายก็ดีใจค่ะที่ได้ลองเขียน

00:12:04.800 --> 00:12:09.480
ถึงแม้จะยังเขียนไม่นานก็รู้ว่ามัน powerful มากนะคะ

00:12:10.320 --> 00:12:15.316
ก็ต้องลงทุนในโค้ด ในฟังก์ชันของการ calculate มา

00:12:15.399 --> 00:12:18.079
อันนี้คือก็เลยดึงมา 1 ฟังก์ชันนะคะ

00:12:19.399 --> 00:12:22.840
ถ้าดูจาก syntax เนี่ยลักษณะมันไม่ค่อยหนีกับ

00:12:23.279 --> 00:12:24.560
JavaScript เท่าไหร่

00:12:24.680 --> 00:12:30.439
จริงๆ เข้าใจได้ง่ายด้วย ก็เป็นพวก syntax ค่ะ

00:12:31.199 --> 00:12:35.116
ทีนี้พอเขียนแล้วก็ compile ออกมานะคะ

00:12:35.199 --> 00:12:38.277
แล้วก็เอามาใช้ในฝั่งของ JavaScript

00:12:38.360 --> 00:12:41.240
ก็คำนวณออกมาได้ผลดังนี้นะคะ

00:12:47.720 --> 00:12:50.077
ถ้าเป็น JavaScript ธรรมดานะคะ

00:12:50.160 --> 00:12:53.800
ฟังก์ชัน 𝚍𝚒𝚏𝚏𝚃𝚒𝚖𝚎 คือ 47 นะคะ

00:12:54.160 --> 00:12:56.879
แต่ว่าถ้าเป็นจาก WebAssembly ก็คือ 27

00:12:57.880 --> 00:12:59.677
ก็คือเกือบ 50% เลยค่ะ

00:12:59.760 --> 00:13:04.960
ตบมือให้หน่อยค่ะ ขอบคุณค่ะ

00:13:05.720 --> 00:13:09.359
ทีนี้ก็อันนี้เป็นเข้าเรื่องเลยแล้วกันนะคะ

00:13:09.480 --> 00:13:12.037
ก็ลองจูน data visualization

00:13:12.120 --> 00:13:15.079
อันนี้มันจะทำการสลับค่ะ

00:13:15.760 --> 00:13:21.720
ทุกคนพอจะเดาออกไหมคะว่ามันจะเร็วขึ้นมากน้อยแค่ไหน

00:13:22.480 --> 00:13:26.316
จริงๆ การทดลองทำอันนี้เหมือนเอาตัวเองไปตายนิดนึง

00:13:26.399 --> 00:13:29.517
เพราะว่าหน้าแรกของ doc ค่ะ

00:13:29.600 --> 00:13:35.079
มันเขียนไว้อยู่แล้วว่า ยังไม่สามารถ manipulate DOM ได้

00:13:35.839 --> 00:13:38.880
เพราะฉะนั้นหัวข้อในวันนี้ทุกคนอาจจะรู้สึก

00:13:39.560 --> 00:13:43.639
เฮ้ย แล้วมันจะจูน data visualization ได้ไหม

00:13:44.399 --> 00:13:48.360
ก็อาจจะไม่ได้

00:13:49.120 --> 00:13:51.357
อันนี้คือพอหลังจากจูนแล้วค่ะ

00:13:51.440 --> 00:13:56.400
พยายามแคชในส่วนที่พอจะโยนไปฝั่งของ WebAssembly ได้นะคะ

00:13:56.680 --> 00:14:00.800
สังเกตมีอยู่แค่แป๊บนึงนะคะ เลเซอร์อยู่

00:14:03.399 --> 00:14:07.679
มีอยู่แค่ตรงหลุมๆ ตรงนี้เห็นไหมคะ

00:14:08.519 --> 00:14:11.436
มีแค่หลุมตรงนั้นที่มันดรอป

00:14:11.519 --> 00:14:14.797
แต่ถ้าเป็นฝั่ง JavaScript เนี่ยมันจะมีส่วนที่เหมือน

00:14:14.880 --> 00:14:16.320
frame rate ตกเยอะกว่า

00:14:16.560 --> 00:14:19.996
เพราะฉะนั้นอันนี้ก็ถือว่าได้นิดนึง

00:14:20.079 --> 00:14:23.277
อาจจะเป็นเพราะว่าด้วยโค้ดที่เอามาจูน

00:14:23.360 --> 00:14:26.799
อาจจะมีส่วนให้จูนได้เยอะกว่านะคะ

00:14:27.199 --> 00:14:28.480
ไปดูตัวอย่างอันต่อไป

00:14:30.079 --> 00:14:31.800
ก็เลยเพิ่มโจทย์ให้ตัวเองค่ะ

00:14:32.480 --> 00:14:37.718
อันนี้คือฮอลไป clone มาจาก Web Observable นะคะ

00:14:38.320 --> 00:14:40.676
ไม่แน่ใจใครเคยไปลองเล่นรึเปล่า

00:14:40.759 --> 00:14:44.199
จะแบบมีผลงานพวก data visualization เยอะมาก

00:14:44.480 --> 00:14:47.600
แบบมีทั้ง three.js, d3 อย่างงี้ค่ะ

00:14:47.800 --> 00:14:52.400
อันนี้ฮอลก็ไปเจออันนี้ถูกใจคืออยากลองจูนดู

00:14:53.240 --> 00:14:59.357
สุดท้ายก็ได้เท่าเดิมค่ะ

00:14:59.440 --> 00:15:04.477
แต่ว่าส่วนที่น่าสนใจคือในโค้ดของคนนี้ค่ะ

00:15:04.560 --> 00:15:09.759
เขาใช้ data ทั้งหมด 100,000 row ที่เป็น object ค่ะ

00:15:09.880 --> 00:15:12.597
แล้วก็มีการ mapping มีการ calculate ด้วย

00:15:12.680 --> 00:15:15.840
ก็เลยลองเอาตรงนั้นมาลอง proof ดู

00:15:16.360 --> 00:15:21.679
ก็พบว่าใช้เวลาลดลงครึ่งนึงเหมือนกันนะคะ

00:15:22.079 --> 00:15:24.079
ก็เลยค่อนข้างแน่ใจแล้วว่า

00:15:24.920 --> 00:15:30.200
เราควรโฟกัสแค่ในส่วนของการ compute พวก model data

00:15:30.839 --> 00:15:31.756
calculation

00:15:31.839 --> 00:15:34.319
ก็ควรเชื่อ doc แต่แรก

00:15:34.959 --> 00:15:40.760
แต่ก็ดีค่ะ ทำให้เรียนรู้ว่ามันยังไงอะไรอย่างงี้

00:15:41.560 --> 00:15:43.399
สิ่งที่ happy นะคะจากเรื่องนี้ก็คือ

00:15:43.759 --> 00:15:46.360
มัน compute พวก data อย่างงี้มันก็ช่วยเราได้

00:15:46.639 --> 00:15:50.479
ส่วนที่แย่ก็คือไม่สามารถ interact กับ DOM

00:15:51.279 --> 00:15:57.196
แล้วก็ไม่สามารถ access พวก JavaScript object

00:15:57.279 --> 00:15:57.837
อ่ะมันจะช้ามาก

00:15:57.920 --> 00:15:59.919
ก็คือเหมือนที่ยกตัวอย่างไปตอนแรกนะคะ

00:16:00.240 --> 00:16:02.562
ทีนี้ต่อไปก็จะลองยกตัวอย่าง

00:16:02.839 --> 00:16:04.517
อันนี้เป็น inspiration ได้นะคะ

00:16:04.600 --> 00:16:08.280
ก็ฮอลคิดว่าน่าจะเป็น next step ที่อยากจะลองทำดูนะคะ

00:16:08.560 --> 00:16:11.436
คือถึงมันจะ manipulate DOM ไม่ได้

00:16:11.519 --> 00:16:18.077
แต่ว่ามันจะสามารถเหมือนเป็น assign ค่าให้กับ

00:16:18.160 --> 00:16:19.436
element ได้ค่ะ

00:16:19.519 --> 00:16:22.920
เหมือนแบบน่าจะเป็นหลักการของพวก pixel ค่ะ

00:16:23.399 --> 00:16:25.316
ก็คือประมาณนี้ ก็คือ frame rate ไม่ตก

00:16:25.399 --> 00:16:29.239
อันนี้ฮอลยกตัวอย่างของคนที่เขาได้ลองทำ demo มานะคะ

00:16:29.360 --> 00:16:33.799
อันต่อไปเขาก็ลองเอาไปทำเป็นเกม Mario ใช่ไหมคะ

00:16:34.079 --> 00:16:38.280
ใช่ โอเค ก็น่าลองไปเล่นดูนะคะ

00:16:38.959 --> 00:16:44.556
แล้วก็ต่อไปน่าจะเป็นอะไรที่อยากลองไปทำบ้างเหมือนกัน

00:16:44.639 --> 00:16:50.960
ก็คือเขาก็เลยเขียน d3 ขึ้นมาเองในส่วนที่สามารถที่จะ

00:16:55.240 --> 00:17:02.157
สามารถใช้วิธีการของ d3 มาแล้วก็มาลองใช้ด้วยวิธีของ

00:17:02.240 --> 00:17:03.679
WebAssembly แทนนะคะ

00:17:04.400 --> 00:17:05.876
ก็อยากลองอันนี้เหมือนกัน

00:17:05.959 --> 00:17:09.520
ก็หมายความว่าพวกกราฟที่เป็น d3 ค่ะ

00:17:09.799 --> 00:17:14.120
ถ้า manipulate DOM เยอะๆ ส่วนนั้นก็จะจูนได้ยาก

00:17:14.880 --> 00:17:18.200
ทำให้นึกถึงว่าอย่างเอามาใช้ใน React ได้ไหม

00:17:18.959 --> 00:17:23.760
ก็จริงๆ น่าจะเหมาะกับการเขียนพวก reconcile

00:17:24.039 --> 00:17:24.836
อะไรอย่างงี้ค่ะ

00:17:24.919 --> 00:17:30.157
ซึ่งนั่นก็เลยเป็นที่มาของอันต่อไป

00:17:30.240 --> 00:17:35.560
ว่ามีคนทำเป็นเหมือนเป็น web application framework ค่ะ

00:17:36.120 --> 00:17:39.799
ก็อันนี้ก็ยังไม่ได้ลองนะคะ ก็น่าจะไปลองดูค่ะ

00:17:42.480 --> 00:17:49.120
จริงๆ จบแล้วค่ะ ก็ขอบคุณนะคะ

00:17:50.760 --> 00:17:53.357
หวังว่าจะเป็น inspiration

00:17:53.440 --> 00:17:56.877
แบบเห็นใส่ชื่อไปทุกคนจะคิดว่า

00:17:56.960 --> 00:18:00.360
โหย แบบต้องมาฟังแบบมาเรียกแขกอะไรอย่างนี้ก็นิดนึงนะคะ

00:18:01.039 --> 00:18:06.520
ก็อยากให้รู้ว่าก็ไม่ผิดที่เราจะลองอะไรใหม่ๆ เลยนะคะ

00:18:06.799 --> 00:18:09.240
เราก็จะได้เอามาแชร์ให้ทุกคนรู้ค่ะ

00:18:09.440 --> 00:18:10.596
โอเค ขอบคุณมาก

00:18:10.679 --> 00:18:14.399
ตบมือไปแล้ว ขอบคุณ ตบมืออีกที ขอบคุณค่ะ

00:18:16.080 --> 00:18:18.480
น่ารักจริงนะคะ คุณรุจิรานะคะ

00:18:18.880 --> 00:18:21.836
ก็นี่แหละ ทดลองเนาะ ลองไปเรื่อยๆ

00:18:21.919 --> 00:18:23.000
ลองผิดลองถูกนะคะ

00:18:23.120 --> 00:18:25.479
ประสบความสำเร็จบ้าง ล้มเหลวบ้าง

00:18:25.840 --> 00:18:27.800
ก็มีล้มเหลวเยอะเหมือนกันตะกี้

00:18:27.919 --> 00:18:32.277
แต่ว่าก็น่ารักนะคะ คือพยายามแล้วก็เรียนรู้นะคะ

00:18:32.360 --> 00:18:35.677
เห็นคุณรุจิราเนี่ยพยายามที่จะแบบหา source

00:18:35.760 --> 00:18:37.959
จากแหล่งต่างๆ น่ะได้ดีมากเลยนะคะ

00:18:38.080 --> 00:18:40.560
ก็เป็นกำลังใจให้กับทุกท่านด้วยเช่นกันนะคะ

00:18:40.799 --> 00:18:44.317
นี่ก็คือการใช้ WebAssembly เข้ามาช่วยให้กับ heavy duty

00:18:44.400 --> 00:18:47.596
งานหนักๆ ทั้งหลายเนี่ยทำได้เสร็จได้เร็วยิ่งขึ้นด้วยนะคะ
