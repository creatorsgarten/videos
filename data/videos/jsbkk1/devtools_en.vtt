WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:02.080 --> 00:00:05.119
Please welcome next speaker, Miss Chen Hui Jing,

00:00:05.879 --> 00:00:25.316
the developer advocate from Nexmo, Singapore!

00:00:25.399 --> 00:00:33.879
สวัสดีค่ะ I'm very happy to be here at JavaScript Bangkok,

00:00:34.399 --> 00:00:36.840
especially since I'm talking about CSS.

00:00:38.280 --> 00:00:40.517
But don't worry, I'm only going to be here for 25 minutes,

00:00:40.600 --> 00:00:42.199
so please hear me out.

00:00:42.760 --> 00:00:44.717
And so CSS, right?

00:00:44.800 --> 00:00:48.197
I've loved CSS ever since I first picked up web development.

00:00:48.280 --> 00:00:49.760
I like JavaScript also.

00:00:50.320 --> 00:00:52.879
But I love CSS more, right?

00:00:53.920 --> 00:00:57.080
Sometimes, when you love something a lot,

00:00:57.840 --> 00:00:59.720
over time, the feeling might fade.

00:01:00.600 --> 00:01:02.839
But not so with me and CSS.

00:01:03.120 --> 00:01:06.799
In fact, I'm even more excited about CSS now

00:01:07.200 --> 00:01:08.356
than when I first started.

00:01:08.439 --> 00:01:10.396
And let me explain why, right?

00:01:10.479 --> 00:01:13.759
Because like every good relationship,

00:01:14.040 --> 00:01:16.800
both parties must evolve and grow.

00:01:17.200 --> 00:01:21.036
And CSS has evolved and grown a lot over the years

00:01:21.119 --> 00:01:22.319
since I first picked it up.

00:01:22.640 --> 00:01:25.837
I like to think that I also evolved and grown

00:01:25.920 --> 00:01:27.960
over the years, but that's another conversation.

00:01:30.400 --> 00:01:35.200
My name is Hui Jing, and today we're going to talk about CSS

00:01:35.640 --> 00:01:38.559
and how DevTools can help us understand CSS better.

00:01:39.520 --> 00:01:44.396
Recently, I've been thinking more about how to show people

00:01:44.479 --> 00:01:48.920
who find CSS confusing, or maybe find CSS frustrating,

00:01:49.799 --> 00:01:51.477
or maybe you're just new to CSS and wonder

00:01:51.560 --> 00:01:52.600
"why this doesn't work?"

00:01:54.000 --> 00:01:58.837
I want to show these people how much easier

00:01:58.920 --> 00:02:01.240
it is to do things now than before.

00:02:01.520 --> 00:02:04.277
A light bulb went off in my head last year when

00:02:04.360 --> 00:02:07.921
the Flexbox inspector was released in Firefox DevTools,

00:02:08.280 --> 00:02:13.079
because it showed me what the browser was doing to my items.

00:02:14.000 --> 00:02:17.436
I always use a grid inspector when I'm building things

00:02:17.519 --> 00:02:21.957
with grid to show me what the browser was doing

00:02:22.040 --> 00:02:23.079
to my grid items.

00:02:23.480 --> 00:02:26.876
But the Flexbox inspector really opened my eyes

00:02:26.959 --> 00:02:29.560
to the possibilities of what DevTools could be.

00:02:29.680 --> 00:02:33.680
It's like having a CSS advocate, but inside your browser.

00:02:34.360 --> 00:02:35.557
Because of the limited time I have,

00:02:35.640 --> 00:02:39.720
I picked a few specific CSS properties to talk about today.

00:02:40.080 --> 00:02:41.159
Let's start with Flexbox.

00:02:51.200 --> 00:02:55.717
Flexbox can be confusing for most people,

00:02:55.800 --> 00:02:58.440
because the end size of your box

00:02:59.200 --> 00:03:01.199
is not entirely determined by you.

00:03:02.319 --> 00:03:04.199
The browser does things to your item.

00:03:05.159 --> 00:03:08.757
Flexbox is the first layout model that establishes

00:03:08.840 --> 00:03:10.076
a parent-child relationship,

00:03:10.159 --> 00:03:13.799
meaning when you put 𝚍𝚒𝚜𝚙𝚕𝚊𝚢: 𝚏𝚕𝚎𝚡 on an element,

00:03:15.280 --> 00:03:18.637
what happens is it establishes a formatting context

00:03:18.720 --> 00:03:20.160
for its direct children.

00:03:20.720 --> 00:03:25.040
The size of your children is determined by three factors:

00:03:25.840 --> 00:03:29.040
𝚏𝚕𝚎𝚡-𝚐𝚛𝚘𝚠, 𝚏𝚕𝚎𝚡-𝚜𝚑𝚛𝚒𝚗𝚔, and 𝚏𝚕𝚎𝚡-𝚋𝚊𝚜𝚒𝚜.

00:03:30.120 --> 00:03:33.480
This is a mental model that's a bit hard to understand,

00:03:33.720 --> 00:03:35.320
because it's not direct.

00:03:36.000 --> 00:03:39.680
Like last time when you say, my box, 300 pixels,

00:03:39.879 --> 00:03:42.837
and you look, oh yeah, okay, my box is 300 pixels.

00:03:42.920 --> 00:03:46.436
Now sometimes you put a size of like 250 pixels,

00:03:46.519 --> 00:03:49.440
come out your box not 250 pixels, like, very confusing.

00:03:50.879 --> 00:03:52.837
I think 𝚏𝚕𝚎𝚡-𝚋𝚊𝚜𝚒𝚜 is this property that

00:03:52.920 --> 00:03:55.557
a lot of developers misunderstand,

00:03:55.640 --> 00:03:58.400
because it's not the end size, it's the starting size.

00:03:58.840 --> 00:04:00.796
If you can't remember anything about Flexbox today,

00:04:00.879 --> 00:04:04.480
just remember that 𝚏𝚕𝚎𝚡-𝚋𝚊𝚜𝚒𝚜 is the starting point

00:04:04.640 --> 00:04:07.479
from which your browser calculates the size of your box.

00:04:07.959 --> 00:04:12.197
Which means, depending on the value of 𝚏𝚕𝚎𝚡-𝚐𝚛𝚘𝚠

00:04:12.280 --> 00:04:13.280
or 𝚏𝚕𝚎𝚡-𝚜𝚑𝚛𝚒𝚗𝚔,

00:04:13.640 --> 00:04:17.719
your end size may not be what you put as the 𝚏𝚕𝚎𝚡-𝚋𝚊𝚜𝚒𝚜.

00:04:19.519 --> 00:04:22.597
This is much easier to understand if the browser

00:04:22.680 --> 00:04:23.920
tells you what it's doing.

00:04:24.360 --> 00:04:25.320
So let's look at this.

00:04:31.759 --> 00:04:32.680
Let's look at this.

00:04:33.160 --> 00:04:37.560
This is a container with display flex.

00:04:38.320 --> 00:04:41.037
The three items inside, they are the flex children.

00:04:41.120 --> 00:04:42.640
Their size with flex box.

00:04:43.000 --> 00:04:48.279
If I highlight this one, if there is no flex property on it,

00:04:48.720 --> 00:04:51.479
but the browser applies the default styles.

00:04:52.160 --> 00:04:54.320
If there is no flex property,

00:04:54.600 --> 00:04:56.877
the browser will give it a flex grow of zero,

00:04:56.960 --> 00:04:58.079
flex shrink of one,

00:04:58.280 --> 00:04:59.440
and flex basis of auto.

00:05:00.080 --> 00:05:01.080
How do I know this?

00:05:01.600 --> 00:05:02.840
Because the browser will tell me.

00:05:02.960 --> 00:05:04.037
If you go computed,

00:05:04.120 --> 00:05:06.399
and then you click on browser styles, right?

00:05:06.520 --> 00:05:07.880
You can just search for flex.

00:05:08.560 --> 00:05:09.757
So it will tell you, okay lah,

00:05:09.840 --> 00:05:10.597
flex grow zero,

00:05:10.680 --> 00:05:11.357
flex shrink one,

00:05:11.440 --> 00:05:12.560
and flex basis auto.

00:05:12.800 --> 00:05:15.320
Grow means grow zero means,

00:05:15.520 --> 00:05:18.277
if there's a lot of space, is not going to grow.

00:05:18.360 --> 00:05:20.116
We are talking about this particular item here,

00:05:20.199 --> 00:05:21.360
the last one, right?

00:05:21.479 --> 00:05:22.437
Got a lot of space,

00:05:22.520 --> 00:05:24.400
but zero, that's why it doesn't grow.

00:05:24.800 --> 00:05:27.836
But because the flex shrink is one, right?

00:05:27.919 --> 00:05:30.400
When there's not enough space, the box will shrink, okay?

00:05:31.440 --> 00:05:34.439
And the last value, which is flex basis is auto.

00:05:34.560 --> 00:05:35.760
So what does auto mean?

00:05:41.600 --> 00:05:45.277
We can see this because there's the option now

00:05:45.360 --> 00:05:46.800
to have a flex overlay.

00:05:46.960 --> 00:05:50.640
If you turn it on, it will tell you what's going on.

00:05:51.720 --> 00:05:53.997
Because I said flex basis is the starting size

00:05:54.080 --> 00:05:55.556
of a flex item, right?

00:05:55.639 --> 00:05:59.317
When I say auto, it actually resolves to content size.

00:05:59.400 --> 00:06:03.680
So you can see this number is like 296, fine.

00:06:04.440 --> 00:06:06.480
That's how long this sentence is.

00:06:07.000 --> 00:06:12.840
So this is the starting size of this particular box,

00:06:13.400 --> 00:06:13.560
right?

00:06:13.720 --> 00:06:16.000
When there's a lot of space, it doesn't grow.

00:06:19.120 --> 00:06:22.637
The content changed because I got nothing better to do,

00:06:22.720 --> 00:06:25.717
then I go and make the font size variable.

00:06:25.800 --> 00:06:27.320
Never mind, let's make it fixed.

00:06:27.560 --> 00:06:30.080
Let's change it back to like 1.5em.

00:06:33.599 --> 00:06:34.599
Yeah, okay, very nice.

00:06:35.520 --> 00:06:38.757
Okay, there.

00:06:38.840 --> 00:06:39.839
It shouldn't change now.

00:06:40.080 --> 00:06:43.120
Yeah, so it's 328, doesn't change.

00:06:43.280 --> 00:06:45.999
But when there's not enough space,

00:06:46.599 --> 00:06:48.556
what's good about the inspector is now it starts to tell you,

00:06:48.639 --> 00:06:50.077
it tells you that, okay,

00:06:50.160 --> 00:06:51.600
because flex shrink is one,

00:06:52.280 --> 00:06:55.077
me, this is like pretend that this is the browser

00:06:55.160 --> 00:06:56.157
talking to you, right?

00:06:56.240 --> 00:06:57.157
So the browser is saying,

00:06:57.240 --> 00:07:00.120
okay, your original content size was this much,

00:07:00.360 --> 00:07:02.600
and then because your flex shrink is one,

00:07:03.280 --> 00:07:06.116
I, the browser, I shrunk your box.

00:07:06.199 --> 00:07:07.360
I shrunk your box by 62.42,

00:07:08.919 --> 00:07:10.120
and so the end size into 266.

00:07:11.479 --> 00:07:12.597
I don't know about you lah,

00:07:12.680 --> 00:07:15.077
like before I saw these numbers,

00:07:15.160 --> 00:07:15.757
I don't understand,

00:07:15.840 --> 00:07:17.277
like, browser, why you do to my item?

00:07:17.360 --> 00:07:19.037
Why my item the size so weird?

00:07:19.120 --> 00:07:20.677
But now, then I see the numbers,

00:07:20.760 --> 00:07:23.440
I'm like, oh, that's why you did.

00:07:24.520 --> 00:07:27.877
So this is the part where I think dev tools is very useful

00:07:27.960 --> 00:07:29.877
to help us visualize this concept,

00:07:29.960 --> 00:07:31.879
because flex is quite complicated, right?

00:07:32.039 --> 00:07:33.199
Like three values,

00:07:33.479 --> 00:07:35.757
and then depending on the number you put,

00:07:35.840 --> 00:07:36.917
everything different.

00:07:37.000 --> 00:07:39.437
But when you see it like that,

00:07:39.520 --> 00:07:41.757
I think it's very easy to understand.

00:07:41.840 --> 00:07:44.919
Now the interesting thing about flex is that

00:07:45.599 --> 00:07:48.516
there are few like flex basis makes your item

00:07:48.599 --> 00:07:49.717
behave quite differently.

00:07:49.800 --> 00:07:51.079
So auto is one way.

00:07:51.800 --> 00:07:53.999
When you use flex basis auto,

00:07:54.280 --> 00:07:55.717
what it means is that, like I said,

00:07:55.800 --> 00:07:58.319
it uses the content size as the starting point.

00:07:58.479 --> 00:08:00.400
If we go and look at the other two,

00:08:01.479 --> 00:08:04.039
this particular item, there is no grow.

00:08:04.440 --> 00:08:05.516
The other two, right?

00:08:05.599 --> 00:08:06.840
The grow value is different.

00:08:07.039 --> 00:08:09.000
This one is a flex grow of one,

00:08:09.680 --> 00:08:12.040
and this one is a flex grow of two.

00:08:12.720 --> 00:08:15.556
What flex box does is it distributes free space.

00:08:15.639 --> 00:08:16.757
And what does free space mean?

00:08:16.840 --> 00:08:20.839
Free space is the amount of space in the container

00:08:21.039 --> 00:08:23.556
after your content is distributed.

00:08:23.639 --> 00:08:27.959
When you put flex basis auto, the content comes.

00:08:28.280 --> 00:08:28.960
What do you mean?

00:08:29.720 --> 00:08:33.119
When I highlight this, the starting size is the content.

00:08:33.479 --> 00:08:37.157
And so if you look, the starting size is different,

00:08:37.240 --> 00:08:41.797
but the amount of growth is related to the flex grow.

00:08:41.880 --> 00:08:44.880
So you see here, this is 94, let's say 95 lah, round up,

00:08:45.040 --> 00:08:45.440
okay?

00:08:46.040 --> 00:08:46.960
For here is about 190,

00:08:48.000 --> 00:08:50.719
because the grow factor for the second one is two,

00:08:50.839 --> 00:08:52.357
grow factor for the first one is one.

00:08:52.440 --> 00:08:55.680
So it grew the free space is distributed two to one,

00:08:55.839 --> 00:08:56.600
free space.

00:08:56.760 --> 00:08:59.080
But the final size is not two to one.

00:08:59.240 --> 00:09:03.196
If you want the final size of your item to be two is to one,

00:09:03.279 --> 00:09:03.597
right?

00:09:03.680 --> 00:09:04.720
You cannot use auto.

00:09:05.000 --> 00:09:05.960
You must use zero.

00:09:06.399 --> 00:09:07.800
Let's look at this second example.

00:09:10.760 --> 00:09:10.920
I, oh.

00:09:11.760 --> 00:09:19.920
In this second example, the… it's set to grow one,

00:09:20.600 --> 00:09:22.040
but the basis is zero.

00:09:22.320 --> 00:09:23.679
All of them, the basis is zero.

00:09:23.839 --> 00:09:25.756
So what do you mean when the basis is zero?

00:09:25.839 --> 00:09:28.120
If you go to layout, a browser tool,

00:09:28.360 --> 00:09:29.316
content size zero,

00:09:29.399 --> 00:09:31.797
meaning the browser doesn't count the content size anymore.

00:09:31.880 --> 00:09:37.320
It just distributes the space according to the flex grow

00:09:37.560 --> 00:09:38.717
and shrink factors.

00:09:38.800 --> 00:09:40.756
I'm trying to get 400, but this is very hard.

00:09:40.839 --> 00:09:41.117
Cannot.

00:09:41.200 --> 00:09:41.360
Okay, 400.

00:09:41.760 --> 00:09:42.920
Pretend it's 400, okay?

00:09:44.279 --> 00:09:46.240
If you look at this,

00:09:46.920 --> 00:09:47.837
if you want this type,

00:09:47.920 --> 00:09:50.919
you want one box to be twice of another,

00:09:51.200 --> 00:09:53.000
then you can use flex zero.

00:09:53.480 --> 00:09:55.120
Because now, the first box is 400,

00:09:56.120 --> 00:09:56.720
the second box is 800.

00:09:57.360 --> 00:09:59.280
Because when you set the basis to zero,

00:09:59.720 --> 00:10:01.320
it ignores the content size,

00:10:01.480 --> 00:10:04.517
and all the space is considered free space to distribute.

00:10:04.600 --> 00:10:06.920
So that's how flex basis kind of works.

00:10:09.079 --> 00:10:11.680
The interesting thing about flex is that

00:10:12.360 --> 00:10:14.640
one more thing I want to highlight is that

00:10:15.000 --> 00:10:19.080
when there is no width and no flex basis, it's auto.

00:10:19.279 --> 00:10:20.600
So it takes content size.

00:10:20.800 --> 00:10:23.479
But let's say you put a width.

00:10:24.079 --> 00:10:31.637
If you put a width onto your element,

00:10:31.720 --> 00:10:34.400
the width becomes the starting size.

00:10:35.160 --> 00:10:37.281
And you can see it if you go there, flex auto.

00:10:37.440 --> 00:10:38.240
Your starting size 200.

00:10:38.600 --> 00:10:39.480
Okay, I calculate 200.

00:10:40.480 --> 00:10:43.919
If you have a width, and then you have a flex basis,

00:10:44.519 --> 00:10:45.760
then flex basis win.

00:10:46.800 --> 00:10:50.639
So it will ignore the width, and it will use 300.

00:10:52.320 --> 00:10:55.440
So this might be hard to understand without

00:10:56.160 --> 00:10:56.917
the flex inspector,

00:10:57.000 --> 00:10:57.837
but with the flex inspector,

00:10:57.920 --> 00:10:59.517
at least you can go and check like,

00:10:59.600 --> 00:11:01.600
what did the browser use to start with?

00:11:01.920 --> 00:11:05.600
And I think this is a pretty useful tool

00:11:06.040 --> 00:11:08.000
that the browser now gives us

00:11:08.200 --> 00:11:09.756
that lets us understand this stuff,

00:11:09.839 --> 00:11:12.397
more complicated CSS properties.

00:11:12.480 --> 00:11:14.279
So the next property I want to highlight

00:11:14.760 --> 00:11:16.196
is part of CSS grid.

00:11:16.279 --> 00:11:17.597
CSS grid very complicated.

00:11:17.680 --> 00:11:18.957
So I'm going to choose like

00:11:19.040 --> 00:11:21.637
this is one of my more favorite property.

00:11:21.720 --> 00:11:23.119
It's called 𝚐𝚛𝚒𝚍-𝚝𝚎𝚖𝚙𝚕𝚊𝚝𝚎-𝚊𝚛𝚎𝚊𝚜.

00:11:23.279 --> 00:11:26.159
So I'm not sure how many of you actually use grid already.

00:11:26.279 --> 00:11:28.360
Even if you never use grid before, never mind.

00:11:29.360 --> 00:11:31.800
The basics of grid not that hard to understand.

00:11:32.480 --> 00:11:34.597
But what we have here is again,

00:11:34.680 --> 00:11:36.479
you can also toggle the overlay.

00:11:36.720 --> 00:11:39.559
Let me take this out.

00:11:40.399 --> 00:11:41.519
So if you go to layout,

00:11:42.800 --> 00:11:44.436
you can toggle like if you have multiple grids,

00:11:44.519 --> 00:11:46.556
you can toggle, and you can change the color whatever,

00:11:46.639 --> 00:11:47.800
but like purple quite nice.

00:11:48.079 --> 00:11:49.876
So other than that, you have options.

00:11:49.959 --> 00:11:51.316
You can either display line number

00:11:51.399 --> 00:11:52.759
or display area names.

00:11:54.320 --> 00:11:56.277
Most typically, you want to see the line numbers

00:11:56.360 --> 00:11:58.440
because like even this grid is not that big,

00:11:59.320 --> 00:12:03.040
6×6 is already a bit annoying,

00:12:03.240 --> 00:12:04.157
if I want to count,

00:12:04.240 --> 00:12:05.237
I'm like, oh, I want to put it here,

00:12:05.320 --> 00:12:06.677
then I'm like, oh, one, two, three, four.

00:12:06.760 --> 00:12:07.797
So if you have the line numbers,

00:12:07.880 --> 00:12:08.677
you can just straight away say,

00:12:08.760 --> 00:12:09.919
oh yeah, I want to put it here.

00:12:10.360 --> 00:12:13.116
But sometimes, especially if you have

00:12:13.199 --> 00:12:16.316
a much bigger grid and it's a full page layout,

00:12:16.399 --> 00:12:17.840
and you have a lot of elements on it,

00:12:17.959 --> 00:12:19.399
let's say you've got 20 elements,

00:12:20.360 --> 00:12:24.359
if you want to change the position of any elements,

00:12:24.639 --> 00:12:25.783
or when you change a breakpoint,

00:12:25.866 --> 00:12:27.279
and you want to rearrange the whole page,

00:12:27.440 --> 00:12:28.519
if you want to go one by one

00:12:28.760 --> 00:12:30.116
and change the grid item position,

00:12:30.199 --> 00:12:32.120
it's like cannot lah.

00:12:32.720 --> 00:12:33.720
It's a waste of time.

00:12:33.959 --> 00:12:36.277
Then you got like work-life balance and then

00:12:36.360 --> 00:12:37.797
So yeah, if you do this all the time,

00:12:37.880 --> 00:12:39.436
then your work and your life no more balance.

00:12:39.519 --> 00:12:40.876
So this can actually save you time

00:12:40.959 --> 00:12:44.200
because you can assign specific areas specific names.

00:12:44.519 --> 00:12:47.597
So the code looks a bit complicated

00:12:47.680 --> 00:12:50.597
because the dev tool just squish everything together.

00:12:50.680 --> 00:12:51.840
But what you can do is

00:12:51.959 --> 00:12:53.839
it allows me, now I display the area names,

00:12:54.320 --> 00:12:58.000
I can assign specific sections with specific names.

00:12:58.560 --> 00:13:02.797
And then I can tell the child to go to the area

00:13:02.880 --> 00:13:03.960
and stay there.

00:13:04.279 --> 00:13:06.517
So for example, this elephant emoji

00:13:06.600 --> 00:13:08.640
is in the area called elephant.

00:13:08.920 --> 00:13:12.279
So the rest of them all have their own names,

00:13:12.519 --> 00:13:14.360
but if I ever want to change the position,

00:13:14.480 --> 00:13:16.037
I don't have to look at the children ever again.

00:13:16.120 --> 00:13:17.077
So now I only got three children.

00:13:17.160 --> 00:13:17.996
If I got 20 children,

00:13:18.079 --> 00:13:19.840
I can also ignore all the 20 children.

00:13:20.040 --> 00:13:22.237
And for example, if I want to change,

00:13:22.320 --> 00:13:25.637
I say, okay, elephant actually don't need four squares lah.

00:13:25.720 --> 00:13:26.996
Two squares can already.

00:13:27.079 --> 00:13:28.280
I can just change the code.

00:13:31.240 --> 00:13:37.357
So a dot means like empty space like that.

00:13:37.440 --> 00:13:41.519
So I can just change the code directly on the grid temp-

00:13:41.880 --> 00:13:43.640
on the container code.

00:13:43.959 --> 00:13:46.440
So let's say you have like five breakpoints

00:13:46.560 --> 00:13:48.160
because you know you're responsive.

00:13:48.320 --> 00:13:50.597
So you don't have to go and write media query

00:13:50.680 --> 00:13:52.556
for each of your individual 20 items.

00:13:52.639 --> 00:13:54.517
You can just do all your media queries

00:13:54.600 --> 00:13:56.157
on your grid container itself.

00:13:56.240 --> 00:13:58.120
So it also makes it easier to maintain.

00:13:58.320 --> 00:14:00.919
And the fun part about template areas is that

00:14:01.440 --> 00:14:06.880
if you don't like having many letters,

00:14:07.120 --> 00:14:09.880
don't worry, you can also use emoji.

00:14:10.480 --> 00:14:15.080
So if you change this to like maybe you love elephant,

00:14:15.360 --> 00:14:18.440
then use a heart, also can.

00:14:19.279 --> 00:14:24.920
So it's a very easy way to label your grid areas

00:14:25.120 --> 00:14:27.676
and it's a much easier way to manage,

00:14:27.759 --> 00:14:29.637
I feel, manage your grid items

00:14:29.720 --> 00:14:32.597
for a more big and complicated layout.

00:14:32.680 --> 00:14:34.196
So this grid template areas,

00:14:34.279 --> 00:14:35.717
if you never tried it before

00:14:35.800 --> 00:14:37.240
and you are using grid right,

00:14:38.079 --> 00:14:39.957
I suggest that you just try out lah.

00:14:40.040 --> 00:14:42.519
Maybe it might be good for you.

00:14:44.079 --> 00:14:47.556
Another property that I want to talk about

00:14:47.639 --> 00:14:50.599
that I think even less people have used,

00:14:50.839 --> 00:14:51.756
maybe you heard of it,

00:14:51.839 --> 00:14:53.120
is this thing called subgrid.

00:14:53.399 --> 00:14:56.277
So I think there are quite a lot of articles

00:14:56.360 --> 00:14:57.837
they always say oh yeah, grid is amazing,

00:14:57.920 --> 00:15:00.480
you know, grid came out 2017, changed the world.

00:15:01.000 --> 00:15:02.957
Okay, but that doesn't mean that it was perfect

00:15:03.040 --> 00:15:03.957
when it first came out.

00:15:04.040 --> 00:15:05.440
Because when it first came out,

00:15:07.480 --> 00:15:09.840
what you couldn't do is that

00:15:10.320 --> 00:15:12.436
the grid only affects its direct children.

00:15:12.519 --> 00:15:14.957
If we have content inside the children,

00:15:15.040 --> 00:15:17.160
you cannot get the content to line up with each other

00:15:17.519 --> 00:15:19.200
because it's a one level only.

00:15:19.560 --> 00:15:23.240
So what grid introduced is it allows nested grids,

00:15:23.560 --> 00:15:25.917
meaning it's like your grid right,

00:15:26.000 --> 00:15:27.196
then your grid got children,

00:15:27.279 --> 00:15:28.037
then the children got children,

00:15:28.120 --> 00:15:28.917
your grid got grandchildren,

00:15:29.000 --> 00:15:30.717
then your grandchildren got children,

00:15:30.800 --> 00:15:31.717
your grid got great grandchildren,

00:15:31.800 --> 00:15:33.436
yeah, all these children right,

00:15:33.519 --> 00:15:34.920
they can line up with each other.

00:15:35.120 --> 00:15:37.200
So it's easier to see example again.

00:15:37.399 --> 00:15:40.637
So if you use again you can,

00:15:40.720 --> 00:15:43.759
it's easier to see when you get to highlight right.

00:15:43.959 --> 00:15:46.679
So once you have a grid,

00:15:47.279 --> 00:15:49.436
inside I have two grid items,

00:15:49.519 --> 00:15:51.719
so they are grid children.

00:15:52.079 --> 00:15:55.159
But they can also have their own grid

00:15:55.839 --> 00:15:57.876
which lines up with the parent, okay.

00:15:57.959 --> 00:16:00.120
Why is everything the same color? Hang on.

00:16:00.880 --> 00:16:02.996
We can change color because everything same color

00:16:03.079 --> 00:16:03.880
very hard to see.

00:16:04.319 --> 00:16:09.960
Orange, blue, blue green. Okay, fine.

00:16:10.680 --> 00:16:12.399
So as you can see,

00:16:12.600 --> 00:16:15.239
if you look at just the markup right,

00:16:15.360 --> 00:16:17.200
there's this one is the big grid,

00:16:17.319 --> 00:16:18.560
like a grandfather grid.

00:16:19.160 --> 00:16:21.357
So each of the grid items they have their own children.

00:16:21.440 --> 00:16:23.639
So a b c d is grandchildren,

00:16:24.279 --> 00:16:25.477
1 2 3 also grandchildren.

00:16:25.560 --> 00:16:28.597
So what you can do is that subgrid right,

00:16:28.680 --> 00:16:31.837
is not a display property,

00:16:31.920 --> 00:16:33.880
it's a sizing property.

00:16:34.480 --> 00:16:36.556
So for your nested grid,

00:16:36.639 --> 00:16:38.039
you still use 𝚍𝚒𝚜𝚙𝚕𝚊𝚢: 𝚐𝚛𝚒𝚍;.

00:16:38.639 --> 00:16:40.196
It's in the 𝚐𝚛𝚒𝚍-𝚝𝚎𝚖𝚙𝚕𝚊𝚝𝚎-𝚛𝚘𝚠𝚜

00:16:40.279 --> 00:16:40.717
and 𝚐𝚛𝚒𝚍-𝚝𝚎𝚖𝚙𝚕𝚊𝚝𝚎-𝚌𝚘𝚕𝚞𝚖𝚗𝚜

00:16:40.800 --> 00:16:42.157
then you use the keyword subgrid.

00:16:42.240 --> 00:16:43.756
So when you use the keyword subgrid,

00:16:43.839 --> 00:16:45.917
what you are doing is you are telling the browser

00:16:46.000 --> 00:16:48.436
that I want the grandchildren

00:16:48.519 --> 00:16:50.360
to also follow the parent grid.

00:16:50.800 --> 00:16:51.996
So in this example,

00:16:52.079 --> 00:16:57.676
I can let the items b and c align with item one and two,

00:16:57.759 --> 00:16:59.840
even though they are separate grids,

00:17:00.000 --> 00:17:01.520
because they are part of a bigger grid.

00:17:02.120 --> 00:17:04.876
But you don't have to like follow everything.

00:17:04.959 --> 00:17:08.000
So you can only follow on either the columns

00:17:08.240 --> 00:17:09.440
or the rows or both.

00:17:09.679 --> 00:17:12.437
So if you look at just the shading right,

00:17:12.520 --> 00:17:15.880
you can see that they have their own row sizes.

00:17:16.280 --> 00:17:19.716
The row size for the blue grid and the red grid,

00:17:19.799 --> 00:17:20.517
they are different.

00:17:20.600 --> 00:17:23.000
It's only the column size that's the same

00:17:23.120 --> 00:17:26.040
because I have set the column size to subgrid.

00:17:26.199 --> 00:17:27.840
So that's pretty much how it works.

00:17:28.160 --> 00:17:30.157
And using the dev tools right,

00:17:30.240 --> 00:17:33.397
you can also see that the subgrids themselves

00:17:33.480 --> 00:17:35.480
have their own set of line numbers.

00:17:35.880 --> 00:17:39.800
So let's say I want to place item two.

00:17:40.480 --> 00:17:41.437
I will not use four,

00:17:41.520 --> 00:17:43.520
I will use two because that's what

00:17:44.240 --> 00:17:46.080
its own set of line numbers is.

00:17:46.240 --> 00:17:48.077
So this is how dev tools can actually help us

00:17:48.160 --> 00:17:50.320
better visualize what's going on

00:17:50.559 --> 00:17:53.519
when we are doing layout, right?

00:17:53.679 --> 00:17:56.959
And the last property that I want to talk about today

00:17:57.240 --> 00:17:59.797
is called CSS Shapes.

00:17:59.880 --> 00:18:02.959
And CSS Shapes has been around for a while,

00:18:03.360 --> 00:18:06.280
but I guess I don't see it that often.

00:18:06.520 --> 00:18:08.357
Because like a few years ago,

00:18:08.440 --> 00:18:10.400
I used to work for advertising agency.

00:18:10.760 --> 00:18:12.440
And my designers will always give me,

00:18:12.679 --> 00:18:15.476
you know advertising agencies all like that type

00:18:15.559 --> 00:18:17.480
of print publication,

00:18:17.720 --> 00:18:20.357
like fashion magazines right,

00:18:20.440 --> 00:18:21.600
they always have this model

00:18:21.720 --> 00:18:24.160
and the model almost always ah will stand at it.

00:18:25.000 --> 00:18:26.960
And then the text will flow around the elbow.

00:18:27.480 --> 00:18:29.357
But when my designers say,

00:18:29.440 --> 00:18:30.437
eh can do like yeah,

00:18:30.520 --> 00:18:32.517
let's can we do this spread on the web

00:18:32.600 --> 00:18:34.120
and then I look at them like, no.

00:18:35.919 --> 00:18:38.640
Because when everything on the web,

00:18:38.840 --> 00:18:39.677
you must understand,

00:18:39.760 --> 00:18:41.399
everything on the web is a box.

00:18:42.000 --> 00:18:43.677
Everything on the web is a rectangle.

00:18:43.760 --> 00:18:45.080
There's no such thing as shapes.

00:18:45.520 --> 00:18:48.317
But there is this property called CSS Shapes

00:18:48.400 --> 00:18:49.840
that let us do this kind of thing.

00:18:50.080 --> 00:18:52.199
So this is clearly a picture of a star,

00:18:52.799 --> 00:18:55.360
but I can let my text flow around the star.

00:18:55.880 --> 00:18:58.240
So the property that makes this work

00:18:58.400 --> 00:19:00.040
is called CSS Shapes.

00:19:00.280 --> 00:19:04.960
Oh my god, why am I doing this? Yeah, sorry.

00:19:05.640 --> 00:19:07.956
So let's look at it and see how it works.

00:19:08.039 --> 00:19:13.720
So in order to make the text flow around the shape,

00:19:14.120 --> 00:19:16.799
we actually use this property called 𝚜𝚑𝚊𝚙𝚎-𝚘𝚞𝚝𝚜𝚒𝚍𝚎.

00:19:17.080 --> 00:19:18.797
For now, 𝚜𝚑𝚊𝚙𝚎-𝚘𝚞𝚝𝚜𝚒𝚍𝚎 only works

00:19:18.880 --> 00:19:20.160
on floated elements.

00:19:20.400 --> 00:19:23.000
So cannot be helped, you have to float it.

00:19:23.440 --> 00:19:25.760
But what you can do is that you can use

00:19:26.440 --> 00:19:29.437
there are a number of shape basic shape functions

00:19:29.520 --> 00:19:30.119
inside CSS.

00:19:30.520 --> 00:19:31.757
So there's like 𝚌𝚒𝚛𝚌𝚕𝚎(),

00:19:31.840 --> 00:19:32.517
there's 𝚎𝚕𝚕𝚒𝚙𝚜𝚎(),

00:19:32.600 --> 00:19:33.716
and then there's also 𝚙𝚘𝚕𝚢𝚐𝚘𝚗().

00:19:33.799 --> 00:19:34.797
So 𝚌𝚒𝚛𝚌𝚕𝚎() is just circle lah,

00:19:34.880 --> 00:19:35.877
so not very exciting.

00:19:35.960 --> 00:19:38.517
So I highlight 𝚙𝚘𝚕𝚢𝚐𝚘𝚗() because 𝚙𝚘𝚕𝚢𝚐𝚘𝚗()

00:19:38.600 --> 00:19:41.437
is just points, it's just coordinates.

00:19:41.520 --> 00:19:44.240
So meaning, you can actually plot.

00:19:45.120 --> 00:19:46.600
So this star is plotted.

00:19:46.960 --> 00:19:50.479
And you can change the value and you can see

00:19:51.200 --> 00:19:54.117
how the text will move around.

00:19:54.200 --> 00:19:56.437
So why I want to highlight this is that

00:19:56.520 --> 00:19:59.280
there's a second property here called 𝚌𝚕𝚒𝚙-𝚙𝚊𝚝𝚑.

00:19:59.480 --> 00:20:02.757
So the difference is 𝚜𝚑𝚊𝚙𝚎-𝚘𝚞𝚝𝚜𝚒𝚍𝚎 will affect

00:20:02.840 --> 00:20:04.680
the shape that your text flows.

00:20:05.200 --> 00:20:07.157
Now, if I wanted to change the shape,

00:20:07.240 --> 00:20:08.836
so if I don't have 𝚌𝚕𝚒𝚙-𝚙𝚊𝚝𝚑 right,

00:20:08.919 --> 00:20:10.956
like again huh, everything on the web is a rectangle.

00:20:11.039 --> 00:20:13.240
So without 𝚌𝚕𝚒𝚙-𝚙𝚊𝚝𝚑, is just a rectangle.

00:20:13.440 --> 00:20:15.600
But if I want to make it a star,

00:20:15.760 --> 00:20:17.959
I have to clip away the areas that I don't want.

00:20:18.559 --> 00:20:21.197
So because they are using the same value,

00:20:21.280 --> 00:20:23.076
which is this 𝚙𝚘𝚕𝚢𝚐𝚘𝚗() function,

00:20:23.159 --> 00:20:24.920
let's say I make this star,

00:20:25.520 --> 00:20:29.716
looks like I've created a very abstract version

00:20:29.799 --> 00:20:30.480
of a star,

00:20:30.960 --> 00:20:33.037
what I can do is I can copy this same property.

00:20:33.120 --> 00:20:35.720
Because when you edit directly here,

00:20:36.679 --> 00:20:38.517
the dev tools will change the value for you,

00:20:38.600 --> 00:20:39.877
which is great, it's very helpful.

00:20:39.960 --> 00:20:41.076
Because what I can do is you can either

00:20:41.159 --> 00:20:42.917
copy and paste this and put in your code,

00:20:43.000 --> 00:20:43.877
or you can copy and paste,

00:20:43.960 --> 00:20:45.120
put inside 𝚌𝚕𝚒𝚙-𝚙𝚊𝚝𝚑,

00:20:45.440 --> 00:20:47.120
and then your text will match it.

00:20:47.799 --> 00:20:49.880
So this is again,

00:20:50.080 --> 00:20:54.240
I find something that dev tools can help us

00:20:54.640 --> 00:20:56.397
understand how these properties work.

00:20:56.480 --> 00:20:58.559
Because if I didn't see this,

00:20:58.720 --> 00:21:00.357
I'll be trying to change the 𝚜𝚑𝚊𝚙𝚎-𝚘𝚞𝚝𝚜𝚒𝚍𝚎

00:21:00.440 --> 00:21:01.160
and then I'm like,

00:21:01.440 --> 00:21:04.920
how come the text move but my shape never move?

00:21:05.039 --> 00:21:06.680
Because wrong property. See?

00:21:06.880 --> 00:21:08.917
So this is how I feel that dev tools

00:21:09.000 --> 00:21:09.757
can be very useful,

00:21:09.840 --> 00:21:11.159
not just to help us debug,

00:21:11.279 --> 00:21:14.679
but also like teach us how CSS works.

00:21:15.039 --> 00:21:16.596
So I think time quite good,

00:21:16.679 --> 00:21:18.037
so let's see this demo,

00:21:18.120 --> 00:21:20.560
let's how this demo works because

00:21:22.960 --> 00:21:24.720
I work for this company called Nexmo.

00:21:25.520 --> 00:21:27.280
Nexmo does communications API.

00:21:27.760 --> 00:21:32.280
So I kinda have to talk about this a little bit.

00:21:33.240 --> 00:21:34.237
This is recorded huh?

00:21:34.320 --> 00:21:34.797
Oh shit.

00:21:34.880 --> 00:21:35.677
Maybe I get fired.

00:21:35.760 --> 00:21:36.637
Then I looking for a job.

00:21:36.720 --> 00:21:37.317
Just kidding.

00:21:37.400 --> 00:21:39.637
Anyway, so if let's say you want to build a layout

00:21:39.720 --> 00:21:40.157
like this.

00:21:40.240 --> 00:21:42.997
I try to use like the properties that I talked about

00:21:43.080 --> 00:21:43.997
in the example.

00:21:44.080 --> 00:21:45.679
So if you want to build something like this.

00:21:46.799 --> 00:21:49.196
I don't know how many of you actually played this game

00:21:49.279 --> 00:21:49.677
before.

00:21:49.760 --> 00:21:52.517
If you have a Nintendo Switch or 3DS, you know.

00:21:52.600 --> 00:21:53.517
If you don't know, then nevermind.

00:21:53.600 --> 00:21:54.117
It's actually very fun.

00:21:54.200 --> 00:21:54.716
You can go and Google.

00:21:54.799 --> 00:21:55.759
It's called Okami.

00:21:57.200 --> 00:22:01.559
But a layout like this, for example, right?

00:22:02.159 --> 00:22:07.440
Where you want to do this left right left right thing.

00:22:07.960 --> 00:22:10.757
If I highlight the markup, right?

00:22:10.840 --> 00:22:13.637
In the past, how we do this is we have to either

00:22:13.720 --> 00:22:15.800
change the order of the markup,

00:22:16.200 --> 00:22:18.196
or then you do this like float left float right

00:22:18.279 --> 00:22:18.999
nonsense.

00:22:19.440 --> 00:22:22.237
But your markup, if you wanted the image and the text

00:22:22.320 --> 00:22:23.797
to flip alternately,

00:22:23.880 --> 00:22:25.239
you couldn't use the same markup.

00:22:25.559 --> 00:22:28.720
But with the property, for this one, I use flexbox.

00:22:28.840 --> 00:22:30.037
With flexbox, you can.

00:22:30.120 --> 00:22:31.680
You can keep the order of the markup.

00:22:31.960 --> 00:22:36.400
So if you look, it's header image text.

00:22:36.919 --> 00:22:41.000
Even for the next one, it's still header image text.

00:22:41.279 --> 00:22:44.316
So this is what the newer properties allow us to do.

00:22:44.399 --> 00:22:47.716
It actually can help us maintain a more semantic

00:22:47.799 --> 00:22:48.359
markup.

00:22:49.720 --> 00:22:50.880
That's one of the things.

00:22:51.320 --> 00:22:53.716
Let's say okay, let's hope this works, man.

00:22:53.799 --> 00:22:55.439
If not, this is like fail.

00:22:56.840 --> 00:23:01.759
So, "Help, I'm hungry."

00:23:02.279 --> 00:23:06.120
So this is our interface, right?

00:23:06.720 --> 00:23:09.600
Let's go and look at agent.

00:23:10.880 --> 00:23:11.200
Yeah.

00:23:11.880 --> 00:23:13.839
Usually, this is our chat interface.

00:23:14.279 --> 00:23:17.680
Your new messages always start at the bottom, right?

00:23:17.919 --> 00:23:22.877
So I think in the past, without flexbox lah, let's

00:23:22.960 --> 00:23:23.196
say.

00:23:23.279 --> 00:23:24.956
You probably needed to use JavaScript to do it,

00:23:25.039 --> 00:23:26.557
because you have to calculate the height of your

00:23:26.640 --> 00:23:27.200
window,

00:23:27.320 --> 00:23:31.076
and then you have to set your position accordingly.

00:23:31.159 --> 00:23:33.120
This one, this layout, right?

00:23:33.279 --> 00:23:34.240
Doesn't need any JavaScript.

00:23:34.520 --> 00:23:35.240
It's just flexbox.

00:23:35.600 --> 00:23:40.840
So if I respond like "Too bad, no more food."

00:23:41.520 --> 00:23:45.640
Like the new messages can be pushed to the bottom

00:23:46.000 --> 00:23:46.919
using flexbox.

00:23:47.240 --> 00:23:49.476
So that's something that we couldn't do before,

00:23:49.559 --> 00:23:50.440
but we can do now.

00:23:52.279 --> 00:23:56.040
I need to plug this so that I can keep my job.

00:23:56.240 --> 00:23:59.877
So yeah, anyway, if you are interested in doing this

00:23:59.960 --> 00:24:00.357
kind of thing,

00:24:00.440 --> 00:24:03.237
or you want to like send SMS, can use this coupon

00:24:03.320 --> 00:24:03.720
code,

00:24:03.880 --> 00:24:07.440
and for like $20 of credit, I think.

00:24:07.600 --> 00:24:09.117
Yeah, oh my god, I'm terrible at my job.

00:24:09.200 --> 00:24:10.279
Anyway, moving on.

00:24:11.440 --> 00:24:14.076
So let's look at the other interface, right?

00:24:14.159 --> 00:24:17.800
So this is like a live chat, then it come out.

00:24:18.039 --> 00:24:19.557
But let's say you are on the agent side.

00:24:19.640 --> 00:24:21.960
You are building admin dashboard, right?

00:24:22.480 --> 00:24:23.716
When there's not enough content,

00:24:23.799 --> 00:24:25.279
but you still want like my input,

00:24:25.880 --> 00:24:27.920
I want it to be all the way at the bottom.

00:24:28.440 --> 00:24:30.117
Last time, how I would do it is I have to go and

00:24:30.200 --> 00:24:30.437
calculate,

00:24:30.520 --> 00:24:33.357
I have to fix the height of the header,

00:24:33.440 --> 00:24:35.716
and then fix the height of the input, and then use

00:24:35.880 --> 00:24:39.079
I calculate 100%, then minus the height, minus this.

00:24:39.240 --> 00:24:41.517
Now, you don't have to do this because that's actually

00:24:41.600 --> 00:24:42.316
very fragile.

00:24:42.399 --> 00:24:44.840
Like if suddenly one day I decide to change

00:24:45.600 --> 00:24:48.117
or like I have extra words,

00:24:48.200 --> 00:24:50.037
and my header become wider, right?

00:24:50.120 --> 00:24:51.240
Then cannot already.

00:24:51.640 --> 00:24:53.400
It won't stick to the bottom nicely.

00:24:53.520 --> 00:24:55.237
But again, using flexbox, right?

00:24:55.320 --> 00:24:56.716
I can do something like this quite easily,

00:24:56.799 --> 00:25:00.599
because what I do is I just make the chat area grow.

00:25:01.520 --> 00:25:05.880
And these are things that we couldn't do before,

00:25:06.039 --> 00:25:07.520
but we can do now.

00:25:07.840 --> 00:25:09.196
And like personally, right?

00:25:09.279 --> 00:25:12.200
I feel that there's a lot more that DevTools can do

00:25:12.320 --> 00:25:13.800
to help us understand CSS.

00:25:14.000 --> 00:25:16.037
There's newer CSS properties,

00:25:16.120 --> 00:25:17.716
like logical properties,

00:25:17.799 --> 00:25:18.997
or if you're doing something like this,

00:25:19.080 --> 00:25:21.316
like I like to do this mixed writing mode thing,

00:25:21.399 --> 00:25:22.677
it's very hard to visualize.

00:25:22.760 --> 00:25:25.200
DevTools can help us like figure it out.

00:25:25.640 --> 00:25:28.237
So my wish is actually for more people to just try out

00:25:28.320 --> 00:25:29.316
these new properties.

00:25:29.399 --> 00:25:30.880
Like you don't have to use all of them,

00:25:31.240 --> 00:25:34.316
but just know that there are a lot more possibilities

00:25:34.399 --> 00:25:35.517
in your toolbox now.

00:25:35.600 --> 00:25:37.836
And I really hope that DevTools can help you figure

00:25:37.919 --> 00:25:38.437
out things,

00:25:38.520 --> 00:25:40.320
just like it helped me figure out things.

00:25:40.600 --> 00:25:44.440
Thank you.

00:25:45.200 --> 00:25:46.199
Thank you very much, Miss Chen.