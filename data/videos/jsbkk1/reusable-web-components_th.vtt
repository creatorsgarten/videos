WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:00.040 --> 00:00:02.680
เรามาเริ่มกันเลยแล้วกันค่ะ section แรกของเรานะคะ

00:00:02.960 --> 00:00:05.236
ถ้าเกิดว่าระบบของเราใหญ่ขึ้นเนี่ย

00:00:05.319 --> 00:00:06.877
เชื่อว่าหลายท่านอาจจะสงสัย

00:00:06.960 --> 00:00:09.719
เอ๊ะ เราจะต้องเจอกับปัญหาอะไรบ้าง แก้ไขยังไง

00:00:10.000 --> 00:00:12.400
เพราะฉะนั้นเราจะมาพูดคุยกันในหัวข้อนี้นะคะ

00:00:12.559 --> 00:00:17.120
A Journey of Building Large Scale Reusable Web Components ค่ะ

00:00:17.359 --> 00:00:20.359
โดยคุณวรายุทธ เลิศกลยานวัฒน์นะคะ

00:00:20.640 --> 00:00:23.557
เป็น software development engineer จาก Amazon

00:00:23.640 --> 00:00:24.880
ที่เยอรมนีนะคะ

00:00:25.359 --> 00:00:28.837
So first section is going to be the topic of

00:00:28.920 --> 00:00:32.596
A Journey of Building Large Scale Reusable Web

00:00:32.679 --> 00:00:36.517
Components by Mr. Varayut Lerdkanlayanawat,

00:00:36.600 --> 00:00:39.357
software development engineer from Amazon Germany.

00:00:39.440 --> 00:00:52.639
Please a big round of applause to welcome him.

00:00:53.239 --> 00:00:54.640
สวัสดีครับทุกคนนะครับ

00:00:55.120 --> 00:00:58.077
ก็วันนี้ก็ตื่นเต้นมาก ได้รับเกียรติมาในงานนี้นะครับ

00:00:58.160 --> 00:01:00.757
ก่อนอื่นเลยผมอยากขอบคุณทางด้าน organizers

00:01:00.840 --> 00:01:02.920
ที่จัดงานดีๆอย่างนี้ให้กับพวกเรานะครับ

00:01:03.160 --> 00:01:06.277
โดยวันนี้ครับผมอยากจะมาแชร์ประสบการณ์เกี่ยวกับ

00:01:06.360 --> 00:01:10.600
การสร้าง components ขนาดใหญ่ให้กับทีมจำนวนหลายๆ

00:01:10.720 --> 00:01:12.557
ทีมนะครับ ที่ Amazon ได้ใช้นะครับ

00:01:12.640 --> 00:01:14.757
ว่าจะมีขั้นตอนการทำอย่างไรบ้างนะครับ

00:01:14.840 --> 00:01:18.997
แล้วก็มี process หรือว่าวิธีการใดที่เราต้องคำนึงถึง

00:01:19.080 --> 00:01:19.237
นะครับ

00:01:19.320 --> 00:01:26.000
เดี๋ยวเรามาเริ่มกันเลยครับ

00:01:26.680 --> 00:01:29.840
ครับ ผมชื่อวรายุทธ เลิศกลยานวัฒน์นะครับ

00:01:30.119 --> 00:01:34.356
ก็ตอนนี้ก็เคยทำงานที่บริษัท Amazon เป็น software

00:01:34.439 --> 00:01:35.996
development engineer นะครับ

00:01:36.079 --> 00:01:37.437
ตอนนี้ก็กลับมาไทยแล้วครับ

00:01:37.520 --> 00:01:41.597
แล้วก็เป็น consult เป็น trainer ด้าน web development

00:01:41.680 --> 00:01:41.996
ครับ

00:01:42.079 --> 00:01:46.036
ก่อนอื่นเลยผมอยากให้ทุกคนมาดูตัวระบบ AWS นะครับ

00:01:46.119 --> 00:01:49.557
หรือว่า Amazon Web Services ซึ่งเป็นระบบ cloud

00:01:49.640 --> 00:01:51.837
ที่ใหญ่มากๆของ Amazon นะครับ

00:01:51.920 --> 00:01:53.719
หรือว่าใหญ่ที่สุดในโลกเลยก็ว่าได้

00:01:53.960 --> 00:01:57.636
โดย Amazon เนี่ยก็มีระบบ cloud เยอะแยะมากมายครับ

00:01:57.719 --> 00:02:00.840
ที่ provide ให้กับผู้ใช้งานได้ใช้นะครับ

00:02:01.240 --> 00:02:05.197
แต่ว่าระบบที่ดังๆที่เราอาจจะรู้จักกันก็จะมีอย่างเช่น

00:02:05.280 --> 00:02:06.716
ระบบ Lambda ใช่มั้ยครับ

00:02:06.799 --> 00:02:09.516
ที่ทำให้เราสามารถที่จะ upload โค้ดแล้วก็ run

00:02:09.599 --> 00:02:10.520
โค้ดของเราได้

00:02:10.759 --> 00:02:13.800
โดยที่ไม่ต้องใช้ตัว server เลยนะครับ

00:02:14.080 --> 00:02:18.197
อีกระบบนึงก็คือระบบ S3 เป็นระบบคล้ายๆกับ Dropbox

00:02:18.280 --> 00:02:19.597
หรือว่า Google Drive นะครับ

00:02:19.680 --> 00:02:21.720
ทำให้เราสามารถ upload ไฟล์ขึ้นไปได้

00:02:22.360 --> 00:02:25.557
ถึงแม้ว่า Amazon จะมีระบบ cloud ต่างๆมากมายครับ

00:02:25.640 --> 00:02:32.436
แต่ว่าทุกๆปีนั้น Amazon ก็มีการซื้อระบบต่างๆเข้ามา

00:02:32.519 --> 00:02:32.919
นะครับ

00:02:34.080 --> 00:02:37.477
โดยในปี 2019 เนี่ยครับ ก็มีระบบต่างๆที่ Amazon

00:02:37.560 --> 00:02:39.837
ซื้อเข้ามาประมาณ 10 บริษัทใหญ่นะครับ

00:02:39.920 --> 00:02:41.760
ยังไม่รวมบริษัทย่อยๆอื่นๆ

00:02:41.959 --> 00:02:45.957
โดย Amazon หวังว่าการที่ซื้อบริษัทต่างๆเข้ามานะครับ

00:02:46.040 --> 00:02:49.876
ก็เพื่อที่จะให้พัฒนาความพึงพอใจนะครับ

00:02:49.959 --> 00:02:52.000
ให้ลูกค้าเนี่ยมีความพึงพอใจสูงขึ้น

00:02:52.280 --> 00:02:53.876
แต่ว่า feedback ที่ได้รับครับ

00:02:53.959 --> 00:02:56.400
กลับเป็นไปในทางตรงกันข้ามนะครับ

00:02:56.720 --> 00:02:59.037
โดยอันนี้เป็น webboard webboard นึงที่ดังมาก

00:02:59.120 --> 00:02:59.920
ในต่างประเทศ

00:03:00.080 --> 00:03:05.000
กลับมีคนบ่นว่าทำไมระบบ AWS มันถึงไม่ค่อยดีเลยนะครับ

00:03:05.280 --> 00:03:08.997
โดยหนึ่งใน comment อันนั้นที่มีคน comment ไว้นะครับ

00:03:09.080 --> 00:03:11.876
ก็บอกว่า เนื่องจาก Amazon นะครับ

00:03:11.959 --> 00:03:14.716
ใช้ระบบทีมแบบ two-pizza team นะครับ

00:03:14.799 --> 00:03:19.357
ก็คือถ้าทีมไหนที่ใหญ่เกินกว่าที่จะกินพิซซ่า 2 ถาดอิ่ม

00:03:19.440 --> 00:03:19.837
แล้วนะครับ

00:03:19.920 --> 00:03:22.199
เขาก็จะแตกเป็นทีมย่อยๆนะครับ

00:03:22.400 --> 00:03:27.119
ผลสุดท้ายก็คือ เรามีทีมย่อยๆเยอะแยะมากมายเลย

00:03:27.319 --> 00:03:31.156
แล้วแต่ละทีมนั้นก็ทำตัว product ของตัวเองนะครับ

00:03:31.239 --> 00:03:33.796
แล้วก็ดีไซน์ UI ของตัวเอง

00:03:33.879 --> 00:03:38.037
สุดท้ายแล้วแต่ละ service เนี่ยก็มี UI

00:03:38.120 --> 00:03:39.479
ที่แตกต่างกันมากนะครับ

00:03:40.080 --> 00:03:42.796
เดี๋ยวเรามาลองดูนะครับว่าจริงมั้ยนะครับ

00:03:42.879 --> 00:03:46.037
ตัวที่ customer complain เข้ามานะครับ

00:03:46.120 --> 00:03:49.400
โดยเราจะมาดู Lambda กับ S3 ที่เราพูดถึงกัน

00:03:50.439 --> 00:03:56.516
ซึ่งตัว Lambda นะครับ ก็คือถ้าสมมุติเราลองดูที่ตัว

00:03:56.599 --> 00:04:00.037
หน้าจอจะเห็นว่าตัว Lambda เนี่ยจะออกเป็นธีมสีส้ม

00:04:00.120 --> 00:04:00.839
ใช่มั้ยครับ

00:04:00.959 --> 00:04:04.559
ส่วนตัว S3 จะออกเป็นธีมสีน้ำเงินนะครับ

00:04:04.680 --> 00:04:08.520
ถ้าสมมุติผมลองเอา 2 ระบบนี้นะครับมาเปรียบเทียบกัน

00:04:09.159 --> 00:04:09.800
จะเห็นว่า

00:04:10.879 --> 00:04:14.837
ขอโทษนะครับ ก็จะเห็นว่าตัว 2 ระบบเนี้ย

00:04:14.920 --> 00:04:17.276
มันค่อนข้างแตกต่างกันมากนะครับ

00:04:17.359 --> 00:04:21.559
โดยถ้าสมมุติเราสังเกตตรงเมนู ตรง button ด้านบนนะครับ

00:04:21.919 --> 00:04:25.077
ตัว Lambda เนี่ยก็จะมีปุ่ม create

00:04:25.160 --> 00:04:27.116
ซึ่งวางไว้ด้านขวาบนใช่มั้ยครับ

00:04:27.199 --> 00:04:30.760
ส่วน S3 จะวางปุ่ม create ด้านซ้ายแล้วก็เป็นสีน้ำเงิน

00:04:30.880 --> 00:04:32.760
แถมยังมี icon ด้วยนะครับ

00:04:33.000 --> 00:04:37.120
นอกจากนั้นนะครับก็ยังมีตัว breadcrumb ด้านบน

00:04:37.960 --> 00:04:41.997
ซึ่ง breadcrumb ด้านบนนั้นจะของ Lambda เนี่ย

00:04:42.080 --> 00:04:44.080
ก็คือเป็นลิงก์ใช่มั้ยครับ สามารถคลิกได้

00:04:44.320 --> 00:04:48.797
ส่วนของ S3 เนี่ยก็จะเป็น text ธรรมดา คลิกไม่ได้นะครับ

00:04:48.880 --> 00:04:52.077
แล้วนอกจากนั้นสุดท้ายแล้วก็คือด้านข้างจะเป็น

00:04:52.160 --> 00:04:53.757
navigation ใช่มั้ยครับ

00:04:53.840 --> 00:04:56.797
โดยถึงแม้ว่าทั้ง 2 ระบบเนี้ยมันคล้ายกันมากนะครับ

00:04:56.880 --> 00:05:00.880
แต่ว่าก็ยังมีการทำงานที่แตกต่างกันอยู่ดีนะครับ

00:05:01.199 --> 00:05:04.437
ซึ่งสิ่งเหล่านี้เองครับก็ทำให้ user complain

00:05:04.520 --> 00:05:05.116
เข้ามานะครับ

00:05:05.199 --> 00:05:08.757
ทีนี้ผมลองพูดถึงเรื่องสีไปในระดับนึงใช่มั้ยครับ

00:05:08.840 --> 00:05:11.520
เดี๋ยวผมจะลองมาเจาะลึกเรื่องสีเพิ่ม

00:05:11.759 --> 00:05:15.237
โดยถ้าสมมุติผมคลิกตัว create bucket นะครับ

00:05:15.320 --> 00:05:17.320
มันก็จะขึ้นตัว pop-up ขึ้นมา

00:05:17.479 --> 00:05:20.956
แล้วตัว pop-up นี้นะครับด้านขวาเนี่ยมันก็จะมี field

00:05:21.039 --> 00:05:23.359
ให้กรอกซัก 3 field ใช่มั้ยครับ

00:05:23.720 --> 00:05:26.880
แต่ว่าตรง field bucket name จะมี icon เล็กๆอันนึง

00:05:27.240 --> 00:05:30.396
ซึ่งมันเล็กมากครับก็มองไม่ออกว่ามันคืออะไรกันแน่

00:05:30.479 --> 00:05:34.236
ถ้าสมมุติผมซูมเข้าไปนะครับก็จะเห็นว่ามันเป็นเหมือน

00:05:34.319 --> 00:05:36.639
icon เหมือน information นะครับ

00:05:37.240 --> 00:05:39.956
โดยที่ contrast มันต่ำมากๆ

00:05:40.039 --> 00:05:42.400
มันเลยทำให้ตัวเนี้ยดูยากมากนะครับ

00:05:42.600 --> 00:05:45.437
ถ้าสมมุติผมลองไปดูตัว Web Content Accessibility

00:05:45.520 --> 00:05:49.396
Guidelines ที่เป็นตัวที่ระบุว่า contrast ratio

00:05:49.479 --> 00:05:51.359
ควรจะอยู่ที่เท่าไหร่นะครับ

00:05:51.520 --> 00:05:54.116
โดยตัว contrast ratio เนี่ยมีอยู่ 2 level

00:05:54.199 --> 00:05:56.520
ก็คือ double A แล้วก็ triple A

00:05:56.960 --> 00:05:59.197
โดย double A เป็น minimum contrast

00:05:59.280 --> 00:06:02.440
ที่ต้องมีค่าอย่างต่ำคือ 4.5 แล้วก็

00:06:03.240 --> 00:06:06.400
Triple A เนี่ยก็ต้องมีค่าอย่างต่ำ 7 นะครับ

00:06:06.720 --> 00:06:11.277
โดยถ้าสมมุติผมลองเช็คตัวไอคอนตัวนี้ที่เราพูดถึงนะครับ

00:06:11.360 --> 00:06:14.078
โดยใช้ inspect element ใช้ Chrome DevTools

00:06:14.360 --> 00:06:16.680
แล้วก็เราก็คลิกตัว color ที่อยู่ด้านขวา

00:06:17.080 --> 00:06:19.597
มันจะขึ้นเป็น color picker ขึ้นมานะครับ

00:06:19.680 --> 00:06:21.920
แล้วใน color picker นี้มันก็จะบอกว่า

00:06:22.280 --> 00:06:26.239
ตัว contrast ของ element ตัวนี้นะครับมีค่าเท่าไหร่

00:06:26.520 --> 00:06:29.836
โดยค่าที่ปรากฏออกมาก็คือ 1.98 นะครับ

00:06:29.919 --> 00:06:30.998
ซึ่งต่ำมากๆ

00:06:31.520 --> 00:06:35.556
ดังนั้น คนที่เป็นคนที่มีปัญหาด้านสายตา

00:06:35.639 --> 00:06:37.077
หรือว่าคนตาบอดสีนะครับ

00:06:37.160 --> 00:06:40.280
อาจจะมองไม่เห็นปุ่มปุ่มนี้เลยก็ได้นะครับ

00:06:40.960 --> 00:06:42.997
นอกจากเรื่องสีที่เราพูดไปแล้วครับ

00:06:43.080 --> 00:06:46.680
ก็ยังมีอีกเรื่องนึงคือเรื่องการใช้งานคีย์บอร์ด

00:06:46.960 --> 00:06:47.997
user ส่วนใหญ่ครับ

00:06:48.080 --> 00:06:51.956
โดยเฉพาะคนที่เป็น developers หรือว่าคนที่ใช้งาน AWS นะครับ

00:06:52.039 --> 00:06:56.197
เค้าไม่อยากที่จะใช้งานเมาส์นะครับ

00:06:56.280 --> 00:06:59.320
เค้าบางคน prefer ที่จะใช้ตัวคีย์บอร์ดมากกว่า

00:06:59.879 --> 00:07:02.479
ถ้าสมมุติผมลองกด tab ครั้งแรกนะครับในหน้า S3

00:07:03.400 --> 00:07:05.920
มันก็จะโฟกัสตัว input fields

00:07:06.240 --> 00:07:08.277
อันนี้คือโฟกัสถูกต้องใช่มั้ยครับ

00:07:08.360 --> 00:07:10.480
ถ้าสมมุติผมกด tab อีกครั้งนึง

00:07:10.919 --> 00:07:14.559
ผมคาดหวังว่ามันควรจะไปโฟกัสที่ dropdown ด้านขวา

00:07:15.120 --> 00:07:16.637
แต่ว่าพอผมกด tab แล้วนะครับ

00:07:16.720 --> 00:07:19.360
มันกลับไปโฟกัสที่ตัว create bucket

00:07:19.720 --> 00:07:22.676
อันนี้หมายความว่าถ้าสมมุติคนที่ต้องการใช้งานคีย์บอร์ด

00:07:22.759 --> 00:07:25.760
เค้าจะไม่มีทางที่จะเลือกตัว dropdown ได้เลยนะครับ

00:07:26.400 --> 00:07:29.520
อันนี้เป็นปัญหามากๆ นะครับ สำหรับผู้ใช้งาน

00:07:30.479 --> 00:07:34.280
ดังนั้นเวลาเราดีไซน์ระบบนะครับ

00:07:35.520 --> 00:07:37.920
สีเนี่ยครับเป็นเรื่องที่สำคัญมากๆ

00:07:38.840 --> 00:07:41.116
แล้วก็นอกจากสีที่ดีนะครับ

00:07:41.199 --> 00:07:45.160
นอกจากจะทำให้คนทุกคนสามารถเข้าใช้งานแอปพลิเคชันเราได้แล้ว

00:07:45.520 --> 00:07:49.079
สีนั้นยังทำให้บริษัทสามารถสร้าง branding ของตัวเองได้ด้วย

00:07:49.599 --> 00:07:53.917
นอกจากนั้นเวลาเราสร้างตัวแอปพลิเคชัน feature อะไรก็แล้วแต่นะครับ

00:07:54.000 --> 00:07:56.639
เราต้องใช้งานตัวคีย์บอร์ด

00:07:57.159 --> 00:08:00.879
เราต้องลองเทสต์ดูว่าคีย์บอร์ดทำงานได้เหมือนเมาส์หรือเปล่า

00:08:01.479 --> 00:08:03.477
ซึ่งถ้าเราทำ 2 อันนี้ได้ดีนะครับ

00:08:03.560 --> 00:08:05.717
เราก็สร้าง customer satisfaction

00:08:05.800 --> 00:08:08.560
ทำให้ customer พึงพอใจมากยิ่งขึ้นนะครับ

00:08:09.240 --> 00:08:10.920
เมื่อกี้เราดูไปใช่มั้ยครับว่า

00:08:11.280 --> 00:08:14.717
เรา 2 ระบบเนี่ยมันมีปุ่มที่แตกต่างกัน

00:08:14.800 --> 00:08:16.960
มี side navigation ที่แตกต่างกัน

00:08:17.280 --> 00:08:20.197
นั่นหมายความว่า 2 ทีมเนี้ยครับ

00:08:20.280 --> 00:08:25.717
ก็ต้องทำการดีไซน์แล้วก็ทำการ develop ตัวปุ่ม 2 ปุ่มนี้แยกกันนะครับ

00:08:25.800 --> 00:08:28.399
ทำการ develop side navigation แยกกัน

00:08:29.479 --> 00:08:32.636
ถ้าสมมุติผมลองคำนวณ cost เล่นๆ นะครับ

00:08:32.719 --> 00:08:37.200
ของการ develop แล้วก็ดีไซน์ตัว feature เหล่านี้นะครับ

00:08:37.640 --> 00:08:40.717
ผมลองคิดว่าถ้าสมมุติการดีไซน์ feature เหล่านี้

00:08:40.800 --> 00:08:43.400
ใช้เวลาประมาณครึ่งเดือนซึ่งถือว่าเร็วมากๆ

00:08:43.640 --> 00:08:46.000
หรือประมาณ 90 ชั่วโมงนั่นเอง

00:08:46.160 --> 00:08:49.680
แล้วก็ cost ในการดีไซน์ต่อชั่วโมง

00:08:50.120 --> 00:08:54.040
ผมคิดว่าสมมุติให้เป็น 60 ดอลลาร์นะครับ

00:08:54.480 --> 00:08:58.316
แล้วแต่ละทีมเนี่ยก็ต้องดีไซน์ feature เหล่านี้ซ้ำๆ ใช่มั้ยครับ

00:08:58.399 --> 00:09:01.677
ถ้าสมมุติว่าทุกทีมมี 5 ทีมหรือ 5 product

00:09:01.760 --> 00:09:03.518
ที่ต้องดีไซน์ feature เหล่านี้ซ้ำๆ

00:09:03.839 --> 00:09:05.876
อันนี้ก็จะใช้ cost สูงมากนะครับ

00:09:05.959 --> 00:09:09.480
หรือประมาณ 27,000 ดอลลาร์หรือประมาณ 800,000 บาท

00:09:09.760 --> 00:09:12.159
ซึ่งถือว่าสูงมากเลยใช่มั้ยครับ

00:09:12.519 --> 00:09:15.800
ดังนั้นครับ การดีไซน์ feature อะไรก็แล้วแต่ซ้ำๆ

00:09:16.399 --> 00:09:20.357
นอกจากจะสิ้นเปลืองพลังงาน สิ้นเปลือง resource ของบริษัทแล้วนะครับ

00:09:20.440 --> 00:09:23.280
ก็ยังทำให้ UI นั้นมีความแตกต่างกัน

00:09:23.399 --> 00:09:25.560
แล้ว user ก็จะใช้งานยากอีกด้วยครับ

00:09:25.760 --> 00:09:28.880
ดังนั้นครับ เราควรที่จะมาสร้าง components

00:09:30.760 --> 00:09:34.960
ให้กับบริษัทของเราให้ทุกทีมสามารถ share components ร่วมกันได้

00:09:35.720 --> 00:09:38.357
ตอนนี้คำถามแรกครับ สำหรับทุกคนอาจจะถามว่า

00:09:38.440 --> 00:09:40.839
ถ้าสมมุติเราต้องการเริ่มสร้าง components

00:09:40.959 --> 00:09:44.680
เราต้องใช้ frameworks หรือว่า libraries อะไรนะครับ

00:09:45.360 --> 00:09:47.357
โดย framework ตัวแรกที่ผมนึกถึง

00:09:47.440 --> 00:09:50.397
สิ่งที่ผมทำก็คือผมเข้าไปใน npm trends ครับ

00:09:50.480 --> 00:09:55.920
แล้วก็ดูว่า framework ที่ดังๆ อย่างเช่น React, Angular, Vue

00:09:56.440 --> 00:10:00.436
ตัวไหนที่มีคน install เยอะที่สุดในรอบ 2 ปีที่ผ่านมานะครับ

00:10:00.519 --> 00:10:04.241
ก็จะเห็นว่ากราฟสีน้ำเงินเป็นตัว React นั่นเอง

00:10:04.440 --> 00:10:06.717
ดังนั้น React จึงเป็น framework ตัวแรกครับ

00:10:06.800 --> 00:10:09.880
ที่ผมนำมาใช้ในการสร้างนะครับ

00:10:10.560 --> 00:10:14.520
แต่ว่าต่อมาครับ พอผมสร้าง components แต่ละทีมได้ใช้งานแล้ว

00:10:14.800 --> 00:10:18.759
ต่อมาผมก็พบว่ามีทีมบางทีมครับในบริษัท

00:10:19.120 --> 00:10:21.517
ที่พอ Vue มันเริ่ม popular มากขึ้น

00:10:21.600 --> 00:10:24.560
เค้าก็ให้มาใช้ Vue แทนที่จะใช้งาน React

00:10:24.839 --> 00:10:28.720
แปลว่าตอนนี้ครับผมต้องสร้าง components อีกชุดนึง

00:10:28.839 --> 00:10:31.120
เพื่อมา support ตัว Vue นะครับ

00:10:31.360 --> 00:10:34.196
กลายเป็นว่าตอนนี้ผมต้องมี components 2 ชุด

00:10:34.279 --> 00:10:37.717
ที่ support ตัวนึง support React อีกตัวนึง support Vue

00:10:37.800 --> 00:10:39.879
เพราะว่ามันไม่สามารถ reuse ร่วมกันได้

00:10:40.480 --> 00:10:43.280
จึงเกิดเป็นคำถามครับว่าจะมีวิธีไหนมั้ย

00:10:43.720 --> 00:10:47.637
ที่เราสามารถที่จะ reuse ตัว components เหล่านี้ได้นะครับ

00:10:47.720 --> 00:10:52.320
โดยที่เราเขียนครั้งเดียวเราสามารถใช้งานได้ในทุก framework

00:10:52.440 --> 00:10:54.477
ก็จากการทำ research ครับ

00:10:54.560 --> 00:10:57.556
ก็ไปพบตัวนึงชื่อว่า web components

00:10:57.639 --> 00:11:01.560
โดย web components เนี่ยทำให้เราสามารถที่จะเขียนโค้ดครั้งเดียว

00:11:01.720 --> 00:11:03.480
จากนั้นนะครับเราสามารถที่จะใส่ได้

00:11:03.680 --> 00:11:06.316
เอาไปใส่ใน framework ต่างๆ นะครับ

00:11:06.399 --> 00:11:09.399
แล้วมันก็สามารถทำงานได้โดยที่เราไม่ต้องเขียนใหม่

00:11:10.079 --> 00:11:14.320
ผมก็ทำการเทสต์ครับ กับ browser หลักๆ

00:11:14.600 --> 00:11:17.079
อย่างเช่น Chrome, Firefox, Safari

00:11:17.480 --> 00:11:20.037
ตัว web components นี้ก็ทำงานได้ดีนะครับ

00:11:20.120 --> 00:11:25.720
แต่ว่า มีอยู่ browser นึงครับที่มักจะมีปัญหามากกว่าเพื่อน

00:11:26.240 --> 00:11:31.080
โดยผมจะไม่กล่าว ไม่บอกดีกว่านะครับว่าคือ browser อะไร

00:11:31.760 --> 00:11:39.080
ตอนนี้นะครับความรู้สึกผมก็คล้ายๆ กับรูปภาพรูปภาพนึงครับ

00:11:40.040 --> 00:11:42.280
เราต้องการใช้ web components มากเลย

00:11:43.040 --> 00:11:45.799
แต่ว่าเรายังมี IE นะ

00:11:46.639 --> 00:11:48.237
ผมก็เลยไปหาวิธีแก้ครับ

00:11:48.320 --> 00:11:50.400
ลองทำ research ต่อว่าจะมีวิธีไหนมั้ย

00:11:51.000 --> 00:11:54.237
ที่เราสามารถที่จะทำให้ตัว web components เนี่ย

00:11:54.320 --> 00:11:55.759
สามารถ run บน IE ได้

00:11:56.040 --> 00:11:58.277
ผลปรากฏว่าสิ่งที่ผมเจอครับ

00:11:58.360 --> 00:12:02.360
ก็คือเป็น polyfill ตัวนึงชื่อว่า web-component-polyfill

00:12:02.839 --> 00:12:06.316
ที่เราสามารถเอาไป drop ในตัว source code ของเรา

00:12:06.399 --> 00:12:10.560
จากนั้นมันจะทำให้ code ของเราเนี่ย run บน IE ได้ครับ

00:12:11.200 --> 00:12:15.279
แต่ว่าตัว polyfill ตัวนี้ก็ยังมีปัญหาต่างๆ

00:12:15.959 --> 00:12:18.157
ตัวอย่างเช่น ปัญหาที่สำคัญมากๆ เลยครับ

00:12:18.240 --> 00:12:22.000
ก็คือ CSS encapsulation นะครับ

00:12:22.399 --> 00:12:25.797
เป็นการที่ปกติแล้วตัว web components เนี่ย

00:12:25.880 --> 00:12:28.597
มันจะ encapsulate ตัว CSS ไว้นะครับ

00:12:28.680 --> 00:12:32.320
ทำให้ตัว CSS ภายนอกเนี่ยไม่สามารถมีผลกระทบต่อ CSS

00:12:32.440 --> 00:12:33.600
ของ component ของเรา

00:12:34.079 --> 00:12:36.037
แต่ว่าตัว polyfill เนี่ยทำไม่ได้

00:12:36.120 --> 00:12:38.556
นั่นหมายความว่าถ้าเราสร้าง components

00:12:38.639 --> 00:12:41.319
แล้วมีทีมอื่นๆ ที่นำไปใช้งาน

00:12:41.600 --> 00:12:44.320
ตัว CSS ของเค้าอาจจะ conflict กับตัว CSS

00:12:44.519 --> 00:12:46.560
ของ web components ของเรานะครับ

00:12:47.160 --> 00:12:49.599
สุดท้ายแล้วผมต้องทำการ support IE ด้วย

00:12:50.000 --> 00:12:51.279
ตัวเลือกสุดท้ายครับ

00:12:51.560 --> 00:12:56.237
อาจจะต้องใช้ pure JavaScript หรือว่า vanilla JavaScript

00:12:56.320 --> 00:12:59.040
ซึ่งเราต้องเขียนเป็น component definitions ขึ้นมา

00:12:59.560 --> 00:13:02.357
จากนั้นครับเราก็สร้าง wrapper ของแต่ละ framework

00:13:02.440 --> 00:13:05.756
มา wrap ตัว component definition ตัวนี้นะครับ

00:13:05.839 --> 00:13:09.680
แล้วทำให้มันใช้งานได้กับ framework เหล่านั้นครับ

00:13:10.360 --> 00:13:13.717
โดยวิธีนี้แน่นอนว่าเราเป็นคนควบคุมทุกอย่างครับ

00:13:13.800 --> 00:13:14.880
มัน flexible มากๆ

00:13:15.639 --> 00:13:18.477
ดังนั้นเราจะสามารถทำให้มัน support

00:13:18.560 --> 00:13:19.960
ในทุก browser ได้

00:13:20.720 --> 00:13:23.277
ดังนั้นครับข้อสรุปของการเลือก framework

00:13:23.360 --> 00:13:26.037
ถ้าทีมเรามีขนาดไม่ใหญ่มากนะครับ

00:13:26.120 --> 00:13:28.800
เราก็สามารถที่จะเลือก framework

00:13:29.399 --> 00:13:31.120
ที่ทีมทุกทีมในบริษัทเนี่ยใช้งาน

00:13:31.639 --> 00:13:33.999
แต่ว่าถ้าสมมุติทีมเรามีขนาดใหญ่ขึ้นมา

00:13:34.560 --> 00:13:36.996
แล้วก็มีใช้งาน framework หลายตัวนะครับ

00:13:37.079 --> 00:13:38.876
เราอาจจะใช้เป็น web components

00:13:38.959 --> 00:13:41.039
แต่ก็ต้องดูด้วยว่าเราต้อง support IE มั้ย

00:13:41.959 --> 00:13:43.837
ถ้าทีมเรามีขนาดใหญ่มากครับ

00:13:43.920 --> 00:13:45.316
แล้วก็ทีมแตกต่างกันมาก

00:13:45.399 --> 00:13:47.756
เราอาจจะต้องสร้างเป็น component definitions

00:13:47.839 --> 00:13:49.717
โดยใช้ pure JavaScript

00:13:49.800 --> 00:13:53.120
จากนั้นเราก็สร้าง wrapper ในการ wrap นะครับ

00:13:53.800 --> 00:13:56.480
นอกจากตัว framework ที่เราได้มาแล้วนะครับ

00:13:56.680 --> 00:13:58.519
เราก็ต้อง คำถามต่อไปก็คือ

00:13:59.160 --> 00:14:01.876
แล้วเราจะ design ตัว API หรือตัว properties

00:14:01.959 --> 00:14:03.600
ของ component อย่างไร

00:14:04.680 --> 00:14:06.157
การ design API นะครับ

00:14:06.240 --> 00:14:07.960
วิธีแรกที่ผมคิดเลยก็คือ

00:14:08.560 --> 00:14:11.560
ผมต้อง support ทีมเป็นจำนวนมากใช่มั้ยครับ

00:14:12.040 --> 00:14:15.996
ดังนั้นจะทำยังไงก็ได้ให้ component ของเราเนี่ย

00:14:16.079 --> 00:14:19.157
สามารถที่จะใช้งานได้ในทุกกรณีนะครับ

00:14:19.240 --> 00:14:22.879
ผมจึงเลือกแบบ API ในรูปแบบของ flexible

00:14:23.079 --> 00:14:25.280
สมมุติว่าเรามีปุ่มขึ้นมาปุ่มนึง

00:14:26.040 --> 00:14:29.717
ในปุ่มนี้นะครับเราก็จะมี style เป็น property

00:14:29.800 --> 00:14:31.360
ของปุ่มของเรานะครับ

00:14:31.600 --> 00:14:33.240
โดยผมรับเป็น object

00:14:33.600 --> 00:14:37.357
จากนั้นก็ pass ตัว style property ตัวนี้ครับ

00:14:37.440 --> 00:14:40.719
เข้าไปในปุ่มนะครับ

00:14:41.399 --> 00:14:44.556
หลังจากนั้นครับ ตอนนี้คือเรา pass ทั้ง object เข้ามาเลย

00:14:44.639 --> 00:14:46.357
ไม่ว่า user จะใส่ CSS เป็นอะไร

00:14:46.440 --> 00:14:48.277
เราก็ pass เข้าไปใน button

00:14:48.360 --> 00:14:52.196
ผลปรากฏว่าพอทีมใช้งานครับ

00:14:52.279 --> 00:14:53.756
แรกๆ ก็ยังใช้ได้ดีอยู่

00:14:53.839 --> 00:14:56.480
เค้าก็ pass เป็น color เป็น background เข้ามา

00:14:56.880 --> 00:14:58.760
เค้าก็ได้ปุ่มออกไปนะครับ

00:14:59.320 --> 00:15:02.360
จากนั้นครับ ก็พอมีทีมใช้งานมากขึ้น

00:15:02.839 --> 00:15:05.957
ปรากฏว่าก็มีทีมที่มี creativity สูงขึ้นใช่มั้ยครับ

00:15:06.040 --> 00:15:08.023
เค้าก็ pass ตัว border-radius

00:15:08.107 --> 00:15:10.399
ทำให้ปุ่มนั้นมันโค้งมนมากขึ้นนะครับ

00:15:10.880 --> 00:15:13.436
พอมีทีมใช้งานขึ้นอีก เพิ่มขึ้นอีกนะครับ

00:15:13.519 --> 00:15:14.720
ก็ได้ปุ่มสีเหลือง

00:15:15.040 --> 00:15:17.639
สุดท้ายครับเราได้ปุ่มแบบนี้เลย

00:15:18.399 --> 00:15:20.597
ซึ่งเป็นผลเสียใช่มั้ยครับที่เราพูดไปตอนแรก

00:15:20.680 --> 00:15:23.397
ว่ามันทำให้ตัว UI เนี่ยมันแตกต่างกัน

00:15:23.480 --> 00:15:25.717
ในแต่ละ application ของบริษัทนะครับ

00:15:25.800 --> 00:15:28.559
แล้วก็ทำให้ผู้ใช้งานเนี่ยใช้งานยาก

00:15:29.480 --> 00:15:33.079
ดังนั้นครับผมจึงเปลี่ยนรูปแบบนะครับ

00:15:33.639 --> 00:15:35.756
จากการที่ทำเป็น flexible

00:15:35.839 --> 00:15:37.357
ผมทำเป็นรูปแบบ rigid

00:15:37.440 --> 00:15:39.440
คือทำให้มันเข้มงวดมากขึ้นนะครับ

00:15:40.120 --> 00:15:43.319
โดยรูปแบบ rigid จากตอนแรกที่รับเป็น style

00:15:43.519 --> 00:15:45.316
เป็น property object เข้ามานะครับ

00:15:45.399 --> 00:15:47.520
ตอนนี้ผมรับเป็น variant

00:15:47.639 --> 00:15:51.479
ซึ่งรับแค่ primary secondary success แล้วก็ danger

00:15:51.959 --> 00:15:55.357
โดยผู้ใช้งานเนี่ยไม่สามารถ pass ค่าอื่นๆ เข้ามาได้

00:15:55.440 --> 00:15:56.840
นอกจากค่าเหล่านี้

00:15:57.600 --> 00:16:00.760
แล้วผมก็ pass ค่านี้นะครับเป็น class name ให้กับ button

00:16:00.880 --> 00:16:04.159
แล้วก็ใช้ CSS ของเราในการใส่ style เข้าไป

00:16:05.519 --> 00:16:09.797
โดยวิธีนี้นะครับก็ทำให้การทำงานเนี่ย

00:16:09.880 --> 00:16:11.037
มันง่ายมากขึ้นนะครับ

00:16:11.120 --> 00:16:14.478
การที่เราสมมุติในอนาคตเราจะ add API ตัวไหนเพิ่มเข้าไป

00:16:15.000 --> 00:16:17.519
เราไม่จำเป็นต้องกลัว breaking change ใช่มั้ยครับ

00:16:17.680 --> 00:16:20.556
เพราะว่าถ้าสมมุติเราใช้รูปแบบ flexible

00:16:20.639 --> 00:16:22.721
ถ้าสมมุติเรา add API ตัวไหนเข้าไป

00:16:23.120 --> 00:16:24.439
เราจะกังวลมากเลยว่า

00:16:24.560 --> 00:16:27.679
ถ้าสมมุติผู้ใช้งานเนี่ยใส่ style เข้ามา

00:16:27.880 --> 00:16:30.316
API ใหม่ที่เรา add เข้าไปอาจจะไป conflict

00:16:30.399 --> 00:16:31.120
กับตัวนั้นได้

00:16:31.319 --> 00:16:33.320
แต่การที่เราทำ component ให้เล็กๆ

00:16:33.600 --> 00:16:34.717
เริ่มจากเล็กๆ ก่อน

00:16:34.800 --> 00:16:37.280
แล้วค่อยๆ เพิ่ม feature เพิ่ม API ขึ้นมา

00:16:37.519 --> 00:16:38.717
มันจะปลอดภัยมากกว่า

00:16:38.800 --> 00:16:41.277
แล้วก็เราจะสามารถ maintain ตัว component

00:16:41.360 --> 00:16:43.360
ของเราได้ง่ายกว่าครับ

00:16:44.040 --> 00:16:44.556
สุดท้ายแล้วครับ

00:16:44.639 --> 00:16:46.037
พอเราได้ component ของเรามาแล้ว

00:16:46.120 --> 00:16:49.239
ได้ เรา design API แล้วก็สร้าง component ออกมา

00:16:49.680 --> 00:16:53.560
สุดท้ายเราก็ต้องทำการ test ใช่มั้ยครับ

00:16:54.240 --> 00:16:56.759
โดย component ของเราเนี่ยเราต้องมั่นใจว่า

00:16:56.959 --> 00:16:59.556
ตัว component มี quality ที่สูงกว่า

00:16:59.639 --> 00:17:01.439
product quality ของบริษัท

00:17:01.959 --> 00:17:02.920
นั่นหมายความว่า

00:17:03.319 --> 00:17:05.880
ถ้าทีมในบริษัทนำ component ไปใช้

00:17:06.360 --> 00:17:08.557
เราจะมั่นใจว่า component ของเราเนี่ย

00:17:08.640 --> 00:17:12.239
ไม่ทำให้ product quality ของบริษัทนั้นต่ำลงนะครับ

00:17:12.919 --> 00:17:15.397
อันนี้เป็นสิ่งที่เรา make sure ได้ว่า

00:17:15.480 --> 00:17:18.756
คนที่นำไปใช้เนี่ยเค้าจะมั่นใจที่จะนำ system

00:17:18.839 --> 00:17:19.439
ของเราไปใช้

00:17:19.880 --> 00:17:21.756
ถ้าไม่อย่างงั้นตัวของเราเนี่ย

00:17:21.839 --> 00:17:23.440
ก็จะไม่มีใครนำไปใช้นะครับ

00:17:23.959 --> 00:17:26.960
ถ้าสมมุติผมลองดู feature ตัวนึง

00:17:27.720 --> 00:17:29.800
ซึ่งก็คือเป็น search bar

00:17:30.400 --> 00:17:32.359
ซึ่ง feature ตัวนี้ครับประกอบไปด้วย

00:17:32.840 --> 00:17:36.157
ตัว component 2 ตัวนะครับ

00:17:36.240 --> 00:17:39.120
ก็คือ input field กับ button

00:17:39.480 --> 00:17:43.397
ถ้าสมมุติผมดู CSS ของตัว button นะครับ

00:17:43.480 --> 00:17:46.197
ก็จะสังเกตว่าตัว button เนี่ย

00:17:46.280 --> 00:17:48.277
ก็จะมี color background-color

00:17:48.360 --> 00:17:51.320
แล้วเราก็ set border เป็น none นะครับในตอนนี้

00:17:51.600 --> 00:17:54.760
คราวนี้ผมก็ลอง test ตัว feature นี้ครับ

00:17:55.440 --> 00:17:58.117
โดยการใช้ test ที่เราคุ้นเคยกัน

00:17:58.200 --> 00:18:01.480
unit test integration test แล้วก็ test อื่นๆ

00:18:03.159 --> 00:18:06.277
ต่อมาครับ designer ก็นำตัวนี้ไป test

00:18:06.360 --> 00:18:10.840
ผลปรากฏว่าตัว accessibility test นั้นไม่ผ่าน

00:18:11.520 --> 00:18:16.239
เนื่องจากพอเค้ากดตัว tab 2 ครั้งครับ

00:18:16.440 --> 00:18:20.160
เค้าก็ไป focus ที่ตัว search field

00:18:20.320 --> 00:18:22.520
แต่ผลปรากฏว่าตัว search field เนี่ย

00:18:23.400 --> 00:18:27.037
มันไม่ขึ้นตัว outline หรือว่า border นะครับ

00:18:27.120 --> 00:18:29.557
ทำให้ user เนี่ยไม่สามารถรู้ได้ว่า

00:18:29.640 --> 00:18:31.280
ตอนนี้ focus อยู่ตรงไหนแล้ว

00:18:31.919 --> 00:18:33.037
ก็คืนนั้นเองครับ

00:18:33.120 --> 00:18:35.476
ก็ designer ก็บอก developer

00:18:35.559 --> 00:18:38.237
แล้ว developer ก็ทำการเปลี่ยนแปลง code นะครับ

00:18:38.320 --> 00:18:42.840
โดยเค้า add ตัว border เข้าไป 1 pixel

00:18:43.360 --> 00:18:44.677
เป็นสีฟ้าอ่อนครับ

00:18:44.760 --> 00:18:47.440
คราวนี้ designer ก็มาลอง test ใหม่

00:18:48.120 --> 00:18:49.757
ตอนที่ designer test ใหม่ครับ

00:18:49.840 --> 00:18:51.480
ก็กด tab 2 ทีแล้วก็ไป focus

00:18:51.960 --> 00:18:54.197
ตอนนี้นะครับมันก็จะขึ้นเป็นคล้ายๆ กับ

00:18:54.280 --> 00:18:56.757
ตัว outline border สีฟ้าอ่อนแล้วนะครับ

00:18:56.840 --> 00:18:58.720
จะสังเกตว่ามันเล็กน้อย

00:18:58.919 --> 00:19:01.040
มันบางมากเลยใช่มั้ยครับ มันมองไม่ค่อยเห็น

00:19:01.400 --> 00:19:04.920
คราวนี้ครับ developer ก็ทำการ deploy code

00:19:05.159 --> 00:19:09.560
แล้วก็เข้านอนครับ

00:19:10.240 --> 00:19:15.277
คราวนี้คืนนั้นเอง เขาก็โดนเรียกครับ โดนโทรเรียก

00:19:15.360 --> 00:19:17.157
เราก็ต้องตื่นขึ้นมาครับ

00:19:17.240 --> 00:19:21.120
เหตุผลก็คือ ตัว component ที่ deploy ไปมันใช้งานไม่ได้

00:19:21.360 --> 00:19:25.117
มันทำให้ฟอร์มของบริษัทเนี่ย ของ product บาง product

00:19:25.200 --> 00:19:26.680
มันขยายทั้งหมดนะครับ

00:19:27.360 --> 00:19:31.840
คราวนี้ developer ก็ต้องตื่นมาดูครับว่าเกิดอะไรขึ้น

00:19:34.000 --> 00:19:37.476
อันนี้คือฟอร์มก่อนที่เราจะ add ตัว border เข้าไปนะครับ

00:19:37.559 --> 00:19:40.799
สังเกตตรงปุ่มจะยังไม่มีตัว outline ตัว border ของเรา

00:19:41.520 --> 00:19:49.677
แล้วก็ตัวนี้นะครับก็คือเป็นตัวฟอร์มที่เรา add border

00:19:49.760 --> 00:19:50.277
เข้าไปแล้วนะครับ

00:19:50.360 --> 00:19:53.797
ก็จะมี outline อยู่นิดนึง ซึ่งมันเล็กน้อยมากๆ

00:19:53.880 --> 00:19:54.877
ถ้าเราดู 2 ตัวนี้นะครับ

00:19:54.960 --> 00:19:58.520
เราแทบจะมองไม่เห็นเลยใช่มั้ยครับว่ามันแตกต่างกันยังไงบ้าง

00:20:00.360 --> 00:20:02.716
โดยจริงๆแล้วเนี่ย สิ่งที่มันแตกต่างกัน

00:20:02.799 --> 00:20:05.879
ถ้าสมมุติผมดูสไลด์ก่อนกับอันนี้นะครับ

00:20:06.039 --> 00:20:09.037
จะเห็นว่ามันเหมือนขยายขึ้นมา 1 pixel ใช่มั้ยครับ

00:20:09.120 --> 00:20:11.042
เนื่องจาก border ที่เรา add เข้านั่นเอง

00:20:12.520 --> 00:20:15.836
ถึงแม้ว่าตัว component เหล่านี้จะมี test ต่างๆ

00:20:15.919 --> 00:20:18.600
ที่เราใช้งานตอนแรกๆแล้วนะครับที่เราใส่เข้าไป

00:20:18.919 --> 00:20:22.640
แต่ว่า test เหล่านี้เนี่ย ไม่สามารถที่จะจับ bug ตัวนี้ได้

00:20:23.240 --> 00:20:26.237
เนื่องจาก function search ก็ยังใช้งานได้อยู่นะครับ

00:20:26.320 --> 00:20:27.800
ทุกอย่างใช้งานได้ตามปกติ

00:20:28.799 --> 00:20:32.637
แต่ว่ามี test อยู่ตัวนึงครับที่จะเป็นประโยชน์มากๆ

00:20:32.720 --> 00:20:34.960
ในการสร้าง components แล้วมาจับ bug นี้

00:20:35.080 --> 00:20:36.920
เราเรียกว่า screenshot test

00:20:37.440 --> 00:20:41.920
หรือว่าหลายคนเรียกว่า visual regression test นะครับ

00:20:42.600 --> 00:20:45.400
โดย tool ที่ผมใช้ครับก็คือชื่อว่า Percy

00:20:45.840 --> 00:20:49.277
เป็น tool ที่เราสามารถที่จะ run ตัว command line

00:20:49.360 --> 00:20:52.677
จากนั้น tool ตัวนี้ครับก็จะ take screenshot

00:20:52.760 --> 00:20:53.877
ของหน้า UI ของเรา

00:20:53.960 --> 00:20:55.479
แล้วก็อัพโหลดขึ้นไปบนระบบ

00:20:55.720 --> 00:20:58.480
ตอนนี้จะเห็นว่าตัวลูกศรสีเขียวนะครับที่ชี้

00:20:58.720 --> 00:21:01.880
ก็คือเป็น UI ของเราก่อนที่จะทำการเปลี่ยนแปลงโค้ด

00:21:02.640 --> 00:21:04.437
หลังจากนั้นครับ พอได้ requirement มา

00:21:04.520 --> 00:21:06.520
developer ก็ add border เข้าไป

00:21:06.799 --> 00:21:10.920
แล้วก็ทำการเรียกใช้ command ของ Percy อีกครั้ง

00:21:11.120 --> 00:21:13.560
ในการอัพโหลด screenshot ขึ้นไปนะครับ

00:21:14.039 --> 00:21:16.596
ก็จะมีทั้ง 2 ด้านแล้วตอนนี้ก็คือ

00:21:16.679 --> 00:21:19.237
ก่อนเปลี่ยนแปลงและหลังเปลี่ยนแปลงนะครับ

00:21:19.320 --> 00:21:22.397
มองด้วยตาเราอาจจะมองไม่เห็นใช่มั้ยครับ

00:21:22.480 --> 00:21:24.160
ว่าอันไหนที่มันเปลี่ยนแปลงไป

00:21:24.799 --> 00:21:29.600
แต่ว่าวิธีทำเราสามารถที่จะคลิกที่ตัว UI อันใหม่ได้

00:21:30.360 --> 00:21:33.437
จากนั้นมันจะโชว์เป็นกรอบสีแดงๆนะครับ

00:21:33.520 --> 00:21:37.320
อันนี้ก็คือสิ่งที่เปลี่ยนแปลงไปจากเวอร์ชั่นก่อน

00:21:38.000 --> 00:21:41.037
อันนี้ทำให้เรามั่นใจได้ว่าเราสามารถมองเห็นได้ว่า

00:21:41.120 --> 00:21:44.037
สิ่งที่เราใส่โค้ดเข้าไปมันมีอะไรเปลี่ยนแปลงไปบ้างนะครับ

00:21:44.120 --> 00:21:49.983
อันนี้ก็คือ 1 pixel ที่เราใส่เข้าไปเป็น border นั่นเอง

00:21:50.067 --> 00:21:52.677
นอกจาก Percy จะสามารถ run ผ่าน command line แล้ว

00:21:52.760 --> 00:21:56.479
เรายังสามารถ integrate กับตัว version control ได้ด้วย

00:21:56.679 --> 00:21:59.479
อย่างเช่น Git นะครับ ผ่าน GitHub

00:21:59.760 --> 00:22:03.400
เราก็สามารถที่จะเช็กได้ว่าถ้ามี pull request ส่งมา

00:22:04.039 --> 00:22:05.800
เราสามารถที่จะ run ตัว Percy

00:22:05.960 --> 00:22:09.640
ในการตรวจสอบได้ว่ามีอะไรที่เปลี่ยนแปลงใน UI มั้ย

00:22:09.960 --> 00:22:12.279
แล้วเราสามารถเข้าไปตรวจเช็กได้ครับว่า

00:22:12.480 --> 00:22:17.600
สิ่งที่เปลี่ยนแปลงไปนั้นตรงกับที่เราต้องการหรือเปล่า

00:22:18.200 --> 00:22:22.279
ดังนั้นครับ การทำ components ให้กับทีม

00:22:23.039 --> 00:22:25.960
quality ของ components นั้นต้องสูงมากๆนะครับ

00:22:26.080 --> 00:22:27.997
โดยวิธีการทำให้สูงได้นั้น

00:22:28.080 --> 00:22:30.878
เราต้อง test ทุกอย่างให้ครอบคลุม

00:22:31.080 --> 00:22:36.080
และ test อันนึงที่ขาดไม่ได้เลยก็คือ screenshot test

00:22:36.600 --> 00:22:38.716
โดยการทำ component จริงๆแล้วนะครับ

00:22:38.799 --> 00:22:43.159
เราไม่จำเป็นต้องให้ทีมใดทีมหนึ่งมีหน้าที่ในการรับผิดชอบ

00:22:43.400 --> 00:22:47.076
ในการสร้าง components แต่เราควรจะสร้างครับ

00:22:47.159 --> 00:22:50.519
เป็น community ภายในบริษัทของเรา

00:22:50.640 --> 00:22:53.517
ที่หลายๆทีมมีส่วนร่วมในการ design

00:22:53.600 --> 00:22:55.956
แล้วก็สร้าง components

00:22:56.039 --> 00:22:58.359
พอเราสร้าง components ไปหลายๆตัวครับ

00:22:58.559 --> 00:23:00.637
สุดท้ายแล้วเราจะได้ component

00:23:00.720 --> 00:23:03.720
ที่เราสามารถ reuse ได้ภายในบริษัทของเรา

00:23:04.000 --> 00:23:07.997
ซึ่งจะประหยัดทั้งทรัพยากรด้านเวลา ด้านค่าใช้จ่ายนะครับ

00:23:08.080 --> 00:23:11.920
นอกจากนั้นเรายังมีเวลาในการ test ด้าน accessibility

00:23:15.960 --> 00:23:21.280
ซึ่งสิ่งเหล่านี้ครับ เราจะเรียกมันว่า design system

00:23:21.640 --> 00:23:23.280
ซึ่ง design system เนี่ย

00:23:23.480 --> 00:23:26.637
จะนอกจากเราจะดูเรื่อง components แล้ว

00:23:26.720 --> 00:23:28.596
ยังดูเรื่องสี การที่มีสีที่ดี

00:23:28.679 --> 00:23:31.440
เราสร้าง strong branding ให้กับบริษัทนะครับ

00:23:31.760 --> 00:23:34.317
ตอนนี้ครับทั่วโลกก็มีบริษัทมากมายนะครับ

00:23:34.400 --> 00:23:36.917
อันนี้เป็นแค่ตัวอย่างของบริษัทที่ใช้

00:23:37.000 --> 00:23:39.357
แล้วก็ develop ตัว design system ของตัวเอง

00:23:39.440 --> 00:23:41.797
จริงๆแล้วก็มีบริษัทเล็กๆอื่นๆอีกมากมาย

00:23:41.880 --> 00:23:44.119
ที่มี design system ของตัวเองนะครับ

00:23:44.799 --> 00:23:47.476
ถ้าสมมุติบริษัทคุณตอนนี้ยังไม่มีนะครับ

00:23:47.559 --> 00:23:49.757
ผมขอแนะนำว่าให้เริ่มทำเลย

00:23:49.840 --> 00:23:52.160
เพราะว่ามีประโยชน์มากๆนะครับ

00:23:54.039 --> 00:23:57.076
อันนี้ก็คือประสบการณ์ที่ผมลองสร้าง components

00:23:57.159 --> 00:24:00.760
สร้างตัว design system ให้กับทีมมากกว่า 100 ทีมได้ใช้งาน

00:24:01.279 --> 00:24:04.200
ก็หวังว่าจะเป็นประโยชน์สำหรับทุกๆคนนะครับ

00:24:04.880 --> 00:24:07.037
ถ้าใครมีคำถามหรือว่าต้องการพูดคุย

00:24:07.120 --> 00:24:08.797
ก็สามารถมาเจอผมได้นะครับ

00:24:08.880 --> 00:24:10.920
สามารถเข้ามาถามได้ครับ

00:24:11.320 --> 00:24:12.119
ขอบคุณครับ

00:24:12.279 --> 00:24:15.920
ขอบคุณค่ะ ขอบคุณนะคะคุณวรายุทธนะคะ

00:24:16.919 --> 00:24:20.839
แอ โอ้โห แค่หัวข้อแรกก็มีประโยชน์แล้วนะคะ

00:24:21.120 --> 00:24:23.357
ท่านไหนที่อยากคุยกับคุณวรายุทธเพิ่มเติม

00:24:23.440 --> 00:24:25.397
เรามีทุกๆช่วง section นะคะ

00:24:25.480 --> 00:24:27.117
หลังจากที่จบ section นั้นแล้วเนี่ย

00:24:27.200 --> 00:24:29.679
วิทยากรจะไปประจำอยู่ที่โซน Q&A

00:24:30.159 --> 00:24:32.517
โซน Q&A จะเป็นห้องที่เราสมมุติว่า

00:24:32.600 --> 00:24:33.959
เราออกไปจากห้องนี้ใช่มั้ยคะ

00:24:34.080 --> 00:24:36.517
หันขวามือจะมีห้องอยู่ทางโซนทางขวานะคะ

00:24:36.600 --> 00:24:37.760
ก็เรียกว่าเป็นห้อง Q&A

00:24:38.159 --> 00:24:39.596
ท่านไหนมีคำถามสงสัยอะไร

00:24:39.679 --> 00:24:42.037
หรืออยากร่วมพูดคุยกับวิทยากรท่านไหนเนี่ย

00:24:42.120 --> 00:24:44.476
หลังจบ section นั้นสามารถเดินออกไปถามได้

00:24:44.559 --> 00:24:47.959
แล้วกลับเข้ามานั่งฟังในหัวข้อถัดไปต่อได้นะคะ

00:24:49.279 --> 00:24:51.476
After every section ladies and gentlemen,

00:24:51.559 --> 00:24:53.917
our speaker of each sections,

00:24:54.000 --> 00:24:57.920
they are he or she will be going out to the Q&A room.

00:24:58.640 --> 00:25:01.677
In the case you would like to talk to them personally

00:25:01.760 --> 00:25:03.920
or do you have any questions for them,

00:25:04.159 --> 00:25:07.917
please proceed to outside of this theater and turn right,

00:25:08.000 --> 00:25:10.437
you will see the Q&A room on the right hand side

00:25:10.520 --> 00:25:11.800
of the entrance.

00:25:12.000 --> 00:25:15.677
And please feel free to talk to them personally.

00:25:15.760 --> 00:25:17.637
Once you finish and then come back to listen

00:25:17.720 --> 00:25:19.639
for the next sessions, okay?