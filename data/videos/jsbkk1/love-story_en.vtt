WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:00.440 --> 00:00:03.437
So for this last session, ladies and gentlemen,

00:00:03.520 --> 00:00:07.637
I would like to introduce to all of you our last speaker

00:00:07.720 --> 00:00:11.599
for today, which is Mr. Ramón Guijarro.

00:00:11.880 --> 00:00:16.480
He's the software engineer from Undefined Labs from Spain.

00:00:16.640 --> 00:00:20.070
He's going to talk about a love story written in JavaScript.

00:00:20.153 --> 00:00:20.839
ขอเสียงปรบมือต้อนรับคุณ

00:00:34.800 --> 00:00:35.840
Hi everybody.

00:00:36.040 --> 00:00:38.080
How's everyone doing?

00:00:38.800 --> 00:00:39.200
Okay.

00:00:39.800 --> 00:00:42.799
Still have some energy left in you for the last talk

00:00:42.960 --> 00:00:44.160
of the day.

00:00:44.920 --> 00:00:48.156
Okay, so I'm really happy to be here in Bangkok

00:00:48.239 --> 00:00:49.840
for the first time in my life.

00:00:50.760 --> 00:00:53.357
And it's especially exciting because I'm debuting

00:00:53.440 --> 00:00:54.400
a new talk.

00:00:55.399 --> 00:00:57.316
And I'm closing the event on top of that,

00:00:57.399 --> 00:00:59.119
so thanks a lot for having me.

00:01:00.519 --> 00:01:04.197
As you already know, my name is Ramón and for the next

00:01:04.280 --> 00:01:07.120
half an hour, I'm going to be talking to you about

00:01:07.320 --> 00:01:09.439
JavaScript, a love.

00:01:10.799 --> 00:01:14.437
What we're basically going to talk about is some problems

00:01:14.520 --> 00:01:16.519
that current dating apps have.

00:01:17.320 --> 00:01:20.076
And we're going to see what people do about that

00:01:20.159 --> 00:01:24.197
and how those behaviors can be automated.

00:01:24.280 --> 00:01:27.036
And I'm going to show you a tool that I built just

00:01:27.119 --> 00:01:29.400
for that with JavaScript.

00:01:30.119 --> 00:01:31.557
But before we get into the topic,

00:01:31.640 --> 00:01:34.440
let me tell you a little bit about me.

00:01:35.280 --> 00:01:39.400
So I'm a web developer from Madrid, Spain.

00:01:39.759 --> 00:01:42.440
That was a long trip, by the way.

00:01:42.640 --> 00:01:44.757
I work at a small startup called Undefined Labs

00:01:44.840 --> 00:01:48.800
in which we build developer tools to help teams

00:01:48.960 --> 00:01:50.639
ship better code faster.

00:01:51.560 --> 00:01:55.760
And I work primarily with JavaScript and React.

00:01:56.399 --> 00:01:58.117
And I really like them, but above all,

00:01:58.200 --> 00:02:01.439
what I like is the web platform in general.

00:02:01.719 --> 00:02:04.956
I love its promise of an open medium that is

00:02:05.039 --> 00:02:05.917
accessible to all.

00:02:06.000 --> 00:02:08.997
And I like the developing community around it as well.

00:02:09.080 --> 00:02:11.317
I think it's a really nice one and that's partly why

00:02:11.400 --> 00:02:15.080
I go to conferences and I give talks like this one.

00:02:15.879 --> 00:02:18.717
I also volunteer in a coding bootcamp for women

00:02:18.800 --> 00:02:19.519
in Madrid.

00:02:19.720 --> 00:02:23.516
So you probably can already tell that I care quite a bit

00:02:23.599 --> 00:02:27.037
about community, diversity, and inclusion in our industry.

00:02:27.120 --> 00:02:29.236
So let me take a moment to say that one of the things

00:02:29.319 --> 00:02:31.880
that I would really like to see as part of that

00:02:32.000 --> 00:02:34.357
is conferences stepping up their game when it comes

00:02:34.440 --> 00:02:35.519
to these issues.

00:02:35.760 --> 00:02:38.077
Things like having an enforceable code of conduct

00:02:38.160 --> 00:02:41.920
so that everybody can feel safe or making an active

00:02:42.040 --> 00:02:45.000
effort to feature more diverse speaker lineups.

00:02:45.239 --> 00:02:48.796
Some conferences are already doing this and that's great,

00:02:48.879 --> 00:02:50.917
but I would like it to become the norm rather than

00:02:51.000 --> 00:02:51.800
the exception.

00:02:52.080 --> 00:02:55.160
And you as attendees actually have the power to change it

00:02:55.400 --> 00:02:58.080
by demanding these things from the conferences you go to.

00:02:58.480 --> 00:03:01.440
So let's see if we can do better about that.

00:03:02.280 --> 00:03:04.557
If you want to reach out to me later,

00:03:04.640 --> 00:03:05.757
that's my Twitter account.

00:03:05.840 --> 00:03:09.040
My DMs are open, so feel free to drop me a line.

00:03:09.760 --> 00:03:15.159
And with all that being said, let's get started.

00:03:18.319 --> 00:03:19.840
Let's talk about dating apps.

00:03:20.440 --> 00:03:21.236
What about them?

00:03:21.319 --> 00:03:22.599
What are the problems?

00:03:22.879 --> 00:03:25.080
Well, there are a lot of them nowadays.

00:03:25.319 --> 00:03:29.240
Tinder, of course, is king, but there are many others:

00:03:29.480 --> 00:03:36.080
OkCupid, Grindr, Bumble, Happn, Hinge, Ship, Match.com.

00:03:36.280 --> 00:03:37.920
The list goes on and on.

00:03:39.080 --> 00:03:44.960
However, most of them works in similar ways to Tinder.

00:03:45.480 --> 00:03:47.759
And here's the facts about them.

00:03:48.439 --> 00:03:51.597
Most popular dating apps are driven by pictures.

00:03:51.680 --> 00:03:54.557
If you ever use any of them, you know this.

00:03:54.640 --> 00:03:59.280
And pictures always win over anything else in profiles.

00:03:59.799 --> 00:04:02.359
Co-founder of OkCupid says that photos drive 90%

00:04:02.879 --> 00:04:05.160
of the action in online dating.

00:04:05.680 --> 00:04:10.120
But even for apps that rely more on profiles,

00:04:10.360 --> 00:04:14.200
questions, interests than pictures,

00:04:14.560 --> 00:04:18.080
it turns out that we don't really know what we want.

00:04:19.359 --> 00:04:24.079
Match.com did some research on this and they found out

00:04:24.240 --> 00:04:28.157
that the people we send messages to don't actually match

00:04:28.240 --> 00:04:29.560
what we say we want.

00:04:30.880 --> 00:04:32.799
So that's interesting.

00:04:33.320 --> 00:04:35.517
And then we have some issues that are more specific

00:04:35.600 --> 00:04:40.520
to men, like the fact that women are much more selective.

00:04:41.000 --> 00:04:45.000
Tinder researched this and they found out that men

00:04:45.120 --> 00:04:48.920
are three times as likely to swipe right than women.

00:04:50.800 --> 00:04:54.197
So there's a 14% chance for a women to swipe right

00:04:54.280 --> 00:04:55.600
on some guy.

00:04:56.720 --> 00:04:58.039
And that's not so bad, right?

00:04:58.759 --> 00:04:59.600
14% is not that low.

00:05:00.600 --> 00:05:05.480
Well, while good-looking men can probably do fine

00:05:05.680 --> 00:05:10.836
with that, the truth is that that 14% goes down a lot

00:05:10.919 --> 00:05:12.396
for less attractive people.

00:05:12.479 --> 00:05:15.879
And this is regardless of age.

00:05:16.639 --> 00:05:21.039
So the truth is that an average man is liked by only 1%

00:05:21.840 --> 00:05:25.760
of women in these dating apps.

00:05:26.440 --> 00:05:29.200
So how does all this make people feel?

00:05:30.440 --> 00:05:34.560
Well, some people feel like the way apps work promotes

00:05:34.720 --> 00:05:38.320
superficiality because it's all based on pictures.

00:05:40.520 --> 00:05:43.917
They feel that the liking process is arbitrary since

00:05:44.000 --> 00:05:46.717
we don't really know what we want even when pictures

00:05:46.800 --> 00:05:47.920
are not involved.

00:05:49.639 --> 00:05:53.037
And then on top of all this, you are pushed to come back

00:05:53.120 --> 00:05:57.277
every day to the app because most of them have a daily

00:05:57.360 --> 00:06:00.920
limit in the number of likes that you can give.

00:06:01.199 --> 00:06:04.317
So you are forced to come back to the app every day

00:06:04.400 --> 00:06:11.599
to keep using it in the hope that there will be a match.

00:06:12.199 --> 00:06:16.200
So how can automation help with all this?

00:06:16.800 --> 00:06:19.357
Well, first we need to see what it is that we want

00:06:19.440 --> 00:06:20.639
to automate.

00:06:22.000 --> 00:06:25.836
Due to the facts we just saw, some men end up following

00:06:25.919 --> 00:06:29.160
what we could call the "like everybody" strategy.

00:06:30.120 --> 00:06:32.556
Since the whole process feels so superficial

00:06:32.639 --> 00:06:35.719
and so arbitrary, and the chances are so low,

00:06:36.319 --> 00:06:39.160
it all really feels like grunt work.

00:06:39.759 --> 00:06:44.157
So some people say might as well like everybody

00:06:44.240 --> 00:06:47.360
and hope for a match instead of spending time

00:06:47.479 --> 00:06:55.320
actually assessing every person for a very little return.

00:06:55.840 --> 00:07:00.396
So the problem with this approach is that it still takes time,

00:07:00.479 --> 00:07:03.956
not as much as if you are carefully looking into its profile,

00:07:04.039 --> 00:07:07.199
but it still requires you to go back to the app every day

00:07:08.240 --> 00:07:09.560
to swipe.

00:07:10.160 --> 00:07:13.559
And it also leads to wasting some of your chances

00:07:14.080 --> 00:07:17.119
since you're swiping basically without looking.

00:07:17.360 --> 00:07:20.236
Some of your likes will go to profiles without pictures

00:07:20.319 --> 00:07:22.037
or with empty descriptions

00:07:22.120 --> 00:07:26.280
or with things that you are not looking for in general.

00:07:26.720 --> 00:07:32.160
So how can we automate this strategy and make it better?

00:07:32.680 --> 00:07:35.879
Well, we want something that does the swiping for us

00:07:36.560 --> 00:07:39.639
based on some preferences.

00:07:40.680 --> 00:07:43.836
This way we have something that is automatic and unattended.

00:07:43.919 --> 00:07:46.116
We don't need to go back to the app every day,

00:07:46.199 --> 00:07:48.159
so that saves us time.

00:07:49.120 --> 00:07:54.396
And it's also more selective because due to those preferences,

00:07:54.479 --> 00:08:00.040
we can say some things about when we want to not match

00:08:00.240 --> 00:08:01.080
with someone.

00:08:03.360 --> 00:08:06.917
So, I joined Tinder like a year ago.

00:08:07.000 --> 00:08:10.360
All my friends were on it and they told me about this

00:08:10.599 --> 00:08:12.479
like everybody strategy.

00:08:12.960 --> 00:08:15.317
And I was thinking about it and at some point I thought,

00:08:15.400 --> 00:08:18.959
"Okay, let's build something, even if just for fun,

00:08:19.720 --> 00:08:21.360
that does this."

00:08:22.039 --> 00:08:24.720
So that's what I did and that's what we're going to see now.

00:08:25.520 --> 00:08:28.840
I built it for Tinder since it's the most popular dating app,

00:08:29.039 --> 00:08:31.917
but you could do similar things for other apps

00:08:32.000 --> 00:08:36.279
and we'll talk about that at the end of the talk.

00:08:36.959 --> 00:08:40.436
So the way the tool started is actually pretty different

00:08:40.519 --> 00:08:42.439
from what it is today.

00:08:43.320 --> 00:08:47.157
I learned that Tinder has a web app in addition to

00:08:47.240 --> 00:08:48.120
the mobile apps.

00:08:48.600 --> 00:08:51.280
So since I'm a web developer, that's great for me

00:08:51.480 --> 00:08:53.880
and I knew that Puppeteer was a thing.

00:08:54.240 --> 00:08:58.316
So I wrote a script with Puppeteer that runs an actual

00:08:58.399 --> 00:09:01.320
Google Chrome browser and imitates what a real user

00:09:01.519 --> 00:09:03.479
would do on the Tinder website.

00:09:05.000 --> 00:09:06.557
Because it is an actual browser,

00:09:06.640 --> 00:09:09.560
it was a little slow and heavy and that bothered me.

00:09:10.880 --> 00:09:14.597
So after doing that, which I only got to the login part,

00:09:14.680 --> 00:09:18.320
didn't do the whole thing, as I was doing it, I thought,

00:09:18.760 --> 00:09:23.996
"Wait, this is a website, so I could open the developer tools

00:09:24.079 --> 00:09:26.520
and look at network requests, maybe,

00:09:26.880 --> 00:09:29.397
and try to figure out how the web app is working."

00:09:29.480 --> 00:09:31.037
Because it's a single page application,

00:09:31.120 --> 00:09:33.756
so it's like doing requests asynchronously

00:09:33.839 --> 00:09:35.000
and updating the DOM.

00:09:35.640 --> 00:09:38.600
So I can try to figure out how it works.

00:09:39.320 --> 00:09:42.277
It turns out that the API is fairly straightforward.

00:09:42.360 --> 00:09:44.157
It's not obfuscated in any way.

00:09:44.240 --> 00:09:47.159
I could see the endpoints, the payloads, everything.

00:09:48.160 --> 00:09:50.517
I should have probably thought about this first

00:09:50.600 --> 00:09:54.316
before doing the browser automation thing,

00:09:54.399 --> 00:09:56.239
but you know, I'm stupid, I don't know.

00:09:57.640 --> 00:10:00.717
And then I thought that I cannot be the first one

00:10:00.800 --> 00:10:06.196
to think about this because even before the web app existed,

00:10:06.279 --> 00:10:08.717
you could still sniff traffic from the Android

00:10:08.800 --> 00:10:10.840
or the iOS apps.

00:10:11.440 --> 00:10:15.797
And sure enough, there is some unofficial online documentation

00:10:15.880 --> 00:10:19.477
about the Tinder API and that helped me finish figuring out

00:10:19.560 --> 00:10:21.199
some parts that were not clear to me,

00:10:21.440 --> 00:10:23.520
especially the authentication flow.

00:10:24.120 --> 00:10:25.436
And so with all this knowledge,

00:10:25.519 --> 00:10:29.400
I ended up building a command line tool with Node.js

00:10:29.880 --> 00:10:33.000
that does requests directly to the Tinder API.

00:10:34.000 --> 00:10:35.917
So that way can be very fast,

00:10:36.000 --> 00:10:38.117
doesn't need to run a full headless browser

00:10:38.200 --> 00:10:39.480
in the background.

00:10:40.040 --> 00:10:41.879
And this tool is called Swipr.

00:10:42.800 --> 00:10:45.479
So let's just take a look at how it works.

00:10:46.079 --> 00:10:47.077
This is a terminal.

00:10:47.160 --> 00:10:48.280
You run Swipr.

00:10:48.560 --> 00:10:50.277
It will ask for your login information

00:10:50.360 --> 00:10:52.157
the first time you get in there,

00:10:52.240 --> 00:10:53.756
so you need to enter your phone number.

00:10:53.839 --> 00:10:56.880
You get a text message with a confirmation code.

00:10:57.480 --> 00:11:01.079
You will enter it as well and with this you're logged in.

00:11:01.839 --> 00:11:04.239
And now it goes to the liking criteria part.

00:11:04.440 --> 00:11:06.436
It asks you for the minimum number of photos

00:11:06.519 --> 00:11:09.600
that you want in the profiles that you want to match.

00:11:10.320 --> 00:11:11.239
Let's say five.

00:11:11.440 --> 00:11:14.879
Then the length of the bio in words

00:11:15.000 --> 00:11:17.000
and then if you want to like back or not.

00:11:17.360 --> 00:11:18.640
And with that we're all set.

00:11:18.800 --> 00:11:19.680
We're swiping.

00:11:20.279 --> 00:11:23.040
You can see the emoji means obviously left and right

00:11:23.480 --> 00:11:25.957
for the swipes and you get the name of the person,

00:11:26.040 --> 00:11:28.240
their age, and the number of photos.

00:11:28.760 --> 00:11:31.160
Not really sophisticated, it's a simple thing.

00:11:31.480 --> 00:11:36.280
It's not complicated, but it's a fun use of technology.

00:11:38.240 --> 00:11:39.160
So there's that.

00:11:39.839 --> 00:11:40.880
So how is this built?

00:11:41.040 --> 00:11:45.196
Let's look a little bit at the internal architecture.

00:11:45.279 --> 00:11:48.000
So this is more or less what it is.

00:11:49.680 --> 00:11:56.077
The way is built is intentionally done by modules

00:11:56.160 --> 00:11:58.640
and all of them are decoupled from each other.

00:11:58.880 --> 00:12:01.720
They could even be their own packages if you wanted to do too.

00:12:01.920 --> 00:12:04.517
And the nice thing about this is that implementation

00:12:04.600 --> 00:12:06.677
details are hidden between them.

00:12:06.760 --> 00:12:09.556
So you can refactor and change things in each of them

00:12:09.639 --> 00:12:11.797
without affecting the rest, very independently.

00:12:11.880 --> 00:12:15.039
For example, the configuration module could change from

00:12:15.320 --> 00:12:18.160
reading from the disk to reading from the network,

00:12:18.800 --> 00:12:21.196
and the rest of the program wouldn't know as long as

00:12:21.279 --> 00:12:22.560
you keep the API.

00:12:22.839 --> 00:12:26.637
And that's a good strategy in general and a good

00:12:26.720 --> 00:12:28.000
pattern to follow.

00:12:28.440 --> 00:12:32.560
So the core of the CLI tool is the UI module.

00:12:33.000 --> 00:12:37.239
This is just a main loop with an async/await function.

00:12:37.720 --> 00:12:41.080
And all it does is call the other different modules,

00:12:41.279 --> 00:12:46.316
the user input and the logging modules, to get the input

00:12:46.399 --> 00:12:49.640
from the user and print things to the console.

00:12:50.480 --> 00:12:53.756
One interesting pattern that I'm using is this

00:12:53.839 --> 00:12:59.960
try/catch at top level.

00:13:00.160 --> 00:13:04.240
What this allows you to do is that in any other module,

00:13:04.440 --> 00:13:07.797
whenever we have an error that is critical, then we

00:13:07.880 --> 00:13:12.480
just want to stop the app completely.

00:13:12.680 --> 00:13:15.439
What I would do is just throw an error with a

00:13:15.839 --> 00:13:17.919
meaningful error message.

00:13:18.120 --> 00:13:22.800
And then I know that in this main loop it is caught

00:13:22.959 --> 00:13:25.680
and I can print the error message in a nice way,

00:13:26.399 --> 00:13:29.477
and always consistently with the same format.

00:13:29.560 --> 00:13:31.876
Because I'm always printing it from here.

00:13:31.959 --> 00:13:34.797
And I could do some additional things if I wanted,

00:13:34.880 --> 00:13:38.799
like save a log of the error or something.

00:13:40.160 --> 00:13:44.517
Another nice thing that the code does that is

00:13:44.600 --> 00:13:49.680
interesting is handling API errors in a semantic way.

00:13:50.920 --> 00:13:52.237
This is what I was talking about.

00:13:52.320 --> 00:13:54.079
We have the main module.

00:13:54.720 --> 00:13:59.436
We are doing stuff and then we are catching the API

00:13:59.519 --> 00:14:03.957
errors, and throwing errors with specific messages

00:14:04.040 --> 00:14:06.680
that then will be printed in the main module.

00:14:07.120 --> 00:14:08.756
So that helps with error handling.

00:14:08.839 --> 00:14:13.999
It's a nice way to handle all the error flow in a

00:14:14.399 --> 00:14:15.440
simple way.

00:14:16.560 --> 00:14:18.079
Then about the logging module.

00:14:19.120 --> 00:14:22.316
This is sometimes not something people think much

00:14:22.399 --> 00:14:24.840
about, but I think it's an important thing.

00:14:26.120 --> 00:14:28.880
It's just a module that abstracts details away,

00:14:29.160 --> 00:14:31.321
ensuring consistent message formatting.

00:14:31.759 --> 00:14:35.360
So it exports semantic functions like 𝚙𝚛𝚒𝚗𝚝𝚃𝚒𝚝𝚕𝚎 or

00:14:35.560 --> 00:14:38.360
𝚙𝚛𝚒𝚗𝚝𝙻𝚒𝚔𝚎 or 𝚙𝚛𝚒𝚗𝚝𝚂𝚞𝚌𝚌𝚎𝚜𝚜.

00:14:39.000 --> 00:14:41.157
So in the case of 𝚙𝚛𝚒𝚗𝚝𝙻𝚒𝚔𝚎, for example, it would

00:14:41.240 --> 00:14:45.436
print the little emoji left hand with a hand left

00:14:45.519 --> 00:14:46.319
and right.

00:14:46.440 --> 00:14:49.556
Or in this case, success or error, it would print

00:14:49.639 --> 00:14:54.037
the message you pass to it prepended with a tick

00:14:54.120 --> 00:14:54.640
or an x.

00:14:55.480 --> 00:15:00.676
So that way you're guaranteeing that your error

00:15:00.759 --> 00:15:03.637
messages or your success messages will be always

00:15:03.720 --> 00:15:06.879
printed the same way.

00:15:07.639 --> 00:15:10.880
Then the config module is interesting as well.

00:15:12.759 --> 00:15:16.436
Separated from the rest and it does three things.

00:15:16.519 --> 00:15:18.876
It reads configuration, writes configuration,

00:15:18.959 --> 00:15:19.957
and validates.

00:15:20.040 --> 00:15:22.240
And the validation part is important.

00:15:22.720 --> 00:15:26.477
If you need to check that the phone number the user

00:15:26.560 --> 00:15:29.397
enters is an integer and maybe you want to check

00:15:29.480 --> 00:15:30.759
the length of it.

00:15:31.399 --> 00:15:34.159
And you could do that on the UI part as you are

00:15:34.279 --> 00:15:37.756
receiving the user input, but that can get messy

00:15:37.839 --> 00:15:40.717
because maybe you then have some other UI in which

00:15:40.800 --> 00:15:41.556
you do that as well.

00:15:41.639 --> 00:15:45.957
So it's better to have the validation of your config

00:15:46.040 --> 00:15:47.920
values where the config is.

00:15:48.040 --> 00:15:52.917
So we have an 𝚒𝚜𝙲𝚘𝚗𝚏𝚒𝚐𝚅𝚊𝚕𝚒𝚍 function that just

00:15:53.000 --> 00:15:53.477
does that.

00:15:53.560 --> 00:15:57.519
So from the UI modules you can call this with the

00:15:57.759 --> 00:16:00.477
value the user is giving you and check that it is

00:16:00.560 --> 00:16:02.039
actually a value.

00:16:02.519 --> 00:16:04.357
And same thing when you're reading config from

00:16:04.440 --> 00:16:04.837
the disk.

00:16:04.920 --> 00:16:08.157
Maybe the user modified the config manually and

00:16:08.240 --> 00:16:09.077
it's not valid.

00:16:09.160 --> 00:16:11.920
Well, you can use this function to clean that up

00:16:12.079 --> 00:16:15.756
before returning the response to the rest of

00:16:15.839 --> 00:16:18.079
the program.

00:16:18.519 --> 00:16:21.037
And then there's the network module, which is

00:16:21.120 --> 00:16:23.359
probably the most interesting part.

00:16:23.759 --> 00:16:25.957
It could actually be an independent API client if

00:16:26.040 --> 00:16:30.436
you just chopped it away from the rest of

00:16:30.519 --> 00:16:31.360
the program.

00:16:32.360 --> 00:16:34.759
And there are a few things that you need to handle

00:16:36.480 --> 00:16:36.880
here.

00:16:41.600 --> 00:16:44.676
Authentication and tokens is probably among the most

00:16:44.759 --> 00:16:45.477
interesting ones.

00:16:45.560 --> 00:16:48.959
So, once you are authenticated, you need to append

00:16:49.319 --> 00:16:53.199
a token with every API token with every request.

00:16:53.920 --> 00:16:57.357
But that token can expire and so you have your API

00:16:57.440 --> 00:16:59.720
token and then you have a refresh token.

00:16:59.839 --> 00:17:02.519
The refresh token allows you to ask for a new API

00:17:02.639 --> 00:17:03.039
token.

00:17:03.639 --> 00:17:06.560
So what happens is that at some random point in time,

00:17:06.799 --> 00:17:09.236
the API token can expire and then you need to use

00:17:09.319 --> 00:17:12.560
the refresh token to ask for a new one.

00:17:13.079 --> 00:17:15.437
But it would be a little bit shitty if the app just

00:17:15.520 --> 00:17:19.000
crashed when the API token expires.

00:17:19.760 --> 00:17:23.437
So what you can do is build an API module that does

00:17:23.520 --> 00:17:24.836
that automatically.

00:17:24.919 --> 00:17:26.600
So how we could go about that?

00:17:27.280 --> 00:17:31.797
This is the code that I use in the tool, more or

00:17:31.880 --> 00:17:33.320
less, a little bit simplified.

00:17:33.520 --> 00:17:35.960
So this is just a 𝚌𝚛𝚎𝚊𝚝𝚎𝙰𝙿𝙸 function.

00:17:36.559 --> 00:17:41.157
What it does is it just gets all the API methods and

00:17:41.240 --> 00:17:44.037
modifies them in this way.

00:17:44.120 --> 00:17:47.200
You can see that 𝚌𝚊𝚕𝚕𝙼𝚎𝚝𝚑𝚘𝚍 function there.

00:17:47.720 --> 00:17:50.840
That calls the method with the API token.

00:17:52.000 --> 00:17:55.277
And then it actually tries to call it and if we get

00:17:55.360 --> 00:17:58.237
a status code for unauthorized, what we do is that

00:17:58.320 --> 00:18:03.877
we call a refresh API token function that will get

00:18:03.960 --> 00:18:06.476
the new API token and then we call the method again.

00:18:06.559 --> 00:18:09.877
So this way we can forget about it in the rest of

00:18:09.960 --> 00:18:10.317
our app.

00:18:10.400 --> 00:18:13.596
When we call our methods that need authentication,

00:18:13.679 --> 00:18:18.520
we know that they're going to work and if the API

00:18:18.679 --> 00:18:23.076
token is expired, we know that we'll get a new one

00:18:23.159 --> 00:18:26.119
automatically without needing to worry about that.

00:18:29.120 --> 00:18:32.197
And then another interesting thing is like all the

00:18:32.280 --> 00:18:36.277
API methods have semantic errors.

00:18:36.360 --> 00:18:39.677
So here, for example, is the method for liking a user.

00:18:39.760 --> 00:18:45.397
So it does a get request to that /like endpoint with

00:18:45.480 --> 00:18:47.600
a user ID and API token.

00:18:48.720 --> 00:18:50.879
And then it parses the response.

00:18:51.440 --> 00:18:56.080
And if the remaining likes are falsy, which means

00:18:56.400 --> 00:19:01.000
zero, instead of just throwing whatever, it throws

00:19:01.440 --> 00:19:04.476
an 𝙾𝚄𝚃_𝙾𝙵_𝙻𝙸𝙺𝙴𝚂 constant that is exported from

00:19:04.559 --> 00:19:05.280
the module.

00:19:05.520 --> 00:19:08.280
So then the nice thing is that from the UI part,

00:19:08.480 --> 00:19:13.400
you can check these errors and print specific messages.

00:19:13.559 --> 00:19:16.000
I think we actually saw it before.

00:19:18.240 --> 00:19:21.836
There you go. 𝚊𝚙𝚒𝙴𝚛𝚛𝚘𝚛𝚜.𝙾𝚄𝚃_𝙾𝙵_𝙻𝙸𝙺𝙴𝚂, that's the

00:19:21.919 --> 00:19:22.557
same constant.

00:19:22.640 --> 00:19:26.037
So from your main method, you can check that and say,

00:19:26.120 --> 00:19:28.039
"Oh, this is this specific error."

00:19:28.520 --> 00:19:31.197
And that's good practice in general because the

00:19:31.280 --> 00:19:34.917
alternative would be to be checking the status code

00:19:35.000 --> 00:19:38.357
and you would need to be doing weird things like,

00:19:38.440 --> 00:19:42.557
"Oh, I called the like user method and is returning

00:19:42.640 --> 00:19:46.476
a 503 and I know that for this method, it means

00:19:46.559 --> 00:19:46.997
this thing."

00:19:47.080 --> 00:19:50.476
So it's better to have all this logic inside your

00:19:50.559 --> 00:19:51.437
API methods.

00:19:51.520 --> 00:19:53.277
So then you don't worry about it.

00:19:53.360 --> 00:19:56.839
If the Tinder API changes tomorrow and instead of

00:19:57.080 --> 00:20:00.557
returning a likes remaining key with a zero, it

00:20:00.640 --> 00:20:03.317
returns an error with some status code, it doesn't

00:20:03.400 --> 00:20:03.557
matter.

00:20:03.640 --> 00:20:07.237
You just change this method and the rest of your

00:20:07.320 --> 00:20:10.079
program doesn't need to care about it.

00:20:11.039 --> 00:20:12.160
So that's nice.

00:20:14.120 --> 00:20:16.997
And you know, the nice thing about using Node to

00:20:17.080 --> 00:20:20.517
build CLIs like this is that there's actually a

00:20:20.600 --> 00:20:23.159
pretty good ecosystem of packages for it.

00:20:23.679 --> 00:20:26.157
Some of the things that I did manually, there are

00:20:26.240 --> 00:20:28.877
actually nice libraries for it, free license ones,

00:20:28.960 --> 00:20:31.797
but again, I'm stupid, so don't be me and use them.

00:20:31.880 --> 00:20:35.280
Like, don't do all these things manually.

00:20:37.080 --> 00:20:40.200
We have tools like Inquirer that I'm actually using,

00:20:40.480 --> 00:20:42.117
that is great for user input.

00:20:42.200 --> 00:20:46.956
It allows you to ask the user for things in a lot

00:20:47.039 --> 00:20:49.197
of different ways and it formats everything for you

00:20:49.280 --> 00:20:50.076
really nicely.

00:20:50.159 --> 00:20:54.277
So not only just strings, but you can print list

00:20:54.360 --> 00:20:57.076
of options for the user to choose with multiple

00:20:57.159 --> 00:20:59.476
selection, a lot of things.

00:20:59.559 --> 00:21:01.716
It's really good and the API is super nice.

00:21:01.799 --> 00:21:03.956
So that's definitely a must if you're building a

00:21:04.039 --> 00:21:05.120
CLI tool.

00:21:05.720 --> 00:21:10.517
Then there's modules like Chalk that allows you to

00:21:10.600 --> 00:21:16.037
print output with coloring and bold and all those

00:21:16.120 --> 00:21:17.840
nice things that you want to see.

00:21:18.919 --> 00:21:21.716
And then for API, there's a really nice module called

00:21:21.799 --> 00:21:25.960
apisauce that is based on Axios, which is a pretty

00:21:26.279 --> 00:21:29.400
popular HTTP client for JavaScript.

00:21:29.640 --> 00:21:33.517
But apisauce also handles errors in a similar way

00:21:33.600 --> 00:21:35.040
to what we've seen.

00:21:35.480 --> 00:21:38.277
It has constants based on status code.

00:21:38.360 --> 00:21:41.317
So instead of you having to go and check the status

00:21:41.400 --> 00:21:44.517
code, it will just return an object with an error

00:21:44.600 --> 00:21:47.557
field with a constant for the status code, like

00:21:47.640 --> 00:21:49.759
unauthorized or whatever.

00:21:50.279 --> 00:21:54.557
And it also has a way to do transformations on

00:21:54.640 --> 00:21:57.757
requests and responses, which is super useful because

00:21:57.840 --> 00:22:01.037
you can define, for example, a transformation on

00:22:01.120 --> 00:22:04.596
every request to inject your API token, so you don't

00:22:04.679 --> 00:22:06.716
need to handle that manually.

00:22:06.799 --> 00:22:10.476
Similar to what we've seen before in my example,

00:22:10.559 --> 00:22:12.797
but it's all taken care of by the library.

00:22:12.880 --> 00:22:14.160
So this is nice one.

00:22:14.840 --> 00:22:20.956
And then we have modules to help us with configuration,

00:22:21.039 --> 00:22:25.519
like .env that helps you read environment variables

00:22:26.000 --> 00:22:29.520
if your CLI tool needs to read them for config.

00:22:29.960 --> 00:22:35.080
And Conf, which basically handles configuration files

00:22:35.200 --> 00:22:35.716
for you.

00:22:35.799 --> 00:22:39.037
It will write your configuration to an appropriate

00:22:39.120 --> 00:22:42.277
file depending on the user operating system and

00:22:42.360 --> 00:22:43.840
everything is taken care of.

00:22:44.600 --> 00:22:47.317
And then you have other tools that are more

00:22:47.400 --> 00:22:48.117
comprehensive.

00:22:48.200 --> 00:22:51.157
If you want actual toolkits or frameworks, they

00:22:51.240 --> 00:22:53.357
include a lot of the functionalities that we've seen

00:22:53.440 --> 00:22:55.157
before under single packages.

00:22:55.240 --> 00:22:58.480
Gluegun and Oclif are two examples of that.

00:23:03.000 --> 00:23:03.160
So,

00:23:04.000 --> 00:23:08.879
Let's finish with some ideas for the future of this tool.

00:23:09.760 --> 00:23:12.157
First, of course, adding more liking criteria.

00:23:12.240 --> 00:23:13.360
Right now, it's very basic.

00:23:13.760 --> 00:23:17.399
So, you could add a blacklist or a whitelist of words

00:23:17.559 --> 00:23:18.680
that you want to see in bios.

00:23:18.960 --> 00:23:23.076
You could do image analysis in order to check that

00:23:23.159 --> 00:23:25.437
because users can have like two or three pictures,

00:23:25.520 --> 00:23:27.677
but maybe they are not their face,

00:23:27.760 --> 00:23:28.836
or they're not actual faces,

00:23:28.919 --> 00:23:30.517
they're just cartoons or something.

00:23:30.600 --> 00:23:32.037
That's fairly common.

00:23:32.120 --> 00:23:34.677
So, you could use image analysis to check if there are

00:23:34.760 --> 00:23:36.360
actual faces in the pictures.

00:23:36.600 --> 00:23:40.720
Or maybe set the percentage of people to like because

00:23:41.120 --> 00:23:42.956
depending on the algorithm of the dating app,

00:23:43.039 --> 00:23:46.359
you might not want to like absolutely everybody.

00:23:46.559 --> 00:23:50.320
Support other dating apps either with,

00:23:50.720 --> 00:23:52.959
by looking at network requests of web apps.

00:23:53.120 --> 00:23:56.677
Bumble, for example, recently released a web app,

00:23:56.760 --> 00:23:58.196
so you can look into that.

00:23:58.279 --> 00:24:02.240
Or you can also do traffic sniffing in mobile apps.

00:24:02.679 --> 00:24:04.797
And also, we could turn this into a website.

00:24:04.880 --> 00:24:07.836
We would need to store the credentials for the users,

00:24:07.919 --> 00:24:09.637
but you know, it's doable.

00:24:09.720 --> 00:24:12.397
Or even an Electron app with a background process

00:24:12.480 --> 00:24:13.517
that does this for you.

00:24:13.600 --> 00:24:16.599
There are a lot of things that you can do to improve

00:24:17.039 --> 00:24:21.480
this tool, or at least to keep expanding it.

00:24:22.320 --> 00:24:24.319
So, some final thoughts about all this.

00:24:25.080 --> 00:24:28.757
Well, we had, or at least I had, a lot of fun finding

00:24:28.840 --> 00:24:30.196
out the different ways to do this,

00:24:30.279 --> 00:24:32.600
the pros and cons, figuring out the APIs

00:24:32.840 --> 00:24:34.080
of the dating app.

00:24:35.399 --> 00:24:38.196
We also learned that building CLIs with Node is not

00:24:38.279 --> 00:24:41.757
only possible, but actually nice and enjoyable.

00:24:41.840 --> 00:24:43.680
It's a very nice experience.

00:24:44.799 --> 00:24:49.520
However, did we really solve the dating app problem?

00:24:49.960 --> 00:24:50.920
Definitely not.

00:24:52.760 --> 00:24:56.037
53 matches, 83 people he begun talking,

00:24:56.120 --> 00:24:58.279
nine agreed to a date, three stood him up,

00:24:58.440 --> 00:25:01.240
two canceled, leaving him with four actual dates.

00:25:01.799 --> 00:25:04.956
This is just an example of a real user experience.

00:25:05.039 --> 00:25:07.917
So, the tool is just a way to skip some of the grunt

00:25:08.000 --> 00:25:10.677
work and focus on the actually difficult and

00:25:10.760 --> 00:25:13.316
interesting part, which is talking to other people

00:25:13.399 --> 00:25:15.120
and actually meeting them.

00:25:15.720 --> 00:25:19.680
Because at the end of the day, humans will be humans.

00:25:20.200 --> 00:25:21.160
Thank you.

00:25:25.360 --> 00:25:27.360
Thank you for sharing your experience with us.