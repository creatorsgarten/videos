WEBVTT

1
00:00:02.900 --> 00:00:06.000
Hello everyone.

2
00:00:10.786 --> 00:00:15.000
I'm Riffy from Creatorsgarten.

3
00:00:15.000 --> 00:00:20.856
This session is co-hosted
 with p' Thai Pang.

4
00:00:20.857 --> 00:00:23.000
From Creatorsgarten.

5
00:00:23.000 --> 00:00:39.000
Today, we will look at the software tools
behind Creatorsgarten’s logistics.

6
00:00:39.000 --> 00:00:43.000
We will divide the session into two parts.

7
00:00:43.000 --> 00:00:50.000
The first part will be about how we
manage our YouTube channel.

8
00:00:50.000 --> 00:00:53.000
How we simplify the process.

9
00:00:53.000 --> 00:00:57.000
The second part will be
presented by Thai Pang.

10
00:00:57.000 --> 00:00:59.000
He will show you Contentsgarten.

11
00:00:59.000 --> 00:01:03.000
It is our custom wiki engine.

12
00:01:03.000 --> 00:01:07.000
We utilize many GitHub features.

13
00:01:07.000 --> 00:01:10.000
Let's get started.

14
00:01:10.000 --> 00:01:17.000
We have officially formed Creatorsgarten
for 1 year and 2 months.

15
00:01:17.001 --> 00:01:25.999
We have organized many events.

16
00:01:26.000 --> 00:01:31.000
Every talk we livestreamed,
we also archive it.

17
00:01:31.000 --> 00:01:39.000
One purpose is to publish it to
our YouTube channel.

18
00:01:39.000 --> 00:01:45.000
For those interested in the topics
of our past events.

19
00:01:45.001 --> 00:01:50.999
In the past, we didn’t have many
centralized entities that organizes events

20
00:01:51.000 --> 00:01:54.286
so the videos are spread over
many YouTube channels

21
00:01:54.287 --> 00:02:03.000
In Creatorsgarten, we trim each video,
post-process them and upload to YouTube.

22
00:02:03.000 --> 00:02:08.000
Before starting streaming, we need
to set up our devices for livestreaming.

23
00:02:08.001 --> 00:02:09.999
Like 1 hour ago.

24
00:02:10.000 --> 00:02:12.999
Lots of wires over there.

25
00:02:13.000 --> 00:02:17.000
Archiving an event is hard.

26
00:02:17.000 --> 00:02:22.885
A lot of things can
go wrong unpredictably.

27
00:02:22.886 --> 00:02:28.000
Some speakers have just slides.

28
00:02:28.000 --> 00:02:32.000
Some speakers wants to
play a video with sound.

29
00:02:32.000 --> 00:02:37.000
Sometimes we don't know in advance
what each speaker needs.

30
00:02:37.000 --> 00:02:43.000
Microphone is also an issue.

31
00:02:43.000 --> 00:02:47.000
When we run an event at Cleverse (venue),

32
00:02:47.000 --> 00:02:53.000
we know how the setup looks like.

33
00:02:53.000 --> 00:02:57.000
But when we move to another venue,

34
00:02:57.000 --> 00:03:03.000
it's called uncharted space.

35
00:03:03.000 --> 00:03:06.000
We don't know what they provide for us.

36
00:03:06.000 --> 00:03:08.000
It's our risk.

37
00:03:08.000 --> 00:03:10.000
If they don't have a microphone, where can we find it?

38
00:03:10.000 --> 00:03:12.000
Can we find it?

39
00:03:12.000 --> 00:03:15.000
Another thing is, can we have full control?

40
00:03:15.000 --> 00:03:17.000
If I speak too loudly,

41
00:03:17.000 --> 00:03:19.000
I can't control the sound.

42
00:03:19.000 --> 00:03:22.000
I can't control the output sound.

43
00:03:22.000 --> 00:03:25.000
What is the answer?

44
00:03:25.000 --> 00:03:28.670
The answer to this problem is to spend money.

45
00:03:28.671 --> 00:03:30.000
(AUDIENCE: Rich!)

46
00:03:30.000 --> 00:03:32.000
We use...

47
00:03:32.000 --> 00:03:36.000
In each Creatorsgarten event,

48
00:03:36.000 --> 00:03:39.000
we receive sponsorship money
from many sponsors.

49
00:03:39.000 --> 00:03:41.000
Which we use for maximum benefit.

50
00:03:41.000 --> 00:03:45.000
But when there is some leftover money,

51
00:03:45.000 --> 00:03:50.000
we keep it into a cash pool,

52
00:03:50.000 --> 00:03:55.000
we use this money to improve
our workflow, and share it.

53
00:03:55.000 --> 00:03:57.000
We simplify everything.

54
00:03:57.000 --> 00:04:04.314
Video signal is fed into an ATEM Mini.

55
00:04:04.315 --> 00:04:10.000
It receives the video that is
projected on the screen like this,

56
00:04:10.000 --> 00:04:15.357
as well as the sound that flows into
the software running on Mac Mini.

57
00:04:15.358 --> 00:04:21.000
But sometimes this solution
isn't good enough.

58
00:04:21.001 --> 00:04:29.999
Sometimes the venue doesn't provide a way
to feed the sound from the mixer 

59
00:04:30.000 --> 00:04:39.000
In a desperate situation,
sometimes we had to do a hotfix

60
00:04:39.000 --> 00:04:42.000
sticking a mic to the amplifier.

61
00:04:42.000 --> 00:04:47.000
It kinda works but not as great,
but well, ain’t broke, don’t fix.

62
00:04:49.000 --> 00:04:58.000
When we go to each venue, we took notes
about what equipment they have for us.

63
00:04:58.000 --> 00:05:01.563
So when we stream at the same place,
we don't have to ask them

64
00:05:01.564 --> 00:05:03.000
what equipment they have.

65
00:05:03.000 --> 00:05:11.000
When we finished recording,
it may be 3-5 hours long.

66
00:05:11.000 --> 00:05:15.000
The file that came out of OBS
is very large, like 32GB.

67
00:05:15.000 --> 00:05:19.000
Too big for Final Cut to handle.

68
00:05:19.000 --> 00:05:22.000
If we put it in Final Cut, it hangs.

69
00:05:22.000 --> 00:05:26.000
We have to optimize it first.

70
00:05:26.000 --> 00:05:34.000
For this, we have a FFmpeg script.

71
00:05:34.000 --> 00:05:39.000
We re-encode from H.264 to H.265.

72
00:05:39.000 --> 00:05:44.000
The size is reduced from 32GB to 5GB.

73
00:05:44.000 --> 00:05:49.000
Good for using with Final Cut.

74
00:05:49.000 --> 00:05:52.000
And it's also archived in a physical NAS.

75
00:05:52.000 --> 00:05:57.589
In case of an unfortunate event where
our channel is hacked

76
00:05:57.590 --> 00:06:01.000
and becomes an Elon Musk livestream.

77
00:06:01.000 --> 00:06:04.000
We have a backup.

78
00:06:04.000 --> 00:06:09.000
Ok, so we've already recorded the video.

79
00:06:09.000 --> 00:06:11.000
Now we upload it to YouTube.

80
00:06:11.000 --> 00:06:16.000
But after uploading,
we have to manage the content.

81
00:06:16.000 --> 00:06:23.000
Managing this is even harder.

82
00:06:23.000 --> 00:06:29.000
Because we want consistency
in our YouTube channel.

83
00:06:29.001 --> 00:06:33.999
Consistent video title format.

84
00:06:34.000 --> 00:06:36.000
We start with the session.

85
00:06:36.000 --> 00:06:38.000
Followed by the speaker.

86
00:06:38.000 --> 00:06:42.000
Or if it's a stream archive,
it's in another format.

87
00:06:42.000 --> 00:06:49.000
If it's a session with many speakers,
we can't fit all names in the title.

88
00:06:49.000 --> 00:06:52.000
We have to put it in yet another format.

89
00:06:52.000 --> 00:06:59.000
Actually, we can manage it manually.

90
00:06:59.000 --> 00:07:01.000
But it may be too inefficient.

91
00:07:01.000 --> 00:07:06.000
And if we want to add subtitle,
how will we manage it?

92
00:07:06.000 --> 00:07:07.000
Okay.

93
00:07:07.000 --> 00:07:14.000
So, P' Thai created this repo in GitHub.
creatorsgarten/videos

94
00:07:14.000 --> 00:07:27.000
We can manage each video's metadata
through this repository.

95
00:07:27.000 --> 00:07:30.000
And a GitHub Actions bot will
make changes accordingly.

96
00:07:30.000 --> 00:07:35.000
When we manage each session,

97
00:07:35.000 --> 00:07:41.690
We can create a markdown file
with metadata, such as

98
00:07:41.691 --> 00:07:51.000
title, speaker, youtube id,
and session description.

99
00:07:51.000 --> 00:07:59.013
For other video types,
such as hackathon pitch,

100
00:07:59.014 --> 00:08:08.000
we just specify the type, and our code
will format the title accordingly.

101
00:08:08.000 --> 00:08:20.000
For subtitles, we don't have to manage the
files locally or on YouTube.

102
00:08:20.000 --> 00:08:30.000
In this repo, we can upload subtitle file
in VTT format, which is a global standard.

103
00:08:30.000 --> 00:08:35.000
It will be uploaded to YouTube.

104
00:08:36.000 --> 00:08:44.638
Consistency is not only about
video title and description,

105
00:08:44.639 --> 00:08:50.000
but also about the video thumbnail.

106
00:08:50.001 --> 00:09:00.999
At first, we intended to make
each event look different.

107
00:09:01.000 --> 00:09:07.494
P' Thai suggested using
a consistent thumbnail format

108
00:09:07.495 --> 00:09:12.000
similar to Sakurai's channel
on creating games.

109
00:09:12.000 --> 00:09:16.000
The solution we got is not an automation.

110
00:09:16.000 --> 00:09:20.000
But it’s Figma's component system.

111
00:09:20.000 --> 00:09:25.000
When we make video thumbnails,
we have a preset template.

112
00:09:25.000 --> 00:09:31.000
We have the header on the top and
we put the video image at the back.

113
00:09:31.000 --> 00:09:40.000
And we put two lines of text
as a catchphrase.

114
00:09:40.000 --> 00:09:47.000
Figma’s system is very versatile.

115
00:09:47.000 --> 00:09:51.500
We can create the header as a component

116
00:09:51.500 --> 00:09:56.200
And when we change it

117
00:09:56.200 --> 00:09:58.900
It will take effect with every video

118
00:09:58.900 --> 00:10:03.700
We don't need to update
the header one by one

119
00:10:03.700 --> 00:10:10.300
And when all files are finished,
we put them in the GitHub repo

120
00:10:10.300 --> 00:10:17.100
It will trigger an event in GitHub Actions

121
00:10:17.100 --> 00:10:21.100
and it will update the videos on YouTube

122
00:10:21.100 --> 00:10:29.099
Why did we do all of this?

123
00:10:29.100 --> 00:10:34.600
We did it because of the ownership

124
00:10:34.600 --> 00:10:40.200
Creatorsgarten is an open source group

125
00:10:40.200 --> 00:10:47.500
Even our financials information
is in the open on the website

126
00:10:47.500 --> 00:10:59.799
But we can't grant our YouTube channel’s
ownership to just everyone

127
00:10:59.800 --> 00:11:03.800
But we can open source the videos metadata

128
00:11:03.800 --> 00:11:08.800
And when someone wants to
make changes to their video

129
00:11:08.800 --> 00:11:15.100
they can send a pull request.

130
00:11:15.100 --> 00:11:19.100
This is the main concept.

131
00:11:19.100 --> 00:11:24.100
But we also utilize GitHub
with another feature

132
00:11:24.100 --> 00:11:27.100
Our YouTube channel banner

133
00:11:27.100 --> 00:11:33.100
We want our YouTube channel’s banner
to adapt to each event

134
00:11:33.100 --> 00:11:36.824
When there is an event,
we will adapt it to another style.

135
00:11:36.825 --> 00:11:39.799
This is our work in progress.

136
00:11:39.800 --> 00:11:50.100
Manually creating new graphics
every time is a waste of time

137
00:11:50.100 --> 00:11:52.100
because we are lazy

138
00:11:52.100 --> 00:11:59.100
So we have another repository
called "banner"

139
00:11:59.100 --> 00:12:03.100
The concept is simple. A SvelteKit app.

140
00:12:03.100 --> 00:12:16.800
A puppeteer script will take a screenshot
of that webpage into a picture

141
00:12:16.800 --> 00:12:22.343
Then it will use the YouTube API
to update the channel banner.

142
00:12:22.344 --> 00:12:29.500
This action runs periodically. And that’s
how we utilize GitHub Actions.

143
00:12:29.500 --> 00:12:32.500
Now I will show you.

144
00:12:34.300 --> 00:12:35.000
OK

145
00:12:35.300 --> 00:12:36.800
So, this one

146
00:12:36.800 --> 00:12:38.800
These are some videos

147
00:12:38.800 --> 00:12:45.800
I will create a new thumbnail.

148
00:12:45.800 --> 00:12:50.800
I duplicate the frame
and align it to the grid.

149
00:12:50.800 --> 00:12:55.800
I want to create a header.

150
00:12:55.800 --> 00:13:01.800
I detach this one.

151
00:13:05.700 --> 00:13:08.799
This is a full demo.

152
00:13:08.800 --> 00:13:16.899
Did they move the detach command?

153
00:13:16.900 --> 00:13:18.800
Never mind.

154
00:13:18.800 --> 00:13:22.800
I will not create a new one.

155
00:13:22.800 --> 00:13:25.800
But I will show you how to
edit the thumbnail.

156
00:13:25.800 --> 00:13:28.800
For example, the Side Project Showdown.

157
00:13:28.800 --> 00:13:33.800
I will change it to Code Golf Party.

158
00:13:33.800 --> 00:13:35.800
If we have a lot of videos,

159
00:13:35.800 --> 00:13:40.800
we can see that when we change
the header component

160
00:13:40.800 --> 00:13:42.800
it will take effect on all videos.

161
00:13:42.800 --> 00:13:50.800
Now I just export these frames.

162
00:13:50.800 --> 00:13:55.800
Then, I will get the thumbnail
that is ready to be published.

163
00:13:55.800 --> 00:13:57.800
When I get a file like this,

164
00:13:57.800 --> 00:14:07.800
we go the video repo,

165
00:14:07.800 --> 00:14:16.800
when I want to update the thumbnail
for a certain session,

166
00:14:16.800 --> 00:14:20.800
I just drag and drop the jpeg file
into the folder.

167
00:14:20.800 --> 00:14:22.800
Then, I will push it to GitHub.

168
00:14:22.800 --> 00:14:28.800
And wait 1 minute for GitHub Actions
to update it on YouTube.

169
00:14:28.800 --> 00:14:31.800
That's about it.

170
00:14:35.800 --> 00:14:39.800
This is the process of
managing our videos.

171
00:14:39.800 --> 00:14:42.800
Next, the second part

172
00:14:42.800 --> 00:14:48.800
about how we manage contents
with our custom wiki engine.

173
00:14:48.800 --> 00:14:53.800
I will invite P'Thai to explain it.

174
00:14:53.800 --> 00:14:55.800
Please.

175
00:14:55.800 --> 00:14:57.800
Thank you, Riffy.

176
00:14:57.800 --> 00:15:02.800
Before I start, I would like to give
a big hand to Riffy.

177
00:15:02.800 --> 00:15:06.800
The content in our YouTube channel
in the past 2-3 months,

178
00:15:06.800 --> 00:15:10.800
Riffy helped managed them
all by himself.

179
00:15:10.800 --> 00:15:14.800
I have set up the automation,
made the Figma template,

180
00:15:14.800 --> 00:15:18.800
but Riffy is the one
who did all the gruntwork.

181
00:15:18.800 --> 00:15:25.800
He trims the clips, fixes audio issues,
uploads them to YouTube,

182
00:15:25.800 --> 00:15:27.319
makes thumbnails, etc.

183
00:15:27.320 --> 00:15:31.800
We have some automation, but admittedly
some of these works are very tough.

184
00:15:31.800 --> 00:15:34.800
Our channel will not grow
this much without Riffy.

185
00:15:34.801 --> 00:15:36.799
Thank you, Riffy.

186
00:15:36.800 --> 00:15:40.800
AnD iF YoU HaVen'T SuBsCrIbEd
tO tHe Creatorsgarten cHaNnEL,

187
00:15:40.800 --> 00:15:48.800
Please consider subscribing.
We want our content to reach more viewers.

188
00:15:48.800 --> 00:15:54.489
Now, we have like, how many subscribers?

189
00:15:54.490 --> 00:15:58.799
400, right? Cool.

190
00:15:58.800 --> 00:16:04.800
In addition to orgazing and
livestreaming our own events

191
00:16:04.800 --> 00:16:09.800
we also partner with other organizers

192
00:16:09.800 --> 00:16:13.799
such as Microsoft Thailand,
the Spark Tech Thailand community

193
00:16:13.800 --> 00:16:22.799
We help them livestream and
grow our channel at the same time.

194
00:16:22.800 --> 00:16:33.240
Now, this part is about our website.

195
00:16:33.240 --> 00:16:36.980
This is creatorsgarten.org.

196
00:16:36.980 --> 00:16:39.080
Let's take a look at the features first.

197
00:16:39.080 --> 00:16:43.100
Here's a page that lists all events.

198
00:16:43.100 --> 00:16:46.300
This is our wiki.

199
00:16:46.300 --> 00:16:49.200
Wiki is like a source of knowledge for us.

200
00:16:49.200 --> 00:16:56.700
Anything that can be public knowledge
we will try to put it here.

201
00:16:56.701 --> 00:17:02.186
For example, the body of knowledge about
our live streaming set up is here.

202
00:17:02.187 --> 00:17:06.186
Previously, the live streaming team
is just me and Riffy. But now,

203
00:17:06.187 --> 00:17:12.040
we put the know-how on the wiki,
and more people helped us livestream.

204
00:17:12.040 --> 00:17:17.800
Riffy wrote in the wiki
how to set up OBS.

205
00:17:17.801 --> 00:17:19.200
These are in the Wiki.

206
00:17:19.200 --> 00:17:23.760
The Wiki system is the topic of this talk.

207
00:17:23.760 --> 00:17:29.400
We built our own custom wiki engine.

208
00:17:29.400 --> 00:17:36.100
But why? Why do we have to
make it ourselves?

209
00:17:36.100 --> 00:17:43.900
Before we get to this point,
we have tried many solutions.

210
00:17:43.900 --> 00:17:49.199
We will go from the mature solutions
to the most modern solution.

211
00:17:49.200 --> 00:17:58.200
First is the classic wiki software
such as, MediaWiki, DokuWiki, PMWiki.

212
00:17:58.200 --> 00:18:02.700
They are easy to edit.

213
00:18:02.700 --> 00:18:04.700
This is the point that I really like.

214
00:18:04.700 --> 00:18:09.700
If we want to change a page,
just hit the edit button, type and save.

215
00:18:09.700 --> 00:18:13.760
There is something called the Wiki way.

216
00:18:13.760 --> 00:18:20.360
The philosophy of the wiki way

217
00:18:20.361 --> 00:18:30.009
is to make bad edits easy to correct
rather than hard to make.

218
00:18:30.010 --> 00:18:35.300
So that we make changes regularly.

219
00:18:35.300 --> 00:18:39.300
MediaWiki follows the principle.

220
00:18:39.300 --> 00:18:44.300
The second thing I like is that
they use a plaintext format.

221
00:18:44.300 --> 00:18:46.300
Why?

222
00:18:46.300 --> 00:18:51.871
So that when I want to edit, I can
copy everything to VSCode

223
00:18:51.872 --> 00:18:55.300
make an edit, then, copy and paste
it back in, and press save.

224
00:18:55.300 --> 00:18:58.300
That’s what I like about plaintext.

225
00:18:58.300 --> 00:19:02.300
These systems are quite flexible.

226
00:19:02.300 --> 00:19:06.300
For example, this wiki is called TVTropes.

227
00:19:06.300 --> 00:19:10.300
It uses a modded PMWiki.

228
00:19:10.300 --> 00:19:12.300
A lot of cool features.

229
00:19:12.300 --> 00:19:16.300
It's a wiki that I really like.

230
00:19:16.301 --> 00:19:20.714
There are hundreds of extensions
for MediaWiki that we can install

231
00:19:20.715 --> 00:19:23.300
to customize our wiki.

232
00:19:23.300 --> 00:19:27.300
These are what I like about them.

233
00:19:27.300 --> 00:19:30.300
But there are some a pain points.

234
00:19:30.300 --> 00:19:34.300
First, most of these programs
are written in PHP,

235
00:19:34.300 --> 00:19:40.300
and when we deploy, we have to
rent a server and set up a database.

236
00:19:40.300 --> 00:19:47.300
Their tech stack is not really
cloud-native. Not serverless-ready.

237
00:19:47.300 --> 00:19:51.300
Also, I don't really like its syntax.

238
00:19:51.300 --> 00:19:53.300
It's not Markdown.

239
00:19:53.300 --> 00:19:59.300
In MediaWiki, to create bold text,
we have to write three single quotes.

240
00:19:59.300 --> 00:20:02.300
If you’re used to Markdown,
you might be confused.

241
00:20:02.300 --> 00:20:05.300
You have to get used
to a different syntax.

242
00:20:05.300 --> 00:20:07.300
You might not like it.

243
00:20:07.300 --> 00:20:11.300
Also, they are not headless.

244
00:20:11.300 --> 00:20:14.300
They come with a bespoke theming system,

245
00:20:14.300 --> 00:20:18.300
usually written as a PHP template.

246
00:20:18.300 --> 00:20:21.300
And then use jQuery, CSS, etc.

247
00:20:21.300 --> 00:20:26.300
It's quite difficult to
integrate Tailwind or React.

248
00:20:26.300 --> 00:20:33.300
So we didn't choose to use
these off-the-shelf wiki software.

249
00:20:33.300 --> 00:20:37.300
The second option using
a static site generator.

250
00:20:37.300 --> 00:20:47.300
They’ve been around for about 10 years.
Jekyll, Eleventy, Hugo, VitePress, etc.

251
00:20:47.300 --> 00:20:50.300
I like that it's plain text, Markdown.

252
00:20:50.300 --> 00:20:54.300
And the content is in Git.
Easy to manage.

253
00:20:54.300 --> 00:20:58.300
And when it's a static site,
we can upload it to any static site host.

254
00:20:58.300 --> 00:21:01.300
No need to take care of the server.

255
00:21:01.300 --> 00:21:05.300
GitHub Pages can host these static sites.

256
00:21:05.300 --> 00:21:09.300
Including others such as Netlify,
Vercel, Cloudflare Pages, etc.

257
00:21:09.300 --> 00:21:16.300
but the downside I found when
using with static site generator is

258
00:21:16.300 --> 00:21:19.300
It's quite difficult to contribute.

259
00:21:19.300 --> 00:21:24.300
In a traditional wiki, we hit edit,
make changes, save. All done.

260
00:21:24.300 --> 00:21:26.300
See the result immediately.

261
00:21:26.300 --> 00:21:28.300
But when it comes to static sites,

262
00:21:28.300 --> 00:21:34.300
I have to fork the repo, make changes,
run the dev server, check it, commit.

263
00:21:34.300 --> 00:21:39.300
Push it, open a PR. Wait for a review.
Only then, the change is published.

264
00:21:39.300 --> 00:21:44.300
Like this one, I try to contribute to
the documentation of Next.js.

265
00:21:44.300 --> 00:21:48.300
I changed just two lines.

266
00:21:48.300 --> 00:21:54.300
But I have to explain what I fixed.
Almost 10 lines.

267
00:21:54.300 --> 00:21:58.300
There’s more barrier to contribution.

268
00:21:58.300 --> 00:22:04.300
It's far from the wiki way that says it
should be easy to change and revert.

269
00:22:04.300 --> 00:22:11.300
I have to fork the repo and run the
dev server to see a preview.

270
00:22:11.300 --> 00:22:13.300
It's not very convenient.

271
00:22:13.300 --> 00:22:18.147
And when all is done, it’s not reflected
immediately. I have to wait for a rebuild,

272
00:22:18.148 --> 00:22:22.485
as well as a redeploy,
before I see my changes go live

273
00:22:22.486 --> 00:22:27.300
so I decided not to use
a static site generator.

274
00:22:27.300 --> 00:22:37.300
Nowadays there’s a tool that has been
booming in the past 4-5 years: Notion.

275
00:22:37.300 --> 00:22:41.300
Actually, we've been using
Notion a lot since 2019.

276
00:22:41.300 --> 00:22:45.300
We use Notion to store all kinds
of knowledge for our events.

277
00:22:45.300 --> 00:22:52.300
I really like Notion. Many people can
collaborate in real time. UX is very good.

278
00:22:52.300 --> 00:22:56.300
Many friends are already
familiar with it as well.

279
00:22:56.300 --> 00:22:59.300
But here's what annoys me.

280
00:22:59.300 --> 00:23:03.685
First, sometimes I want to put in
charts, speech bubbles,

281
00:23:03.686 --> 00:23:06.300
or widgets that are not in Notion.

282
00:23:06.300 --> 00:23:12.300
We can't fully control its appearance.
Expressivity is limited.

283
00:23:12.300 --> 00:23:15.300
Second, I hate Notion's sidebar.

284
00:23:15.300 --> 00:23:23.300
I try to organize the content in Notion.

285
00:23:23.300 --> 00:23:27.300
No matter how much I try to organize,
the sidebar is still a mess.

286
00:23:27.300 --> 00:23:29.300
So I don't like the sidebar.

287
00:23:29.300 --> 00:23:33.300
I prefer to have a big pile of pages
that link together.

288
00:23:33.300 --> 00:23:36.300
Another thing is that the content
is in its own format.

289
00:23:36.300 --> 00:23:38.300
It's not plain text.

290
00:23:38.300 --> 00:23:41.300
I can't just copy it, fix it in VS Code,
and paste it back.

291
00:23:41.300 --> 00:23:46.300
And if many people use it a lot,
it may be expensive.

292
00:23:46.300 --> 00:23:51.300
So we ended up creating
our own a wiki engine.

293
00:23:51.300 --> 00:23:53.300
It's called Contentsgarten.

294
00:23:53.300 --> 00:23:55.300
I'll show you the features.

295
00:23:55.300 --> 00:24:01.300
It's an open source, headless,
modern, and cloud-native wiki engine.

296
00:24:01.300 --> 00:24:07.300
It uses Markdown syntax. To make text
bold, use the usual ** syntax.

297
00:24:07.300 --> 00:24:09.300
No need to remember the new syntax.

298
00:24:09.300 --> 00:24:12.300
And the content is stored in Git.

299
00:24:12.300 --> 00:24:17.300
All contents are stored in the
"creatorsgarten/wiki" repo

300
00:24:17.300 --> 00:24:19.300
as Markdown files.

301
00:24:19.300 --> 00:24:26.300
We can make changes it on the web.
There is a UI for it.

302
00:24:26.300 --> 00:24:30.300
We can also clone the repo
and make changes in our own editor.

303
00:24:30.300 --> 00:24:37.300
Or use "github.dev", which is VS Code
in the browser, integrated with GitHub.

304
00:24:37.300 --> 00:24:47.300
We can make changes in VS Code anywhere.
We've integrated this already.

305
00:24:47.300 --> 00:24:53.300
If we go to any wiki page,
and press the "." key,

306
00:24:53.300 --> 00:24:56.300
it'll take us to github.dev.

307
00:24:56.300 --> 00:25:06.299
If we use VS Code, we have GitHub Copilot,
so we won't be writing alone.

308
00:25:06.300 --> 00:25:11.300
And if we want to make a large-scale
change, for example,

309
00:25:11.300 --> 00:25:14.300
If I want to change many pages at once,

310
00:25:14.300 --> 00:25:20.300
I don't have to learn or create
a script using any proprietary API;

311
00:25:20.300 --> 00:25:24.630
I just clone the repo, write a script
that makes changes to the files,

312
00:25:24.631 --> 00:25:28.299
and push them back to the wiki.

313
00:25:28.300 --> 00:25:33.300
It's also tightly integrated with GitHub.

314
00:25:33.300 --> 00:25:40.004
When we change a page on the web,
it actually calls the GitHub API

315
00:25:40.005 --> 00:25:44.300
to update the Markdown file
directly on GitHub.

316
00:25:44.300 --> 00:25:47.300
We use GitHub as a source of truth.

317
00:25:47.300 --> 00:25:50.300
And when the information is on GitHub,

318
00:25:50.300 --> 00:25:55.300
we can use many GitHub’s
built-in features, such as webhooks.

319
00:25:55.300 --> 00:26:00.629
When someone changes a page,
it fires a webhook to Discord.

320
00:26:00.630 --> 00:26:04.180
So I get notified on Discord whenever
someone makes a change.

321
00:26:04.181 --> 00:26:09.300
No need to write custom code. This is
built in to GitHub and Discord.

322
00:26:09.300 --> 00:26:14.610
As Git maintains a history
of all the changes,

323
00:26:14.611 --> 00:26:19.659
we don't have to implement
history features ourselves.

324
00:26:19.660 --> 00:26:23.300
The "History" link just
takes you to GitHub.

325
00:26:24.300 --> 00:26:31.300
As we built the system ourselves,
we can add custom components.

326
00:26:31.300 --> 00:26:38.300
For example, we want to discuss
some parts of the content,

327
00:26:38.300 --> 00:26:43.300
We want to mark it as such.
So we have a speech bubble component.

328
00:26:43.300 --> 00:26:48.300
So editors can talk to each other
inside a wiki page.

329
00:26:48.300 --> 00:26:53.300
Or sometimes we want to visualize
the event feedback.

330
00:26:53.300 --> 00:26:56.300
We have a Bar Chart component.

331
00:26:56.300 --> 00:27:05.300
This page lists all our events,
along with related links and pages.

332
00:27:05.300 --> 00:27:07.300
It's a fairly advanced table.

333
00:27:07.300 --> 00:27:10.300
But it's just one line of code here.

334
00:27:10.300 --> 00:27:13.300
The engine can render templates.

335
00:27:13.300 --> 00:27:20.300
And the template can, in turn, query other
pages to generate a table.

336
00:27:20.300 --> 00:27:23.300
This is using the Liquid
templating language.

337
00:27:23.300 --> 00:27:28.300
We don't have to maintain
this table ourselves.

338
00:27:28.300 --> 00:27:33.300
When we create a new page,
this table will update accordingly.

339
00:27:35.300 --> 00:27:47.300
Each page can have structured data
in the YAML Front Matter.

340
00:27:47.300 --> 00:27:51.300
Those information will be
indexed into the database,

341
00:27:51.300 --> 00:27:55.299
which can be queried
via an API or from a template.

342
00:27:55.300 --> 00:27:57.300
We don't have to maintain index pages.

343
00:27:57.300 --> 00:28:00.300
We let the page query from the database.

344
00:28:00.300 --> 00:28:04.300
So this feature allows us to implement
more advanced features.

345
00:28:04.300 --> 00:28:09.300
For example, website settings
are also stored in the wiki,

346
00:28:09.300 --> 00:28:14.300
as well as feature flags.

347
00:28:14.300 --> 00:28:24.300
Even the inventory of our equipments,
we track them in this wiki page.

348
00:28:24.300 --> 00:28:30.300
We don't need to deal with
complex markdown tables;

349
00:28:30.300 --> 00:28:41.300
we keep it as structured data, and use
Liquid template to generate a nice table.

350
00:28:41.300 --> 00:28:45.300
Therefore, the advantage of keeping
information as YAML is that

351
00:28:45.300 --> 00:28:53.300
it is machine readable. We can
write scripts to maintain it.

352
00:28:53.301 --> 00:28:56.300
I like that it is open data.

353
00:28:56.300 --> 00:28:59.300
Finally, it is headless.

354
00:28:59.300 --> 00:29:03.300
The web page that you see
is not part of Contentsgarten.

355
00:29:03.300 --> 00:29:07.300
Contentsgarten only provides APIs.

356
00:29:07.300 --> 00:29:10.300
It lets us view, search, and edit pages.

357
00:29:10.300 --> 00:29:13.300
Here, we want to find events
that took place at Cleverse.

358
00:29:13.300 --> 00:29:17.300
When we send the request,
it will search the entire wiki

359
00:29:17.300 --> 00:29:22.300
for a page whose "event.location"
is equal to "Cleverse."

360
00:29:22.300 --> 00:29:29.300
That is, we can put information into
the wiki, then we can ask it questions.

361
00:29:29.300 --> 00:29:30.300
Okay.

362
00:29:30.300 --> 00:29:34.300
These are the basic features.

363
00:29:34.300 --> 00:29:36.300
Let's look at the tech stack.

364
00:29:36.300 --> 00:29:42.300
First, our website is built with Astro.

365
00:29:42.300 --> 00:29:49.300
Riffy recommended it in the
previous BKK.JS meetup.

366
00:29:49.300 --> 00:29:55.300
if you want to know about Astro, you can
watch the talk on YouTube channel.

367
00:29:55.300 --> 00:30:01.300
And the backend is Contentgarten.
The code is in another repo.

368
00:30:01.300 --> 00:30:03.266
It will talk to GitHub API

369
00:30:03.267 --> 00:30:08.300
to extract data from the repository
that we consider to be a source of truth.

370
00:30:08.300 --> 00:30:16.300
But, recall the example where we query
for events that happen at Cleverse.

371
00:30:16.300 --> 00:30:20.300
GitHub API does not have
an API for this kind of query.

372
00:30:20.300 --> 00:30:25.300
We have to use a database
as a cache, or an index.

373
00:30:25.300 --> 00:30:30.300
So, the source of truth is on GitHub,
but the data is indexed in MongoDB.

374
00:30:30.300 --> 00:30:36.300
And denormalize them so we can
query the data in each file easily.

375
00:30:36.300 --> 00:30:40.300
So this is about Contentgarten.

376
00:30:40.300 --> 00:30:42.300
Let's come to the conclusion.

377
00:30:42.300 --> 00:30:50.199
The takeaway for this talk is that
I feel that GitHub ecosystem allows us

378
00:30:50.200 --> 00:30:55.300
to build a custom wiki system
with very little effort.

379
00:30:55.300 --> 00:31:11.300
Without GitHub's various features like
webhooks, APIs, github.dev, or Copilot,

380
00:31:11.300 --> 00:31:15.300
building such system would
have taken much longer

381
00:31:15.301 --> 00:31:18.900
That said, Contentsgarten
is very bare bones.

382
00:31:18.901 --> 00:31:21.700
It doesn't even have
a "Delete page" feature.

383
00:31:21.701 --> 00:31:24.942
But it's not necessary,
because we don't do that often.

384
00:31:24.943 --> 00:31:30.299
When I want to delete the page, I just
delete it directly from GitHub UI.

385
00:31:30.300 --> 00:31:36.300
that is, we stand on top
of the shoulder of giants.

386
00:31:36.300 --> 00:31:46.300
As the data is plain text in Git, we can
build integrations more easily

387
00:31:46.300 --> 00:31:50.300
without using any proprietary API.

388
00:31:50.300 --> 00:31:55.300
One idea it to visualize
how pages interconnect.

389
00:31:55.300 --> 00:31:57.300
I did this with my own website.

390
00:31:57.300 --> 00:32:05.300
It might be cool if we can see
how each page are connected,

391
00:32:05.300 --> 00:32:08.300
so we can see the knowledge graph.

392
00:32:08.300 --> 00:32:18.557
We also have "grtn.org" link shortener.

393
00:32:18.558 --> 00:32:26.300
We can avoid using costly
link shortener services

394
00:32:26.300 --> 00:32:32.300
by leveraging the wiki as
a short links database.

395
00:32:32.300 --> 00:32:38.300
Then make it so that grtn.org pulls data
from the front matter here

396
00:32:38.300 --> 00:32:40.300
and redirect accordingly.

397
00:32:40.300 --> 00:32:47.300
When the data is easily accessible,
it's convenient to do stuff.

398
00:32:47.300 --> 00:32:54.300
Our YouTube channel banner,
that Riffy showed earlier,

399
00:32:54.300 --> 00:32:59.300
It draws information
from the wiki as well.

400
00:32:59.300 --> 00:33:04.300
But I have to say that
this tool is not a silver bullet.

401
00:33:04.300 --> 00:33:08.300
There are many complaints.
Some don't like it to be plain text.

402
00:33:08.300 --> 00:33:14.300
Some wants Notion-like
editing experience.

403
00:33:14.300 --> 00:33:24.300
Or sometimes, we have some info
that we cannot practically make public.

404
00:33:24.300 --> 00:33:30.300
I suggest to use the right tool
for the right job.

405
00:33:30.300 --> 00:33:34.986
If you want to take meeting minutes,
just use Notion or use Google Docs.

406
00:33:34.987 --> 00:33:38.300
For collaborative tables, Google Sheets.
For designs, Figma.

407
00:33:38.300 --> 00:33:41.300
Use the right tool for the right job.

408
00:33:41.300 --> 00:33:48.300
But I would encourage making
everything "reachable" from the wiki.

409
00:33:48.300 --> 00:33:57.300
By "reachable" I mean, there should be a
chain of links from the homepage to it.

410
00:33:57.300 --> 00:34:03.985
For example, I want to find the sponsor
proposal document for

411
00:34:03.986 --> 00:34:10.299
The Stupid Hackathon Thailand 2,
that happened in 2018 (7 years ago)

412
00:34:10.300 --> 00:34:14.300
We go to the homepage, then wiki,
then go to the list of events,

413
00:34:14.300 --> 00:34:16.993
then The Stupid Hackathon Thailand,

414
00:34:16.994 --> 00:34:20.300
then Coverage.

415
00:34:20.300 --> 00:34:24.300
There are many documents in there.
including "Information for sponsors".

416
00:34:24.300 --> 00:34:29.300
We didn't use Notion at that time.
We used Dropbox Paper.

417
00:34:29.300 --> 00:34:35.300
Have you ever used it?
It came before Notion.

418
00:34:35.300 --> 00:34:38.300
In conclusion, no matter
where the information is.

419
00:34:38.300 --> 00:34:43.300
At least, it is reachable
from the home page.

420
00:34:43.300 --> 00:34:53.300
This makes our knowledge
more easily discoverable.

421
00:34:53.300 --> 00:34:57.871
That's the conclusion for this talk.

422
00:34:57.872 --> 00:35:02.171
Here are the repo links, but
you don't have to remember it.

423
00:35:02.172 --> 00:35:06.629
Go to our wiki, and then,
scroll down to Tech Stack.

424
00:35:06.630 --> 00:35:12.486
That would be it for my session.
Thank you everyone.

425
00:35:19.300 --> 00:35:20.300
For.

426
00:35:20.300 --> 00:35:21.300
Answer.

427
00:35:21.300 --> 00:35:22.300
A lot.

428
00:35:22.300 --> 00:35:23.300
Yes.

429
00:35:23.300 --> 00:35:24.300
I.

430
00:35:24.300 --> 00:35:25.300
Where?

431
00:35:25.300 --> 00:35:26.300
I.

432
00:35:26.300 --> 00:35:27.300
And take.

433
00:35:27.300 --> 00:35:28.300
Yes I will.

434
00:35:28.300 --> 00:35:29.300
Uh.

435
00:35:29.300 --> 00:35:30.300
Ask.

436
00:35:30.300 --> 00:35:31.300
What.

437
00:35:31.300 --> 00:35:32.300
What we see.

438
00:35:32.300 --> 00:35:33.300
As.

439
00:35:33.300 --> 00:35:34.300
A project.

440
00:35:34.300 --> 00:35:35.300
Do.

441
00:35:35.300 --> 00:35:36.300
Is.

442
00:35:36.300 --> 00:35:37.300
Right?

443
00:35:37.300 --> 00:35:38.300
Now.

444
00:35:38.300 --> 00:35:39.300
I want.

445
00:35:39.300 --> 00:35:40.300
What about.

446
00:35:40.300 --> 00:35:41.300
Evaluation.

447
00:35:41.300 --> 00:35:42.300
What.

448
00:35:42.300 --> 00:35:43.300
We.

449
00:35:43.300 --> 00:35:44.300
Evaluation.

450
00:35:44.300 --> 00:35:45.300
Form.

451
00:35:45.300 --> 00:35:46.300
From.

452
00:35:46.300 --> 00:35:47.300
Project.

453
00:35:47.300 --> 00:35:48.300
How.

454
00:35:48.300 --> 00:35:50.300
I'm sorry.

455
00:35:50.300 --> 00:35:52.300
Oh, like...

456
00:35:54.300 --> 00:35:59.300
Okay, I mean, after we have organized the project, right?

457
00:35:59.300 --> 00:36:03.300
There will be a feedback form that this part needs to be adjusted like this.

458
00:36:03.300 --> 00:36:07.300
We have a summary of how to evaluate the data.

459
00:36:07.300 --> 00:36:11.300
How can we improve the future management?

460
00:36:11.300 --> 00:36:14.300
Can we do it like Tata here?

461
00:36:14.300 --> 00:36:16.300
How can we develop the team to do this?

462
00:36:16.300 --> 00:36:18.300
Okay.

463
00:36:18.300 --> 00:36:20.300
Oh, thank you very much, Lekphi.

464
00:36:20.300 --> 00:36:22.300
Okay, thank you for the question.

465
00:36:22.300 --> 00:36:25.300
This is the feedback of the 7th Stupid Hackathon.

466
00:36:25.300 --> 00:36:27.300
The latest project that we organized.

467
00:36:27.300 --> 00:36:30.300
After the project is finished, we will shoot a Google Form and ask questions.

468
00:36:30.300 --> 00:36:32.300
Usually, we will ask 5 questions.

469
00:36:32.300 --> 00:36:33.300
1. What do you like?

470
00:36:33.300 --> 00:36:35.300
2. What should be improved?

471
00:36:35.300 --> 00:36:37.300
3. What do you want us to try?

472
00:36:37.300 --> 00:36:40.300
And then, the fourth question is to give a score of 1-10.

473
00:36:40.300 --> 00:36:43.300
And then, the fifth question is to say that you want to write something in it.

474
00:36:43.300 --> 00:36:44.300
Just write it.

475
00:36:44.300 --> 00:36:46.300
Then, I will take the question.

476
00:36:46.300 --> 00:36:49.300
I will take the question and write it in the wiki.

477
00:36:49.300 --> 00:36:56.300
Then, the next generation of staff will be able to see the event list to see the feedback of the previous work.

478
00:36:56.300 --> 00:36:59.300
It will not disappear.

479
00:36:59.300 --> 00:37:00.300
Ah.

480
00:37:00.300 --> 00:37:01.300
Yes.

481
00:37:01.300 --> 00:37:04.300
For the 7th Stupid Hackathon,

482
00:37:04.300 --> 00:37:06.300
what is your favorite activity?

483
00:37:06.300 --> 00:37:08.300
Each person who answered will be listed.

484
00:37:08.300 --> 00:37:10.300
After that,

485
00:37:10.300 --> 00:37:12.300
the one who answered, we will post it to the GPT chat.

486
00:37:12.300 --> 00:37:14.300
The summary is...

487
00:37:14.300 --> 00:37:15.300
Ah.

488
00:37:15.300 --> 00:37:34.300
So, if you want to read our information or to see the summary of the chat GPT, including the points, how many points we will keep in this.

489
00:37:34.300 --> 00:37:40.300
And how many people answered, how much average, there will be a calculation automatically.

490
00:37:40.300 --> 00:37:48.300
Therefore, the team that organizes the next round can come in and see, including ideas for next year.

491
00:37:48.300 --> 00:37:58.300
If you want to know what ideas the people who organize the previous generation have, come in and see these.

492
00:37:58.300 --> 00:38:01.300
Come in and see the summary that we can talk about.

493
00:38:01.300 --> 00:38:07.300
And there will be, let me find it for a moment.

494
00:38:07.300 --> 00:38:13.300
Data, here it is.

495
00:38:13.300 --> 00:38:16.300
In addition, we will have to collect data of various STUPID events.

496
00:38:16.300 --> 00:38:27.300
We have arranged 7 rounds and we have a clip track that in each year, how many teams there are, how many tickets, presenters, how many people come to present the work, event rating, something like this.

497
00:38:27.300 --> 00:38:31.300
When you click on the event rating, it will take you to see the feedback.

498
00:38:31.300 --> 00:38:36.300
This is the way we collect feedback in various events.

499
00:38:36.300 --> 00:38:38.300
We don't want it to disappear.

500
00:38:38.300 --> 00:38:40.300
Answer the question.

501
00:38:40.300 --> 00:38:42.300
Ok.

502
00:38:45.300 --> 00:38:47.300
Any additional questions?

503
00:38:50.300 --> 00:38:51.300
Ok, that's about it.

504
00:38:51.300 --> 00:38:53.300
Thank you, P'Thy and Liffy.

505
00:38:57.300 --> 00:38:59.300
Very cool, P'Shank.

506
00:38:59.300 --> 00:39:02.300
Ok, let's set up first.

507
00:39:02.300 --> 00:39:04.300
How is it, P'Pup?

508
00:39:04.300 --> 00:39:05.300
See today.

509
00:39:05.300 --> 00:39:08.300
Oh, I just know that Bitbucket can do a lot of things.

510
00:39:08.300 --> 00:39:14.300
Oh, I still want to get a sticker of KritHub.

511
00:39:14.300 --> 00:39:16.300
Ok, I said it wrong.

512
00:39:16.300 --> 00:39:19.300
I just know that KritLab can do a lot of things.

513
00:39:19.300 --> 00:39:22.300
I wouldn't set up a post like this.
