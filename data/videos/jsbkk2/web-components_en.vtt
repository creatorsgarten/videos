WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:00.240 --> 00:00:01.320
And hello.

00:00:01.480 --> 00:00:04.000
Say hello สวัสดี to everyone here.

00:00:04.839 --> 00:00:10.197
I was hoping that it would be empty like 10 minutes ago.

00:00:10.280 --> 00:00:13.120
So, why people start coming up?

00:00:14.160 --> 00:00:19.157
If I were to talk too fast, or you cannot understand me

00:00:19.240 --> 00:00:21.157
in any way, please raise your hand.

00:00:21.240 --> 00:00:24.880
I have a knack of speaking too fast.

00:00:25.599 --> 00:00:29.680
And I will try to slow down as much as possible.

00:00:30.039 --> 00:00:34.160
So, please don't hesitate to stop me.

00:00:34.440 --> 00:00:37.240
Just say "please slow down a bit."

00:00:40.160 --> 00:00:42.720
So, we are starting now.

00:00:45.879 --> 00:00:54.560
I'm not really sure if people still develop in JavaScript

00:00:57.120 --> 00:01:01.759
without React, without Vue, without Angular.

00:01:02.199 --> 00:01:04.119
I do myself.

00:01:04.559 --> 00:01:06.199
I don't do React.

00:01:06.799 --> 00:01:09.920
I don't do Angular at all.

00:01:12.280 --> 00:01:18.320
When I was in my working environment, it stunned me that

00:01:18.920 --> 00:01:23.839
no one knew when I wrote it like that.

00:01:24.119 --> 00:01:27.560
They just ask "what is this API called?"

00:01:28.240 --> 00:01:30.719
I would say that it is mostly a website.

00:01:31.079 --> 00:01:38.079
It actually works in all the recent browsers.

00:01:40.280 --> 00:01:42.640
So, let's start with an overview.

00:01:43.000 --> 00:01:48.119
We only have about 20 minutes here, 25 plus Q&A.

00:01:48.960 --> 00:01:51.680
So, we have to be somewhat fast.

00:01:53.040 --> 00:01:57.360
The overview of what I'm going to talk about is the HTML

00:01:57.520 --> 00:02:01.036
component and the web component, and the core technology

00:02:01.119 --> 00:02:05.640
of what we call web component.

00:02:07.920 --> 00:02:13.760
The HTML component, as we know it, is the tag.

00:02:14.440 --> 00:02:18.880
Such as a p tag, a tag, header tag, HTML tag.

00:02:19.360 --> 00:02:22.959
That is the HTML component.

00:02:23.720 --> 00:02:30.637
It began about 10 years ago, when they were working on

00:02:30.720 --> 00:02:35.637
letting normal people, other developers, non-core

00:02:35.720 --> 00:02:41.199
developers of the HTML standard, make their own tags.

00:02:41.879 --> 00:02:43.799
They can customize their own tag.

00:02:44.959 --> 00:02:48.800
We came to the project that initiated back then,

00:02:49.440 --> 00:02:53.240
I think from Google or someone around that time.

00:02:53.480 --> 00:02:56.477
Because the first time I heard about component is from

00:02:56.560 --> 00:02:57.360
AngularJS.

00:02:57.560 --> 00:03:03.000
So, I think it's probably Google in the project Polymer.

00:03:04.440 --> 00:03:08.839
After that, web component evolved over time.

00:03:09.760 --> 00:03:14.757
In this year, 2024, if you found some Stack Overflow

00:03:14.840 --> 00:03:19.119
from 2020 or 2021, please ignore it.

00:03:19.840 --> 00:03:22.000
Because it's probably obsolete anyway.

00:03:22.599 --> 00:03:26.880
Web component has come really a long way in these 10 years.

00:03:27.319 --> 00:03:32.440
The API I'm about to show here is the latest API.

00:03:33.120 --> 00:03:35.759
So, let's get started with it.

00:03:38.879 --> 00:03:42.516
In the core technology of web component, it actually

00:03:42.599 --> 00:03:44.480
divides into three:

00:03:45.480 --> 00:03:51.160
custom element, shadow DOM, and template and slot.

00:03:51.879 --> 00:03:54.160
Don't ask me why the third has two.

00:03:55.879 --> 00:03:58.279
It's actually just three.

00:04:02.680 --> 00:04:05.040
So, the custom element.

00:04:06.120 --> 00:04:12.240
I'm thinking that most people here develop JavaScript

00:04:12.360 --> 00:04:13.000
already.

00:04:13.799 --> 00:04:22.800
We probably have something similar in React and Vue already.

00:04:23.000 --> 00:04:30.997
These three methods, if you go into some GitHub for the

00:04:31.080 --> 00:04:35.556
web component, you see it all the time at the beginning

00:04:35.639 --> 00:04:36.800
of the class.

00:04:38.120 --> 00:04:39.159
Just get used to it.

00:04:39.560 --> 00:04:41.480
You don't really need to understand it.

00:04:41.919 --> 00:04:44.840
Just know that it will be there.

00:04:51.759 --> 00:04:55.956
The second topic is it actually can extend the existing

00:04:56.039 --> 00:04:57.039
element as well.

00:04:57.560 --> 00:05:02.520
We will go into the code and see.

00:05:03.479 --> 00:05:05.240
Example one.

00:05:06.000 --> 00:05:09.160
This is a basic custom element.

00:05:09.600 --> 00:05:19.637
This API, as I was saying before, if you go to Stack

00:05:19.720 --> 00:05:22.640
Overflow, it may have different API tools.

00:05:24.080 --> 00:05:35.760
But here in native JavaScript, we actually honor OOP over

00:05:36.560 --> 00:05:39.920
higher order functions.

00:05:40.280 --> 00:05:43.836
My friends in the React community, most of the time,

00:05:43.919 --> 00:05:46.920
we don't use class here.

00:05:47.319 --> 00:05:54.600
Sorry, I use it.

00:05:55.479 --> 00:06:03.480
If we think about this class and extend 𝙷𝚃𝙼𝙻𝙴𝚕𝚎𝚖𝚎𝚗𝚝,

00:06:04.680 --> 00:06:09.320
this is a progress of web component in recent years.

00:06:09.479 --> 00:06:12.359
I'm not sure how recent, maybe five or six years ago.

00:06:14.759 --> 00:06:21.917
So, every tag can be extended using defined class and

00:06:22.000 --> 00:06:26.277
extending the existing element.

00:06:26.360 --> 00:06:32.880
𝙷𝚃𝙼𝙻𝙴𝚕𝚎𝚖𝚎𝚗𝚝 here is the default element of all HTML.

00:06:33.560 --> 00:06:40.000
So that's why it's kind of an element to display

00:06:40.360 --> 00:06:42.159
the "Hello world" text.

00:06:42.919 --> 00:06:46.319
And the usages in the actual HTML file,

00:06:46.840 --> 00:06:52.200
we call this element like how we define here.

00:06:52.880 --> 00:06:58.597
So the usages here will have some bad compatibility

00:06:58.680 --> 00:07:01.560
with some framework, namely React.

00:07:02.080 --> 00:07:03.320
So, yes.

00:07:04.759 --> 00:07:10.760
We'll have to go into detail later here.

00:07:11.440 --> 00:07:14.680
In example two, in the second example here,

00:07:16.680 --> 00:07:24.519
I try to be a bit more interactive,

00:07:24.639 --> 00:07:29.439
like in actual website, the component here.

00:07:30.879 --> 00:07:33.159
So the usages in the HTML,

00:07:33.560 --> 00:07:36.999
we would just specify like this.

00:07:37.599 --> 00:07:42.879
And all the method, all the function go into the class.

00:07:43.479 --> 00:07:45.759
This class is just JavaScript.

00:07:45.879 --> 00:07:50.357
So if you imagine, we can actually have

00:07:50.440 --> 00:07:56.639
the import statement before this defining class

00:07:57.080 --> 00:08:00.799
and just use the import method into the class.

00:08:01.319 --> 00:08:07.999
It's actually possible without any frameworks.

00:08:08.199 --> 00:08:09.800
In the third example here,

00:08:10.000 --> 00:08:19.317
I try to add a bit more that when I say

00:08:19.400 --> 00:08:23.119
we can extend the existing element,

00:08:23.319 --> 00:08:27.160
let's see this extend HTML paragraph elements.

00:08:27.520 --> 00:08:34.040
This is actually P, the P tag in the usages.

00:08:34.640 --> 00:08:37.400
And we use the API is this P

00:08:37.919 --> 00:08:44.720
is actually the clickable P that was defined with my-

00:08:46.920 --> 00:08:49.440
Sorry. Typo.

00:08:50.040 --> 00:08:53.240
This has to be this class 𝙲𝚕𝚒𝚌𝚔𝚊𝚋𝚕𝚎𝙿𝚊𝚛𝚊𝚐𝚛𝚊𝚙𝚑.

00:08:53.519 --> 00:08:56.480
My sincere apologies.

00:08:57.000 --> 00:08:59.680
So if we follow the example,

00:09:00.600 --> 00:09:08.320
it's kind of when we try to create another P element,

00:09:08.760 --> 00:09:10.957
maybe that paragraph will have a lazy load,

00:09:11.040 --> 00:09:14.237
maybe that paragraph will have some method

00:09:14.320 --> 00:09:16.719
to deal with a lot of text.

00:09:17.640 --> 00:09:22.560
And we think that maybe we need another class

00:09:23.560 --> 00:09:26.280
a bit different from that paragraph.

00:09:26.560 --> 00:09:28.680
We use all P here to extend.

00:09:30.920 --> 00:09:33.917
And all the method will go to the new class

00:09:34.000 --> 00:09:36.680
as well as inheritance in NoOp.

00:09:37.920 --> 00:09:44.756
I'm sorry if anyone doesn't actually understand.

00:09:44.839 --> 00:09:45.756
Please raise your hand.

00:09:45.839 --> 00:09:51.477
I can have a quick layman term about some terms

00:09:51.560 --> 00:09:52.880
that I use.

00:09:53.640 --> 00:09:56.120
But no more than layman term.

00:09:57.200 --> 00:09:57.600
Okay.

00:09:58.200 --> 00:10:02.200
So right now, we are starting to see that

00:10:02.320 --> 00:10:04.599
we can actually see the style,

00:10:04.880 --> 00:10:08.040
set the style in here.

00:10:08.720 --> 00:10:11.280
And add event listener in here.

00:10:11.880 --> 00:10:17.357
It's actually quite laughable that most of my friends

00:10:17.440 --> 00:10:20.800
don't recognize this as event listener.

00:10:21.160 --> 00:10:23.640
They kind of ask, "What is this?"

00:10:24.320 --> 00:10:26.080
It's been there forever

00:10:26.279 --> 00:10:29.480
as long as I'm making JavaScript.

00:10:31.040 --> 00:10:39.800
So another in the next example is actually-

00:10:40.160 --> 00:10:43.800
Also, you are still following, right?

00:10:44.480 --> 00:10:46.000
Not speaking too fast.

00:10:46.680 --> 00:10:50.479
We have example three and five.

00:10:51.079 --> 00:10:52.517
This is intentional anyway,

00:10:52.600 --> 00:10:55.240
so that I keep you on a loop.

00:10:55.920 --> 00:11:03.080
So if I show you this, the usages of this P,

00:11:04.000 --> 00:11:07.200
how can I make this disappear so that this don't-

00:11:07.839 --> 00:11:08.239
Okay.

00:11:08.839 --> 00:11:13.440
So can you imagine what kind of JavaScript

00:11:13.560 --> 00:11:18.279
do I need to make this possible?

00:11:18.639 --> 00:11:21.479
Well, this is the kind of thing that you can just

00:11:21.680 --> 00:11:23.477
pass it on to ChatGPT or something,

00:11:23.560 --> 00:11:26.397
but well, don't expect it to correct you,

00:11:26.480 --> 00:11:28.320
but maybe it can guide you some way.

00:11:30.839 --> 00:11:35.720
So I just try to use the custom modal.

00:11:36.240 --> 00:11:40.360
And I want to set that if I click this,

00:11:40.839 --> 00:11:42.960
it will open that modal.

00:11:43.560 --> 00:11:46.357
And this modal, well, it's a modal, right?

00:11:46.440 --> 00:11:48.960
It has to be hidden at first.

00:11:49.560 --> 00:11:54.676
So it needs some style.

00:11:54.759 --> 00:11:54.879
P

00:11:55.639 --> 00:11:57.160
I think it's too small.

00:11:57.920 --> 00:11:58.400
Sorry.

00:11:58.920 --> 00:12:00.759
I will share the slide later.

00:12:01.279 --> 00:12:07.920
So this is beginning to kind of disturbing.

00:12:08.120 --> 00:12:11.760
It's kind of complex.

00:12:12.200 --> 00:12:15.120
If the complexity is beginning to assume as,

00:12:15.560 --> 00:12:21.440
let's say in here, we try to add style in the shadow DOMs.

00:12:22.000 --> 00:12:23.719
Since we will cover later,

00:12:24.079 --> 00:12:27.677
and this is the connect callback.

00:12:27.760 --> 00:12:31.520
And this is the open and close method here.

00:12:32.120 --> 00:12:35.436
It's actually just custom function in JavaScript.

00:12:35.519 --> 00:12:36.879
You can just write.

00:12:37.760 --> 00:12:40.119
Just like when we do with jQuery.

00:12:43.199 --> 00:12:44.756
People still use jQuery, right?

00:12:44.839 --> 00:12:47.679
Well, I don't anymore, but maybe.

00:12:49.880 --> 00:12:59.917
So, in here, I actually intentionally introduce you to

00:13:00.000 --> 00:13:02.039
this API called 𝚜𝚑𝚊𝚍𝚘𝚠𝚁𝚘𝚘𝚝.

00:13:02.720 --> 00:13:06.759
Because I was about to talking about the shadow DOM.

00:13:07.519 --> 00:13:13.400
This is the second in the core technology of web component,

00:13:13.680 --> 00:13:14.720
is the shadow DOM.

00:13:15.560 --> 00:13:20.320
I think shadow DOM is come out as soon as custom element.

00:13:20.680 --> 00:13:25.840
It was used first, as my knowledge, in AngularJS.

00:13:26.560 --> 00:13:35.196
It's a way that we encapsulate the DOM inside that component,

00:13:35.279 --> 00:13:38.079
just that component, without contact,

00:13:38.360 --> 00:13:39.800
connected to the outside.

00:13:40.440 --> 00:13:44.559
So in the DOM, without shadow,

00:13:45.079 --> 00:13:46.239
when we render the HTML,

00:13:46.839 --> 00:13:53.799
it kind of a tree from head of the HTML tag to header to body.

00:13:54.399 --> 00:13:58.840
This shadow DOM can be called a sub-tree of that tree.

00:14:00.000 --> 00:14:02.196
And back then,

00:14:02.279 --> 00:14:07.959
it actually not display in the inspect element.

00:14:08.399 --> 00:14:10.720
So this kind of thing,

00:14:11.240 --> 00:14:14.839
it isolates style and markup from the main document.

00:14:15.199 --> 00:14:17.840
It's good if you don't want your style to make up,

00:14:18.000 --> 00:14:23.160
but it's somehow a bit hard to,

00:14:23.920 --> 00:14:27.760
when you have a brand guideline that all text must be green,

00:14:29.160 --> 00:14:34.157
and well, you have to specify green color in that as well

00:14:34.240 --> 00:14:38.320
because it is harder to access global CSS.

00:14:39.040 --> 00:14:45.320
It's not impossible, but normally, we don't do it.

00:14:46.160 --> 00:14:51.759
So in here, just be a bit less complex than earlier.

00:14:52.199 --> 00:14:58.840
The basic of a shadow DOM here is just declare this 𝚜𝚑𝚊𝚍𝚘𝚠𝚁𝚘𝚘𝚝.

00:15:00.600 --> 00:15:02.800
And it will be inside,

00:15:03.320 --> 00:15:07.680
when we render into the actual browser,

00:15:07.800 --> 00:15:09.360
when we inspect element,

00:15:12.160 --> 00:15:20.040
this shadow element will have this style and this p inside already.

00:15:20.480 --> 00:15:29.880
This type of shadow DOM is most basic and it has some usage

00:15:30.839 --> 00:15:34.560
that if you don't, it need a script.

00:15:35.000 --> 00:15:36.839
It cannot run without,

00:15:40.800 --> 00:15:46.920
it will have a bad compatibility without JavaScript.

00:15:47.120 --> 00:15:49.399
So we are here.

00:15:50.240 --> 00:15:52.279
This is a new one.

00:15:53.360 --> 00:15:54.517
Maybe not new anymore.

00:15:54.600 --> 00:16:01.760
I think it was declared around 2021 or something at that time.

00:16:02.440 --> 00:16:03.196
But at the time,

00:16:03.279 --> 00:16:06.436
it was only Google Chrome Canary that support this

00:16:06.519 --> 00:16:08.359
declarative shadow DOM.

00:16:08.959 --> 00:16:13.597
I intentionally left out the explanation

00:16:13.680 --> 00:16:15.920
and just show the code here.

00:16:16.920 --> 00:16:23.280
And this is the same code as this basic shadow DOM.

00:16:24.120 --> 00:16:26.517
This basic shadow DOM,

00:16:26.600 --> 00:16:31.440
but when we use this with the declarative shadow DOM here,

00:16:32.040 --> 00:16:33.240
it's become like this.

00:16:33.920 --> 00:16:35.920
Much simpler.

00:16:36.360 --> 00:16:42.040
This actually open to a new possibility of the shadow DOM

00:16:42.880 --> 00:16:45.560
to be filled in with server side.

00:16:46.160 --> 00:16:50.679
Because before this, in the basic syntax,

00:16:51.199 --> 00:16:53.319
it need to be in the script.

00:16:53.839 --> 00:16:55.999
Without JavaScript running,

00:16:56.279 --> 00:17:01.157
well, there's no style, there's no p tag.

00:17:01.240 --> 00:17:09.200
And with it, we can actually have good backward

00:17:09.600 --> 00:17:10.517
compatibility.

00:17:10.600 --> 00:17:15.397
Some platform like WordPress that still not use React

00:17:15.480 --> 00:17:20.959
or web component at all can still use the shadow DOM

00:17:21.280 --> 00:17:23.119
with this declarative shadow DOM.

00:17:23.959 --> 00:17:28.437
You may find that there is also a term of declarative

00:17:28.520 --> 00:17:36.079
shadow root, but you'll see if you search about it.

00:17:36.919 --> 00:17:40.517
So the shadow DOM pro and con here, again,

00:17:40.600 --> 00:17:44.960
I intentionally not specify if it's a pro and a con

00:17:45.640 --> 00:17:51.400
because it's a trade-off.

00:17:51.760 --> 00:17:57.960
It isolates style and it's reusable.

00:17:59.840 --> 00:18:05.237
But the developers must learn how to manage this

00:18:05.320 --> 00:18:06.881
and how to manage lifecycle.

00:18:08.039 --> 00:18:11.400
Again, you have React to learn,

00:18:12.000 --> 00:18:13.680
you have to learn this as well.

00:18:14.080 --> 00:18:17.797
It's not as simple that when you have React in your

00:18:17.880 --> 00:18:20.640
code and you just drop in and it just works.

00:18:20.840 --> 00:18:23.239
No, it's not like that.

00:18:23.919 --> 00:18:27.959
It requires some work, but it is not hard,

00:18:28.240 --> 00:18:29.119
for me anyway.

00:18:31.280 --> 00:18:35.877
So also, it's not just when we share style with

00:18:35.960 --> 00:18:36.800
the global.

00:18:37.240 --> 00:18:41.280
It's just if we have two components, two buttons,

00:18:41.720 --> 00:18:45.400
and we just want to have the same border radius,

00:18:45.840 --> 00:18:49.880
we actually need to specify it two times

00:18:50.400 --> 00:18:52.760
because it isolates.

00:18:53.120 --> 00:18:58.197
This kind of concept may be in modern frameworks

00:18:58.280 --> 00:19:01.600
like Angular or Vue, maybe they have this already.

00:19:02.600 --> 00:19:05.437
But if you're not, well, you have to learn it

00:19:05.520 --> 00:19:08.240
the hard way.

00:19:09.000 --> 00:19:14.476
So this is what I want to show you that from this

00:19:14.559 --> 00:19:16.799
here, it's a shadow element.

00:19:17.039 --> 00:19:23.080
So what if I want to here the card component?

00:19:23.360 --> 00:19:26.159
This is a custom card that we have title

00:19:26.600 --> 00:19:27.920
and we have content.

00:19:29.360 --> 00:19:38.440
And we have the tag h2 and tag p with a slot title

00:19:38.960 --> 00:19:40.879
and slot content here.

00:19:41.559 --> 00:19:44.357
So if you are not familiar with this,

00:19:44.440 --> 00:19:52.280
please try to think ahead and what I try to do here.

00:19:52.960 --> 00:19:58.400
So this custom card can actually be something

00:19:59.039 --> 00:20:03.520
like this.

00:20:04.200 --> 00:20:08.277
So, it's the same structure that we kind of call

00:20:08.360 --> 00:20:09.560
shadow root inside.

00:20:10.080 --> 00:20:12.480
We specify style inside.

00:20:13.280 --> 00:20:17.439
And we call this that the innerHTML will be this.

00:20:17.880 --> 00:20:24.479
And this card at card, and the slot name to this slot

00:20:25.280 --> 00:20:27.079
is at this slot.

00:20:29.520 --> 00:20:36.039
Can you imagine that if I were to render this one,

00:20:36.799 --> 00:20:46.999
what kind of title that we will have in the card?

00:20:47.679 --> 00:20:51.596
So, it's at the slot, we will have this card title

00:20:51.679 --> 00:20:53.280
and this card content goes here.

00:20:53.720 --> 00:20:57.760
This one in the default.

00:20:58.200 --> 00:20:58.600
Okay.

00:20:59.000 --> 00:21:05.120
So, we now going to the third templates and slot.

00:21:05.480 --> 00:21:07.160
Well, template first anyway.

00:21:07.600 --> 00:21:11.680
Template is the way to define HTML so that for later use.

00:21:12.159 --> 00:21:19.557
Just like if we have we want that page to have at least

00:21:19.640 --> 00:21:22.080
three button.

00:21:22.600 --> 00:21:25.437
But with the declarative, even with declarative shadow

00:21:25.520 --> 00:21:28.400
root, we don't want to just declare it three time.

00:21:29.279 --> 00:21:33.120
We define a template and reuse it.

00:21:33.960 --> 00:21:38.960
This is kind of I don't actually use template myself.

00:21:39.480 --> 00:21:44.079
Because for me, I just extend the class.

00:21:44.679 --> 00:21:45.877
I don't use templates.

00:21:45.960 --> 00:21:51.959
I define a base class and I extend it and use it.

00:21:52.799 --> 00:21:57.760
This template API is not connected to custom element.

00:21:59.000 --> 00:22:01.440
It the other API that was used.

00:22:02.120 --> 00:22:05.277
When you see this template, template here is hidden

00:22:05.360 --> 00:22:08.920
and one appear by default.

00:22:09.360 --> 00:22:13.680
And if you recall that declarative shadow DOM, it use

00:22:14.039 --> 00:22:22.960
the same API here, template with label shadow root open.

00:22:23.640 --> 00:22:26.159
Here, use the same API.

00:22:26.919 --> 00:22:32.440
It the way web component evolve over time.

00:22:33.120 --> 00:22:38.280
This kind of API, even for me, I don't want to use it.

00:22:39.120 --> 00:22:45.600
But for the fair completion, I include it anyway.

00:22:46.120 --> 00:22:48.680
Template has a pro and con.

00:22:49.679 --> 00:22:53.757
Well, it's reusable, but I don't really need that

00:22:53.840 --> 00:22:57.157
reusable because I can just extend the class and just

00:22:57.240 --> 00:22:58.239
reuse it anyway.

00:23:01.440 --> 00:23:07.797
So, slot here, well, I intentionally left out because

00:23:07.880 --> 00:23:11.199
I show you already what is slot.

00:23:11.799 --> 00:23:15.317
It's just a way that we define the slot that the

00:23:15.400 --> 00:23:16.760
content will go in.

00:23:18.720 --> 00:23:26.720
And in here, if you see, I call slot name, but in here,

00:23:27.080 --> 00:23:30.240
I call it using h2 tag.

00:23:31.000 --> 00:23:33.919
Because you actually can change the tag.

00:23:34.679 --> 00:23:35.757
This can be anything.

00:23:35.840 --> 00:23:39.237
If I want this custom card and I want this title, but

00:23:39.320 --> 00:23:42.677
I want to display a list of it, I can just say this

00:23:42.760 --> 00:23:52.479
will be ul tag with slot name content.

00:23:53.919 --> 00:23:54.239
Okay.

00:23:54.919 --> 00:23:59.959
The advantage of using web component, I really then

00:24:00.240 --> 00:24:01.360
can define more.

00:24:01.640 --> 00:24:05.917
So, let just say that it's encapsulation, something

00:24:06.000 --> 00:24:08.320
that vanilla JS don't have before.

00:24:08.840 --> 00:24:12.120
It reusability across frameworks.

00:24:13.039 --> 00:24:16.640
Right now, the framework that support I think only

00:24:17.000 --> 00:24:20.836
React 18 is the only one left without full support

00:24:20.919 --> 00:24:22.240
to web component.

00:24:22.440 --> 00:24:26.637
But React 19, as in React beta, has full support of

00:24:26.720 --> 00:24:28.040
web component already.

00:24:28.440 --> 00:24:29.840
So, you are in good hand.

00:24:30.360 --> 00:24:33.196
And another thing is it can fit into more project

00:24:33.279 --> 00:24:34.079
structure.

00:24:34.440 --> 00:24:36.600
So, yep.

00:24:37.360 --> 00:24:39.400
And where to go next from here?

00:24:40.200 --> 00:24:48.120
If anyone want to have a real code and see that if it

00:24:48.320 --> 00:24:52.476
fit with my framework, if it fit with my Vue, fit with

00:24:52.559 --> 00:24:56.076
my Angular, please go to custom-element-everywhere.

00:24:56.159 --> 00:25:01.079
Search with GitHub and go into the library directory.

00:25:01.279 --> 00:25:05.880
They have the test suite for all the frameworks.

00:25:06.360 --> 00:25:06.760
Okay.

00:25:07.360 --> 00:25:13.080
I think we are closing already.

00:25:13.520 --> 00:25:19.680
If I speak too fast, do you have any questions?

00:25:19.960 --> 00:25:23.236
Any people, any ideas?

00:25:23.319 --> 00:25:24.319
No hand.

00:25:24.600 --> 00:25:25.959
I just stun the whole room.

00:25:30.559 --> 00:25:31.999
You can speak Thai.

00:25:32.679 --> 00:25:38.676
I will try to translate.

00:25:38.759 --> 00:25:39.184
ถามเป็นไทยได้นะครับ ถามเป็นไทยได้ครับ

00:25:39.268 --> 00:25:40.277
สงสัย web component คืออะไร

00:25:40.360 --> 00:25:42.656
You can ask in Thai as well.

00:25:42.739 --> 00:25:44.037
Do you have any questions?

00:25:44.120 --> 00:25:47.517
Like, oh, can we like convert It's going to be a good

00:25:47.600 --> 00:25:50.800
idea to convert the whole all our like React

00:25:50.960 --> 00:25:52.716
applications to be the web component?

00:25:52.799 --> 00:25:53.480
Something like that.

00:25:54.080 --> 00:25:55.596
Well, I can answer that already.

00:25:55.679 --> 00:25:57.237
No, not a good idea.

00:25:57.441 --> 00:25:57.537
คืออยากรู้ว่าตัว web component นะครับมันสามารถช่วยให้

00:25:57.831 --> 00:26:04.090
คือบางทีโปรเจคใหญ่ๆ อย่างเงี้ยครับ มันใช้เวลา build

00:26:04.173 --> 00:26:04.274
นานมาก ประมาณครึ่งชั่วโมงถึง

00:26:04.357 --> 00:26:24.133
component อย่างเงี้ยครับ

00:26:24.216 --> 00:26:24.308
มันจะช่วยทำให้เวลา build time ของแอปเนี่ย

00:26:24.391 --> 00:26:24.479
มันลดลงไหมครับ

00:26:31.360 --> 00:26:31.600
Yes.

00:26:32.840 --> 00:26:34.800
I will answer in Thai first.

00:26:44.600 --> 00:26:49.157
He asks that can we lessen the build time with web

00:26:49.240 --> 00:26:52.600
component just like in many big React project.

00:26:52.880 --> 00:26:55.120
It has so long build time.

00:26:55.480 --> 00:26:57.879
Like it has at least 15 minutes to build.

00:26:58.240 --> 00:27:00.679
In web component, it just work in the browser.

00:27:00.840 --> 00:27:02.000
You can just import it.

00:27:02.279 --> 00:27:03.280
It's a script tag.

00:27:03.640 --> 00:27:06.600
Take type JavaScript and yep, it just work.

00:27:06.880 --> 00:27:09.720
No need to build.

00:27:10.320 --> 00:27:11.600
Awesome. Awesome.

00:27:11.960 --> 00:27:12.999
That's a good one.

00:27:13.679 --> 00:27:15.797
Okay. Do you have any question like the other people?

00:27:15.880 --> 00:27:17.237
Any question?

00:27:17.320 --> 00:27:17.640
Yes.

00:27:26.178 --> 00:27:26.982
ทางนี้ใช่ไหมครับ

00:27:27.381 --> 00:27:28.040
พอดีอยากรู้ว่าตัว web component นะครับ

00:27:28.123 --> 00:27:28.214
ใน use case จริงๆ ในชีวิตจริงอะครับ

00:27:28.297 --> 00:27:28.439
เราจะเลือกใช้ในกรณีไหนบ้างครับ

00:27:31.640 --> 00:27:51.200
Okay. I will answer in Thai first.

00:27:51.940 --> 00:28:22.003
เราอยากได้ behavior custom behavior เนี่ย

00:28:22.407 --> 00:28:23.317
เราก็เลยสร้างเป็น web component

00:28:23.400 --> 00:28:26.156
แล้วเรา extend HTML image element

00:28:26.239 --> 00:28:40.617
แล้วใน constructor เราสั่งมันว่า

00:28:40.799 --> 00:28:42.196
I will now answer in English.

00:28:42.279 --> 00:28:48.920
So he asks us in the practical example of web component

00:28:49.320 --> 00:28:52.160
what kind of component that I use.

00:28:52.799 --> 00:28:56.600
So the most basic one is the lazy image.

00:28:57.200 --> 00:29:03.359
The lazy image like when we try to have image tag

00:29:04.039 --> 00:29:08.157
and somehow that image tag the URL is not working

00:29:08.240 --> 00:29:10.440
or the internet is too slow.

00:29:11.120 --> 00:29:15.877
We want to custom that behavior so that if somehow

00:29:15.960 --> 00:29:19.040
is too slow, it display loading

00:29:19.519 --> 00:29:22.800
or if it's just not working at all,

00:29:23.480 --> 00:29:25.240
we display a default image.

00:29:25.760 --> 00:29:29.800
And we can just extend it like class lazy image

00:29:30.320 --> 00:29:35.560
with extend HTML image element.

00:29:36.960 --> 00:29:37.200
Yep.

00:29:37.960 --> 00:29:42.760
Okay. Thank you so much. Okay. Last question.

00:29:45.432 --> 00:29:45.518
โอเค ก็ผมสงสัยตรงที่ว่า

00:29:45.602 --> 00:29:46.413
ถ้าสมมุติมี custom element นะครับ

00:29:46.496 --> 00:29:46.594
แล้วมันสามารถควบคุม state

00:29:46.677 --> 00:29:47.122
สมมุติมี parent อันนึง แล้วมี child 2 อันนะครับ

00:29:47.205 --> 00:30:05.307
สามารถควบคุม state ข้าม child กันได้ไหมครับ

00:30:05.390 --> 00:30:05.500
โอเคครับ ขอตอบเป็นไทยก่อน

00:30:05.583 --> 00:30:24.391
ก็คือ state ของ element ถ้าดูโค้ดส่วนที่ตรงนี้

00:30:24.520 --> 00:30:26.360
by default label click me

00:30:27.200 --> 00:30:40.555
ถ้าเราจะ change state เราสามารถ change label ได้

00:30:40.639 --> 00:30:40.818
โดยการสั่งให้ JavaScript สั่งให้มันเปลี่ยน label tag

00:30:41.262 --> 00:30:52.747
เราสามารถเก็บ state ไว้ที่นี่ได้ครับ

00:30:52.830 --> 00:30:52.938
เป็นวิธีของ web component ที่เราจะ manage state ไว้ที่นี่

00:30:53.022 --> 00:30:53.779
แล้วก็เป็นข้อดีที่เราสามารถ manage state

00:30:53.954 --> 00:30:54.120
เพราะว่าเรา render เข้ามาตรงนี้เลย

00:31:03.440 --> 00:31:05.237
I will now explain in English.

00:31:05.320 --> 00:31:09.640
So he ask about if we can manage state of the frontend

00:31:10.039 --> 00:31:12.160
using this web component.

00:31:13.279 --> 00:31:18.840
I tell that for me the most basic form in state

00:31:19.200 --> 00:31:25.639
management is to use the attribute in HTML tag.

00:31:26.399 --> 00:31:29.960
So in example, I use this label is name click me

00:31:30.720 --> 00:31:33.596
and somehow when if we just click already,

00:31:33.679 --> 00:31:37.159
I want to just change it to already click.

00:31:37.480 --> 00:31:39.760
Don't click anymore. Something like that.

00:31:40.159 --> 00:31:44.400
So we add it using this attribute change callback

00:31:44.760 --> 00:31:48.640
and call with if someone click already

00:31:49.440 --> 00:31:51.999
When we click, we change the label

00:31:52.679 --> 00:31:55.399
and when label change,

00:31:55.919 --> 00:31:57.919
it will call this attribute change callback

00:31:58.159 --> 00:32:03.199
in the way to manage state through the HTML attributes.

00:32:03.559 --> 00:32:04.680
Okay. So that's it.

00:32:05.000 --> 00:32:06.439
Okay. Thank you so much.

00:32:06.600 --> 00:32:08.436
So we are running out of time.

00:32:08.519 --> 00:32:09.360
Thank you so much ครับคุณวิทวัส

00:32:10.039 --> 00:32:12.639
So please give him a big applause.

00:32:12.840 --> 00:32:13.160
Yep.

00:32:13.679 --> 00:32:15.159
Actually Thank you for having me.

00:32:15.639 --> 00:32:16.556
Yes. Thank you so much.

00:32:16.639 --> 00:32:17.000
Actually
