WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:02.800 --> 00:00:04.039
Let us get started.

00:00:04.240 --> 00:00:07.157
เดี๋ยว talk นี้จะเป็นภาษาอังกฤษนะฮะ

00:00:07.240 --> 00:00:08.519
This talk would be in English.

00:00:09.080 --> 00:00:10.880
Let me introduce myself a little bit.

00:00:11.160 --> 00:00:12.639
My name is ภูมิ, ภูมิเป็นมโนนะครับ

00:00:13.559 --> 00:00:16.279
Right now, I work as a software engineer at Metabase.

00:00:16.600 --> 00:00:18.679
It's a data visualization company.

00:00:18.920 --> 00:00:21.956
But in my spare time, I like to create side projects

00:00:22.039 --> 00:00:24.800
and explore different areas.

00:00:25.199 --> 00:00:28.279
Art is one of the areas that I got into this year.

00:00:28.480 --> 00:00:30.120
I just wanted to share on that a little bit.

00:00:30.560 --> 00:00:33.277
But before we start, just curious, how many of you

00:00:33.360 --> 00:00:36.600
have heard of Minecraft or have played Minecraft before?

00:00:37.680 --> 00:00:38.639
I think a lot of us.

00:00:39.239 --> 00:00:42.156
Actually, I think Minecraft and video game modding

00:00:42.239 --> 00:00:45.557
in general is how a lot of my friends in my generation

00:00:45.640 --> 00:00:46.720
got into coding.

00:00:47.239 --> 00:00:51.279
A lot of them started modding GTA, modding Minecraft.

00:00:51.719 --> 00:00:55.517
Then they started to get this feel for when you are

00:00:55.600 --> 00:01:00.160
able to modify the code of a game and make magic happen.

00:01:01.320 --> 00:01:04.277
I think this notion of following the fun is still

00:01:04.360 --> 00:01:07.279
how I do programming up until today.

00:01:08.360 --> 00:01:11.479
I have been organizing some events for quite a while now.

00:01:11.759 --> 00:01:15.157
Actually back from seven years ago, and I think every

00:01:15.240 --> 00:01:18.280
event I have done, it's always about one question:

00:01:18.479 --> 00:01:19.640
what can you do with code?

00:01:20.759 --> 00:01:22.437
There's a lot of frameworks, there's a lot of

00:01:22.520 --> 00:01:23.839
technologies we have today.

00:01:24.240 --> 00:01:26.637
But I think the important question is, what are you

00:01:26.720 --> 00:01:27.716
going to build with it?

00:01:27.799 --> 00:01:31.080
What are the kind of things that you can create with code?

00:01:31.920 --> 00:01:35.000
I just wanted to share my journey in this past year.

00:01:35.640 --> 00:01:37.877
I'm actually not organizing events much anymore,

00:01:37.960 --> 00:01:41.760
but I have started to get into creative coding projects.

00:01:42.320 --> 00:01:46.076
First one is Cyber Subin, which is AI that, actually

00:01:46.159 --> 00:01:49.200
more like a dance project I did with a Thai dancer

00:01:49.439 --> 00:01:53.197
where we build software that humans can dance with

00:01:53.280 --> 00:01:54.959
machines, with algorithms.

00:01:55.079 --> 00:01:57.877
Second project is a project I did with a Singaporean

00:01:57.960 --> 00:02:02.760
artist, Horyon, which is about history of human

00:02:02.920 --> 00:02:04.399
and history of AI.

00:02:05.280 --> 00:02:08.000
The last project is actually my own side project.

00:02:08.239 --> 00:02:10.080
This is Visual Assembly Canvas.

00:02:10.800 --> 00:02:13.117
This is where I want to explore being able to write

00:02:13.200 --> 00:02:17.000
my own assembly to do audio visual projects.

00:02:17.560 --> 00:02:19.000
Let's actually get started.

00:02:19.519 --> 00:02:23.156
For Cyber Subin, this is a project where we want to

00:02:23.239 --> 00:02:24.880
create an art performance.

00:02:25.000 --> 00:02:27.640
Art performance, if you're not sure what that is,

00:02:28.000 --> 00:02:31.960
it's basically trying to encode some meaning or

00:02:32.120 --> 00:02:34.439
some question that you want to pose to people

00:02:34.640 --> 00:02:36.320
and encode it in the form of art.

00:02:36.800 --> 00:02:39.759
In this case, the main question of Cyber Subin is,

00:02:40.200 --> 00:02:42.920
can technology and human work together?

00:02:43.040 --> 00:02:45.876
Like is AI going to replace all the Thai dancers

00:02:45.959 --> 00:02:46.436
in the world?

00:02:46.519 --> 00:02:48.399
Do we still need humans if we have AI?

00:02:49.920 --> 00:02:52.117
This is the kind of thing that we want to explore,

00:02:52.200 --> 00:02:55.320
essentially the cybernetics between human and machine.

00:02:55.800 --> 00:02:57.559
This is the folks on our team.

00:02:58.159 --> 00:03:00.360
It all actually got started back in 2021.

00:03:01.680 --> 00:03:04.879
I was working on this hackathon called Hack Natasin

00:03:05.319 --> 00:03:06.960
or Hack Cybernetic Arts.

00:03:07.879 --> 00:03:10.357
In this hackathon, it's actually a project that was

00:03:10.440 --> 00:03:12.957
made, initiated by two persons.

00:03:13.040 --> 00:03:15.199
First is PPP or Pat.

00:03:15.440 --> 00:03:17.680
He's a researcher at MIT Media Lab.

00:03:18.640 --> 00:03:21.280
He calls himself a cyborg scientist.

00:03:21.720 --> 00:03:24.236
He's interested in how human and machine interact

00:03:24.319 --> 00:03:24.999
with each other.

00:03:25.319 --> 00:03:28.200
And then we have Pichet, which is a choreographer.

00:03:28.799 --> 00:03:32.200
His role is he wants to deconstruct Thai dance.

00:03:32.840 --> 00:03:34.557
This picture really fascinates me.

00:03:34.640 --> 00:03:38.240
This is the first picture of Natasin Thai, first

00:03:38.599 --> 00:03:40.719
capture photo of Thai dance.

00:03:41.239 --> 00:03:44.037
And in this photo is 1923, right?

00:03:44.120 --> 00:03:45.639
But what year is it right now? 2024.

00:03:46.879 --> 00:03:49.240
So it's actually 100 years apart.

00:03:49.680 --> 00:03:52.197
The interesting thing about Thai culture is it hasn't

00:03:52.280 --> 00:03:55.479
really been trying to decode or try to understand it.

00:03:55.799 --> 00:03:58.356
Like if you think about K-pop or J-pop, you see a lot

00:03:58.439 --> 00:03:59.876
of dance on TikTok, right?

00:03:59.959 --> 00:04:01.957
You see a lot of dance where people are making their

00:04:02.040 --> 00:04:02.840
own dance.

00:04:03.079 --> 00:04:05.477
They are making the dance related to the character

00:04:05.560 --> 00:04:06.559
they're interested in.

00:04:07.000 --> 00:04:10.076
But in Thai dance, the meaning is always 𝚘𝚋𝚓𝚎𝚌𝚝.𝚏𝚛𝚎𝚎𝚣𝚎.

00:04:10.159 --> 00:04:12.796
It's always frozen in time, and you cannot really

00:04:12.879 --> 00:04:13.839
do much about it.

00:04:14.680 --> 00:04:18.637
In this project, we want to use algorithms to try to

00:04:18.720 --> 00:04:22.999
decode the dance moves that we have into a series of

00:04:23.320 --> 00:04:25.920
programs that we can use to generate new dance.

00:04:26.639 --> 00:04:29.116
That means you are not limited to the number of dance

00:04:29.199 --> 00:04:32.717
you have like 10 panom, for example, but you're able

00:04:32.800 --> 00:04:35.280
to continuously create new dance.

00:04:37.000 --> 00:04:39.800
The way he did this is through the systems called

00:04:40.199 --> 00:04:41.440
the six elements.

00:04:41.919 --> 00:04:45.159
He thinks every dance in the world, like African dance,

00:04:45.360 --> 00:04:49.600
like K-pop, is composed of different elements of dance.

00:04:49.919 --> 00:04:53.717
For example, the energy in your body, or external

00:04:53.800 --> 00:04:56.680
body space, which is the space that surrounds you,

00:04:56.919 --> 00:04:59.637
or access point, which is the joints, the parts

00:04:59.720 --> 00:05:00.639
that connects.

00:05:01.039 --> 00:05:05.077
He thinks this is how you can compose these elements

00:05:05.160 --> 00:05:06.560
into different dances.

00:05:07.759 --> 00:05:10.039
What do you do when you start a new project with

00:05:10.880 --> 00:05:12.157
people in that domain?

00:05:12.240 --> 00:05:14.520
Of course, you do domain-driven design.

00:05:14.680 --> 00:05:16.280
You need to get into that domain.

00:05:16.919 --> 00:05:19.797
What we did is we found this, basically the very first

00:05:19.880 --> 00:05:23.597
photo of Thai dance, and we found a diagram that the

00:05:23.680 --> 00:05:26.373
choreographers were using to decode Thai dance.

00:05:26.960 --> 00:05:30.760
Of these choreographers, they are people who,

00:05:31.560 --> 00:05:33.959
in Thailand, there's not much of creating dance,

00:05:34.240 --> 00:05:36.637
but you have to understand it first before you're

00:05:36.720 --> 00:05:37.680
able to create it.

00:05:38.680 --> 00:05:40.917
What we first started to do is we started to write

00:05:41.000 --> 00:05:45.757
a simple React app that you can use to write a diagram

00:05:45.840 --> 00:05:48.880
that you can use to denote how the dance works.

00:05:49.400 --> 00:05:52.119
And there is also another project by other group.

00:05:52.360 --> 00:05:54.757
For example, my friend Pat, he did a project where

00:05:54.840 --> 00:05:58.877
he tries to understand and plot the dance from the

00:05:58.960 --> 00:06:02.120
video into a graph, just to see if there are any

00:06:02.240 --> 00:06:03.680
patterns that we can see.

00:06:04.759 --> 00:06:07.760
Based on those projects, we think of two goals.

00:06:08.039 --> 00:06:10.836
First thing is we want to create new dance, because

00:06:10.919 --> 00:06:12.917
if you cannot create new things, you're always

00:06:13.000 --> 00:06:13.880
just copying.

00:06:14.120 --> 00:06:16.399
You're always just replicating what's there.

00:06:16.639 --> 00:06:18.797
And the second thing we want to explore is the

00:06:18.880 --> 00:06:22.200
interaction, the feedback between human and the machine.

00:06:22.479 --> 00:06:26.116
Can they work together or no, or they're antagonistic

00:06:26.199 --> 00:06:27.519
to each other?

00:06:28.560 --> 00:06:30.400
Let's talk about cybernetics quickly.

00:06:30.800 --> 00:06:32.357
It is actually about feedback loop.

00:06:32.440 --> 00:06:34.836
So imagine if you're shooting a missile, right?

00:06:34.919 --> 00:06:37.236
What happens if you just shoot it in a straight line?

00:06:37.319 --> 00:06:38.800
It's not going to hit the target.

00:06:38.960 --> 00:06:42.039
So you need to get the input, get the sensor data,

00:06:42.240 --> 00:06:43.520
and refine the output.

00:06:45.479 --> 00:06:47.277
This is all about cybernetics.

00:06:47.360 --> 00:06:49.840
It's all about understanding what's around you,

00:06:50.280 --> 00:06:53.560
taking that feedback in, and then changing the course.

00:06:54.280 --> 00:06:57.556
We want to explore that concept between the dancers

00:06:57.639 --> 00:06:58.120
as well.

00:06:58.800 --> 00:07:01.399
For example, we want to take in existing dance,

00:07:01.800 --> 00:07:04.840
and we want to try to change it, modify it in some way

00:07:05.120 --> 00:07:07.359
so that we can create new dance.

00:07:07.599 --> 00:07:10.440
And we want to see how dancers would react to that.

00:07:10.720 --> 00:07:12.676
Like would they copy the dance?

00:07:12.759 --> 00:07:13.999
Would they dance with it?

00:07:14.319 --> 00:07:15.159
Like what would they do?

00:07:16.039 --> 00:07:18.277
The technology we are using today is going to be

00:07:18.360 --> 00:07:21.197
Three.js that we decided to use for this project.

00:07:21.280 --> 00:07:24.240
Three.js is actually very suitable for this kind of,

00:07:24.520 --> 00:07:27.396
let's say, POC work or the work where you want to

00:07:27.479 --> 00:07:29.560
quickly explore with the data.

00:07:30.440 --> 00:07:34.040
This is like a CodeSandbox example with Three.js.

00:07:34.800 --> 00:07:37.516
But the problem is this model is not ours, right?

00:07:37.599 --> 00:07:39.719
So we need some kind of existing data.

00:07:40.199 --> 00:07:42.559
And the way we do that is with motion capture.

00:07:42.919 --> 00:07:45.997
So we use a motion capture device and connect it to

00:07:46.080 --> 00:07:47.719
your joints, connect it to your legs.

00:07:48.000 --> 00:07:52.556
So we're able to capture a pretty detailed pattern

00:07:52.639 --> 00:07:54.720
of the data.

00:07:55.400 --> 00:07:57.556
And then we have the motion capture.

00:07:57.639 --> 00:07:58.360
So what?

00:07:59.840 --> 00:08:01.757
If you just have the motion capture,

00:08:01.840 --> 00:08:05.556
then it is like, if you have the motion capture

00:08:05.639 --> 00:08:07.279
then you can't really do much with it

00:08:07.560 --> 00:08:09.279
until you know how to modify it.

00:08:09.840 --> 00:08:12.597
So the question right now is how do you modify the dance?

00:08:12.680 --> 00:08:13.920
How do you create new dance?

00:08:14.440 --> 00:08:16.477
Okay, so I'm going to play Dora the Explorer here

00:08:16.560 --> 00:08:17.199
a little bit.

00:08:17.360 --> 00:08:20.560
So we have four API we can use to modify the dance.

00:08:20.879 --> 00:08:23.439
So, fog, materials, keyframe and mesh.

00:08:23.759 --> 00:08:24.879
Which one do you think it is?

00:08:25.479 --> 00:08:27.640
Who thinks it is fog, raise your hand?

00:08:28.240 --> 00:08:30.680
Who think it is keyframe, raise your hand?

00:08:31.280 --> 00:08:33.480
Okay, who think it is mesh, raise your hand?

00:08:34.000 --> 00:08:34.240
Alright.

00:08:34.519 --> 00:08:36.920
Okay, so this is a bit of a trick question.

00:08:37.200 --> 00:08:40.836
But if you think about it, each position of your dance

00:08:40.919 --> 00:08:43.636
is actually a series of keyframes, right?

00:08:43.719 --> 00:08:47.440
So it is a series of changes in position, in rotation,

00:08:47.720 --> 00:08:49.957
that are kind of interconnected.

00:08:50.040 --> 00:08:52.200
So we have this API called 𝙺𝚎𝚢𝚏𝚛𝚊𝚖𝚎𝚃𝚛𝚊𝚌𝚔,

00:08:52.680 --> 00:08:56.316
which is actually you can use to basically

00:08:56.399 --> 00:08:58.120
represent your animation.

00:08:58.320 --> 00:09:00.800
And more importantly, we can modify it.

00:09:01.360 --> 00:09:04.357
So think of it as a JavaScript function where you get

00:09:04.440 --> 00:09:07.880
in a set of keyframes, you put it some parameters,

00:09:08.000 --> 00:09:10.080
then somehow you get a keyframe out.

00:09:10.560 --> 00:09:12.077
Well, it sounds very easy, right?

00:09:12.160 --> 00:09:15.320
But wait, how do we write that function?

00:09:15.680 --> 00:09:18.077
Luckily there's the work that our choreographer

00:09:18.160 --> 00:09:18.876
have done for us.

00:09:18.959 --> 00:09:20.920
Remember, the six elements?

00:09:21.120 --> 00:09:23.397
The theory is with these six elements

00:09:23.480 --> 00:09:25.759
you can compose any kind of dance.

00:09:26.160 --> 00:09:28.677
So theoretically we should be able to use it

00:09:28.760 --> 00:09:29.840
as our transform.

00:09:30.279 --> 00:09:33.720
If we can write these sets of algorithms

00:09:33.839 --> 00:09:36.400
in a way that you can represent it in computer,

00:09:36.640 --> 00:09:39.159
then yeah, you get a dance generating machine.

00:09:39.480 --> 00:09:40.600
But how does it work?

00:09:41.200 --> 00:09:43.800
So let me show you a very simple example.

00:09:44.000 --> 00:09:45.756
So this is the one we actually use,

00:09:45.839 --> 00:09:47.200
called โอริ energy.

00:09:47.600 --> 00:09:50.480
So some elements you can interpret it very simply.

00:09:51.000 --> 00:09:53.357
For example, if you think about it,

00:09:53.440 --> 00:09:56.040
what happens when the energy goes down?

00:09:56.720 --> 00:09:58.436
Your body kind of slows, right?

00:09:58.519 --> 00:09:59.999
The movement kind of slows.

00:10:00.320 --> 00:10:03.077
So you can basically just divide the keyframe

00:10:03.160 --> 00:10:05.477
a little bit to basically make the movement

00:10:05.560 --> 00:10:06.800
in each part slower.

00:10:07.160 --> 00:10:09.397
So your hand might move a little bit slower,

00:10:09.480 --> 00:10:11.120
but your legs might be very fast.

00:10:11.480 --> 00:10:14.239
So you can do keyframe manipulation with that.

00:10:14.720 --> 00:10:16.120
And let's see if it works.

00:10:16.640 --> 00:10:17.957
So here's a little quick demo.

00:10:18.040 --> 00:10:20.320
So if I do energy, upper body,

00:10:20.800 --> 00:10:22.440
and modify it a little bit to be 12%,

00:10:23.959 --> 00:10:26.080
then you can see the movement kind of stops.

00:10:26.519 --> 00:10:28.840
It becomes like very, very slow.

00:10:29.920 --> 00:10:31.797
So that's very simple, right?

00:10:31.880 --> 00:10:34.360
But what if you go a little bit more complex?

00:10:34.640 --> 00:10:36.357
What if you want to represent something like

00:10:36.440 --> 00:10:37.800
external body space?

00:10:38.040 --> 00:10:41.237
So in Thai, this is ช่องว่างรอบๆร่างกาย.

00:10:41.320 --> 00:10:43.360
It's the space that surrounds your body.

00:10:44.000 --> 00:10:45.517
How do you represent that in code?

00:10:45.600 --> 00:10:46.320
I don't know.

00:10:46.720 --> 00:10:49.397
But of course we have to make an interpretation,

00:10:49.480 --> 00:10:50.320
because this is art.

00:10:50.760 --> 00:10:52.917
You have to basically try to interpret it

00:10:53.000 --> 00:10:54.360
into what computer can do.

00:10:54.920 --> 00:10:56.876
And an idea that the team came up with

00:10:56.959 --> 00:10:58.039
is freeze frame.

00:10:58.639 --> 00:11:00.320
What happens if you freeze your body?

00:11:00.880 --> 00:11:03.640
You get to see all the parts that surrounds you,

00:11:03.959 --> 00:11:05.520
the parts between your body.

00:11:05.959 --> 00:11:08.797
So the choreographer thinks when you're freezing,

00:11:08.880 --> 00:11:10.797
or when you're slowing down the movement,

00:11:10.880 --> 00:11:12.999
you see more external body space.

00:11:13.519 --> 00:11:15.717
So algorithmically what you have to do is

00:11:15.800 --> 00:11:18.277
you have to find a point where there's not much

00:11:18.360 --> 00:11:21.359
activity, where the movement is kind of very slow,

00:11:21.600 --> 00:11:23.320
and then you freeze it in time.

00:11:23.600 --> 00:11:24.919
You freeze the moment.

00:11:25.120 --> 00:11:26.837
So how do you write that in JavaScript?

00:11:26.920 --> 00:11:28.760
It's actually not easy.

00:11:29.320 --> 00:11:30.960
It's actually like a lot of code,

00:11:31.279 --> 00:11:33.797
but what you're doing is you try to find a valley

00:11:33.880 --> 00:11:35.920
in a graph with low change.

00:11:36.200 --> 00:11:38.717
And finally what you do is you add a little offset.

00:11:38.800 --> 00:11:41.160
So instead of the movement being fast,

00:11:41.480 --> 00:11:44.319
it's actually have some delay where it's not doing

00:11:45.120 --> 00:11:45.760
anything.

00:11:46.120 --> 00:11:48.316
So those two are quite simple,

00:11:48.399 --> 00:11:49.556
but there are something that might be

00:11:49.639 --> 00:11:51.196
a little bit more difficult.

00:11:51.279 --> 00:11:54.240
For example, how do you make a movement less curvy?

00:11:54.680 --> 00:11:56.797
What you might do is you might apply a filter,

00:11:56.880 --> 00:11:58.840
like high-pass filter to the graph.

00:11:59.240 --> 00:12:01.880
So instead of something being very curvy,

00:12:02.040 --> 00:12:03.800
if you apply a high-pass filter,

00:12:04.000 --> 00:12:05.879
it would get rid of some of the curve,

00:12:06.040 --> 00:12:07.600
and maybe you get a straight line.

00:12:07.959 --> 00:12:10.198
So by manipulating those kind of keyframes,

00:12:10.839 --> 00:12:12.917
you can do a lot of programming already,

00:12:13.000 --> 00:12:14.960
and you can already create new dance.

00:12:15.240 --> 00:12:17.357
You can also use some more complex algorithm

00:12:17.440 --> 00:12:19.439
like inverse kinematics, or IK,

00:12:19.800 --> 00:12:21.600
which is what they use in animation,

00:12:21.760 --> 00:12:24.119
to move something toward a point.

00:12:24.519 --> 00:12:26.436
But this is obviously a lot more complex

00:12:26.519 --> 00:12:27.440
than the other.

00:12:28.040 --> 00:12:30.756
But if you think of it like function composition,

00:12:30.839 --> 00:12:33.717
you have the first dance, the original Thai dance

00:12:33.800 --> 00:12:36.277
as an input, and then as you add it to your

00:12:36.360 --> 00:12:39.477
transformation function, you're composing a function.

00:12:39.560 --> 00:12:42.560
And the end result of that function is new dance.

00:12:43.160 --> 00:12:45.439
So that's basically how the program works.

00:12:45.720 --> 00:12:48.439
You have a transform function that takes a old dance,

00:12:48.600 --> 00:12:50.879
apply some parameter, and you get a new dance.

00:12:51.360 --> 00:12:53.756
And of course we have to make this quite parametric

00:12:53.839 --> 00:12:56.316
because you can make the dance, for example,

00:12:56.399 --> 00:12:57.677
you can add a lot of curve,

00:12:57.760 --> 00:12:59.917
or you can make it perfectly straight.

00:13:00.000 --> 00:13:02.717
So you can add some parameter to these,

00:13:02.800 --> 00:13:05.480
or set some value constraints.

00:13:05.600 --> 00:13:08.797
But a big question, how do you make it interactive?

00:13:08.880 --> 00:13:11.397
How do you make it so that people in the show

00:13:11.480 --> 00:13:12.319
can play with it?

00:13:12.600 --> 00:13:15.600
Because it's a dance, it's a performance.

00:13:15.720 --> 00:13:18.277
So what we decided to do is to go with

00:13:18.360 --> 00:13:21.517
a very simple stepper UI, where you can basically

00:13:21.600 --> 00:13:25.280
talk into a microphone like, "Energy, body, 12,"

00:13:26.240 --> 00:13:28.239
and the program would understand that.

00:13:28.839 --> 00:13:30.959
Okay, I have another Dora thing for you.

00:13:31.160 --> 00:13:32.720
What API do you think it is?

00:13:33.160 --> 00:13:35.681
WebOTP, Speech, MIDI, or WebTunnel?

00:13:36.399 --> 00:13:39.120
Okay, who thinks it's WebOTP, raise your hand?

00:13:39.519 --> 00:13:41.120
Who thinks it's Web Speech?

00:13:41.560 --> 00:13:42.840
Who thinks it's Web MIDI?

00:13:43.360 --> 00:13:44.760
And who thinks it's WebTunnel?

00:13:45.760 --> 00:13:46.160
Okay.

00:13:46.760 --> 00:13:48.517
Oh yeah, that one would make the most money,

00:13:48.600 --> 00:13:50.360
but sorry, it's not the correct one.

00:13:50.639 --> 00:13:52.960
So you can actually use Web Speech for this.

00:13:53.079 --> 00:13:55.556
So at first I thought we need to do some WebSocket

00:13:55.639 --> 00:13:58.280
thing to get the audio data, but actually no.

00:13:58.600 --> 00:14:01.239
There's an API that kind of takes in your sound,

00:14:01.519 --> 00:14:04.316
and you can already do speech recognition.

00:14:04.399 --> 00:14:07.037
The bad part is, is actually not very good with

00:14:07.120 --> 00:14:09.479
something like a stepper command,

00:14:09.720 --> 00:14:11.876
because the choices is very restricted.

00:14:11.959 --> 00:14:14.080
So I end up having to write like a thousand lines

00:14:14.279 --> 00:14:17.440
of regex to actually correct the command.

00:14:17.639 --> 00:14:19.840
So it's a little bit hacky, but it works.

00:14:20.000 --> 00:14:22.597
So just to summarize, we have the pre-recorded

00:14:22.680 --> 00:14:25.517
movement, and we apply some transformation,

00:14:25.600 --> 00:14:28.520
for example, applying energy, applying delay.

00:14:28.839 --> 00:14:30.837
And then with those set of operations,

00:14:30.920 --> 00:14:33.840
we're able to create new dance.

00:14:34.440 --> 00:14:36.800
Okay, so just to show you another demo again.

00:14:36.920 --> 00:14:39.556
So what happens if, okay, so in the show

00:14:39.639 --> 00:14:41.680
we would have dancer selection.

00:14:41.839 --> 00:14:43.556
So you would be able to select the dancer

00:14:43.639 --> 00:14:46.157
to your stage, and then you would do commands

00:14:46.240 --> 00:14:50.040
like rotations, Y, and

00:14:51.480 --> 00:14:52.320
For example, 94.

00:14:52.600 --> 00:14:55.520
And then it would kind of change that avatar life.

00:14:56.120 --> 00:14:58.157
But I think the interesting thing for me is not

00:14:58.240 --> 00:15:00.756
the dance itself, but the people who play with

00:15:00.839 --> 00:15:01.680
the program.

00:15:01.959 --> 00:15:03.917
Because if you have the program, I think it's very

00:15:04.000 --> 00:15:04.560
boring.

00:15:04.839 --> 00:15:07.397
But in this case, we have microphone, for example,

00:15:07.480 --> 00:15:10.399
for me, and we pass the microphone to the audience.

00:15:10.720 --> 00:15:13.037
And I think the amazing thing is you get to see

00:15:13.120 --> 00:15:16.079
the people try to dance with the avatar,

00:15:16.360 --> 00:15:19.676
try to give new commands, like energy or circle

00:15:19.759 --> 00:15:20.600
and curve.

00:15:20.839 --> 00:15:22.837
And then you get to see people just play with

00:15:22.920 --> 00:15:24.120
the technology.

00:15:24.240 --> 00:15:26.637
And I think my goal as a programmer would be to

00:15:26.720 --> 00:15:29.519
create software where people would be able to

00:15:29.759 --> 00:15:30.600
think about it,

00:15:30.720 --> 00:15:34.316
or where people would try to basically have fun

00:15:34.399 --> 00:15:34.759
with it.

00:15:34.959 --> 00:15:37.316
So I think this is one of the projects where I'm

00:15:37.399 --> 00:15:39.760
very happy with because I got to see that.

00:15:40.440 --> 00:15:41.280
All right.

00:15:41.800 --> 00:15:43.360
So that's our first part done.

00:15:43.680 --> 00:15:45.436
For the second part, it's going to be a little bit

00:15:45.519 --> 00:15:46.159
shorter.

00:15:46.319 --> 00:15:48.717
So this is a project I did with my Singaporean

00:15:48.800 --> 00:15:50.040
artist friend, Ruian Ho Rui An.

00:15:50.560 --> 00:15:53.996
So he's very interested in Singapore's history.

00:15:54.079 --> 00:15:56.800
So Ruian is actually a Singaporean artist,

00:15:57.079 --> 00:15:59.517
and he's interested in basically how the history

00:15:59.600 --> 00:16:02.759
of Singapore kind of maps into the history of AI.

00:16:03.480 --> 00:16:06.196
And I think this is actually really interesting,

00:16:06.279 --> 00:16:09.996
and as an artist, he kind of do this in the form

00:16:10.079 --> 00:16:12.399
of a performance lecture.

00:16:13.240 --> 00:16:13.517
Okay.

00:16:13.600 --> 00:16:16.116
So a performance lecture is kind of like a lecture

00:16:16.199 --> 00:16:17.996
that you might see in the university,

00:16:18.079 --> 00:16:20.157
except that it's a lot more energy, like a lot

00:16:20.240 --> 00:16:21.436
more performative.

00:16:21.519 --> 00:16:24.477
You are trying to do it as if you're doing it as

00:16:24.560 --> 00:16:26.360
a form of performance.

00:16:26.480 --> 00:16:29.917
So it is pretty nuanced, and you can use some

00:16:30.000 --> 00:16:31.680
a lot of interactive things with it.

00:16:32.040 --> 00:16:34.996
But when I met Ruian, I actually did a little

00:16:35.079 --> 00:16:36.320
different project.

00:16:36.680 --> 00:16:39.917
So I did this basically a diffusion project where

00:16:40.000 --> 00:16:42.800
I take in the photo from the National Archive.

00:16:43.160 --> 00:16:45.517
So for example, in Thailand, we have something like

00:16:45.600 --> 00:16:48.359
หอจดหมายเหตุ or we have something like หอสมุดแห่งชาติ,

00:16:49.199 --> 00:16:51.436
and you would have a lot of photo where you are

00:16:51.519 --> 00:16:53.957
able to take those photo and put it into

00:16:54.040 --> 00:16:55.080
a diffusion model.

00:16:55.360 --> 00:16:57.680
And you start to see some patterns in the data.

00:16:58.040 --> 00:17:00.479
For example, I started to see a lot of trees

00:17:01.000 --> 00:17:03.236
because there's a lot of photo with tree in

00:17:03.319 --> 00:17:05.797
Singapore's National Library because they want to

00:17:05.880 --> 00:17:07.157
go green or whatever.

00:17:07.240 --> 00:17:09.397
So you get to see a lot of these interesting

00:17:09.480 --> 00:17:10.200
patterns.

00:17:10.319 --> 00:17:12.236
Another thing that I also get to do is an

00:17:12.319 --> 00:17:16.236
automated exhibition because the talk there might

00:17:16.319 --> 00:17:18.479
only be done a couple of times a year,

00:17:18.760 --> 00:17:21.680
but you want exhibition to go on all year.

00:17:22.880 --> 00:17:25.080
The technology here is actually quite simple.

00:17:25.280 --> 00:17:28.517
So we use Hugging Face diffusers, which is like

00:17:28.600 --> 00:17:30.716
a Python library that you can use to generate

00:17:30.799 --> 00:17:31.359
images.

00:17:31.640 --> 00:17:34.040
And then we basically open a WebSocket tunnel

00:17:34.400 --> 00:17:35.280
connection.

00:17:35.400 --> 00:17:37.476
So you can do a lot of cool things with it.

00:17:37.559 --> 00:17:40.237
The first thing we did is live transcription.

00:17:40.320 --> 00:17:43.037
So as Ruian, the artist, is speaking into the

00:17:43.120 --> 00:17:43.997
microphone,

00:17:44.080 --> 00:17:47.677
the Web Speech API takes in that, transcribes that,

00:17:47.760 --> 00:17:49.240
and generates new image.

00:17:49.720 --> 00:17:52.877
So you get to see this juxtaposition of what

00:17:52.960 --> 00:17:56.277
Singaporean artist is showing in his slide versus

00:17:56.360 --> 00:17:59.279
what the Western AI kind of thinks about it.

00:17:59.559 --> 00:18:02.917
So because of the training data, the image that's

00:18:03.000 --> 00:18:05.760
being generated is very weird and very out of

00:18:06.280 --> 00:18:06.840
context.

00:18:07.280 --> 00:18:09.716
Another thing that we did is we want to visualize

00:18:09.799 --> 00:18:10.880
diffusion steps.

00:18:11.280 --> 00:18:13.197
So if you don't know what that is, it's something

00:18:13.280 --> 00:18:13.920
like this.

00:18:14.440 --> 00:18:17.277
So when you're actually generating image with

00:18:17.360 --> 00:18:18.519
a diffusion model,

00:18:19.039 --> 00:18:22.640
first it has a noise image, and then it tries to

00:18:22.799 --> 00:18:26.317
convert that noise little by little into a target

00:18:26.400 --> 00:18:26.800
image.

00:18:27.400 --> 00:18:30.117
So we want to be able to showcase this kind of

00:18:30.200 --> 00:18:30.760
effect.

00:18:30.880 --> 00:18:33.836
So people that are visiting the exhibition or

00:18:33.919 --> 00:18:34.640
the gallery,

00:18:34.880 --> 00:18:38.080
they started to understand how the diffusion works.

00:18:38.600 --> 00:18:41.517
So we use a pretty simple algorithm here that

00:18:41.600 --> 00:18:45.716
basically takes in what the AI step is doing in

00:18:45.799 --> 00:18:48.320
that latent space and convert it to RGB.

00:18:49.000 --> 00:18:51.437
So you get to see something like this happening

00:18:51.520 --> 00:18:53.520
in real time.

00:18:54.200 --> 00:18:57.037
Yeah, so you get to see this kind of nice step

00:18:57.120 --> 00:18:58.120
of how it works.

00:19:00.400 --> 00:19:02.917
Yeah, and a final thing that I did on this project,

00:19:03.000 --> 00:19:06.080
which is quite interesting, is exhibition automation.

00:19:06.200 --> 00:19:09.800
So, because Rian only gives a talk maybe five times a year,

00:19:10.000 --> 00:19:12.600
we wanted to be able to show all year round.

00:19:12.799 --> 00:19:16.157
But the problem is there's like a lot of keystrokes

00:19:16.240 --> 00:19:17.440
that are happening.

00:19:17.720 --> 00:19:20.157
So, what we did is we basically tried to capture

00:19:20.240 --> 00:19:23.237
every action that he did in the performance,

00:19:23.320 --> 00:19:26.480
and we tried to capture that into JSON.

00:19:27.080 --> 00:19:29.237
And then once he's doing something,

00:19:29.320 --> 00:19:32.520
for example, he's moving the slider in the program,

00:19:32.960 --> 00:19:36.680
the program is basically trying to regenerate that.

00:19:36.840 --> 00:19:39.237
So, it's basically trying to replicate what he did

00:19:39.320 --> 00:19:41.197
in the installation.

00:19:41.280 --> 00:19:44.357
So far, I think this project is a very short one,

00:19:44.440 --> 00:19:46.720
but I think it's kind of interesting to see

00:19:46.960 --> 00:19:50.119
how you can use basically a very simple program

00:19:50.240 --> 00:19:53.240
to demonstrate your points or arts.

00:19:53.760 --> 00:19:55.760
Okay, so here's my last project,

00:19:55.919 --> 00:19:58.677
and I think this is my personal side project

00:19:58.760 --> 00:19:60.000
which I'm very proud of,

00:20:00.440 --> 00:20:02.479
and it's called Visual Assembly Canvas.

00:20:02.919 --> 00:20:06.439
So, the idea is what happens if you can write assembly,

00:20:06.799 --> 00:20:08.399
but in this assembly,

00:20:08.559 --> 00:20:10.800
you can connect it to everything in the world.

00:20:10.960 --> 00:20:13.640
You can write assembly to generate new music.

00:20:13.919 --> 00:20:16.917
You can write assembly to basically write

00:20:17.000 --> 00:20:18.600
your own custom program,

00:20:18.799 --> 00:20:22.840
and you're able to use it with your media hardware.

00:20:23.200 --> 00:20:25.037
And I think this project actually started

00:20:25.120 --> 00:20:27.280
with me interested in assembly.

00:20:27.640 --> 00:20:30.680
So, for me, I'm very interested in old computer,

00:20:30.799 --> 00:20:32.320
and I think these days,

00:20:32.440 --> 00:20:33.517
when we write JavaScript,

00:20:33.600 --> 00:20:36.519
we're very far from the origin of the computer.

00:20:36.799 --> 00:20:38.596
We have a lot of abstraction,

00:20:38.679 --> 00:20:41.076
and it's very different from people who are in

00:20:41.159 --> 00:20:43.320
the homebrew computer club of the past.

00:20:43.760 --> 00:20:44.317
Like a lot of them,

00:20:44.400 --> 00:20:46.200
they're writing very low-level tools.

00:20:46.600 --> 00:20:49.680
So, there's a game I used to play called Shenzhen I/O.

00:20:50.200 --> 00:20:56.880
So, in this game, you can write custom assembly code

00:20:57.039 --> 00:20:58.239
to solve a puzzle,

00:20:58.440 --> 00:21:01.519
and this is very similar to real assembly.

00:21:01.799 --> 00:21:03.437
And it is a very weird game.

00:21:03.520 --> 00:21:06.120
Like you can print out a printout chart,

00:21:06.400 --> 00:21:10.680
and you can try to construct your own little circuits.

00:21:10.960 --> 00:21:12.679
So, my question is this,

00:21:12.840 --> 00:21:15.600
how hard would it be to write your own OS?

00:21:16.440 --> 00:21:17.797
And honestly, at first,

00:21:17.880 --> 00:21:19.559
I think it was going to be very hard,

00:21:19.840 --> 00:21:21.076
but I see a lot of people,

00:21:21.159 --> 00:21:23.880
for example, the guys who did UXN and Warara.

00:21:24.559 --> 00:21:26.639
So, it's kind of like a group of people

00:21:26.919 --> 00:21:29.560
who try to create their own operating system

00:21:29.840 --> 00:21:32.440
and try to write things with assembly first.

00:21:32.720 --> 00:21:35.317
So, for example, these programs,

00:21:35.400 --> 00:21:39.196
like the clock, the calendar, and the calculator,

00:21:39.279 --> 00:21:40.920
they're all written with assembly,

00:21:41.039 --> 00:21:43.200
and the OS is written with assembly.

00:21:43.480 --> 00:21:46.397
And he's trying to basically try to do

00:21:46.480 --> 00:21:47.956
a personal compute environment

00:21:48.039 --> 00:21:50.240
where you're not dependent on compilers,

00:21:50.440 --> 00:21:52.960
where you're not really dependent on much software.

00:21:53.200 --> 00:21:56.117
So, you can see you can write all these with assembly,

00:21:56.200 --> 00:21:57.720
which is very hardcore.

00:21:58.080 --> 00:21:59.357
But I think this is going to help me

00:21:59.440 --> 00:22:01.400
to learn a lot as a developer.

00:22:01.600 --> 00:22:03.360
Like I think it's going to help me to learn

00:22:03.520 --> 00:22:06.399
how the computer works and just improve my skill.

00:22:06.840 --> 00:22:09.716
So, I first set a goal for myself,

00:22:09.799 --> 00:22:13.679
which is, can you write your own stack machine?

00:22:14.640 --> 00:22:16.037
But at first, I thought it was going to be

00:22:16.120 --> 00:22:16.836
a quick project,

00:22:16.919 --> 00:22:19.000
but it took me 320 hours,

00:22:19.360 --> 00:22:21.600
which is a little bit longer than I expected

00:22:21.840 --> 00:22:23.320
and a lot of commits.

00:22:23.600 --> 00:22:26.357
But what I ended up doing at first is this,

00:22:26.440 --> 00:22:28.320
you're able to write some very simple

00:22:28.520 --> 00:22:29.596
stack machine assembly.

00:22:29.679 --> 00:22:31.080
For example, push 10, push 25,

00:22:32.000 --> 00:22:33.437
you multiply together,

00:22:33.520 --> 00:22:37.000
and the program is able to execute that assembly.

00:22:37.360 --> 00:22:38.000
Okay, cool.

00:22:38.520 --> 00:22:41.559
And the software I used with this is React Flow.

00:22:41.799 --> 00:22:43.877
So, this is a React library that you can use

00:22:43.960 --> 00:22:45.760
to create a diagram,

00:22:46.080 --> 00:22:49.919
and you can create new nodes and connect them together.

00:22:50.279 --> 00:22:51.076
Yeah, and for this one,

00:22:51.159 --> 00:22:52.880
I used React and Rust.

00:22:53.159 --> 00:22:54.956
So, the reason I went with Rust is

00:22:55.039 --> 00:22:58.200
I want my assembly to be able to run on actual hardware.

00:22:58.520 --> 00:23:00.917
So, someday I want to have something like an Arduino

00:23:01.000 --> 00:23:03.600
and use my assembly in there.

00:23:04.120 --> 00:23:05.076
Yeah, and with React,

00:23:05.159 --> 00:23:07.840
I think it's quite straightforward.

00:23:08.000 --> 00:23:10.440
I think one interesting thing is Lexure,

00:23:10.600 --> 00:23:12.076
which is a library that helps you

00:23:12.159 --> 00:23:14.639
to write your own language.

00:23:14.880 --> 00:23:17.879
So, here you can see we have some syntax highlighting here.

00:23:18.520 --> 00:23:22.279
This is thanks to the power of CodeMirror and Lexure.

00:23:22.799 --> 00:23:25.520
Okay, so how do I create this program?

00:23:25.760 --> 00:23:27.679
Let's go with the very first.

00:23:27.919 --> 00:23:30.076
So, we want to build a computer, right?

00:23:30.159 --> 00:23:32.040
How do you do that very quickly?

00:23:32.159 --> 00:23:33.880
Of course, you're going to need a memory.

00:23:34.400 --> 00:23:37.640
So this is like a raw memory, if I understand correctly.

00:23:37.840 --> 00:23:41.119
So what I did is I basically allocated a part of memory.

00:23:41.320 --> 00:23:42.679
I divided into chunk.

00:23:43.080 --> 00:23:44.797
So one chunk would be for the code,

00:23:44.880 --> 00:23:46.239
one chunk would be for the data,

00:23:46.520 --> 00:23:48.080
one chunk would be for the stack.

00:23:48.520 --> 00:23:52.000
And then you basically write some stack manipulation program.

00:23:52.200 --> 00:23:55.757
You create some register so that you know where in the program

00:23:55.840 --> 00:23:56.600
is pointing to.

00:23:57.120 --> 00:23:59.840
And then you do a fetch, decode, execute cycle.

00:24:00.039 --> 00:24:03.440
So it is able to read what instruction you are at.

00:24:03.720 --> 00:24:06.157
For example, you want to add two numbers together,

00:24:06.240 --> 00:24:07.679
you want to multiply them,

00:24:07.960 --> 00:24:10.277
and then it's going to run that instruction.

00:24:10.360 --> 00:24:13.677
So I written this in Rust and basically I try to write

00:24:13.760 --> 00:24:16.277
like for each instruction, what is it going to do?

00:24:16.360 --> 00:24:17.157
Is it going to add?

00:24:17.240 --> 00:24:18.319
Is it going to push?

00:24:18.919 --> 00:24:21.037
And I think this is really all you need to make

00:24:21.120 --> 00:24:25.080
a very functional, like simple stack machine.

00:24:25.520 --> 00:24:25.920
Yeah.

00:24:26.080 --> 00:24:28.399
So this is how it looks like at the very start

00:24:28.520 --> 00:24:29.839
of the project.

00:24:30.000 --> 00:24:32.877
So I made it so that it kind of highlights like where

00:24:32.960 --> 00:24:34.639
in the execution is going on.

00:24:35.080 --> 00:24:37.679
So now it works like as an accumulator.

00:24:37.799 --> 00:24:39.319
So kind of like a for loop.

00:24:39.919 --> 00:24:43.716
Okay, so we now have a computer, but is this cool?

00:24:43.799 --> 00:24:44.956
For me, not yet.

00:24:45.039 --> 00:24:46.596
I think like there must be something more

00:24:46.679 --> 00:24:47.360
that we can do.

00:24:47.960 --> 00:24:50.357
So I went to an EDM concert.

00:24:50.440 --> 00:24:51.960
I know, very weird tangent.

00:24:52.200 --> 00:24:55.760
So in this EDM concert, I see people that use data

00:24:56.399 --> 00:24:58.480
to basically create new music,

00:24:58.720 --> 00:24:59.960
to create new sounds,

00:25:00.080 --> 00:25:01.320
to create new visual.

00:25:01.440 --> 00:25:03.476
And I think it's like, wow, this is like a new world

00:25:03.559 --> 00:25:04.000
for me.

00:25:04.440 --> 00:25:07.476
You can see like playing with numbers can result

00:25:07.559 --> 00:25:09.000
in so many cool sounds.

00:25:09.360 --> 00:25:11.076
And even creators garden themselves,

00:25:11.159 --> 00:25:12.840
we organize an event called Algorave,

00:25:13.360 --> 00:25:16.680
which is an event that we invite people to use algorithms,

00:25:16.880 --> 00:25:17.877
to use JavaScript,

00:25:17.960 --> 00:25:18.320
to use P5,

00:25:19.320 --> 00:25:21.196
to basically create their own sounds

00:25:21.279 --> 00:25:22.920
or create their own visual.

00:25:23.360 --> 00:25:25.157
So now I feel inspired.

00:25:25.240 --> 00:25:28.559
What happens if you can write assembly to do all that?

00:25:29.120 --> 00:25:31.519
That's weird, but maybe it works.

00:25:31.799 --> 00:25:34.719
Because in the world of people who are doing live coding,

00:25:34.919 --> 00:25:37.720
they already use tools that look very similar to this.

00:25:37.880 --> 00:25:40.557
So for example, a lot of artists use something called

00:25:40.640 --> 00:25:41.359
Pure Data,

00:25:41.840 --> 00:25:44.877
which is you basically create individual sine waves,

00:25:44.960 --> 00:25:47.240
you create individual square waves, noise,

00:25:47.399 --> 00:25:48.956
and connect them together.

00:25:49.039 --> 00:25:50.639
A program like Max MSP.

00:25:51.399 --> 00:25:53.117
And I think if they can do it,

00:25:53.200 --> 00:25:54.560
then I think I can do it too.

00:25:54.880 --> 00:25:57.719
So I started basically diagramming a little bit

00:25:57.919 --> 00:25:59.880
how I want the program to look like.

00:26:00.399 --> 00:26:03.037
And another thing I noticed is that a lot of these programs,

00:26:03.120 --> 00:26:06.517
they use actor model because each block has to send

00:26:06.600 --> 00:26:08.360
a message to the other block.

00:26:08.799 --> 00:26:12.277
So I program and I'm also inspired by this example

00:26:12.360 --> 00:26:14.797
in Minecraft where each block can send message

00:26:14.880 --> 00:26:16.877
to another block and you can create

00:26:16.960 --> 00:26:18.640
a fully functional program.

00:26:19.000 --> 00:26:23.280
So I started to like this message passing system

00:26:23.520 --> 00:26:26.117
where you can connect one machine to the output

00:26:26.200 --> 00:26:27.520
of another machine.

00:26:27.720 --> 00:26:30.160
So output of this to the input of this.

00:26:30.480 --> 00:26:32.357
Then you're able to basically compose

00:26:32.440 --> 00:26:34.239
a more complex program.

00:26:34.679 --> 00:26:37.200
And with actor model, it's very simple.

00:26:37.600 --> 00:26:39.277
You are able to send some message,

00:26:39.360 --> 00:26:41.120
you are able to receive a message.

00:26:41.360 --> 00:26:44.040
And then I built some kind of little inspector.

00:26:44.320 --> 00:26:46.476
So because I think when you're writing assembly,

00:26:46.559 --> 00:26:48.196
it's very difficult to know like,

00:26:48.279 --> 00:26:49.677
what the hell is this memory?

00:26:49.760 --> 00:26:50.839
What is that memory?

00:26:51.080 --> 00:26:52.320
Like, I don't know any of it.

00:26:52.679 --> 00:26:55.440
But if you're able to drag it into a workspace,

00:26:55.600 --> 00:26:58.200
then you know like what that piece of memory is for

00:26:58.559 --> 00:27:00.040
and how it's changed.

00:27:00.480 --> 00:27:03.237
And I started to add like some simple function,

00:27:03.320 --> 00:27:06.199
for example, an oscillator.

00:27:06.399 --> 00:27:08.959
So now you're able to take in a clock input

00:27:09.360 --> 00:27:12.360
and you're able to basically play with it.

00:27:13.120 --> 00:27:15.720
One of the last thing I did is add a command palette.

00:27:16.120 --> 00:27:19.157
So now you can basically add new blocks together.

00:27:19.240 --> 00:27:20.480
You can add a plotter.

00:27:20.840 --> 00:27:22.120
You can plot that data.

00:27:22.320 --> 00:27:24.119
You can connect it together.

00:27:24.399 --> 00:27:25.917
So this is like a sine wave.

00:27:26.000 --> 00:27:29.880
You can select what waveform you want and then you plot it.

00:27:30.640 --> 00:27:33.840
So in here, like in a very small amount of code,

00:27:34.039 --> 00:27:37.239
you can already create like all sorts of complex things.

00:27:37.600 --> 00:27:40.959
And I think this really helps me to be able to prototype.

00:27:41.159 --> 00:27:43.400
Like if I want to create a program,

00:27:43.960 --> 00:27:45.800
I don't have to really write assembly,

00:27:45.960 --> 00:27:48.559
but I can kind of connect things together.

00:27:48.919 --> 00:27:50.760
Okay, and I think this is the last demo.

00:27:51.159 --> 00:27:54.440
So I start to see like the Web MIDI API,

00:27:55.039 --> 00:27:56.997
which I know like you don't need to use MIDI

00:27:57.080 --> 00:27:57.877
only for music.

00:27:57.960 --> 00:27:58.200
No.

00:27:58.600 --> 00:28:00.557
You can use MIDI for everything.

00:28:00.640 --> 00:28:03.316
So I started using Web MIDI as like a control

00:28:03.399 --> 00:28:06.517
or as an input where you can enter something

00:28:06.600 --> 00:28:09.476
into the launchpad and then it can be interpreted

00:28:09.559 --> 00:28:11.040
into the program.

00:28:11.480 --> 00:28:14.316
And finally, this is like kind of the last thing

00:28:14.399 --> 00:28:15.757
I did with this project,

00:28:15.840 --> 00:28:17.999
which is like, do you know Bad Apple?

00:28:18.279 --> 00:28:19.879
Anyone here know Bad Apple?

00:28:20.399 --> 00:28:20.719
Okay.

00:28:20.840 --> 00:28:22.277
So I, not a lot of you know.

00:28:22.360 --> 00:28:25.240
So it is kind of like a programming challenge.

00:28:25.440 --> 00:28:26.959
The challenge is very easy.

00:28:27.279 --> 00:28:30.316
There's a couple of video frames from the music video

00:28:30.399 --> 00:28:31.000
of Bad Apple.

00:28:31.399 --> 00:28:32.797
Can you make it run anywhere?

00:28:32.880 --> 00:28:34.640
Can you make it run on your toaster?

00:28:34.919 --> 00:28:37.000
Can you make it run on your fridge?

00:28:37.440 --> 00:28:40.520
And a lot of people try to do this challenge.

00:28:40.720 --> 00:28:42.956
So, yeah, at the end of this project,

00:28:43.039 --> 00:28:45.599
I was able to get this working.

00:28:47.640 --> 00:28:51.280
Okay, but I think this is now not working.

00:28:51.720 --> 00:28:54.360
But we're at the last slide, so it's going to be fine.

00:28:54.960 --> 00:28:55.344
ได้นะฮะ

00:29:05.504 --> 00:29:05.760
Uh oh.

00:29:06.440 --> 00:29:13.640
I think we're lucky because this is the last slide.

00:29:14.240 --> 00:29:16.119
Does it work?

00:29:16.799 --> 00:29:18.360
Okay, it works.

00:29:20.120 --> 00:29:23.117
Yeah, so that's like the last thing I did on this project.

00:29:23.200 --> 00:29:25.760
And it's very fascinating how you can get from

00:29:26.080 --> 00:29:27.637
"I want to create a computer"

00:29:27.720 --> 00:29:29.316
to write your own assembly

00:29:29.399 --> 00:29:32.160
to create a set of things that allows you to play.

00:29:32.760 --> 00:29:36.720
So, this is the end of these sections.

00:29:37.000 --> 00:29:39.316
So I think the two things that I learned from working

00:29:39.399 --> 00:29:42.359
on these really fascinating things.

00:29:42.640 --> 00:29:44.560
First thing for me is follow the fun,

00:29:44.919 --> 00:29:47.436
or more importantly follow what you're nerdy about.

00:29:47.519 --> 00:29:52.000
Like I'm interested in dance someday,

00:29:52.159 --> 00:29:54.080
next day I'm interested in history,

00:29:54.240 --> 00:29:56.797
the next day I'm interested in how computers work

00:29:56.880 --> 00:29:58.040
or how music work.

00:29:58.320 --> 00:30:01.080
And you're kind of able to tie that together.

00:30:01.360 --> 00:30:03.316
And I think the second most important thing is

00:30:03.399 --> 00:30:04.959
try to do hard things.

00:30:05.240 --> 00:30:06.277
Like when we are at work,

00:30:06.360 --> 00:30:09.237
I think a lot of us we just work on crud projects.

00:30:09.320 --> 00:30:11.397
We work on create, read, update, delete.

00:30:11.480 --> 00:30:14.119
We work on something that are maybe not very fun

00:30:14.480 --> 00:30:16.557
or not very technically challenging.

00:30:16.640 --> 00:30:18.316
So I think in your side project

00:30:18.399 --> 00:30:21.277
is kind of an opportunity where you can play

00:30:21.360 --> 00:30:23.000
with any technology you want.

00:30:23.240 --> 00:30:26.479
You can go as crazy as you want with your libraries.

00:30:26.679 --> 00:30:29.757
So I think with this private side project,

00:30:29.840 --> 00:30:31.360
if you just have fun with it,

00:30:31.559 --> 00:30:33.637
if you just try to do things

00:30:33.720 --> 00:30:35.119
that are challenging for you,

00:30:35.440 --> 00:30:37.400
then I think it results in so much fun

00:30:37.519 --> 00:30:39.960
and you can learn a lot from it.

00:30:40.720 --> 00:30:42.159
And I think this is it for today.

00:30:42.559 --> 00:30:43.800
Thank you for listening.

00:30:44.000 --> 00:30:46.080
ขอบคุณครับ

00:30:47.000 --> 00:30:47.600
Okay ฮะ

00:30:48.440 --> 00:30:51.839
Okay, so before we end, two more things.

00:30:52.360 --> 00:30:55.199
First thing is the feedback form, if you could scan it.

00:30:55.559 --> 00:30:58.439
This is for the whole conference, not for this talk.

00:30:58.720 --> 00:31:03.556
So if you have some feedback for the whole conference,

00:31:03.639 --> 00:31:05.760
like how do you feel about the conference,

00:31:05.960 --> 00:31:07.757
what isn't quite good for you,

00:31:07.840 --> 00:31:09.436
what you like about the conference,

00:31:09.519 --> 00:31:13.160
you can share it in the feedback form.

00:31:14.440 --> 00:31:23.680
I'm going to pause for one more minute.

00:31:24.880 --> 00:31:27.480
Assuming everyone have already did that.

00:31:28.639 --> 00:31:31.199
And because this is the last session of today,

00:31:33.919 --> 00:31:36.799
I think let's take a photo quickly, shall we?

00:31:39.880 --> 00:31:41.079
For the feedback form,

00:31:42.159 --> 00:31:45.000
maybe we can take a photo first quickly.

00:31:45.559 --> 00:31:49.319
Or maybe whenever you feel like it.

00:31:50.159 --> 00:31:50.517
มากเลยไหมฮะ

00:31:50.600 --> 00:31:55.279
Yeah, we take photo together.

00:31:55.639 --> 00:31:57.157
So this is the last session,

00:31:57.240 --> 00:32:05.676
so let's do some photos.

00:32:05.759 --> 00:32:05.936
เก็บเข้าๆ ก็ดี

00:32:06.019 --> 00:32:25.236
เอาไปตัด external white space

00:32:25.319 --> 00:32:25.702
เพราะว่าจะได้ไม่บังกล้อง

00:32:25.786 --> 00:32:26.476
It was really nice.

00:32:26.559 --> 00:32:26.716
Thank you.

00:32:26.799 --> 00:32:29.887
like the typical things you have to do as a developer.

00:32:29.970 --> 00:32:32.737
อ่ายืนเรียงกันเลยค่ะ

00:32:32.821 --> 00:32:35.588
รบกวนไม่บังสไลด์นะคะ

00:32:35.672 --> 00:32:38.439
จะได้เห็นสไลด์เต็มๆ นะคะ

00:32:38.523 --> 00:32:39.865
โอเคครับ

00:32:39.948 --> 00:32:42.716
เดี๋ยวยืนเรียงกันนะครับ

00:32:42.799 --> 00:32:44.920
Could you stand in one row, I think?

00:32:45.279 --> 00:32:47.320
Maybe one or two rows, so that it doesn't-
