WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:00.000 --> 00:00:01.037
โอเคครับ

00:00:01.120 --> 00:00:03.677
ใครสะดวก ใครว่างแล้ว

00:00:03.760 --> 00:00:05.917
มี survey สั้นๆ ให้ทำนะครับ

00:00:06.000 --> 00:00:07.362
คำถามเดียวเท่านั้น

00:00:07.720 --> 00:00:13.119
เดี๋ยวเราจะมาดูผล survey ตอนช่วงต้นของ talk ด้วยนะครับ

00:00:13.799 --> 00:00:17.840
ก็เป็นคำถามเกี่ยวกับเรา style component ยังไงนะครับตอนนี้

00:00:19.920 --> 00:00:23.356
ในนี้มีใครไม่ใช่ frontend มั้ย

00:00:23.439 --> 00:00:26.036
อ๋อ มีไม่ใช่ frontend แต่ว่าชอบ CSS เหรอครับ

00:00:26.119 --> 00:00:29.917
โอเคนะครับ

00:00:30.000 --> 00:00:31.960
สปอยล์นิดนึงแล้วกันนะ talk นี้

00:00:32.480 --> 00:00:35.357
มันจะมีเรื่อง CSS ครึ่งๆ ละกันนะครับ

00:00:35.440 --> 00:00:37.360
ไม่ใช่ JavaScript อย่างเดียว

00:00:37.960 --> 00:00:42.476
ถือว่าเป็น talk ที่หลุดออกมานิดนึงนะครับ

00:00:42.559 --> 00:00:44.717
วันนี้เราฟัง JavaScript มากันเยอะแล้ว

00:00:44.800 --> 00:00:50.920
น่าจะปวดหัวกันมากขึ้นนะครับ

00:00:51.960 --> 00:00:58.077
โอเค เดี๋ยวระหว่างที่ทุกคนทำตัว survey นะ

00:00:58.160 --> 00:00:59.120
มีคำถามเดียวนะครับ

00:01:00.160 --> 00:01:01.677
ใครที่ตอนนี้เพิ่งมานะครับ

00:01:01.760 --> 00:01:04.679
อยากให้สแกนแล้วก็ช่วยตอบคำถามหน่อยว่า

00:01:05.080 --> 00:01:09.000
ตอนนี้เรา style component ของเราด้วยวิธีอะไรกันบ้างนะครับ

00:01:09.680 --> 00:01:11.076
เดี๋ยวระหว่างที่ทุกคนสแกน

00:01:11.159 --> 00:01:16.640
เดี๋ยวจะแนะนำตัวแล้วก็ intro เร็วๆ นะครับเกี่ยวกับ talk นี้

00:01:17.000 --> 00:01:21.557
โอเคครับ ก็สวัสดีทุกคนนะครับ

00:01:21.640 --> 00:01:22.759
ผมชื่อจุ้นนะครับ

00:01:23.200 --> 00:01:27.797
ตอนนี้งานหลักๆ ก็จะเกี่ยวข้องกับทำ user interface บนเว็บนะครับ

00:01:27.880 --> 00:01:32.157
technology หลักๆ ที่ผมใช้เป็นประจำตอนนี้

00:01:32.240 --> 00:01:34.840
ก็จะเป็นเรื่อง CSS กับตัว React นะครับ

00:01:36.280 --> 00:01:38.676
ผมทำงานอยู่ที่บริษัทชื่อ MUI นะครับ

00:01:38.759 --> 00:01:42.797
ก็เป็นบริษัทที่ทำ product เกี่ยวกับ React UI library นะครับ

00:01:42.880 --> 00:01:44.996
ก็จะมีทั้งพวก open source ด้วย

00:01:45.079 --> 00:01:48.039
แล้วก็มีทั้ง paid license ด้วยนะครับ

00:01:48.719 --> 00:01:51.237
โอเคนะครับ สำหรับ talk ในวันนี้

00:01:51.320 --> 00:01:54.479
หัวข้อมันจะ clickbait นิดๆ นะครับ

00:01:54.600 --> 00:02:00.560
ว่าทำไมเราถึงใช้ JavaScript ในเมื่อเรามี CSS มัน possible นะครับ

00:02:01.240 --> 00:02:08.997
โอเค โดยที่เราจะคุยกันถึงเรื่องของการสร้าง reusable UI นะครับ

00:02:09.080 --> 00:02:12.200
แล้วก็เราจะ focus ไปที่เรื่อง styling เลยนะ

00:02:13.080 --> 00:02:14.837
ก็จะเป็นเรื่องเกี่ยวกับ CSS นะครับ

00:02:14.920 --> 00:02:17.397
เราจะไม่ได้คุยกันถึงเรื่องพวก accessibility

00:02:17.480 --> 00:02:20.477
เรื่อง behavior ของ component อะไรพวกนี้ไม่มีนะครับ

00:02:20.560 --> 00:02:23.240
จะเป็นเรื่อง styling ล้วนๆ นะครับ

00:02:23.920 --> 00:02:29.277
โอเค คิดว่าทุกคนน่าจะตอบ survey กันไปแล้วนะครับ

00:02:29.360 --> 00:02:32.600
เดี๋ยวเราลองมาดูกันว่าในห้องนี้เนี่ย

00:02:32.840 --> 00:02:37.320
ทุกคนใช้อะไรกันอยู่นะครับ

00:02:41.720 --> 00:02:43.240
ผิดคาดนิดนึงนะครับ

00:02:44.440 --> 00:02:46.280
แต่ว่ามีอันนึงที่ไม่ผิดคาดนะ

00:02:46.480 --> 00:02:47.516
ทุกคนน่าจะเห็นนะครับ

00:02:47.599 --> 00:02:52.156
อันนี้ 79 responses โอเคนะครับ

00:02:52.239 --> 00:02:54.479
ถือว่าน่าจะครอบคลุมทั้งห้องนะ

00:02:55.040 --> 00:02:58.156
อันดับแรกก็คงไม่ค่อยพ้น Tailwind ใช่มั้ยครับ

00:02:58.239 --> 00:02:59.760
ทุกคนน่าจะใช้ Tailwind กันอยู่

00:03:00.040 --> 00:03:03.559
อันดับที่ 2 ยังเป็น CSS in JS นะครับ

00:03:04.239 --> 00:03:07.037
แล้วก็อันดับที่ 3 เป็น inline style

00:03:07.120 --> 00:03:11.200
อันนี้จริงเหรอ จริงใช่มั้ย

00:03:12.040 --> 00:03:14.440
โอเค ไม่เป็นไรครับ

00:03:14.920 --> 00:03:18.760
ผมคิดว่าอาจจะยังมีใช้กันอยู่นะครับ

00:03:20.360 --> 00:03:22.117
เราแคปอันนี้กันไว้นะครับ

00:03:22.200 --> 00:03:24.960
เก็บไว้ในใจว่าตอนนี้อันดับ 1 ของเราเป็น Tailwind

00:03:25.159 --> 00:03:28.680
แล้วก็ CSS in JS นะครับ แล้วก็ inline style นะครับ

00:03:29.760 --> 00:03:36.000
เดี๋ยวเรากลับไปที่สไลด์ของเรา

00:03:38.280 --> 00:03:39.356
โอเค ครับ

00:03:39.439 --> 00:03:42.557
แล้วก็วันนี้เนี่ย ที่ให้ทุกคนทำ survey นะครับ

00:03:42.640 --> 00:03:45.720
เพราะว่าเดี๋ยววันนี้ผมจะมาแชร์วิธีที่ผมคิดว่า

00:03:46.159 --> 00:03:50.839
มันเป็นวิธีที่ดีที่สุดแล้วกัน ในการสร้าง reusable component นะครับ

00:03:51.239 --> 00:03:55.839
โดยที่หนึ่งในวิธีนั้น method ที่ผมให้ทุกคนทำ survey

00:03:56.280 --> 00:03:57.520
ก็จะอยู่ในนี้นะครับ

00:03:58.200 --> 00:04:00.597
โอเค ทีนี้ก่อนอื่นที่เราจะไปดูนะครับ

00:04:00.680 --> 00:04:03.360
คำตอบว่ามันคืออะไรนะ วันนี้ที่ผมจะมาเล่าให้ฟัง

00:04:03.879 --> 00:04:08.156
เราจะต้องมาพูดในมุมของ reusable component ก่อนนะครับ

00:04:08.239 --> 00:04:10.436
ว่ามันครอบคลุมอะไรบ้างนะครับ

00:04:10.519 --> 00:04:12.317
เพราะว่าถ้าเราไม่ตีกรอบให้มันเนี่ย

00:04:12.400 --> 00:04:16.676
เวลาเราเอาแต่ละวิธีมา discuss หรือคุยกันนะครับ

00:04:16.759 --> 00:04:20.917
บางทีเราจะหลุดว่า สรุปแล้วคือมันจะต้องตอบโจทย์อะไรนะครับ

00:04:21.000 --> 00:04:23.680
เพราะฉะนั้น เราจะมาพูดถึงเรื่องนี้กันก่อน

00:04:24.320 --> 00:04:25.757
ก็เลยแบ่งเป็น 3 มุมนะครับ

00:04:25.840 --> 00:04:30.116
สำหรับตัว reusable UI หรือบางคนอาจจะเรียกว่าเป็น UI library

00:04:30.199 --> 00:04:30.717
ก็ได้นะครับ

00:04:30.800 --> 00:04:34.077
มุมแรกก็คือเป็นมุมที่ผมคิดว่าสำคัญที่สุดนะครับ

00:04:34.160 --> 00:04:38.877
แต่ส่วนใหญ่เราจะโฟกัสมุมเนี้ยทีหลังนะครับ

00:04:38.960 --> 00:04:40.440
ก็คือเรื่องของ end user นะ

00:04:40.560 --> 00:04:43.197
คือ end user เนี่ยเขาไม่ได้สนใจหรอกว่า UI

00:04:43.280 --> 00:04:44.997
ที่เราทำมัน reusable อะไรหรือเปล่านะครับ

00:04:45.080 --> 00:04:47.519
สิ่งที่เขาสนใจก็คือมีแค่เรื่อง UI

00:04:47.639 --> 00:04:50.717
เนี่ยมันจะต้องเหมือนน่าดึงดูดในการใช้งานใช่ไหมครับ

00:04:50.800 --> 00:04:53.680
แล้วก็มีขนาดที่ bundle size เล็ก

00:04:54.000 --> 00:04:56.079
จะได้โหลดเร็วที่สุดนะ เปลืองเน็ตน้อย

00:04:56.240 --> 00:05:00.320
แล้วก็ทำงานได้เร็วนะครับ เปลืองแบตน้อยนะครับ ไม่เปลืองแบต

00:05:00.840 --> 00:05:03.480
ในมุมที่ 2 คือฝั่งที่เป็น business นะครับ

00:05:03.800 --> 00:05:07.157
ฝั่ง business เนี่ย เขาไม่ได้เขียนโค้ดเองหรอกใช่ไหม

00:05:07.240 --> 00:05:11.116
เขาสร้าง product เขาต้องการ ship product ให้ได้เร็วที่สุดนะครับ

00:05:11.199 --> 00:05:14.357
เพราะฉะนั้นเนี่ย ถ้าเป็น reusable UI เนี่ย

00:05:14.440 --> 00:05:18.517
เขาก็ต้องการให้มันนำมาแล้วสามารถ implement

00:05:18.600 --> 00:05:19.556
สร้างเป็นเว็บไซต์ได้เลย

00:05:19.639 --> 00:05:23.877
เอามารวมนู่นนี่นั่นแล้วก็ออกมาเป็น digital product ได้นะครับ

00:05:23.960 --> 00:05:26.680
แล้วก็ที่สำคัญ สิ่งที่เขาสนใจคืออะไรครับ

00:05:27.080 --> 00:05:28.836
คือมันจะต้อง scale ได้นะครับ

00:05:28.919 --> 00:05:32.560
เวลาโปรเจคใหญ่ๆ มัน span ออกไปหลายๆ โปรเจคใช่ไหมครับ

00:05:32.759 --> 00:05:37.400
มันก็ตัว UI เนี่ยมันก็ควรที่จะเอามาใช้งานแล้วก็ทำงานได้เร็วอยู่

00:05:43.800 --> 00:05:47.600
อันสุดท้ายคือพวกเรานี่แหละนะครับ ที่เป็น developer นะครับ

00:05:47.960 --> 00:05:50.840
เราสนใจอะไรใน reusable UI นะครับ

00:05:51.600 --> 00:05:56.480
คือมันควรที่จะ work ในทุกๆ framework ใช่ไหมครับ

00:05:56.680 --> 00:06:01.437
เราเรียกว่า UI ไม่ควรจะเป็นข้อจำกัดให้เราเลือก framework นะครับ

00:06:01.520 --> 00:06:04.120
เราควรที่จะสามารถที่จะเลือก framework

00:06:04.240 --> 00:06:06.877
แล้วค่อยมาหา UI ใช้งานได้นะครับ

00:06:06.960 --> 00:06:09.320
แล้วก็มันควรใช้งานง่าย custom ง่าย

00:06:09.520 --> 00:06:13.960
มี DX ที่ดี มี auto completion type safety อะไรพวกนี้นะครับ

00:06:14.199 --> 00:06:15.717
ที่เราสนใจนะครับ

00:06:15.800 --> 00:06:18.040
อันนี้คือ scope กว้างๆ ที่ผมคิดว่า

00:06:18.800 --> 00:06:23.120
เหมือนจะเป็น ideal เลยสำหรับ reusable UI หรือ UI library นะ

00:06:23.240 --> 00:06:25.797
ถ้ามี UI library ไหนที่มันสามารถตอบโจทย์

00:06:25.880 --> 00:06:30.600
ครอบคลุมตรงนี้ได้ทั้งหมดเนี่ย ก็น่าใช้งานมากนะครับ

00:06:32.240 --> 00:06:34.997
เดี๋ยวเราจะมาดูกันว่าวิธีที่ผมจะนำเสนอวันนี้

00:06:35.080 --> 00:06:38.437
มันสามารถที่จะครอบคลุมทั้งหมดได้หรือเปล่านะครับ

00:06:38.520 --> 00:06:46.556
slide นี้ก็จะเป็น list ของ option ที่ให้ทุกคนเลือกเมื่อกี้แหละนะครับ

00:06:46.639 --> 00:06:51.320
ไล่จาก pure CSS ข้างบนสุดเลย ลงมาถึง inline style ข้างล่างนะครับ

00:06:51.800 --> 00:06:56.157
คิดๆ ไว้ในใจให้พยายามลองเดาดูว่า

00:06:56.240 --> 00:06:58.879
วันนี้ผมจะมา present option ไหน

00:07:00.120 --> 00:07:01.236
ลองนึกไว้ในใจนะครับ

00:07:01.319 --> 00:07:06.037
แล้วเดี๋ยวผมจะตัด choice ให้ว่าคืออะไร inline style

00:07:06.120 --> 00:07:07.440
เดี๋ยวเรามาดูกันครับ

00:07:08.120 --> 00:07:10.717
อย่างแรก ไม่ใช่ Tailwind แน่นอนนะครับ

00:07:10.800 --> 00:07:17.116
เพราะว่ามันคนใช้เยอะละนะครับ

00:07:17.199 --> 00:07:21.116
จริงๆ Tailwind อันนี้เรากำลังพูดถึงการสร้าง reusable UI นะ

00:07:21.199 --> 00:07:25.119
หรือ UI library คือผมมองว่ามันยังมีข้อจำกัดบางอย่างสำหรับ Tailwind

00:07:25.560 --> 00:07:31.600
ที่ไม่คิดว่าเป็น the best ละกัน ณ ตอนนี้นะครับ

00:07:32.199 --> 00:07:33.717
อันที่ 2 ที่ผมจะตัดทิ้งก็คือ

00:07:33.800 --> 00:07:37.480
อันดับที่ 2 ที่ทุกคนเลือกมานะครับ คือ CSS in JS

00:07:37.720 --> 00:07:41.759
ถามว่าทำไม ส่วนตัวผม ผมทำ library ที่ MUI เนี่ย

00:07:42.479 --> 00:07:44.277
library มันชื่อว่า Material UI นะครับ

00:07:44.360 --> 00:07:48.559
มันก็เป็น CSS in JS นะครับ ข้างหลังเนี่ย ทำมาหลายปีละ

00:07:48.720 --> 00:07:53.116
แล้วผมก็รู้สึกว่า มันไม่น่าจะเป็น the best option นะครับ

00:07:53.199 --> 00:07:54.879
แต่มัน work ในโลกของ React

00:07:56.319 --> 00:07:59.920
แต่ว่าพอเรามี concept เมื่อกี้ที่มันจะต้อง support ได้

00:08:00.680 --> 00:08:03.720
ในทุก scope นะครับ ผมก็เลยตัดทิ้ง

00:08:03.879 --> 00:08:07.477
ตอนนี้เราก็เลยเหลือ ฝั่งที่เป็น CSS กับตรงกลาง

00:08:07.560 --> 00:08:09.199
แล้วก็ inline style นะครับ

00:08:10.000 --> 00:08:13.519
แน่นอนข้างบนเนี่ยผมตัดทิ้งเพราะอะไรครับ

00:08:13.639 --> 00:08:15.037
เพราะว่าถ้าข้างบนมัน work เนี่ย

00:08:15.120 --> 00:08:16.799
เราคงไม่ต้องมีเครื่องมือข้างล่างใช่ไหม

00:08:17.440 --> 00:08:19.516
เพราะฉะนั้นเราตัด pure CSS ทิ้งนะครับ

00:08:19.599 --> 00:08:23.080
เราจะเหลือแค่ CSS Modules กับ inline style

00:08:24.039 --> 00:08:35.560
โอเคนะครับ คำตอบของ method นี้คือ มันคือ 2 อันนี้รวมกันครับ นะ

00:08:36.320 --> 00:08:39.920
ถ้าเกิดว่าผมบอกเป็น inline นี่คือวิ่งออกไปข้างนอกเลยใช่มั้ย

00:08:40.159 --> 00:08:41.756
ไม่ใช่มันคือ 2 อันนี้รวมกันนะครับ

00:08:41.839 --> 00:08:44.640
เดี๋ยวจะมาเล่าให้ฟังว่าทำไมนะครับ

00:08:46.600 --> 00:08:49.357
คิดว่าเป็นวิธีใหม่ๆ ด้วยมั้ง

00:08:49.440 --> 00:08:51.920
ยังไม่ค่อยเห็นใครทำกันเท่าไหร่นะครับ

00:08:54.279 --> 00:08:57.517
อย่างแรกเดี๋ยวมาพูดถึง CSS Modules ให้ฟังก่อนละกันนะครับ

00:08:57.600 --> 00:08:59.996
สำหรับใครที่อาจจะยังไม่เคยใช้นะครับ

00:09:00.079 --> 00:09:01.480
หรือไม่รู้ว่ามันคืออะไร

00:09:02.160 --> 00:09:04.957
CSS Modules เนี่ยจริงๆ คอนเซ็ปต์ของมันง่ายมากเลยนะครับ

00:09:05.040 --> 00:09:07.719
คือเราเขียนทุกอย่างในไฟล์ CSS เหมือนเดิม

00:09:08.279 --> 00:09:11.557
โดยที่เราตั้งชื่อเป็น .module.css อย่างงั้นนะครับ

00:09:11.640 --> 00:09:13.597
ข้างในเนี่ยเราเขียนคลาสธรรมดาเลย

00:09:13.680 --> 00:09:16.357
อยากจะเขียนตั้งชื่ออะไรก็ใส่เข้าไปนะครับ

00:09:16.440 --> 00:09:17.558
สไตล์ก็ใส่เข้าไป

00:09:17.880 --> 00:09:19.557
เสร็จแล้วในฝั่งของ JavaScript เนี่ย

00:09:19.640 --> 00:09:20.917
เวลาเราสร้าง component นะครับ

00:09:21.000 --> 00:09:27.240
เราจะ import ตัวสไตล์มาจากไฟล์ CSS Modules อันนั้นนะครับ

00:09:27.640 --> 00:09:31.800
แล้วเราจะสามารถดึงสไตล์เนี่ย

00:09:32.360 --> 00:09:34.717
เวลา import มามันจะเป็นเหมือน object นะครับ

00:09:34.800 --> 00:09:38.237
แล้วคลาสเนี่ยก็จะเป็นชื่อเดียวกับตัว class name

00:09:38.320 --> 00:09:40.316
ที่เราใส่ไว้ในไฟล์ CSS นะครับ

00:09:40.399 --> 00:09:42.277
แล้วก็ดึงมาใช้ตามปกติเลยครับ

00:09:42.360 --> 00:09:47.320
สุดท้ายเนี่ยเวลาที่เรา compile หรือ build ออกมาเนี่ย

00:09:47.440 --> 00:09:50.599
ฝั่งที่เป็น HTML เนี่ยคือผลลัพธ์ที่เราจะได้นะครับ

00:09:50.880 --> 00:09:56.996
ก็สังเกตว่าคลาสมันจะถูก hash ด้วย random string

00:09:57.079 --> 00:09:57.559
อะไรพวกเนี้ยครับ

00:09:57.720 --> 00:10:00.477
มันจะถูก hash เอาเป็นว่าทำให้มัน unique นะครับ

00:10:00.560 --> 00:10:04.277
เพราะฉะนั้นวิธีเนี้ยเหมาะมากๆ สำหรับการสร้าง component

00:10:04.360 --> 00:10:06.677
เนี่ยเอามาสร้างเป็น component ใช่มั้ยครับ

00:10:06.760 --> 00:10:08.677
เพราะว่าคนที่เป็นคนสร้างเนี่ย

00:10:08.760 --> 00:10:12.159
เขาไม่ต้องกังวลว่าเค้าจะตั้งชื่อคลาสอะไร

00:10:12.399 --> 00:10:15.279
ซึ่งก็เป็นปัญหาคลาสสิกของ CSS ใช่มั้ยครับ

00:10:15.959 --> 00:10:18.196
สำหรับคนที่เอา component นี้ไปใช้งาน

00:10:18.279 --> 00:10:21.477
เค้าก็ไม่ต้องกลัวว่าเวลาเค้าเอาไปใช้แล้ว

00:10:21.560 --> 00:10:25.756
มันจะไปกระทบอะไรกับ component อื่นๆ หรือเปล่านะครับ

00:10:25.839 --> 00:10:27.680
เพราะฉะนั้นวิธีนี้เวิร์กมาก

00:10:28.360 --> 00:10:32.597
ฝั่งขวาเนี่ยมันอาจจะไม่ได้ใช่แบบนี้เท่าไหร่นะครับ

00:10:32.680 --> 00:10:34.477
หมายถึงว่าสไตล์ตรงเนี้ยไม่ต้องโฟกัส

00:10:34.560 --> 00:10:37.200
เอาเป็นว่าให้เห็นว่ามันจะถูก hash นะครับ

00:10:37.320 --> 00:10:38.876
คลาสจะถูก hash

00:10:38.959 --> 00:10:44.277
ทีนี้ที่ผมลอง research แล้วผมรู้สึกว่ามันเวิร์กนะครับ

00:10:44.360 --> 00:10:45.159
เพราะอะไรครับ

00:10:45.680 --> 00:10:49.959
CSS Modules เนี่ยมันแทบจะ built-in support ทุก framework

00:10:50.079 --> 00:10:51.876
ถ้าเราลองไปไล่ดูนะครับ

00:10:51.959 --> 00:10:56.917
Next.js, Nuxt, SolidJS built-in support ตัว CSS Modules เลย

00:10:57.000 --> 00:10:59.597
ถ้าลองเข้าไป search เราจะเจอนะครับ

00:10:59.680 --> 00:11:02.037
แล้วเราสามารถที่จะสมมุติเริ่มโปรเจค

00:11:02.120 --> 00:11:05.720
พิมพ์ CSS Modules แล้วก็ตั้งชื่อไฟล์ .module.css

00:11:05.839 --> 00:11:07.277
import ใช้งานได้เลยนะครับ

00:11:07.360 --> 00:11:11.839
framework พวกนี้ทำทุกอย่างให้หมดแล้วเรื่องของ compile นะครับ

00:11:12.480 --> 00:11:15.160
ส่วนที่เป็น Astro, Svelte, Angular เนี่ย

00:11:15.440 --> 00:11:17.720
เค้าไม่ได้ support โดยตรง

00:11:17.839 --> 00:11:20.517
แต่ว่าคอนเซ็ปต์ในการสร้างสไตล์ของเค้า

00:11:20.600 --> 00:11:22.279
เหมือนกับ CSS Modules เลย

00:11:23.040 --> 00:11:25.917
คือสร้างสไตล์แล้วมันก็จะ scope ไปที่ component นะครับ

00:11:26.000 --> 00:11:30.677
เพราะฉะนั้นเนี่ย แค่เราเลือก method นี้

00:11:30.760 --> 00:11:32.196
ในการสไตล์ component เนี่ย

00:11:32.279 --> 00:11:35.640
มันเหมือนกับว่าเรามาครึ่งทางแล้วนะครับ

00:11:35.800 --> 00:11:37.920
เพราะมันเวิร์กกับทุก framework เลย

00:11:38.680 --> 00:11:41.000
เพราะฉะนั้นเอามาสู้กับ Tailwind ได้อยู่

00:11:41.399 --> 00:11:45.797
ทีนี้อีกครึ่งนึงคืออะไร

00:11:45.880 --> 00:11:50.077
ทำยังไงให้วิธีนี้มันเป็น the best นะครับ

00:11:50.160 --> 00:11:53.600
อีกครึ่งนึงเนี่ยเป็นเรื่องของการเขียน CSS

00:11:54.200 --> 00:11:58.077
วิธีในการเขียน CSS เพื่อทำให้ component ของเราเนี่ย

00:11:58.160 --> 00:11:59.720
มันสามารถ scale ไปได้

00:12:00.320 --> 00:12:02.517
แบบสไตล์ของเรามันสามารถ scale ไปได้

00:12:02.600 --> 00:12:04.200
ในหลายๆ โปรเจคนะครับ

00:12:04.320 --> 00:12:07.120
ถึงตรงนี้เนี่ยผมคิดว่าทุกคนอาจจะยังมองไม่เห็นภาพว่า

00:12:07.560 --> 00:12:10.399
scale นี่คือยังไงนะครับ

00:12:10.720 --> 00:12:11.880
เดี๋ยวเรามาดูก่อน

00:12:12.480 --> 00:12:14.876
เราลองเอาตัวอย่างนึงมาดูก่อนนะครับ

00:12:14.959 --> 00:12:16.360
สร้างปุ่มแบบง่ายๆ เลย

00:12:16.680 --> 00:12:20.360
แล้วเรามาดูว่าเวลาถ้าเราเขียน CSS ปกติ

00:12:21.040 --> 00:12:23.760
มันจะเจอปัญหาเรื่อง scale แบบไหนนะครับ

00:12:25.199 --> 00:12:28.839
อันนี้ผมยกตัวอย่างเป็นปุ่มแบบง่ายๆ นะครับ

00:12:29.360 --> 00:12:30.800
ของ design system อันนึง

00:12:32.360 --> 00:12:34.640
เรามี 4 variant ใช่มั้ย

00:12:35.360 --> 00:12:37.360
4 รูปแบบอะ อาจจะเรียกว่าอะไรก็ได้นะครับ

00:12:37.600 --> 00:12:40.717
ถ้า no-brainer แบบเจอๆ อย่างงี้ปุ๊บทำไงครับ

00:12:40.800 --> 00:12:42.199
เราก็สร้างคลาสแยกเลย

00:12:42.760 --> 00:12:47.157
เวลาเขียน CSS จะเป็น .btn อะไรก็ตั้งชื่อ

00:12:47.240 --> 00:12:50.718
ตามที่เราคิดว่ามันเป็นชื่อของสไตล์นั้นๆ

00:12:51.240 --> 00:12:54.000
พอเราสร้างพวกนี้ขึ้นมาเสร็จนะครับ

00:12:54.680 --> 00:12:58.556
ในไฟล์ JavaScript ที่เป็นไฟล์ที่เราสร้าง component เนี่ย

00:12:58.639 --> 00:13:01.560
เราก็จะ import มาจาก CSS Modules อันนี้ใช่มั้ย

00:13:02.120 --> 00:13:06.760
แล้วเราก็จะใส่ class name เข้าไปปกติ

00:13:07.519 --> 00:13:12.037
เอาง่ายๆ คือเราสร้าง component เรามี prop รับเข้ามานะครับ

00:13:12.120 --> 00:13:14.720
แล้วเราก็แตะคลาสเหมือนกับเชื่อมคลาสกัน

00:13:15.399 --> 00:13:17.239
นี่คือแบบ basic เลยนะครับที่เราจะทำ

00:13:18.079 --> 00:13:21.037
ทีนี้ถ้ามัน 4 variant ใช่มั้ยครับ

00:13:21.120 --> 00:13:22.960
ก็เหมือนกับว่าเรามี 4 คลาสใช่ปะ

00:13:23.360 --> 00:13:25.237
แล้วเวลาที่เรา render บน runtime

00:13:25.320 --> 00:13:28.920
มันก็จะเลือกคลาสอันนั้นมาใช่มั้ยครับ

00:13:30.199 --> 00:13:32.958
โอเค ทีนี้ผมขอย่อง่ายๆ

00:13:33.120 --> 00:13:34.837
ไอ้ตัว class ที่สร้างมาเมื่อกี้

00:13:34.920 --> 00:13:36.600
ขอย่อให้มันกลายเป็นไอคอนนะ

00:13:36.800 --> 00:13:39.440
เราจะได้เห็นว่าโอเค ถ้าเรามี 4 variants

00:13:39.720 --> 00:13:42.199
เราจะมี CSS เพิ่มขึ้นประมาณแบบเหมือน

00:13:42.560 --> 00:13:44.880
พูดง่ายๆ ก็ 4 เท่าอะไรประมาณเนี้ย

00:13:45.288 --> 00:13:47.677
ทีนี้นอกจาก variants นะครับ

00:13:47.760 --> 00:13:51.120
ใน design system เนี่ยเราก็จะมีหลายสีใช่มั้ย

00:13:51.680 --> 00:13:53.399
อันนี้ผมยกมา 4 สีแล้วกัน

00:13:53.759 --> 00:13:57.756
เอาที่มันแบบปกติที่ใช้ใน library นะครับ

00:13:57.839 --> 00:14:01.720
พอมี 4 สี เนื่องจากว่าสีเนี่ยมันค่อนข้างที่จะ

00:14:02.560 --> 00:14:04.519
สอดคล้องกับตัว variants นะครับ

00:14:04.920 --> 00:14:07.637
แปลว่าเราก็ต้องคูณ 4 เท่าเข้าไปนะครับ

00:14:07.720 --> 00:14:10.799
ฝั่งขวาเนี่ยเราจะเห็นว่า CSS มันก็จะโตขึ้นนะ

00:14:11.240 --> 00:14:12.760
ใหญ่ขึ้นใช่มั้ยครับ

00:14:13.440 --> 00:14:15.477
ไม่ต้องสนใจว่ามันคูณ 4 หรือเปล่า

00:14:15.560 --> 00:14:17.640
เอาเป็นว่า CSS มันเยอะขึ้นนะครับ

00:14:18.320 --> 00:14:22.839
ไม่พอ เราก็ต้องมีหลาย size ในการเอาไปใช้ในเว็บนะครับ

00:14:23.839 --> 00:14:27.200
มีคนถาม น่าจะกำลังทำอยู่ใช่มั้ย

00:14:28.120 --> 00:14:31.200
โอเค พอมี 3 size CSS เราก็จะใหญ่ขึ้นนะครับ

00:14:31.399 --> 00:14:34.840
และเมื่อเราเอาไปใช้งานในหลายๆ โปรเจค

00:14:35.440 --> 00:14:37.160
พอมันเป็น design system นะครับ

00:14:37.839 --> 00:14:39.436
อันเนี้ยโปรเจคมันน้อยนะครับ

00:14:39.519 --> 00:14:42.597
แต่พอมันเป็นโปรเจคอาจจะแบบ 10 15 20 โปรเจค

00:14:42.680 --> 00:14:43.760
เป็น 100 โปรเจคเงี้ย

00:14:44.560 --> 00:14:46.639
คนที่ maintain ตัว design system เนี่ย

00:14:47.279 --> 00:14:48.676
เวลาอะไรมันซ้ำๆ กัน

00:14:48.759 --> 00:14:50.280
ด้วยความเป็นโปรแกรมเมอร์ใช่มั้ย

00:14:50.600 --> 00:14:54.200
เราก็จะยุบรวมกันเอาไปอยู่ในที่เดียวอะไรเงี้ย

00:14:54.519 --> 00:14:58.316
มันมีความเป็นไปได้ที่ style มันจะเพิ่มขึ้นไปเรื่อยๆ นะครับ

00:14:58.399 --> 00:14:59.676
ปัญหามันอยู่ตรงนี้ครับ

00:14:59.759 --> 00:15:02.399
ปัญหามันอยู่ที่ว่า ถ้าเราทำโปรเจค A อยู่

00:15:03.079 --> 00:15:08.199
แล้วเราใช้ CSS ต้องการใช้ CSS แค่ 50% หรือ 80% ก็ได้

00:15:08.519 --> 00:15:09.436
ของไอ้ปุ่มเนี้ย

00:15:09.519 --> 00:15:13.159
อีก 20% เราทำอะไรได้บ้าง เราไม่ต้องการใช่มั้ยครับ

00:15:13.320 --> 00:15:16.357
แต่เมื่อทุกอย่างมันอยู่ใน CSS เนี่ย

00:15:16.440 --> 00:15:17.999
มันทำ tree shaking ไม่ได้

00:15:18.959 --> 00:15:20.159
อันนั้นคือปัญหา

00:15:20.519 --> 00:15:22.800
แล้วนี่คือแค่ 1 ปุ่มใช่มั้ยครับ

00:15:23.079 --> 00:15:26.080
ถ้าเรามีหลายเป็นแบบ 20 30 component อะไรเงี้ย

00:15:27.079 --> 00:15:29.597
นี่คือปัญหาของ CSS มัน scale ไม่ได้นะครับ

00:15:29.680 --> 00:15:31.164
เช่นเดียวกันกับ Tailwind

00:15:31.247 --> 00:15:36.560
Tailwind ก็ทำ tree shaking ไม่ได้นะครับ

00:15:37.240 --> 00:15:39.240
โอเค รอแป๊บนึงนะครับ

00:15:39.440 --> 00:15:44.400
พอผมเห็นรูปเมื่อกี้ปุ๊บ ผมก็เลยนึกขึ้นมาได้เลยว่า

00:15:44.680 --> 00:15:49.477
เฮ้ย ปัญหาเนี้ยมันเคยแก้แล้วใน JavaScript

00:15:49.560 --> 00:15:52.040
โดยการทำ tree shaking นะครับ

00:15:52.160 --> 00:15:56.279
ผมก็เลยคิดว่า เฮ้ย ถ้าอย่างงี้เราเปลี่ยน class CSS

00:15:56.399 --> 00:15:59.279
พวกนี้ให้อยู่ใน JavaScript แทน

00:16:01.519 --> 00:16:04.639
แล้วเราสร้างไฟล์ CSS ขึ้นมาอันนึง

00:16:05.000 --> 00:16:08.837
เป็น template ส่วนที่เป็น style ทั้งหมด

00:16:08.920 --> 00:16:13.120
อยู่ใน JavaScript inject เข้ามาในไฟล์ CSS แทนนะครับ

00:16:13.279 --> 00:16:14.436
ตรงนี้อาจจะดูซับซ้อน

00:16:14.519 --> 00:16:16.360
แต่ว่าในโค้ดแม่งโคตรง่ายเลย

00:16:17.120 --> 00:16:20.998
เราจะสามารถใช้ประโยชน์จาก framework ต่างๆ

00:16:21.399 --> 00:16:22.879
เพื่อทำ tree shaking ได้

00:16:23.199 --> 00:16:24.000
เพราะอะไรครับ

00:16:24.240 --> 00:16:26.319
คือถ้า style อยู่ใน JavaScript

00:16:26.759 --> 00:16:28.677
มอง style เป็นเหมือนฟังก์ชันก็ได้

00:16:29.399 --> 00:16:31.116
สมมุติเรา import module มาใช่มั้ย

00:16:31.199 --> 00:16:32.880
ในโมดูลนั้นมี 10 ฟังก์ชัน

00:16:33.000 --> 00:16:34.680
เรา import มา 3 ฟังก์ชัน

00:16:35.040 --> 00:16:38.116
เราที่เป็นโปรแกรมเมอร์นะครับ import มา 3 ฟังก์ชัน

00:16:38.199 --> 00:16:39.236
เวลาเรา build เนี่ย

00:16:39.319 --> 00:16:41.719
ไม่ว่า framework ไหนที่เราใช้นะครับ

00:16:42.279 --> 00:16:44.560
ส่วนใหญ่แล้วเนี่ยมันจะทำ tree shaking ให้

00:16:45.040 --> 00:16:49.676
เอาง่ายๆ คือมันจะ tree shake

00:16:49.759 --> 00:16:53.279
ส่วนที่เราไม่ได้ใช้ออกไปให้เลยจาก final bundle นะครับ

00:16:54.040 --> 00:16:55.797
อันนี้คือข้อดีของ JavaScript

00:16:55.880 --> 00:16:58.079
และเป็นสิ่งที่ผมรู้สึกว่า

00:16:58.920 --> 00:17:03.116
เราสามารถ leverage ไอ้ความสามารถตรงนี้ของ JavaScript ได้

00:17:03.199 --> 00:17:06.239
เพราะว่า JavaScript มันพัฒนามาเป็น 10 ปีแล้วนะ

00:17:06.559 --> 00:17:10.279
แต่ในมุมของ bundle size หรือการ scale ของ CSS

00:17:10.720 --> 00:17:13.317
ไม่ค่อยมีการพัฒนาเท่าไหร่นะครับ

00:17:13.400 --> 00:17:16.480
มีแต่ feature ที่จะเพิ่มขึ้นมาทุกวันนะครับ

00:17:16.959 --> 00:17:20.716
โอเค เพราะฉะนั้นโมเดลนี้มันจะเวิร์กมากเลย

00:17:20.799 --> 00:17:22.476
ถ้าเราสามารถทำได้นะครับ

00:17:22.559 --> 00:17:25.439
แต่ละโปรเจคเค้าไม่ต้องมากังวลเลยว่า

00:17:26.199 --> 00:17:27.999
ไอ้ของมันมีอยู่เท่าไหร่ใช่มั้ย

00:17:28.199 --> 00:17:30.000
เค้าแค่อิมพอร์ตสิ่งที่เค้าต้องการใช้

00:17:30.360 --> 00:17:33.200
แล้วเดี๋ยวที่เหลือ เดี๋ยว framework มันจะจัดการให้เอง

00:17:33.480 --> 00:17:36.799
ไอ้คนที่เป็นคนทำ design system ก็ไม่ต้องกลัวนะครับว่า

00:17:38.039 --> 00:17:40.400
เราเพิ่ม style เข้าไปแล้ว bundle size มันจะใหญ่

00:17:41.120 --> 00:17:44.999
เพราะว่าสุดท้ายแล้ว framework มันทำ tree shaking ให้นะครับ

00:17:45.240 --> 00:17:46.680
ทีนี้ทำยังไง

00:17:47.160 --> 00:17:51.037
ผมก็เลยลองจากโมเดลนี้เนี่ย ก็เลยลองหาวิธีนะครับ

00:17:51.120 --> 00:17:55.160
สรุปว่ามันออกมาเป็น CSS module บวกกับ inline style

00:17:55.600 --> 00:17:57.040
สเต็ปเป็นแบบนี้เลยครับ

00:17:57.559 --> 00:17:60.000
ถ่ายรูปไปได้ จำไปได้นะครับ ลองเอาไปใช้ดู

00:18:00.840 --> 00:18:05.320
1 ไฟล์ CSS เนี่ยเราจะไม่เขียนค่าตรงๆ

00:18:05.520 --> 00:18:07.760
เขียนเป็น custom property แบบนี้นะครับ

00:18:11.280 --> 00:18:20.076
เรามี property อย่างงี้

00:18:20.159 --> 00:18:22.117
เราเปลี่ยนทุกอย่างที่มันเกี่ยวข้องกับ

00:18:22.200 --> 00:18:24.076
ไอ้พวกสี variants size อะไรพวกเนี้ย

00:18:24.159 --> 00:18:26.197
เปลี่ยนให้เป็นตัว custom property ให้หมดนะ

00:18:26.280 --> 00:18:27.797
ซึ่งตรงเนี้ยคือ CSS นะครับ

00:18:27.880 --> 00:18:28.716
อันนี้คือ CSS นะ

00:18:28.799 --> 00:18:31.197
ถ้าเกิดใครยังไม่เคยใช้ตัว CSS variable เนี่ย

00:18:31.280 --> 00:18:33.040
อันนี้เวิร์กใน CSS นะครับ

00:18:33.600 --> 00:18:36.759
เหมือนเราทำให้เป็น template เป็น skeleton ไว้ใช่มั้ย

00:18:37.200 --> 00:18:39.757
ถ้าเราเอาไฟล์เนี้ยไป render ปุ่มใช่ป่ะ

00:18:39.840 --> 00:18:43.640
เราจะได้เป็นปุ่มโง่ๆ อันนึง ที่ไม่มีอะไรเลยนะครับ

00:18:43.919 --> 00:18:48.039
มีแค่เหมือนเป็น skeleton น่ะ รอคนเอาค่ามาแปะให้

00:18:48.559 --> 00:18:53.399
สเต็ปที่ 2 เราจะย้าย style ทั้งหมดที่เราสร้างเมื่อกี้

00:18:53.880 --> 00:18:57.240
จาก class ต่างๆ เข้ามาอยู่ใน JavaScript แทน

00:18:57.679 --> 00:19:00.437
โดยการที่เรา export เป็นฟังก์ชันนะครับ

00:19:00.520 --> 00:19:03.480
หรือเราจะ export เป็น object ก็ได้ ตามใจชอบเลย

00:19:03.799 --> 00:19:06.120
เนี่ยเห็นป่ะ ค่ามันโคตรง่ายเลยครับทุกคน

00:19:06.360 --> 00:19:08.560
อย่างเราลองดูที่ button small ก็ได้

00:19:09.720 --> 00:19:11.397
เนื่องจากอย่าง button small เนี่ย

00:19:11.480 --> 00:19:13.560
ผมตั้ง size เป็น 32 พิกเซลใช่ป่ะ

00:19:13.679 --> 00:19:14.879
gap เป็น 6 พิกเซล

00:19:15.360 --> 00:19:18.877
ไอ้ตัว key เนี่ย เป็น CSS variable

00:19:18.960 --> 00:19:22.999
ที่มันจะ reference ไปถึงไฟล์ template ที่เราทำเมื่อกี้นะครับ

00:19:23.200 --> 00:19:29.520
เสร็จแล้ว ฝั่งที่เป็นคนใช้งาน

00:19:29.679 --> 00:19:31.600
เวลานำมาใช้ import button มา

00:19:31.880 --> 00:19:36.359
แล้วก็ import style มาจากไฟล์ JavaScript เมื่อกี้นะครับ

00:19:36.679 --> 00:19:39.479
แล้วเสร็จแล้วเวลาใช้งานก็คือส่งผ่าน inline style

00:19:39.760 --> 00:19:41.520
คือตอนที่ผมเจอท่าเนี้ย

00:19:41.760 --> 00:19:45.840
ผมรู้สึกว่า inline style อ่ะมันเป็นวิธีเดียว

00:19:46.440 --> 00:19:47.880
ที่เป็น native เลย

00:19:48.000 --> 00:19:49.880
ที่มันเชื่อมระหว่างโลก 2 โลก

00:19:50.120 --> 00:19:52.199
คือโลกของ JavaScript กับโลกของ CSS

00:19:52.679 --> 00:19:54.280
เป็นช่องทางเล็กๆ นะครับ

00:19:54.559 --> 00:19:57.400
ที่เราส่งผ่านแค่อ็อบเจกต์ได้ เป็น plain object

00:19:58.280 --> 00:20:01.360
แต่เรื่องของ media query เรื่อง selector อะไรมันไม่เวิร์กใช่มั้ย

00:20:01.640 --> 00:20:06.277
แต่วิธีเนี้ยแม่งโคตรเวิร์ก เพราะเราส่งผ่าน variable ได้นะครับ

00:20:06.360 --> 00:20:10.277
แล้วทุกอย่างก็ dynamic บน runtime ด้วยนะครับ

00:20:10.360 --> 00:20:12.039
แล้วเราก็จะได้ผลลัพธ์มาแบบนี้

00:20:12.440 --> 00:20:15.040
สุดท้ายเวลาเราเอา component นี้มา

00:20:15.320 --> 00:20:18.960
มา render class ก็คือมาจาก CSS module ใช่มั้ย

00:20:19.280 --> 00:20:24.117
style มาจาก inline style ที่ส่งผ่านมาจาก JavaScript นะครับ

00:20:24.200 --> 00:20:26.360
แล้วเราก็จะได้ปุ่มแบบนี้มา

00:20:27.200 --> 00:20:30.200
เอาแป๊บนึง

00:20:30.960 --> 00:20:32.440
เหมือนเค้าให้เราเบรก

00:20:33.080 --> 00:20:36.119
คิดซะว่าเค้าให้เราเบรกนะครับ

00:20:36.799 --> 00:20:39.037
จริงเนี่ยวิธีนี้มีแค่นี้เลยนะครับ

00:20:39.120 --> 00:20:41.358
นี่คือวิธีที่ผมคิดว่าดีที่สุดละ

00:20:41.679 --> 00:20:44.999
เดี๋ยวเรามาดูผลลัพธ์กันนิดนึงว่ามันดีจริงรึเปล่านะครับ

00:20:45.159 --> 00:20:47.836
ผมก็เลยเอามาเทียบกับ Tailwind ถามว่าทำไมนะครับ

00:20:47.919 --> 00:20:50.557
เพราะว่า Tailwind เนี่ยมันรองรับทุก framework อยู่แล้วใช่ป่ะ

00:20:50.640 --> 00:20:52.520
มันเป็นแบบ utility class ใช่มั้ย

00:20:52.679 --> 00:20:53.956
ผมก็เลยสร้างแบบ โอเค

00:20:54.039 --> 00:20:59.760
เอาไอ้ปุ่มเมื่อกี้ 4 variant 4 สี 3 size มา render บนเพจ

00:20:59.960 --> 00:21:02.840
เพจเดียวนะ แล้วก็สร้างมาเทียบกับ Tailwind

00:21:02.960 --> 00:21:04.280
ปรากฏว่าของ Tailwind เนี่ย

00:21:04.960 --> 00:21:08.320
อันนี้ผมเอาแค่ size ของปุ่มมานะ ประมาณ 1.9

00:21:09.760 --> 00:21:12.879
วิธีที่ผมเสนอไปเมื่อกี้อ่ะ ประมาณ 1.6 นะครับ

00:21:13.240 --> 00:21:16.037
โอเค ทีนี้พอเราใส่ dark mode เข้าไปใน Tailwind ใช่มั้ย

00:21:16.120 --> 00:21:17.877
เราก็ใส่ dark class ใช่ป่ะ

00:21:17.960 --> 00:21:19.720
แล้วก็ใส่ style เข้าไป

00:21:20.000 --> 00:21:22.920
ก็ size มันก็จะเพิ่มขึ้นโดยปกติอยู่แล้วนะครับ

00:21:24.159 --> 00:21:26.196
ส่วนวิธีที่ผมบอกไปเนี่ย

00:21:26.279 --> 00:21:28.039
อันนี้เพิ่มขึ้นแค่ฝั่งที่เป็น CSS variable

00:21:29.279 --> 00:21:30.880
ที่เอาไว้สลับสีแค่นั้นเอง

00:21:31.520 --> 00:21:33.640
point ของสไลด์นี้เนี่ยไม่ได้บอกว่า

00:21:34.039 --> 00:21:36.200
วิธีที่ผมเสนอไปมันจะเล็กกว่า

00:21:37.279 --> 00:21:38.877
โดยเฉลี่ยมันจะเล็กกว่าแล้วกัน

00:21:38.960 --> 00:21:41.680
แต่ว่ามันก็ขึ้นอยู่กับว่าเราเขียน CSS ยังไงถูกมั้ย

00:21:41.980 --> 00:21:44.400
บางทีเราอาจจะไม่เขียน state ไม่เขียน hover เลยก็ได้

00:21:44.640 --> 00:21:46.757
แบบมี background color อย่างเดียวอ่ะ

00:21:46.840 --> 00:21:48.960
สุดท้าย size มันก็ใกล้กันนะครับ

00:21:49.400 --> 00:21:53.237
point ก็คือจะบอกว่าวิธีเนี้ยมันสามารถเทียบกับ

00:21:53.320 --> 00:21:54.237
Tailwind ได้

00:21:54.320 --> 00:21:57.797
หมายถึงว่าผลลัพธ์ที่เราได้ค่อนข้างที่จะสูสีกับ

00:21:57.880 --> 00:21:59.797
Tailwind ในเรื่องของ bundle size

00:21:59.880 --> 00:22:02.160
หรือบางทีต่ำกว่าด้วยซ้ำนะครับ

00:22:04.000 --> 00:22:05.799
ตรงนี้เดี๋ยวเราจะมาสรุปกันแล้วครับ

00:22:06.679 --> 00:22:08.680
มันไม่ใช่แค่เล็กอย่างเดียวถูกมั้ยครับ

00:22:08.919 --> 00:22:11.277
มันทำงานกับทุก framework ได้นะครับ

00:22:11.360 --> 00:22:15.437
อย่างโค้ดเมื่อกี้ ผมลองเขียนโค้ดดูปุ๊บ

00:22:15.520 --> 00:22:17.037
แล้วผมเอาไปแปะบอก AI ว่า

00:22:17.120 --> 00:22:19.476
เฮ้ย ช่วยทำออกมาเป็น Svelte ให้หน่อย

00:22:19.559 --> 00:22:23.080
มันก็แก้นิดหน่อยนะครับ แล้วก็เอาไปใช้งานได้

00:22:23.360 --> 00:22:26.397
หรือเปลี่ยนไปเป็น Vue.js ให้หน่อยเงี้ย

00:22:26.480 --> 00:22:27.879
มันก็แก้ได้นะครับ

00:22:28.840 --> 00:22:32.880
โค้ดแทบจะไม่ต่างเลย เพราะฉะนั้นน่ะดีมาก

00:22:33.159 --> 00:22:35.196
อันที่มันจะชนะ Tailwind เนี่ยคืออันนี้

00:22:35.279 --> 00:22:37.117
คือเรื่องของ tree shaking นะครับ

00:22:37.200 --> 00:22:40.557
เพราะว่า style ทั้งหมดของเราเนี่ยมันอยู่ใน JavaScript

00:22:40.640 --> 00:22:41.076
นะครับ

00:22:41.159 --> 00:22:45.517
แล้วก็ style เนี่ยคือเข้าใจโค้ดง่าย เพราะมันไม่มีอะไรเลย

00:22:45.600 --> 00:22:47.439
นึกออกมั้ย มันก็เป็น function export

00:22:47.600 --> 00:22:49.237
เลือกเอาว่าเราจะเอาอะไรอ่ะ

00:22:49.320 --> 00:22:54.560
เราจะเอา variable อะไร value เท่าไหร่ก็ตามที่เราตั้ง

00:22:54.679 --> 00:22:56.919
แล้วเราสามารถ export เป็นพันๆ style ได้

00:22:57.320 --> 00:23:00.517
โดยที่เราไม่ต้องกังวลนะครับว่า final bundle size

00:23:00.600 --> 00:23:01.357
ของมันจะใหญ่

00:23:01.440 --> 00:23:04.680
เพราะว่า framework มันทำ tree shaking ให้นะ

00:23:05.480 --> 00:23:09.239
อันนี้คือข้อดีที่มันจะชนะวิธีอื่นด้วยซ้ำนะครับ

00:23:09.400 --> 00:23:12.716
แล้วก็อันเนี้ยเป็นข้อดีอันนึงที่ผมจากประสบการณ์แล้วกันนะ

00:23:12.799 --> 00:23:16.760
ที่ทำ UI library คือผมชอบวิธีนี้ตรงนี้ด้วย

00:23:17.120 --> 00:23:18.917
คือมันง่ายต่อการ extend นะครับ

00:23:19.000 --> 00:23:23.360
อย่างที่ผมทำ Material UI เนี่ย เรามี prop ให้ใช่ป่ะ

00:23:23.480 --> 00:23:26.039
อย่างเช่น variant a b c d

00:23:26.799 --> 00:23:31.360
ต้องเข้าใจว่าคนที่เอา Material UI ไปใช้เนี่ยมีเยอะมาก

00:23:32.120 --> 00:23:35.359
หลายโปรเจคที่เอาไปทำเป็น design system ต่อด้วย

00:23:35.840 --> 00:23:38.836
ทีนี้ design system หลายๆ ครั้งเค้าก็จะมี context

00:23:38.919 --> 00:23:39.903
ของเค้าไม่เหมือนกันนึกออกมั้ย

00:23:39.987 --> 00:23:41.960
เค้าอาจจะไม่ใช้ variant a b c d

00:23:42.200 --> 00:23:44.480
กูอยากใช้ variant แบบ d e f อย่างเงี้ย

00:23:45.200 --> 00:23:47.200
ถ้าเกิดเค้าเอา library เอาไปใช้

00:23:47.679 --> 00:23:50.680
เค้าจะลบ CSS ตรงนั้นออกอ่ะ มันลบไม่ได้ นึกออกมั้ย

00:23:50.919 --> 00:23:52.959
คือเค้าแค่ทำได้แค่เพิ่ม

00:23:53.159 --> 00:23:55.557
แล้วอาจจะทำอะไรบางอย่างกับ TypeScript

00:23:55.640 --> 00:23:57.237
เพื่อตัดค่าพวกนั้นทิ้ง

00:23:57.320 --> 00:24:00.357
แต่ CSS ที่เค้าเอาไปอ่ะ ยังไงก็ติดไปด้วย

00:24:00.440 --> 00:24:01.640
ถึงแม้ว่าเค้าจะไม่ได้ใช้

00:24:02.480 --> 00:24:05.956
ซึ่งนั่นคือข้อเสียแบบเป็น trade-off เลยแล้วกันนะครับ

00:24:06.039 --> 00:24:12.240
ที่พวก CSS in JS อ่ะมันจะทำอะไรแบบนี้ยาก

00:24:12.400 --> 00:24:16.836
แต่วิธีเนี้ย คุณไม่จำเป็นต้องเอา style ไปก็ได้ นึกออกป่ะ

00:24:16.919 --> 00:24:20.317
ถึงแม้ว่าคุณเอาไปแต่คุณไม่ได้ใช้มันก็เอาออกให้นะครับ

00:24:20.400 --> 00:24:22.399
คือคุณสามารถที่จะ extend ได้ง่ายมาก

00:24:22.880 --> 00:24:25.157
แล้วก็ component เห็นมั้ย มันจะ lean มาก

00:24:25.240 --> 00:24:27.639
เพราะว่ามันไม่มี prop อะไรเลย

00:24:28.480 --> 00:24:30.157
ทุกอย่างคือคุณแปะลงไปใน style

00:24:30.240 --> 00:24:32.120
ซึ่ง style มัน native ใช่ป่ะ

00:24:33.120 --> 00:24:35.360
ทุก framework มันมี inline style ให้อยู่แล้วอ่ะ

00:24:35.760 --> 00:24:38.117
คือดูโค้ดเรารู้สึกว่า clean กว่าเยอะ

00:24:38.200 --> 00:24:41.040
บางทีคนเอาไป extend นะครับ

00:24:42.480 --> 00:24:45.076
แล้วก็ auto completion อันนี้เราก็ไม่ต้องทำอะไรเลย

00:24:45.159 --> 00:24:46.960
เพราะว่า export มันเป็น function ใช่ป่ะ

00:24:47.600 --> 00:24:50.157
เราแค่พิมพ์ อาจจะต้องจำชื่อนิดนึง

00:24:50.240 --> 00:24:52.600
ซึ่งมันก็คล้ายๆ Tailwind แหละนะ เราก็ต้องจำ

00:24:53.000 --> 00:24:55.120
แล้วทุกอย่างมันก็โผล่มาให้อ่ะ

00:24:57.440 --> 00:25:00.279
แล้วก็อันสุดท้ายคือที่ผมชอบคือ

00:25:00.520 --> 00:25:03.239
อันนี้จากประสบการณ์ที่เขียนโค้ดมาระดับนึงนะครับ

00:25:03.679 --> 00:25:07.520
เราจะเริ่มรู้ว่า สิ่งที่ดีที่สุดน่ะ

00:25:07.880 --> 00:25:09.480
คือสิ่งที่มันคือ simple ที่สุด

00:25:10.000 --> 00:25:15.196
อย่างเคสอันเนี้ยมันเรียกว่า close to native CSS

00:25:15.279 --> 00:25:16.196
กับ JavaScript มากๆ

00:25:16.279 --> 00:25:18.757
อย่าง JavaScript function ง่ายๆ export

00:25:18.840 --> 00:25:20.557
อะไรไม่ได้มีอะไรซับซ้อนใช่มั้ยครับ

00:25:20.640 --> 00:25:23.797
CSS ก็เรายังเขียนทุกอย่างอยู่ในไฟล์ CSS อยู่

00:25:23.880 --> 00:25:26.880
ถ้าวันนึงเราบอกว่า CSS module ไม่ตอบโจทย์เรา

00:25:27.279 --> 00:25:29.836
เราก็ก็อปปี้มันทั้งไฟล์เอาไปแปะใน CSS

00:25:29.919 --> 00:25:31.600
แล้วก็ยังใช้งานได้อยู่นึกออกป่ะ

00:25:35.039 --> 00:25:37.241
อันนี้ก็เลยเป็นผมรู้สึกว่าวิธีเนี้ย

00:25:37.840 --> 00:25:41.400
คือวิธีที่ดีที่สุดเท่าที่ผมเห็น ณ ตอนนี้นะครับ

00:25:42.080 --> 00:25:44.239
ถ้าเปรียบเทียบกับเครื่องมือที่มีอยู่ในตลาด

00:25:44.360 --> 00:25:47.677
ในการ style reusable component นะครับ

00:25:47.760 --> 00:25:48.720
เพราะว่าทุกอย่างอ่ะ

00:25:49.399 --> 00:25:53.637
เราแทบจะเรียกว่า leverage เครื่องมือต่างๆ

00:25:53.720 --> 00:25:54.517
ที่มันมีอยู่แล้วอ่ะ

00:25:54.600 --> 00:25:56.640
โดยที่เราไม่ต้องทำอะไรเลยนะครับ

00:25:57.320 --> 00:25:59.960
โอเค อันนี้เป็นแค่จุดเริ่มต้นนะครับ

00:26:01.399 --> 00:26:06.277
ผมทำ POC มาแล้วแหละ มันก็ดูเวิร์คดีนะครับ

00:26:06.360 --> 00:26:08.476
แต่ว่าแน่นอนว่าเดี๋ยวต้องเอาลองไปเทสต์ดูว่า

00:26:08.559 --> 00:26:10.357
ถ้า production library จริงๆ อ่ะ

00:26:10.440 --> 00:26:13.039
มันจะเจอข้อจำกัดอะไรบ้างนะครับ

00:26:14.919 --> 00:26:16.956
ถ้าผมทำ library นี้เสร็จเมื่อไหร่

00:26:17.039 --> 00:26:19.357
เดี๋ยวจะมาเล่าให้ฟังอีกทีนึงนะครับ

00:26:19.440 --> 00:26:22.157
แล้วไว้เจอกันใน episode หน้าครับ

00:26:22.240 --> 00:26:25.880
วันนี้ขอบคุณทุกคนมากครับที่รับฟัง

00:26:26.880 --> 00:26:29.800
ขอบคุณทางพี่ศิริวัฒน์มากๆ นะครับ พี่
