WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:00.080 --> 00:00:01.240
เรามาเริ่มกันเลยดีกว่า

00:00:02.399 --> 00:00:08.319
เริ่มแล้วครับ

00:00:09.519 --> 00:00:11.077
โอเค ก็อย่างงี้ครับ

00:00:11.160 --> 00:00:16.160
ก็เราอยู่กับ sub-session ที่ชื่อว่า Build Your First Web App

00:00:16.600 --> 00:00:19.597
นะครับ with Azure, GitHub, and MongoDB นะครับ

00:00:19.680 --> 00:00:20.637
หลาย tool เลยนะครับ

00:00:20.720 --> 00:00:22.956
อยู่กับผมจ๊อบ จิรชัย จันศิวนนท์นะครับ

00:00:23.039 --> 00:00:26.240
Consulting Engineer จาก MongoDB นั่นเองนะครับ

00:00:26.560 --> 00:00:28.477
ก็เมื่อกี้เราแค่กำลังหาวิธีว่า

00:00:28.560 --> 00:00:31.596
เอ๊ะ จะทำยังไงให้มันเกิดแสงจาก MongoDB บ้างนะครับ

00:00:31.679 --> 00:00:33.597
มุกก็แป้กไปนั่นเองนะครับ

00:00:33.680 --> 00:00:35.957
ทีนี้ก็อาจจะเป็นชื่อไตเติลใหม่นะครับ

00:00:36.040 --> 00:00:39.316
ใครที่เคยเจอผมก็อาจจะไม่ค่อยคุ้นชื่อโลโก้ใหม่

00:00:39.399 --> 00:00:39.956
นิดหน่อยนะครับ

00:00:40.039 --> 00:00:42.636
แล้วก็บางคนที่ไม่รู้จักก็แนะนำตัวนิดนึงนะครับ

00:00:42.719 --> 00:00:43.796
ก็ชื่อจ๊อบนั่นเองนะครับ

00:00:43.879 --> 00:00:46.237
ปัจจุบันเป็น Consulting Engineer อยู่ที่ MongoDB

00:00:46.320 --> 00:00:47.039
ที่สิงคโปร์

00:00:47.160 --> 00:00:51.077
ก่อนหน้านี้นะครับ บางคนอาจจะจำได้ว่าผมอาจจะเป็นเซลส์

00:00:51.160 --> 00:00:51.277
นะครับ

00:00:51.360 --> 00:00:53.237
แต่วันนี้ผมเป็น Consulting Engineer นะครับ

00:00:53.320 --> 00:00:55.479
ดังนั้นใน sub-session นี้เราไม่ขายของ

00:00:55.680 --> 00:00:56.677
ไม่ขายของเลยนะครับ

00:00:56.760 --> 00:01:00.837
ดังนั้นมันจะเป็นการมาเล่าในมุมของคนเล่น product นะครับ

00:01:00.920 --> 00:01:03.557
แล้วก็มาลองดูว่า เอ๊ะ เราจะทำอะไรกับมันได้บ้าง

00:01:03.640 --> 00:01:04.600
นั่นเองนะครับ

00:01:04.960 --> 00:01:08.356
ก่อนหน้านี้ผมเคยทำอยู่ที่ Microsoft นะครับ

00:01:08.439 --> 00:01:09.877
ตอนนั้นเป็น Digital Specialist

00:01:09.960 --> 00:01:12.477
บางคนก็เลยจะติดภาพว่า เอ๊ะ เราเป็นเซลส์หรือเปล่านะครับ

00:01:12.560 --> 00:01:14.600
แต่วันนี้เป็น pure technical นะครับ

00:01:15.520 --> 00:01:19.557
โอเค ก็ recap ชื่อ session ประมาณนี้

00:01:19.640 --> 00:01:22.400
แต่จริงๆ ผมจะบอกว่าตอนแรก session ไม่ได้ชื่อนี้

00:01:23.119 --> 00:01:28.560
แต่มันควรจะชื่อนี้

00:01:29.320 --> 00:01:33.517
เอ้ ทำไมนะ ทำไมมันเป็นอย่างงี้ได้ยังไงนะครับ

00:01:33.600 --> 00:01:36.797
คือเรื่องราวเนี่ยครับ มันเกิดความผิดพลาดนิดนึง

00:01:36.880 --> 00:01:39.837
ระหว่างตอนที่ submit หัวข้อไปนะครับ

00:01:39.920 --> 00:01:43.117
ว่าจะเอาทุกอย่างเนี่ย มันจะต้องจบด้วย MongoDB นะครับ

00:01:43.200 --> 00:01:45.799
ที่เดินมาตรงนี้เพราะผมจำไม่ได้ว่าหน้าถัดไปคือหน้าอะไร

00:01:46.040 --> 00:01:46.479
นะครับ

00:01:47.200 --> 00:01:50.676
ผมก็เลยแบบ เฮ้ย อยากจะทำให้มันทุกอย่างเนี่ย

00:01:50.759 --> 00:01:52.036
มัน streamline โชว์เลยว่า

00:01:52.119 --> 00:01:54.799
จริงๆ แล้วเนี่ย จริงๆ MongoDB เราไม่ได้มีแค่ database

00:01:55.280 --> 00:02:00.036
แล้วในฐานะที่ไปอยู่เป็น Consulting Engineer มา 5 เดือน

00:02:00.119 --> 00:02:00.517
เนี่ยนะครับ

00:02:00.600 --> 00:02:02.557
เราเล่นอะไรไปแล้วบ้างนั่นเองนะครับ

00:02:02.640 --> 00:02:05.279
แต่ว่าก่อนอื่นเรามาทำความเข้าใจนิดนึงก่อนว่า

00:02:05.399 --> 00:02:07.517
session เนี้ยมันจะเหมาะกับใครนะครับ

00:02:07.600 --> 00:02:11.199
session นี้เนี่ยก็เหมาะกับใครก็ตามที่สนใจอยากจะหา

00:02:11.400 --> 00:02:13.760
product มาพัฒนาเป็น end-to-end นะครับ

00:02:13.959 --> 00:02:16.677
มาทำตั้งแต่ต้นน้ำจนปลายน้ำนะครับ

00:02:16.760 --> 00:02:20.876
สำหรับคนที่อยากจะหา product ฟรี หรือราคาย่อมเยา

00:02:20.959 --> 00:02:21.120
นะครับ

00:02:22.080 --> 00:02:24.837
หรือใครกำลังมองหาพวก database as a service

00:02:24.920 --> 00:02:28.199
ก็คือเราไม่ต้องโฮสต์ database เอง แต่เราใช้ได้นะครับ

00:02:28.360 --> 00:02:30.120
หรือใครที่สนใจในเรื่อง MongoDB

00:02:30.400 --> 00:02:33.637
ส่วนใครที่อยากจะดูแบบว่า ดูครูดูเจ๋ง so goat นะครับ

00:02:33.720 --> 00:02:37.156
so มันเป็นคำของเด็กยุค Gen Alpha อยากเป็นบ้าง

00:02:37.239 --> 00:02:38.796
ก็เลยไปเอายืมคำมานะครับ

00:02:38.879 --> 00:02:43.076
ทีนี้ก่อนอื่นนะครับ เราเข้าใจกันซักนิดนึงก่อนว่า

00:02:43.159 --> 00:02:45.719
เวลาเราทำเว็บ basic ทั่วๆ ไป 1 เว็บเนี่ย

00:02:46.280 --> 00:02:48.560
เราจะมีอยู่ประมาณ 3 layer ด้วยกันใช่มั้ยครับ

00:02:48.800 --> 00:02:51.719
เราก็จะมีส่วนที่เป็นแสดงผล frontend มี API

00:02:52.040 --> 00:02:53.917
เป็นตัวประมวลผลต่อกับ database

00:02:54.000 --> 00:02:57.680
คุยกันกระจัดกระจายประมวลนู่นนี่นั่น บลาๆ ใช่มั้ยครับ

00:02:57.879 --> 00:03:00.081
จริงๆ แล้วเวลาเรามอง โอ้ จริงๆ database

00:03:00.239 --> 00:03:00.880
เราก็อาจจะใช้

00:03:01.080 --> 00:03:03.557
ถ้าเกิดจะพูดถึง MongoDB ก็คงจะอยู่แค่ layer นี้

00:03:03.640 --> 00:03:04.277
ใช่มั้ยครับ

00:03:04.360 --> 00:03:08.876
แต่จริงๆ แล้วเนี่ย MongoDB มันสามารถจะอยู่ในทุกๆ

00:03:08.959 --> 00:03:10.080
ที่เลยนะครับ

00:03:10.760 --> 00:03:12.557
อันนี้พอดีลูกค้าพิมพ์มานะครับ

00:03:12.640 --> 00:03:14.279
แต่ว่าข้ามไปก่อน

00:03:15.959 --> 00:03:17.757
ทีนี้จริงๆ มันสามารถอยู่ทุก layer เลยนะ

00:03:17.840 --> 00:03:20.080
จริงๆ MongoDB เนี่ย มันสามารถจะเป็น frontend ก็ได้

00:03:20.280 --> 00:03:22.317
เป็น API ก็ได้ แล้วก็เป็น database

00:03:22.400 --> 00:03:24.876
แล้วทั้งเส้นเนี้ยครับ เราสามารถใช้อยู่บนแพลตฟอร์มของ

00:03:24.959 --> 00:03:26.960
MongoDB Atlas ตัวเดียวได้เลย

00:03:27.200 --> 00:03:30.397
แต่ถ้าว่านะครับ เอ๊ะ แล้วไอ้ Atlas เนี่ยมันคืออะไร

00:03:30.640 --> 00:03:34.076
Atlas เนี่ยมันคือ MongoDB เวอร์ชัน cloud นะครับ

00:03:34.159 --> 00:03:36.037
ซึ่งไอ้เวอร์ชัน cloud เนี่ยมันหมายความว่า

00:03:36.120 --> 00:03:38.757
เราสามารถที่จะไปหยิบ cloud ซักเจ้านึงเนี่ย

00:03:38.840 --> 00:03:42.037
มาโฮสต์ตัว MongoDB แล้วใช้งานได้ infrastructure

00:03:42.120 --> 00:03:43.520
ไม่ต้องไปสนใจนะครับ

00:03:43.680 --> 00:03:45.277
แล้ว service เนี่ยมันมีมากมายเลย

00:03:45.360 --> 00:03:47.479
เต็มไปหมดเลยครับ มันเยอะมาก

00:03:47.640 --> 00:03:48.557
ล้นสไลด์ครับ

00:03:48.640 --> 00:03:49.796
ล้นใช่ มันล้นสไลด์

00:03:49.879 --> 00:03:52.600
นี่ตั้งใจจริงๆ เนี่ยตรงนี้มีถึงนู่น

00:03:56.040 --> 00:03:59.796
จริงๆ คือมันล้นนะครับ มันเยอะมาก

00:03:59.879 --> 00:04:03.677
แต่ถ้าว่างี้ครับ สไลด์ถัดไปมันคืออะไร

00:04:03.760 --> 00:04:08.066
แต่ถ้าว่ามันเกิดเหตุไม่คาดฝันครับ service deprecation

00:04:08.546 --> 00:04:11.759
แล้วนี่คือสาเหตุที่ทำให้ผมต้องเปลี่ยนหัวข้อจาก

00:04:11.879 --> 00:04:13.477
Mongo Mongo Mongo เนี่ย

00:04:13.560 --> 00:04:16.037
เป็น Azure, GitHub และ Mongo นั่นเองนะครับ

00:04:16.120 --> 00:04:23.723
เพราะไอ้ที่เตรียมมาเมื่อกี้ครับ มัน deprecated ครับ

00:04:24.240 --> 00:04:30.400
มันเหมือนจะสั้นนะครับ แต่จริงๆ แล้วเนี่ย เอาหมดเลย

00:04:32.000 --> 00:04:34.517
ก่อนอื่นบอกนะครับ วันนี้ไม่ได้มาในฐานะ MongoDB นะครับ

00:04:34.600 --> 00:04:37.160
เรามาในฐานะคนที่ทำงานใน MongoDB

00:04:37.320 --> 00:04:38.517
แล้วก็มาพูดงาน community

00:04:38.600 --> 00:04:40.877
ดังนั้น งานนี้ MongoDB ไม่เกี่ยวอะไรนะครับ

00:04:40.960 --> 00:04:43.516
แต่นี้ต้องบอกเลยว่าเจ็บใจจริงๆ

00:04:44.080 --> 00:04:45.439
นั่งเล่นๆ อยู่ เฮ้ย submit

00:04:45.720 --> 00:04:48.197
โอ้โห เรามีทั้ง Device Sync มี

00:04:48.280 --> 00:04:50.319
โอ้ จะไปออกเป็น WebAssembly

00:04:50.479 --> 00:04:54.116
ไปนั่งดูใน GitHub มี branch จะเตรียม release ใน quarter หน้า

00:04:54.199 --> 00:04:56.797
พอกดมา ไอ้อาทิตย์ 2 อาทิตย์ก่อนหน้านะครับ

00:04:56.880 --> 00:04:58.277
ผมเข้าไป product sync call

00:04:58.360 --> 00:05:02.357
เฮ้ย หวัดดีจิรชัย แบบ you มีอะไรสนใจอยากจะแชร์มั้ย

00:05:02.440 --> 00:05:04.680
แล้วก็ เออ อ้ายอยากถามถึงเกี่ยวกับตัว Device Sync

00:05:04.800 --> 00:05:04.997
จังเลย

00:05:05.080 --> 00:05:07.280
เค้าก็บอกว่า อ้อ ตัวนั้นน่ะเหรอ

00:05:07.800 --> 00:05:11.637
อืม เอ่อ เรามีแผนว่าเราอาจจะไม่ไปต่อ

00:05:11.720 --> 00:05:13.040
ห้า You พูดว่าไงนะ

00:05:13.280 --> 00:05:15.997
เสร็จแล้ว ใช่ครับ

00:05:16.080 --> 00:05:19.600
แล้วผมก็ไปเปิดดูหน้าเว็บ มันก็บอกว่า กูไม่อยู่แล้วนะ

00:05:20.600 --> 00:05:24.477
แล้วดังนั้นไอ้ของที่มันหยิบมาเล่าได้วันเนี้ย

00:05:24.560 --> 00:05:26.517
ก็เลยเหลือแค่ปลายน้ำนะครับ

00:05:26.600 --> 00:05:38.880
ดังนั้น architect เนี่ย แล้วก็ในรูปเนี้ย มันก็

00:05:40.360 --> 00:05:42.720
คืออย่างนี้ครับ ผมเตรียมมานะครับ

00:05:43.400 --> 00:05:46.236
เรามีฟังก์ชันจะมาต่ออะไรมากมายเนี่ย ตอนนี้ครับ

00:05:46.319 --> 00:05:48.760
มันเหลืออยู่แค่นี้ฮะ

00:05:49.880 --> 00:05:52.400
ใช่ มันเหลืออยู่แค่นี้จริงๆ

00:05:52.520 --> 00:05:54.000
มันทำให้ภาพเราไม่จบฮะ

00:05:54.160 --> 00:05:56.477
แล้วก็ทำให้ demo ที่เตรียมมาเนี่ย

00:05:56.560 --> 00:05:58.280
มันต้องเริ่มทำใหม่กันเมื่อวานนะฮะ

00:06:00.400 --> 00:06:02.277
คือจะบอกว่าช่วงที่เราซ้อมพรีเซนต์หัวข้ออ่ะ

00:06:02.360 --> 00:06:03.077
เรายังว่างอยู่นะครับ

00:06:03.160 --> 00:06:06.277
ช่วงหลังๆ มางานมันเริ่มล้นมือก็เลยทำไม่ทันจริงๆ

00:06:06.360 --> 00:06:06.516
นะครับ

00:06:06.599 --> 00:06:08.197
ขนาดเมื่อวานนั่งอยู่บนเครื่องบิน

00:06:08.280 --> 00:06:11.040
ยังเปิดจอแอบตาคนข้างๆ เลยนะฮะ

00:06:12.280 --> 00:06:14.236
ทีนี้จริงๆ ภาพที่มันควรจะเป็นน่ะ

00:06:14.319 --> 00:06:17.319
ถ้าเกิดมันมีอยู่ครบเนี่ย มันควรจะเป็นประมาณนี้นะครับ

00:06:18.800 --> 00:06:21.639
เราสามารถใช้ hosting service บนมองโกดีบี

00:06:21.759 --> 00:06:23.400
โฮสต์ตัว frontend นะครับ

00:06:23.599 --> 00:06:28.157
แล้วก็มี device SDK ซึ่งเป็น lib ของมองโกดีบีเนี่ย

00:06:28.240 --> 00:06:31.157
ในการ communicate คุยกับฟังก์ชันอื่นๆ

00:06:31.240 --> 00:06:32.840
โดยที่เราไม่ต้องไปเขียนอะไรมากมาย

00:06:33.199 --> 00:06:36.157
แล้วมันมี device sync เนี่ย

00:06:36.240 --> 00:06:37.836
คือรู้แหละว่ามัน deprecated ไปแล้ว

00:06:37.919 --> 00:06:39.680
แต่อยากจะเล่าให้ฟังเพราะว่ามันเจ๋งมากเว้ย

00:06:39.919 --> 00:06:43.597
คือเสียดายมาก คือสมมติว่าเรามีอุปกรณ์มือถือ

00:06:43.680 --> 00:06:44.516
เครื่องนึงใช่มั้ยครับ

00:06:44.599 --> 00:06:47.880
แล้วเรามีเก็บ data ไว้บนมองโกดีบี Atlas ใช่มั้ยฮะ

00:06:48.000 --> 00:06:50.077
แล้วปรากฏว่ามันต้องมีบางจังหวะที่มันออฟไลน์

00:06:50.160 --> 00:06:50.880
หรือเน็ตไม่มี

00:06:51.080 --> 00:06:52.637
แล้ว say ว่าเราเป็นเซลล์ก็ได้

00:06:52.720 --> 00:06:55.717
เราไปหาลูกค้า เราบันทึกข้อมูล ตึ๊ดๆๆๆ

00:06:55.800 --> 00:06:56.836
ปรากฏว่าเน็ตหลุด

00:06:56.919 --> 00:06:59.836
ดังนั้นของในบน Atlas ที่เราตัดสต็อกไปอ่ะ

00:06:59.919 --> 00:07:00.877
กับตรงที่เค้าตัดตรงเนี้ย

00:07:00.960 --> 00:07:03.757
มันจะต้อง sync กันซักวิธีนึงใช่มั้ยครับ

00:07:03.840 --> 00:07:05.796
ปกติเราต้องไปเขียน mechanism เพิ่ม

00:07:05.879 --> 00:07:08.396
แต่อันนี้มันจัดการให้เลยเว้ย มัน sync ให้เลยอ่ะ

00:07:08.479 --> 00:07:10.116
แล้วก็แบบ real time นะครับ

00:07:10.199 --> 00:07:11.877
แล้วก็คือ collection ใน compare

00:07:11.960 --> 00:07:13.440
แล้วก็ใส่พวก logic ได้มากมาย

00:07:14.039 --> 00:07:16.439
ถัดมาตรง layer ที่เป็น backend เนี่ย

00:07:16.560 --> 00:07:18.080
แต่ก่อนเนี่ยมันมี webhook นะครับ

00:07:18.720 --> 00:07:22.477
แต่ก่อนมันเรียกว่า HTTPs webhook มั้ง

00:07:22.560 --> 00:07:23.877
ถ้าเกิดผมจำไม่ผิดนะครับ

00:07:23.960 --> 00:07:27.601
มันจะทำหน้าที่เป็นตัวกลางในการรับพวก request ต่างๆ

00:07:27.720 --> 00:07:29.836
แล้วไปเรียกฟังก์ชันนะครับ

00:07:29.919 --> 00:07:32.956
ฟังก์ชันเหมือนกับพวก AWS Lambda

00:07:33.039 --> 00:07:35.477
เหมือนกับ Cloud Run เหมือน Azure Function นะครับ

00:07:35.560 --> 00:07:37.680
ทำไมเราเรียง order แบบนี้ แต่ว่าไม่เป็นไร

00:07:37.800 --> 00:07:39.956
อ่ะ ก็ฟังก์ชันนะครับ

00:07:40.039 --> 00:07:42.357
แล้วก็ไป trigger แล้วก็ไปเรียก database

00:07:42.440 --> 00:07:43.597
แต่ตรงนี้มันจะมีตรงนี้อีก

00:07:43.680 --> 00:07:45.519
มี check แบบพวกสิทธิ์ของ user

00:07:45.680 --> 00:07:47.637
มี scope มี check data access ด้วย

00:07:47.720 --> 00:07:49.880
คือของพวกนี้เราแทบไม่ต้องเขียนโค้ดเองเลยนะ

00:07:50.080 --> 00:07:52.317
เราสามารถเซ็ตสิทธิ์ permission ของ user อ่ะ

00:07:52.400 --> 00:07:54.560
ผ่าน GUI ของมองโกดีบีได้เลยเว้ย

00:07:54.759 --> 00:07:56.676
คือสมมติว่าเรามี collection นึง

00:07:56.759 --> 00:07:59.560
collection ถ้าเกิดใครที่ไม่เคยใช้มองโกดีบีนะครับ

00:07:59.840 --> 00:08:03.516
เอ่อ ให้เทียบกับเหมือน table ในพวก SQL อ่ะครับ

00:08:03.599 --> 00:08:05.477
ถ้าเกิดสมมติว่าเรามี collection นึงเนี่ย

00:08:05.560 --> 00:08:07.116
เก็บ list ของ user เอาไว้

00:08:07.199 --> 00:08:09.956
แล้วก็มีอีก collection นึงเป็นแบบ inventory

00:08:10.039 --> 00:08:13.879
เราสามารถบอกได้เลยนะ เขียนไปเป็น rules เลยอ่ะว่า

00:08:14.199 --> 00:08:16.197
เราอยากจะให้ user ที่มี field แบบนี้

00:08:16.280 --> 00:08:18.236
เท่ากับแบบนี้สามารถ access collection นี้

00:08:18.319 --> 00:08:20.480
นั่นเป็น GUI ด้วย ใช้ง่ายมาก

00:08:21.080 --> 00:08:22.956
ใช่ แต่ว่ามันไปแล้วอ่ะ

00:08:23.039 --> 00:08:35.520
มันทำให้ภาพนี้ไม่สมบูรณ์เว้ย

00:08:35.719 --> 00:08:37.717
แล้วก็จะแก้หน้าถัดมาเนี่ย

00:08:37.800 --> 00:08:40.840
ผมพึ่งนึกได้ตอนที่มาอยู่ตรงนี้ว่ายังทำไม่เสร็จ

00:08:41.000 --> 00:08:43.557
คือตรงนี้เราก็จะ replace ของ

00:08:43.640 --> 00:08:45.400
นี่ไง มีหน้าโน้ตของตัวเองด้วย

00:08:45.640 --> 00:08:46.957
เมื่อกี้คือหน้าโน้ตนะครับ

00:08:47.040 --> 00:08:48.637
คือภาพทั้งหมดเมื่อกี้อ่ะ

00:08:48.720 --> 00:08:50.077
ขอเอารูปเต็มตรงนี้แล้วกัน

00:08:50.160 --> 00:08:52.157
ผมว่าจะ replace ภาพนี้ด้วยตรงนี้ครับ

00:08:52.240 --> 00:08:54.040
ตรง hosting service อ่ะครับ

00:08:54.279 --> 00:08:58.000
ผมจะใช้เป็น Azure Static Web App นะครับ

00:08:58.320 --> 00:09:01.903
แล้วก็ตัวที่เป็นตัวฟังก์ชันตรง webhook ตรงนี้

00:09:01.987 --> 00:09:05.597
ทั้งหมดนี้ครับ เราจะใช้เป็น AWS Lambda นะครับ

00:09:05.680 --> 00:09:07.357
ใครไม่รู้จัก Lambda ของ AWS

00:09:07.440 --> 00:09:08.917
มันคือเป็น function as a service

00:09:09.000 --> 00:09:10.037
เราสามารถเขียนเป็นฟังก์ชัน

00:09:10.120 --> 00:09:12.037
เราไปโฮสต์ไว้บน cloud ได้ URL มา

00:09:12.120 --> 00:09:14.957
เซ็ตใดๆ ไม่ต้องไป set up web server เพิ่มเติม

00:09:15.040 --> 00:09:16.517
เขียนเป็น function based นะครับ

00:09:16.600 --> 00:09:18.360
มาใช้ตรงนี้แทนนะครับ

00:09:18.519 --> 00:09:19.957
แล้วก็เนื่องจากตรงนี้ไม่มีแล้ว

00:09:20.040 --> 00:09:21.477
ก็ช่างแม่งมันไปนะครับ

00:09:21.560 --> 00:09:23.719
ส่วน GitHub ยังอยู่เหมือนเดิมนะครับ

00:09:24.120 --> 00:09:27.519
ก็สามารถเอาไว้สำหรับเป็นตัว CI/CD deploy ได้

00:09:27.640 --> 00:09:30.397
คือในอดีตอ่ะครับ ตอนที่ภาพนี้มันยังครบอ่ะ

00:09:30.480 --> 00:09:33.037
ตัวนี้ครับ มันจะเป็นคนที่คอยหยิบโค้ด

00:09:33.120 --> 00:09:35.517
แล้ว deploy ลงฟังก์ชัน ลง hosting service ให้

00:09:35.600 --> 00:09:36.837
อัตโนมัตินะครับ

00:09:36.920 --> 00:09:39.397
แต่ว่าพอมันไม่มีอ่ะ มันก็ เออ ไม่เป็นไร

00:09:39.480 --> 00:09:41.637
ก็ไปใช้ Azure ใช้ Lambda เอา

00:09:41.720 --> 00:09:44.280
จริงๆ ที่ตอนแรกกะจะไปสุดกว่านั้นน่ะคือ

00:09:44.600 --> 00:09:46.196
ผมจะเอา GCP เข้ามาด้วย

00:09:46.279 --> 00:09:47.477
แต่ว่าเรียนไม่ทันนะครับ

00:09:47.560 --> 00:09:50.439
ทีนี้ถัดมา ถ้าเกิดเป็นภาพใหม่มี Lambda

00:09:50.959 --> 00:09:52.880
ถัดจากตรงนี้มีอะไรอีกใช่มั้ยครับ

00:09:53.279 --> 00:09:55.037
จริงๆ อ่ะ ตรงนี้มันควรจะเป็น database

00:09:55.120 --> 00:09:57.000
แต่ว่าผมวันนี้ผมอยากจะลองอะไรใหม่ๆ

00:09:57.120 --> 00:09:59.397
ถึงแม้ว่าวันนี้เราจะมาเล่าเรื่องมองโกดีบีครับ

00:09:59.480 --> 00:10:01.920
แต่เราไม่ได้ใช้มองโกดีบีเป็น database

00:10:02.120 --> 00:10:03.797
แต่เราจะใช้อย่างอื่นเป็น database

00:10:03.880 --> 00:10:06.159
แล้วเราจะใช้มองโกดีบีเนี่ยเป็นคน query

00:10:06.640 --> 00:10:09.360
แต่ data ไม่ได้อยู่ใน database ของมองโกดีบีเว้ย

00:10:09.480 --> 00:10:11.640
มันอยู่ใน S3 อยู่ใน AWS

00:10:12.720 --> 00:10:17.040
ลองคิดถึงว่าเราอ่ะมี data อยู่ใน AWS S3 เว้ย

00:10:17.240 --> 00:10:20.320
แต่ว่าเราอ่ะชอบการเขียน query ด้วยมองโกดีบี

00:10:20.440 --> 00:10:21.756
คิดเอาเองนะ เผื่อมีคนชอบ

00:10:21.839 --> 00:10:24.880
แต่ผมอ่ะชอบคนนึง เออ อยากจะ query ด้วย MQL

00:10:25.480 --> 00:10:27.759
MongoDB Query Language

00:10:27.959 --> 00:10:30.756
แล้วไปเรียก query data จาก S3 ขึ้นมา

00:10:30.839 --> 00:10:32.077
จะทำยังไงนะครับ

00:10:32.160 --> 00:10:34.319
นั่นแหละ เราจะมาคุยกันเรื่องตรงนี้

00:10:34.640 --> 00:10:35.797
ทีนี้ก็อาจจะถามว่า

00:10:35.880 --> 00:10:37.196
แล้วไอ้ service ที่มันจะ deprecated ไปแล้วอ่ะ

00:10:37.279 --> 00:10:39.760
แล้วถ้าเกิดพูดถึงคนที่กำลังจะทำแอปแล้ว

00:10:40.200 --> 00:10:41.120
หรือทำไปแล้วอ่ะ

00:10:41.240 --> 00:10:44.037
เริ่มทำเอา service ที่มันจะ deprecated

00:10:44.120 --> 00:10:46.679
ไปแล้วอ่ะ มาใช้งานจะทำยังไงดี

00:10:46.839 --> 00:10:50.117
ง่ายๆ เลยครับ คนที่ใช้ไปแล้วก็

00:10:50.200 --> 00:10:53.477
มองโกดีบีบอกว่าไปหา alternative library เอานะครับ

00:10:53.560 --> 00:10:56.597
คือแค่จะบอกว่าใครที่ใช้ deprecated service

00:10:56.680 --> 00:10:57.397
เมื่อกี้นะครับ

00:10:57.480 --> 00:10:59.677
แล้วกำลังหาวิธีแก้นะครับ

00:10:59.760 --> 00:11:03.160
ไม่มีวิธีแก้ใดๆ ดีไปกว่าไปหา lib อื่นมาใช้งาน

00:11:03.279 --> 00:11:04.916
ถ้าเกิดไปอ่านในเว็บมองโกดีบี

00:11:04.999 --> 00:11:06.200
ผมต้องสู้เสียงด้วย

00:11:06.360 --> 00:11:08.756
ถ้าเกิดกำลังไปหา lib มาใช้แทนนะครับ

00:11:08.839 --> 00:11:10.677
ในเว็บมองโกดีบีเขียนเลยนะว่า

00:11:10.760 --> 00:11:12.157
อยากจะได้อะไรมาใช้แทนนะครับ

00:11:12.240 --> 00:11:14.436
มันจะมี alternative library มาสอนนะครับ

00:11:14.519 --> 00:11:16.117
ใครที่ใช้ App Service ไปแล้ว

00:11:16.200 --> 00:11:17.957
ใครที่ใช้ device sync ไปแล้วเนี่ย

00:11:18.040 --> 00:11:20.037
แล้วอยากจะหา alternative library เนี่ย

00:11:20.120 --> 00:11:22.037
ไปอ่านในเว็บมองโกดีบีได้เลยนะครับ

00:11:22.120 --> 00:11:24.840
แล้วเค้าจะบอกวิธีการทำตรงนี้ให้นั่นเองครับ

00:11:26.040 --> 00:11:28.277
ครับ อ้อ โอเคนะครับ

00:11:28.360 --> 00:11:30.797
อันนี้พูดเผื่อก่อนหน้าที่เราจะไปที่ demo นะครับ

00:11:30.880 --> 00:11:32.717
เราก็เลยอยากจะบอกว่าใครที่เริ่มไปแล้ว

00:11:32.800 --> 00:11:33.639
กลับตัวไม่ทัน

00:11:34.000 --> 00:11:36.597
มีทางไปต่อให้เป็น alternative library นะครับ

00:11:36.680 --> 00:11:38.797
ดังนั้นแปลว่า 1 service ที่คุณเคยใช้กับ

00:11:38.880 --> 00:11:39.797
มองโกดีบีเนี่ย

00:11:39.880 --> 00:11:42.637
มันจะแตกแยกย่อยเป็น Hydra นะครับ

00:11:42.720 --> 00:11:45.680
ออกมาเป็น alternative library อย่างงี้นะครับ

00:11:45.959 --> 00:11:50.120
โอเค งั้นเรามาลองดูตัวอย่างกันดีกว่านะครับ

00:11:50.800 --> 00:11:55.000
มาเสียบไมค์

00:11:55.680 --> 00:11:56.996
ใช่เหมือน feel เหมือนแบบว่า

00:11:57.079 --> 00:11:58.357
เฮ้ยน้องจะไปไหนอ่ะ

00:11:58.440 --> 00:12:01.477
อ๋อ ไปไกลจัง รถติดอ่ะน้องลงนี้เลยได้ป่าว

00:12:01.560 --> 00:12:03.120
อะไรอย่างเงี้ย feel ประมาณนั้นนะครับ

00:12:05.360 --> 00:12:08.917
เอ่อ คือวันนี้ไม่ได้มาในฐานะมองโกดีบีแล้วนะ

00:12:09.000 --> 00:12:10.637
มันก็เลยแบบว่าพูดได้เต็มที่นะครับ

00:12:10.720 --> 00:12:14.000
เอ่อ แต่ว่าอย่าให้มันไปไกลกว่านี้นะครับ

00:12:14.360 --> 00:12:16.000
โอเค เอาล่ะ

00:12:16.560 --> 00:12:19.837
ผมบอกว่าเราจะใช้ Static Web App ใช่มั้ยครับ

00:12:19.920 --> 00:12:21.280
ในการโฮสต์ frontend

00:12:21.519 --> 00:12:25.720
เรามี Lambda เป็นฟังก์ชันในการ execute API

00:12:26.320 --> 00:12:30.119
เราใช้มองโกดีบีเป็นคน query แต่ไม่เก็บ data

00:12:30.320 --> 00:12:32.760
แต่ data อยู่บน S3 แทนนะครับ

00:12:33.120 --> 00:12:34.196
ขาดอะไรอีก

00:12:34.279 --> 00:12:36.399
อ้อ แล้วก็มี GitHub เป็น CI/CD

00:12:36.639 --> 00:12:39.920
ในการหยิบโค้ดมา build แล้ว deploy นั่นเองนะครับ

00:12:40.440 --> 00:12:42.120
เริ่มจากอย่างงี้ก่อนเลยนะครับ

00:12:42.560 --> 00:12:45.077
เราต้องเริ่มจากคนที่เป็นคนจัดการงานนะครับ

00:12:45.160 --> 00:12:47.360
นั่นคือ GitHub Actions นั่นเองนะครับ

00:12:48.079 --> 00:12:50.996
อ่ะ ขออนุญาตเปิดหน้าจอใหม่นะครับ

00:12:51.079 --> 00:12:57.400
เพราะว่าไม่รู้ช้างมันเปิดอะไรทิ้งไว้บ้าง

00:12:58.399 --> 00:12:58.719
โอเค

00:13:00.360 --> 00:13:04.756
โอ้ แป๊บนึงนะ อยากได้ยาดมขึ้นมาทันที เป็นหวัด

00:13:04.839 --> 00:13:11.277
อ่า GitHub เอ่อ เราไปที่โปรเจกต์ของเรานะครับ

00:13:11.360 --> 00:13:12.597
ไม่ต้องตามหาโปรเจกต์นี้นะครับ

00:13:12.680 --> 00:13:13.760
ผมปิดเป็น private ไว้

00:13:14.000 --> 00:13:14.597
ขอบคุณครับพี่

00:13:14.680 --> 00:13:15.920
โอ้ย ขอบคุณมากครับ

00:13:16.600 --> 00:13:19.077
อ่ะ อย่าๆ อันนี้ไม่ใช่มองโกดีบีครับ

00:13:19.160 --> 00:13:20.959
อันนี้เป็นตาของไทยปกตินะครับ

00:13:21.360 --> 00:13:24.800
เมื่อกี้มีใช้ยาดมตามองโกดีบีไปนะครับ

00:13:25.480 --> 00:13:26.920
โอเค ขอฟึ้ดนึง

00:13:29.760 --> 00:13:32.439
โอเค เยี่ยม

00:13:32.959 --> 00:13:36.996
ถ้าคอยขายของก็คอยหยิบอย่างงี้ งี้ครับ

00:13:37.079 --> 00:13:40.077
เราอันดับแรก มีใครในที่นี่ไม่รู้จัก GitHub Actions บ้างครับ

00:13:40.160 --> 00:13:41.680
ขอดูมือหน่อยคนที่ไม่รู้จัก

00:13:42.079 --> 00:13:43.717
มีไม่รู้จักจริงๆ ใช่มั้ยฮะ

00:13:43.800 --> 00:13:45.320
ไม่รู้จักจริงๆ ครับ

00:13:46.120 --> 00:13:49.200
แหม มีใครไม่รู้จัก CI/CD มั้ยครับ

00:13:49.399 --> 00:13:50.360
โอเค ไม่รู้จัก

00:13:50.519 --> 00:13:52.676
งั้นเล่าคร่าวๆ ก่อนว่า CI/CD คืออะไรนะครับ

00:13:52.759 --> 00:13:55.640
เนื่องจากเซคชั่นนี้จะเป็นแบบ intermediate นิดนึงนะครับ

00:13:57.880 --> 00:13:59.996
คือถ้าเกิดเรานึกถึงเวลาเราพัฒนา app 1 ตัว

00:14:00.079 --> 00:14:01.237
แล้วต้องการจะ deploy เนี่ย

00:14:01.320 --> 00:14:04.116
เราก็จะมี process ตั้งแต่แบบ build หยิบไป deploy

00:14:04.199 --> 00:14:04.637
ใช่มั้ยครับ

00:14:04.720 --> 00:14:08.237
ซึ่งมันจะเป็น routine ซ้ำๆ ที่ทำซ้ำๆ

00:14:08.320 --> 00:14:10.196
แล้วมันอาจจะเกิดโอกาสผิดพลาดได้ในบางครั้ง

00:14:10.279 --> 00:14:11.717
เวลาเราพิมพ์ผิดใช่มั้ยครับ

00:14:11.800 --> 00:14:14.159
หรือบางทีเราก็ deploy ไม่ทันจังหวะที่ dev

00:14:14.279 --> 00:14:17.040
หรือว่าทีมต่างๆ เนี่ยเค้าจะอาจจะเอาไปเทสต่อ

00:14:17.160 --> 00:14:18.397
เราก็เลยมี tool ตัวนึงครับ

00:14:18.480 --> 00:14:20.196
ก็เรียกว่าพวก CI/CD แหละเนาะ

00:14:20.279 --> 00:14:24.517
CI/CD เนี่ยเป็นคนที่คอยหยิบพวกโค้ดเรามา build

00:14:24.600 --> 00:14:27.599
มา deploy ให้ automate นั่นเองนะครับ

00:14:27.720 --> 00:14:30.520
ซึ่งใน GitHub เนี่ยมันมีตัวที่ชื่อว่า GitHub Actions

00:14:30.839 --> 00:14:33.480
นะครับ ทำหน้าที่ตรงนี้ให้นั่นเองนะครับ

00:14:33.639 --> 00:14:37.920
ดังนั้น เราทำอะไรกับ CI/CD ในโปรเจคนี้บ้าง

00:14:38.320 --> 00:14:41.880
อย่าไปสนใจที่มันแดงๆ นะครับ แดงจริงนะครับ

00:14:43.279 --> 00:14:45.397
คือเนื่องจากเรามี front-end ใช่มั้ยครับ

00:14:45.480 --> 00:14:47.436
เรามี front-end เป็นเว็บนะครับ

00:14:47.519 --> 00:14:49.599
มี back-end ต้องลง Lambda

00:14:49.800 --> 00:14:52.837
แล้วถ้าเกิดสมมติว่ามี 2 ทีมเค้าพัฒนาทั้ง front-end

00:14:52.920 --> 00:14:55.439
แล้วก็ back-end เนี่ยต้องการ push ขึ้นไป

00:14:55.680 --> 00:14:58.316
แบบไม่อยากให้ใครไปยุ่ง process การ build deploy

00:14:58.399 --> 00:15:00.680
เราก็ใช้ GitHub Actions จัดการตรงนี้ให้

00:15:00.800 --> 00:15:03.240
แล้วในฐานะที่เราเป็นคนเดียวเนี่ยพัฒนาเว็บ

00:15:03.759 --> 00:15:05.637
ทั้ง stack เองเนี่ย

00:15:05.720 --> 00:15:08.157
เราจะทำยังไงให้มันสามารถ auto deploy ทั้งก้อนได้

00:15:08.240 --> 00:15:09.876
เราก็ต้องใช้ตัว GitHub Actions เนี่ย

00:15:09.959 --> 00:15:11.597
มาเป็นคนจัดการและ deploy ให้นั่นเอง

00:15:11.680 --> 00:15:13.357
แปลว่าทันทีที่ผมแก้โค้ดปุ๊บ

00:15:13.440 --> 00:15:15.121
แล้วผม commit push ขึ้น GitHub

00:15:15.360 --> 00:15:17.037
มันจะถูกทำการ build แล้ว deploy

00:15:17.120 --> 00:15:18.477
ลงแต่ละ destination ให้เอง

00:15:18.560 --> 00:15:20.880
อย่างเมื่อกี้เรา build front-end ลง Azure

00:15:21.240 --> 00:15:25.116
เรา build ตัว Lambda ลง Lambda นั่นเองนะครับ

00:15:25.199 --> 00:15:28.680
อ่า แล้วก็ส่วน CSV เดี๋ยวค่อยว่ากันไปนะครับ

00:15:28.959 --> 00:15:32.520
อันดับแรกนะครับ เรามาแอบดูตัวที่เป็นฟังก์ชัน

00:15:32.680 --> 00:15:36.279
ที่ผมเขียนไว้ก่อน ตัวนี้นะครับ

00:15:38.120 --> 00:15:40.240
โอเค คือวิธีการใช้งาน

00:15:40.480 --> 00:15:42.277
มีใครไม่รู้จัก YAML มั้ยครับตรงนี้

00:15:42.360 --> 00:15:43.758
น่าจะคุ้นเคยกันทุกคนเนาะ

00:15:43.879 --> 00:15:45.996
YAML เนี่ยมันก็คือเป็น data structure แบบนึงเนาะ

00:15:46.079 --> 00:15:48.597
ในวิธีการ define เป็นแบบว่าเอาไว้ represent data

00:15:48.680 --> 00:15:49.120
นะครับ

00:15:49.279 --> 00:15:51.477
เวลาการ config ตัว GitHub Actions เนี่ย

00:15:51.560 --> 00:15:52.917
มันก็เขียนเป็น YAML เนาะ

00:15:53.000 --> 00:15:54.599
เราบอกไปเลยว่าเราอยากจะทำอะไร

00:15:55.079 --> 00:15:57.436
ตอนนี้ อย่างเช่น ลองนึกถึง process

00:15:57.519 --> 00:15:58.477
เราจะ build เว็บ 1 เว็บ

00:15:58.560 --> 00:15:59.797
เราก็ต้องมี Node.js ก่อน

00:15:59.880 --> 00:16:02.876
มี Node.js เสร็จปุ๊บก็ต้องทำการติดตั้ง dependency

00:16:02.959 --> 00:16:03.556
ใช่มั้ยครับ

00:16:03.639 --> 00:16:05.556
ติดตั้งเสร็จ build build เสร็จแล้ว deploy

00:16:05.639 --> 00:16:08.639
ดังนั้นเราสามารถทำการบอกเราเนี่ยเป็น step

00:16:08.839 --> 00:16:10.477
เป็น step แบบนี้ได้นะครับ

00:16:10.560 --> 00:16:11.676
เราอยากใช้เวอร์ชันไหน

00:16:11.759 --> 00:16:14.559
อ่า เราใช้ Node.js เวอร์ชัน 20 ขึ้นไป

00:16:15.000 --> 00:16:17.037
มีการติดตั้ง dependency เห็นมั้ยครับ

00:16:17.120 --> 00:16:20.116
ใครที่เคยใช้ Node.js ก็ควรจะใช้กันทุกคนอยู่นะครับ

00:16:20.199 --> 00:16:23.917
มางาน JavaScript นะครับ ก็ต้องติดตั้งใช่มั้ยครับ

00:16:24.000 --> 00:16:25.957
ติดตั้งโค้ดเก็บไว้ที่ไหนใช่มั้ยครับ

00:16:26.040 --> 00:16:30.277
เสร็จแล้วยังไงต่อ deploy ลง AWS ใช่มั้ยครับ

00:16:30.360 --> 00:16:34.316
แล้วทีนี้มันเป็นของ secret เออ ก็โชว์ไม่ได้ใช่มั้ยครับ

00:16:34.399 --> 00:16:35.680
โชว์ไม่ได้ก็ต้อง hide ไว้

00:16:36.360 --> 00:16:39.436
ทีนี้ พออยากจะ hide เราก็สามารถเรียกผ่าน

00:16:39.519 --> 00:16:42.000
เหมือน environment variable มาแปะได้นะครับ

00:16:42.560 --> 00:16:45.080
เสร็จแล้ว zip zip เสร็จแล้ว deploy ลง Lambda

00:16:45.399 --> 00:16:46.960
อันนี้คือ deploy ตัว API

00:16:47.399 --> 00:16:48.676
ส่วนของเว็บ Azure นะครับ

00:16:48.759 --> 00:16:50.597
เนื่องจาก Azure Static Web App เนี่ย

00:16:50.680 --> 00:16:52.477
มันมีความสามารถในการ build อัตโนมัติ

00:16:52.560 --> 00:16:53.876
แล้ว copy วางใช่มั้ยครับ

00:16:53.959 --> 00:16:55.357
เราก็เลยวางแค่บล็อกเดียว

00:16:55.440 --> 00:16:57.240
แล้วบอกว่าโค้ดเราเนี่ยอยู่ที่ไหน

00:16:57.440 --> 00:16:59.161
โค้ดเราอยู่ที่โฟลเดอร์ชื่อ front-end

00:16:59.519 --> 00:17:00.797
แล้วหลังจาก build เสร็จแล้วเนี่ย

00:17:00.880 --> 00:17:02.957
โค้ดไปเก็บไว้ที่ไหน อยู่ที่ dist

00:17:03.040 --> 00:17:05.397
แล้วบอกแค่นี้นะครับ process เหล่านี้ครับ

00:17:05.480 --> 00:17:07.876
เดี๋ยว GitHub Actions จะไล่ run เป็นตาม step

00:17:07.959 --> 00:17:08.996
ตาม step ให้นะครับ

00:17:09.079 --> 00:17:11.999
แล้วก็ deploy ลงตามนั้นให้นั่นเองนะครับ

00:17:12.199 --> 00:17:13.517
สิ่งนึงที่ยังไม่ได้ให้ดูนะครับ

00:17:13.600 --> 00:17:16.320
นั่นคือตัว project structure หน้าตาเป็นยังไงนะครับ

00:17:16.480 --> 00:17:18.517
ถ้าเกิดเมื่อกี้เราเห็นกันผ่านๆ นะครับ

00:17:18.600 --> 00:17:20.236
เรามีโฟลเดอร์ตามนี้เลยเห็นมั้ยฮะ

00:17:20.319 --> 00:17:23.116
ผมก็ define ไว้ง่ายๆ เลย มี back-end front-end

00:17:23.199 --> 00:17:23.756
ใช่มั้ยครับ

00:17:23.839 --> 00:17:26.197
แปลว่าจังหวะที่ตอนที่ build front-end back-end เนี่ย

00:17:26.280 --> 00:17:28.239
มันก็จะมาอ่านโค้ดในนี้นะครับ

00:17:28.880 --> 00:17:30.920
โปรเจกต์เนี่ยก็จะเข้าใจง่ายนิดนึงนะครับ

00:17:31.280 --> 00:17:33.637
ชื่อไฟล์นะครับ Maidreamin นะครับ

00:17:33.720 --> 00:17:36.476
อ่า พอดีจริงๆ ช้างบ่นหลายรอบแล้วว่า

00:17:36.559 --> 00:17:39.877
เอ๊ย เราไปร้านเนี่ยเราไม่มีตัวเก็บใบเสร็จเลย

00:17:39.960 --> 00:17:40.596
จะทำยังไงดี

00:17:40.679 --> 00:17:43.277
ผมก็เลยเอามาทำเป็นตัวอย่างในวันนี้ให้นะครับ

00:17:43.360 --> 00:17:44.400
อาจจะยังไม่เสร็จ

00:17:44.880 --> 00:17:45.277
ช้างอยู่เปล่า

00:17:45.360 --> 00:17:46.240
ไม่อยู่แล้ว

00:17:47.000 --> 00:17:48.760
ไม่อยู่แล้ว เรียบร้อยกูละ

00:17:51.679 --> 00:17:53.437
เลยทำเป็นตัวระบบตัวนึงขึ้นมานะครับ

00:17:53.520 --> 00:17:56.037
เดี๋ยวตัวเนี้ยมันจะทำการ extract data จาก S3 นะครับ

00:17:56.120 --> 00:17:58.840
ลองคิดถึงว่าเราบันทึก data ใส่ Excel เนาะ

00:17:59.039 --> 00:18:00.677
เราต้องการจะสามารถให้ query ได้เนี่ย

00:18:00.760 --> 00:18:02.357
แล้วไม่อยากจะเปิด Excel เนี่ย

00:18:02.440 --> 00:18:04.559
ก็ทำเป็น CSV เก็บไว้ใน S3

00:18:05.120 --> 00:18:06.797
แล้วก็ใช้เขียนเป็น web app นึงตัว

00:18:06.880 --> 00:18:08.720
สามารถทำ UI อะไรเงี้ยได้นะครับ

00:18:09.480 --> 00:18:11.277
แต่เรายังไม่คุยเรื่อง data แล้วกัน

00:18:11.360 --> 00:18:13.637
เราคุยกันเรื่องของตัว structure ตัว API ก่อน

00:18:13.720 --> 00:18:16.880
ใน API นะครับ ใครที่ไม่เคยใช้ Lambda เนี่ย

00:18:19.039 --> 00:18:21.677
มันเป็นแค่หน้า UI ตัวหน้าหนึ่งที่เราสามารถเขียนโค้ด

00:18:21.760 --> 00:18:25.237
แล้วก็ให้มันรันเป็น function เป็นรอบๆ ไปนะครับ

00:18:25.320 --> 00:18:28.640
เราส่ง HTTP เข้าไปปุ๊บก็ทำตาม procedure

00:18:28.840 --> 00:18:31.917
ในเนี้ยผมก็แค่บอกว่า ถ้าเกิดมีอะไรมาเนี่ย

00:18:32.000 --> 00:18:33.277
ก็แค่ไป query มา

00:18:33.360 --> 00:18:34.716
นี่โค้ดยังไม่อัพเดตเลยเนี่ย

00:18:34.799 --> 00:18:36.520
เดี๋ยวผมแก้โค้ดใหม่นะครับ

00:18:36.760 --> 00:18:38.917
แล้วระหว่างนี้ก็มีการให้ไป connect MongoDB

00:18:39.000 --> 00:18:40.479
อะไรๆ ให้เรียบร้อยนะครับ

00:18:40.640 --> 00:18:43.037
เพื่อทำการเหมือน query data แล้ว export

00:18:43.120 --> 00:18:44.440
ออกไปนั่นเองนะครับ

00:18:44.559 --> 00:18:47.600
อันนี้คือ idea แล้วก็ logic ของการทำ API

00:18:47.799 --> 00:18:49.076
ของโปรเจคนี้นะครับ

00:18:49.159 --> 00:18:50.917
ส่วน frontend เองก็ไม่มีอะไรมาก

00:18:51.000 --> 00:18:53.076
เป็นหน้าจอธรรมดาๆ นั่นเองนะครับ

00:18:53.159 --> 00:18:56.040
ต้องบอกก่อนนะว่าโปรเจคนี้อยู่ในขั้นตอนพัฒนา

00:18:56.440 --> 00:18:58.800
เดี๋ยวเราจะมีการแก้โค้ดกันตรงนี้ด้วยนะครับ

00:19:01.360 --> 00:19:02.120
ฟังดูดีนะ

00:19:05.360 --> 00:19:09.437
อันดับแรกนะครับ frontend ก็ไม่มีอะไรเป็นโค้ดธรรมดา

00:19:09.520 --> 00:19:12.240
เรามาดูก่อนว่าเวลาเราจะทำตัวโปรเจค

00:19:12.760 --> 00:19:16.239
ตัว static web app เนี่ยต้องทำยังไงบ้างนะครับ

00:19:16.720 --> 00:19:19.640
เราเริ่มจากหน้านี่ก่อนดิ

00:19:20.480 --> 00:19:21.280
ไม่เป็นไร

00:19:21.960 --> 00:19:22.520
ยอมได้

00:19:23.679 --> 00:19:26.476
อันดับแรกนะครับ ถ้าเกิดเราจะเริ่มจากจุดก่อนว่า

00:19:26.559 --> 00:19:28.197
ถ้าเกิดจะ set up นึงโปรเจคเนี่ย

00:19:28.280 --> 00:19:31.637
เรารู้แล้วว่าเราจะต้องมีการ define ตัว pipeline

00:19:31.720 --> 00:19:33.277
เราก็ list ตามนั้นไปใช่มั้ยครับ

00:19:33.360 --> 00:19:35.197
แต่ถัดมาที่เราต้องมีเนี่ยก็คือ resource

00:19:35.280 --> 00:19:36.197
ที่จะต้องให้ deploy

00:19:36.280 --> 00:19:38.317
อย่างเช่นมี frontend backend ใช่มั้ยครับ

00:19:38.400 --> 00:19:40.076
เราก็ต้องไปสร้าง resource frontend ก่อน

00:19:40.159 --> 00:19:42.437
อย่างงี้เราก็ไปสร้างใน static web app

00:19:42.520 --> 00:19:43.720
บน Azure ได้เลยนะครับ

00:19:44.120 --> 00:19:45.476
static web apps นะครับ

00:19:45.559 --> 00:19:48.480
วิธีการใช้ static web app บน Azure เนี่ยก็ง่ายมาก

00:19:48.600 --> 00:19:51.960
search static web app นะครับ กด create ตั้งชื่อ

00:19:52.240 --> 00:19:54.037
ผมบอกแล้วนะว่า section นี้เนี่ย

00:19:54.120 --> 00:19:56.840
เราเน้นกับของฟรีและราคาดีนะครับ

00:19:56.960 --> 00:19:59.440
ดังนั้นของ Azure ตัว static web app

00:19:59.559 --> 00:20:00.960
ที่ host เว็บ frontend อย่างเดียวเนี่ย

00:20:01.600 --> 00:20:03.237
แล้วก็มีฟรีพวก function ด้วยครับ

00:20:03.320 --> 00:20:05.677
แต่ว่าผมไม่ใช้นะ มันฟรีนั่นเองนะครับ

00:20:05.760 --> 00:20:08.400
เราสามารถที่จะตั้งชื่อโปรเจคใหม่ขึ้นมาได้นะครับ

00:20:09.000 --> 00:20:11.160
ผมลองดูนะ bkkjs นะครับ

00:20:11.320 --> 00:20:22.157
แล้วก็ตั้งชื่อให้โปรเจคนี้ ผมตั้งชื่อนี้ชื่อว่า my made ni

00:20:22.240 --> 00:20:23.237
แต่ว่าอันนี้เคยตั้งไปแล้ว

00:20:23.320 --> 00:20:25.520
ผมก็เลยตั้งชื่อใหม่ 01 นะครับ

00:20:26.799 --> 00:20:29.640
01 นี่จะเห็นได้ว่ามันจะมี free plan นะครับ

00:20:31.640 --> 00:20:33.600
ใช้ฟรีแล้วกันนะครับ

00:20:34.720 --> 00:20:37.836
ไม่เอา standard ก็ได้

00:20:37.919 --> 00:20:39.679
อย่างงี้ก่อน

00:20:40.799 --> 00:20:43.062
ผมเล่าก่อนว่า standard กับ free มันต่างกันยังไงเนาะ

00:20:43.146 --> 00:20:45.317
standard มันแค่รับ traffic ได้เยอะขึ้นนะครับ

00:20:45.400 --> 00:20:49.836
แล้วก็เก็บตัว storage ได้เยอะขึ้นมั้ง size code

00:20:49.919 --> 00:20:52.320
แล้วก็เหมือนสามารถต่อเป็น private endpoint ได้

00:20:52.679 --> 00:20:54.357
ผมจำไม่ได้นะครับ ไม่ได้อยู่ Microsoft แล้ว

00:20:54.440 --> 00:21:00.317
ผมจำไม่ได้ละ

00:21:00.400 --> 00:21:02.317
เราจะทำการ manual deploy เนาะ

00:21:02.400 --> 00:21:04.197
เราจะไม่อยากเอา คือถ้าเกิดเราเลือกตรงเนี้ย

00:21:04.280 --> 00:21:06.317
มันคือมันจะทำการสร้าง pipeline ให้อัตโนมัติ

00:21:06.400 --> 00:21:08.076
คือถ้าเกิดใครใช้ static web app ครับ

00:21:08.159 --> 00:21:10.240
แล้วบอกว่าอยากจะทำ automate deploy

00:21:10.600 --> 00:21:12.956
จาก GitHub หรือจาก Azure DevOps เนี่ย

00:21:13.039 --> 00:21:14.476
เราสามารถกดจากตรงนี้ได้เลยนะครับ

00:21:14.559 --> 00:21:16.520
แล้วมันก็จะสร้าง pipeline ให้นั่นเองนะครับ

00:21:16.960 --> 00:21:18.917
อย่างอันนี้เราไม่เอา เราต้องการจะเหมือนแบบ

00:21:19.000 --> 00:21:19.797
manual นะครับ

00:21:19.880 --> 00:21:21.677
ผมเลือกเป็น others นะครับ

00:21:21.760 --> 00:21:23.716
ส่วน advance เนี่ยเราอาจจะไม่ได้ใช้พวก

00:21:23.799 --> 00:21:24.836
function เหล่านี้นะครับ

00:21:24.919 --> 00:21:27.000
แต่เราเลือกเอาว่า deploy ลง East Asia

00:21:27.279 --> 00:21:28.476
distributed function

00:21:28.559 --> 00:21:29.716
เพราะเราไม่ได้ใช้ Azure function

00:21:29.799 --> 00:21:31.476
ดังนั้นเราก็เลยไม่ติ๊กนะครับ

00:21:31.559 --> 00:21:33.440
review + create ไปเลยนะครับ

00:21:37.400 --> 00:21:38.599
กด create ปึ๊บ

00:21:39.279 --> 00:21:45.160
รอสักครู่

00:21:47.520 --> 00:21:49.997
คือต้องบอกว่า resource นี่มันสร้างง่ายและเร็วนะครับ

00:21:50.080 --> 00:21:52.877
เพราะว่าตัวมันเล็กนะครับ

00:21:52.960 --> 00:21:53.757
งั้นมันสร้างง่าย

00:21:53.840 --> 00:21:55.237
กด go to resource นะครับ

00:21:55.320 --> 00:21:57.440
อันดับแรกนะครับ สิ่งที่เราต้องทำนะครับ

00:21:57.600 --> 00:22:00.439
เรากดสร้างปุ๊บ เราเช็กหน้าเว็บก่อน หน้าตาเป็นยังไง

00:22:00.760 --> 00:22:02.316
หน้าตาตัวอย่างเป็นอย่างงี้

00:22:02.399 --> 00:22:04.596
โอเค congratulations on your website ใช่มั้ยครับ

00:22:04.679 --> 00:22:06.917
ทีนี้ถ้าเกิดเราบอกว่าต้องการจะให้ deploy เว็บลง

00:22:07.000 --> 00:22:08.757
บน static web app ทำยังไงนะครับ

00:22:08.840 --> 00:22:12.757
เราแค่คลิกตรงนี้ครับ manage deployment token นะครับ

00:22:12.840 --> 00:22:14.280
ใครจำได้จำไปนะครับ

00:22:19.400 --> 00:22:20.157
เสร็จแล้วนะครับ

00:22:20.240 --> 00:22:23.160
เมื่อกี้ที่เราดูกันไปในตัว pipeline ผม

00:22:28.000 --> 00:22:31.360
ผมอยู่นี่

00:22:33.720 --> 00:22:36.397
คือเมื่อกี้นะครับ ตอนจังหวะที่ deploy front-end เนี่ย

00:22:36.480 --> 00:22:39.237
เรามีการ require ใช้ secret ชื่อประมาณนี้ใช่มั้ยครับ

00:22:39.320 --> 00:22:40.720
อยากให้ deploy ลงที่นี่

00:22:41.400 --> 00:22:45.117
เราก็แค่ไปแก้ใน secret ของตัว action บน GitHub นะครับ

00:22:45.200 --> 00:22:47.879
ตรงนี้ แปะอันใหม่ลงไปนะครับ

00:22:50.320 --> 00:22:51.720
จบนะครับ ประมาณนี้

00:22:52.880 --> 00:22:53.877
ใช้ passkey ด้วย

00:22:53.960 --> 00:23:02.157
อัพเดตเสร็จปุ๊บ ก็แปลว่าควรจะ deploy ได้แล้วนะครับ

00:23:02.240 --> 00:23:04.917
แต่มันจะยัง deploy ไม่ได้เนื่องจาก pipeline ผมเนี่ย

00:23:05.000 --> 00:23:07.519
มันจะเป็นสเต็ปงี้ deploy ลง Lambda ก่อนแล้วลง Azure

00:23:07.760 --> 00:23:08.277
ใช่มั้ยครับ

00:23:08.360 --> 00:23:11.517
ทีนี้ตัว AWS ที่ผมใช้เนี่ย มันเป็นขององค์กรเนาะ

00:23:11.600 --> 00:23:14.037
ทีนี้มันก็เลยมีการจำกัดเวลาการใช้งาน

00:23:14.120 --> 00:23:17.196
ผมต้อง gen token ใหม่ทุกๆ กี่นาทีผมไม่แน่ใจ

00:23:17.279 --> 00:23:17.836
แต่ถี่มาก

00:23:17.919 --> 00:23:20.440
ดังนั้นขออนุญาต gen token ใหม่แป๊บนึงนะครับ

00:23:20.600 --> 00:23:23.760
แต่ขออนุญาตเปลี่ยนหน้าจอ

00:23:29.880 --> 00:23:31.117
เมื่อกี้สเต็ปแรกใช่มั้ยครับ

00:23:31.200 --> 00:23:33.400
เราไป get ตัว token สำหรับ deploy นะครับ

00:23:34.039 --> 00:23:37.879
แล้วผมก็ไป get token AWS สักครู่นะครับ

00:23:44.000 --> 00:23:45.956
ใครไม่รู้ก็คือก่อนหน้านี้ ก่อนมาเซ็กชั่นเนี้ย

00:23:46.039 --> 00:23:47.677
ผมติดปัญหาเรื่อง CORS นะครับ

00:23:47.760 --> 00:23:49.637
ใน Lambda ผมแก้ไม่ได้เลย

00:23:49.720 --> 00:23:51.880
นั่งดู YouTube ไม่ช่วยเหมือนกันอันนี้

00:23:54.440 --> 00:23:55.836
ถามไปทีนึงครับ

00:23:55.919 --> 00:23:58.479
ถามคนแรกเลย มั่วนะครับ

00:23:58.960 --> 00:24:00.080
สุดท้ายแก้เองได้

00:24:00.320 --> 00:24:07.520
ผมมี script deploy อยู่

00:24:08.799 --> 00:24:11.400
โอเค ผมแก้แป๊บนึงนะครับ

00:24:12.400 --> 00:24:16.400
เรียบร้อยแล้ว

00:24:17.440 --> 00:24:19.119
เป็นอันจบสิ้นนะครับ

00:24:19.760 --> 00:24:21.836
ผมกลับมาแชร์จอได้เหมือนเดิมแล้ว

00:24:21.919 --> 00:24:23.800
เพราะว่าผมแก้เรียบร้อยนะครับ

00:24:25.640 --> 00:24:30.440
แชร์จอเป็น desktop

00:24:31.600 --> 00:24:33.397
อันนี้ใครจะจำได้ก็จำไปเหมือนกันนะครับ

00:24:33.480 --> 00:24:36.040
เพราะว่าเดี๋ยวมันก็ refresh ละนะครับ

00:24:36.360 --> 00:24:39.120
อันนี้ก็คือไปเซ็ต token สำหรับ deploy Lambda

00:24:43.799 --> 00:24:48.920
เดี๋ยวอีกไม่กี่นาที มันจะ regenerate ใหม่นะครับ

00:24:49.480 --> 00:24:51.200
ลืมมันไปเถอะนะครับ

00:24:51.720 --> 00:24:52.520
พูดก็เหมือนไม่มีอะไรเกิดขึ้น

00:24:53.159 --> 00:24:55.117
เมื่อกี้เราก็เพิ่งอัพเดตไปเรียบร้อยใช่มั้ยครับ

00:24:55.200 --> 00:24:57.076
แปลว่าเดี๋ยวต่อไปเนี่ย พอเรา commit ใดๆ

00:24:57.159 --> 00:24:58.677
โค้ดก็ต้องเปลี่ยนแปลงใช่มั้ยครับ

00:24:58.760 --> 00:25:00.836
ทีนี้เดี๋ยวผมอยากจะให้หน้าเว็บของเราเปลี่ยน

00:25:00.919 --> 00:25:02.840
แล้วก็โปรเจคเราเปลี่ยนนิดนึงนะครับ

00:25:03.120 --> 00:25:07.399
ผมเลยอยากจะให้ดูนิดนึงว่าการ deploy ของผมเนี่ย success

00:25:07.640 --> 00:25:10.240
ผมจะเพิ่มคำนิดนึงลงไปใต้

00:25:10.480 --> 00:25:12.800
อันนี้เดี๋ยวมันจะเป็นหน้าเว็บ front-end ของผมเนาะ

00:25:13.000 --> 00:25:15.437
มันมีชื่อ title เว็บชื่อว่า My Mate ねe อยู่เนาะ

00:25:15.520 --> 00:25:19.158
ผมจะเขียนนิดนึงว่า by Jirachai ก็ได้

00:25:19.919 --> 00:25:21.640
เดี๋ยวผมจะลอง deploy ดูนะครับ

00:25:21.799 --> 00:25:23.757
แล้วก็ตัว back-end ของเรานะครับ

00:25:23.840 --> 00:25:28.397
เรามีการแก้ query นะครับ

00:25:28.480 --> 00:25:30.600
ถ้าเกิดกลับไปดูที่โค้ดตัว Lambda นะครับ

00:25:34.200 --> 00:25:35.517
ใน Lambda เนี่ย เห็นมั้ย

00:25:35.600 --> 00:25:37.237
โค้ดมันยังเป็นเวอร์ชั่นเก่าอยู่นะครับ

00:25:37.320 --> 00:25:39.760
เป็นแค่แบบ find document ปกติ

00:25:39.960 --> 00:25:41.956
ใครไม่คุ้นเคยกับ MongoDB นะครับ

00:25:42.039 --> 00:25:44.677
find เนี่ยเทียบเท่าเหมือนกับเวลาเรา select where

00:25:44.760 --> 00:25:46.196
ใน SQL นั่นเองนะครับ

00:25:46.279 --> 00:25:48.399
find แบบนี้คือหาทุกอย่างนะครับ

00:25:48.840 --> 00:25:49.956
เราไม่อยากหาทุกอย่างเนาะ

00:25:50.039 --> 00:25:51.277
เราอยากจะจำกัดนิดนึงนะครับ

00:25:51.360 --> 00:25:52.399
ผมทำอย่างงี้

00:25:52.919 --> 00:25:55.400
เดี๋ยวผมจะทำการอัพโหลดโค้ดนะครับ

00:26:00.080 --> 00:26:03.760
ผมตั้งชื่อว่า live demo นะครับ

00:26:04.880 --> 00:26:06.120
แล้วก็ push ขึ้นไป

00:26:06.520 --> 00:26:08.677
แล้วเดี๋ยวมาดูว่าเกิดอะไรขึ้นกันนะครับ

00:26:08.760 --> 00:26:12.119
เรามาที่ action ใน GitHub

00:26:13.600 --> 00:26:14.557
ยังไม่มา ต้องมาแล้ว

00:26:14.640 --> 00:26:16.440
จังหวะนี้ต้องมาแล้ว

00:26:17.120 --> 00:26:18.920
มาแล้ว กำลังหมุนอยู่

00:26:23.120 --> 00:26:25.800
ขอบคุณมากนะที่ไม่มาทำให้ขายหน้านะตรงนี้นะฮะ

00:26:26.200 --> 00:26:27.637
ก็จะเห็นได้ว่ามันเริ่มหมุนนะครับ

00:26:27.720 --> 00:26:30.196
เราสามารถเข้าไปดูได้ว่ามันเกิดอะไรขึ้นบ้างนะครับ

00:26:30.279 --> 00:26:32.880
ก็จะเห็นได้ว่ามันเริ่ม run ตามสเต็ปที่เราเซ็ตไว้เลย

00:26:33.039 --> 00:26:36.200
มีการเริ่ม build ตัวโปรเจคเราใช่มั้ยครับ

00:26:36.320 --> 00:26:40.400
มีการเริ่มจะทำการ checkout โค้ด set up node นะครับ

00:26:40.960 --> 00:26:43.079
เดี๋ยวรอแป๊บนึง รอดูไป

00:26:48.559 --> 00:26:49.517
ผมมากลัวอันนั้นมากเลย

00:26:49.600 --> 00:26:54.160
ไอ้ที่แดงๆ เมื่อกี้คือแดงเพราะว่า credential หมดอายุนะครับ

00:26:54.840 --> 00:26:58.679
ยังไม่หมด deploy

00:27:05.320 --> 00:27:08.239
ถ้าเสร็จแล้วมันจะต้องขึ้นเขียว deploy แล้วนะครับ

00:27:08.600 --> 00:27:12.760
รอแป๊บนึง

00:27:13.520 --> 00:27:15.596
warning อย่าไปกลัวมัน

00:27:15.679 --> 00:27:16.716
ผมเห็นมาหลายรอบแล้ว

00:27:16.799 --> 00:27:18.200
ตอนแรกก็กรี๊ดแตกเลย

00:27:30.679 --> 00:27:32.120
โอเค ต่อ VPN อยู่

00:27:37.000 --> 00:27:40.279
แป๊บนึง ตอนนี้จังหวะนี้ หงส์ไทยต้องเข้าแล้ว

00:27:44.559 --> 00:27:45.200
เฮ้ย ทำไมนานจังเลยอ่ะ

00:27:45.640 --> 00:27:46.399
ใจไม่ดีละ

00:27:47.200 --> 00:27:48.120
ขยับละ

00:27:56.640 --> 00:27:57.396
อันนี้แค่ตอน pipeline

00:27:57.479 --> 00:27:60.000
เดี๋ยวไปดูของจริงกันก่อนว่ามันเปลี่ยนรึเปล่านะฮะ

00:28:04.799 --> 00:28:09.559
มาใหม่แล้ว แล้วเปลี่ยนแล้วด้วยนะครับ

00:28:10.360 --> 00:28:11.436
เว็บมีอยู่แค่นี้นะครับ

00:28:11.519 --> 00:28:12.760
หน้าตายังทำไม่เสร็จนะครับ

00:28:12.919 --> 00:28:14.877
จะบอกว่า search box ก็ยัง search ไม่ได้ด้วยนะ

00:28:14.960 --> 00:28:18.277
จริงๆ แล้วตอนแรกเลยนะ ตามตั้งใจเนี่ย

00:28:18.360 --> 00:28:21.596
ผมก็ต้องการจะมีทำ มีโชว์ vector search

00:28:21.679 --> 00:28:24.117
ใช้ search ใช้พวก Atlas search ด้วย

00:28:24.200 --> 00:28:25.517
แต่ว่าเห็นพี่ฟี่เล่าไปแล้ว

00:28:25.600 --> 00:28:27.436
ก็เลยเดี๋ยวไปดูเซ็กชั่นพี่ฟี่เอานะครับ

00:28:27.519 --> 00:28:29.117
พี่ฟี่มาจาก MongoDB เหมือนกันนะครับ

00:28:29.200 --> 00:28:30.037
มาจากทีมเดียวกันนะครับ

00:28:30.120 --> 00:28:31.557
เหมือนพี่ฟี่เล่าไปแล้วนะครับ

00:28:31.640 --> 00:28:36.080
หรือไม่ก็เดี๋ยวผมทำคลิปลง YouTube ไปดูกันเองได้นะครับ

00:28:37.760 --> 00:28:40.320
จากตรงนี้ไปดู Lambda กันต่อ

00:28:40.640 --> 00:28:43.677
คือโอเค deploy ลง Azure เนี่ย มันก็น่าจะตรงไปตรงมาแหละ

00:28:43.760 --> 00:28:45.797
เพราะว่ามันก็ดูเหมือนจะ auto generate

00:28:45.880 --> 00:28:47.076
มาดูโค้ดวันนี้กันดีกว่า

00:28:47.159 --> 00:28:48.280
ผม refresh 1 ที

00:28:49.000 --> 00:29:05.530
ตกใจละ

00:29:07.399 --> 00:29:12.160
สงสัย Microsoft โกรธผมนะฮะ

00:29:15.799 --> 00:29:16.440
รอแป๊บนึง

00:29:31.360 --> 00:29:32.440
อันตรายครับ

00:29:33.120 --> 00:29:34.760
ใจเย็นก่อน

00:29:34.880 --> 00:29:44.239
เนี่ยผมมีฟังก์ชันชื่อว่า 𝚎𝚡𝚎𝚌𝚞𝚝𝚎𝙼𝚎 นะครับ

00:29:45.960 --> 00:29:48.680
โอเค มามั้ย เปลี่ยนมั้ย

00:29:48.799 --> 00:29:49.759
เปลี่ยนแล้วเห็นป่ะ

00:29:51.559 --> 00:29:53.517
ทุกคนก็แบบตบมืออะไรกันหนักตรงนี้นะฮะ

00:29:53.600 --> 00:29:55.076
เดี๋ยวเรามาดูกันของจริงนะครับ

00:29:55.159 --> 00:29:56.196
ตอนนี้เรามาอ่าน code

00:29:56.279 --> 00:29:58.956
code ของเราคือมันจะทำการ run aggregate นะครับ

00:29:59.039 --> 00:30:02.557
aggregate นี่เป็นของเด็ดของ MongoDB เลย

00:30:02.640 --> 00:30:05.637
คือเราคิดว่าถ้าเกิดเราจะต้องทำการ query data

00:30:05.720 --> 00:30:09.240
แล้วต้องมีการปรับเปลี่ยน structure data

00:30:09.360 --> 00:30:11.196
ทำการไป join data เพิ่มเติม

00:30:11.279 --> 00:30:15.640
ถ้าเกิดคุณลองคิดเป็น query ใน SQL

00:30:16.240 --> 00:30:18.037
คุณคิดว่าคุณจะต้องเขียนยังไงบ้างครับ

00:30:18.120 --> 00:30:19.157
มันยาวมากใช่มั้ย

00:30:19.240 --> 00:30:23.000
เป็น string select นู่นนี่วงเล็บเข้าไปต่อ join left

00:30:23.159 --> 00:30:25.956
นู่นเปลี่ยน as

00:30:26.039 --> 00:30:28.759
เวลาจะแก้ใช่ run ปุ๊บ fail

00:30:29.080 --> 00:30:32.920
จะแก้ทีก็ต้องไปไล่ trace ใน query string ใช่มั้ย

00:30:33.159 --> 00:30:34.357
แต่ว่าพอเป็น MongoDB ครับ

00:30:34.440 --> 00:30:35.877
เราสามารถใช้ aggregate ได้

00:30:35.960 --> 00:30:38.839
aggregate มันคือการทำของเราเมื่อกี้ให้เป็น step

00:30:38.960 --> 00:30:40.237
เป็น step เป็น step นะครับ

00:30:40.320 --> 00:30:42.557
อย่างอันนี้ผมบอกว่าต้องการจะ match นะครับ

00:30:42.640 --> 00:30:46.277
match data ที่ app เท่ากับ mymaidne นะครับ

00:30:46.360 --> 00:30:48.759
แล้วเราบอกว่าเราอยากจะเปลี่ยน structure นิดนึง

00:30:49.000 --> 00:30:50.999
structure data ผมโชว์ให้ดูก่อน

00:30:51.360 --> 00:30:52.436
หน้าตาประมาณนี้

00:30:52.519 --> 00:30:55.239
หน้าตา structure เป็นประมาณนี้นะครับ

00:30:55.360 --> 00:30:57.879
ใครที่อยู่ในห้องนี้แล้วมีชื่ออยู่ตามนี้

00:30:58.399 --> 00:31:00.760
จ่ายตังค์คุณช้างด้วยนะครับ

00:31:04.000 --> 00:31:05.719
อันนี้คือ structure data นะครับ

00:31:06.159 --> 00:31:08.160
structure data ของจริงนะครับ

00:31:09.240 --> 00:31:11.757
แต่ว่า data เนี่ยมีไม่ครบนะครับ สมมตินะ

00:31:11.840 --> 00:31:16.797
อันนี้ก็คือเราจะมี field ชื่อว่า name type price id date

00:31:16.880 --> 00:31:18.117
แล้วก็ owner ใช่มั้ยครับ

00:31:18.200 --> 00:31:20.076
owner ก็คือใครสั่งนั่นเองนะครับ

00:31:20.159 --> 00:31:22.240
เฮ้ยช้างนี่สั่งเยอะนะเนี่ย

00:31:22.840 --> 00:31:24.479
ช้างไม่อยู่

00:31:25.120 --> 00:31:28.280
ริฟฟี่อยู่ มีชื่อริฟฟี่มั้ย

00:31:28.679 --> 00:31:30.319
ไม่มี รอดไป

00:31:32.960 --> 00:31:33.836
อันนี้คือ data นะครับ

00:31:33.919 --> 00:31:34.917
นี่เป็น CSV นะครับ

00:31:35.000 --> 00:31:37.160
เสร็จแล้วผมอัปโหลด CSV เนี่ยไปเก็บไว้บน S3

00:31:38.399 --> 00:31:43.400
S3 คือที่เก็บไฟล์ของ AWS นะครับ

00:31:51.360 --> 00:31:55.157
ผมก็แค่อัปโหลด data เมื่อกี้ลงมาเก็บไว้ใน S3 เนี่ย

00:31:55.240 --> 00:31:56.399
เก็บเป็นอย่างงี้ใช่มั้ยครับ

00:31:58.200 --> 00:31:59.320
ตอนนี้เรามี 3 อย่างละ

00:31:59.639 --> 00:32:02.517
เรามี front-end เรามี back-end นะครับ

00:32:02.600 --> 00:32:03.440
เรามี data

00:32:03.639 --> 00:32:06.119
แต่เรายังไม่มีจุดตรงกลางครับ ตัว query data

00:32:07.679 --> 00:32:09.277
ถ้าเกิดเราใช้ MongoDB ปกติเนี่ย

00:32:09.360 --> 00:32:11.039
เราสามารถ query ตรงๆ ได้เลยใช่มั้ย

00:32:11.159 --> 00:32:12.237
query ไปที่ database

00:32:12.320 --> 00:32:14.360
แต่ว่าวันนี้ database เราทำเป็น file system

00:32:14.760 --> 00:32:15.596
เป็น CSV ด้วย

00:32:15.679 --> 00:32:19.517
ไม่ได้เป็น structure แบบ nested data แบบ MongoDB ด้วย

00:32:19.600 --> 00:32:21.879
แล้วอยู่บน S3 แล้วเราจะใช้อะไรครับ

00:32:22.440 --> 00:32:24.836
บน MongoDB ครับ เรามี service มากมาย

00:32:24.919 --> 00:32:26.920
ที่ยังไม่โดน deprecate นะครับ

00:32:33.720 --> 00:32:35.196
แต่ต้องบอกว่าไอ้จอเมื่อกี้ที่โชว์

00:32:35.279 --> 00:32:36.556
ไม่ใช่ service ที่เหลือนะครับ

00:32:36.639 --> 00:32:37.956
มันยังเหลืออีกเยอะกว่านั้นนะครับ

00:32:38.039 --> 00:32:39.716
แต่ว่าพอดีหน้าจออัดได้แค่นั้นนะครับ

00:32:39.799 --> 00:32:44.677
ทีนี้มันมี service ตัวนึงครับ ชื่อว่า data federation นะครับ

00:32:44.760 --> 00:32:47.160
data federation เนี่ยมีหน้าที่ทำ ETL

00:32:47.760 --> 00:32:49.316
หรือจะ ELT ก็ได้นะครับ

00:32:49.399 --> 00:32:52.877
ก็คือทำการ extract data เป็น data มา transform

00:32:52.960 --> 00:32:55.037
แล้วไปเก็บสักที่นึงหรือโชว์ออกมานะครับ

00:32:55.120 --> 00:32:57.680
data federation เนี่ยมันสามารถไปดึง data

00:32:57.840 --> 00:32:59.316
จาก MongoDB cluster

00:32:59.399 --> 00:33:00.360
ดึงจาก HTTP

00:33:00.840 --> 00:33:01.200
ดึงจาก S3

00:33:01.679 --> 00:33:04.476
ดึงจาก Azure blob storage ก็ได้นะครับ

00:33:04.559 --> 00:33:06.076
แล้วอยากจะทำอะไรก็แล้วแต่

00:33:06.159 --> 00:33:08.397
ที่เราจะเขียนเป็น MQL นั่นเองนะครับ

00:33:08.480 --> 00:33:11.277
ผมก็เลยสร้าง data federation ขึ้นมา 1 instance ครับ

00:33:11.360 --> 00:33:14.520
ชื่อว่า MyMaidNeReal นะครับ

00:33:15.080 --> 00:33:16.917
แปลว่าก่อนหน้านี้มีหลาย version นะครับ

00:33:17.000 --> 00:33:18.280
อันนี้เป็นตัว real แล้วนะครับ

00:33:20.039 --> 00:33:22.677
ทีนี้ใน data federation เนี่ยครับ

00:33:22.760 --> 00:33:23.436
ผมก็ทำอย่างงี้ครับ

00:33:23.519 --> 00:33:26.720
ผมก็ set up เลยว่าผมอยากให้ดึง data จากไหน

00:33:27.840 --> 00:33:32.080
ผมเขียนเลยว่าผมอยากให้ดึงจาก jirachai-sg

00:33:32.480 --> 00:33:33.596
sg คือ Singapore

00:33:33.679 --> 00:33:35.520
stg คือ storage นะครับ

00:33:35.880 --> 00:33:39.040
ก็คือตัวนี้ใช่มั้ย คือ S3 bucket ตัวนี้นะครับ

00:33:39.320 --> 00:33:42.436
แล้วก็อยากให้ดึงไฟล์ตัวนี้ออกมาอ่านนั่นเองนะครับ

00:33:42.519 --> 00:33:44.357
แล้วก็ทำการ define path ไว้เลย

00:33:44.440 --> 00:33:48.040
เราทำการ define path ไว้ในตัว data federation นะครับ

00:33:48.240 --> 00:33:52.960
ในนี้เวลาเราเพิ่มเนี่ยเราสามารถเพิ่มได้จากตรงนี้เลยนะครับ

00:33:53.519 --> 00:33:56.040
เราบอกว่าอยากให้ไปดึงที่ data ไหนนะครับ

00:33:56.159 --> 00:33:59.320
อย่างเมื่อกี้นะครับ เราบอกว่าให้ดึงจาก S3 ใช่มั้ยครับ

00:34:00.440 --> 00:34:02.157
ผมเขียนนี่คือ trick นะครับ

00:34:02.240 --> 00:34:07.076
copy มา ผมบอกว่าอยากให้ดึงจาก folder data ใช่มั้ยครับ

00:34:07.159 --> 00:34:09.760
ผมเขียนแค่นี้เลย เขียนแค่นี้เลยจบนะครับ

00:34:11.320 --> 00:34:13.276
แล้วทีนี้ structure data ของเราเนี่ย

00:34:13.359 --> 00:34:15.957
มันจะเป็น bucket เราตามด้วย data นะครับ

00:34:16.040 --> 00:34:17.760
แล้วก็ตามด้วยชื่อ app นั่นเองนะครับ

00:34:18.679 --> 00:34:22.717
แล้วผมก็บอกว่า slash app slash app อย่างนี้นะครับ

00:34:22.800 --> 00:34:25.637
เสร็จแล้วมันก็จะถามว่า app เนี่ยคืออะไร

00:34:25.720 --> 00:34:27.960
เราบอกว่า app เนี่ย type เป็น string

00:34:28.399 --> 00:34:29.957
เพราะว่าเราสามารถที่จะเอาตัวนี้

00:34:30.040 --> 00:34:31.399
เป็นเหมือนจุดไว้ query

00:34:31.760 --> 00:34:33.237
เป็นเหมือน parameter ไว้ query ได้

00:34:33.320 --> 00:34:35.117
เพราะว่าใน structure ทั้ง project เนี่ย

00:34:35.200 --> 00:34:37.397
เรามี CSV หลายอัน มี folder หลายอันใช่มั้ยครับ

00:34:37.480 --> 00:34:38.996
เราต้องการจะดึงสักอันนึงเนี่ย

00:34:39.079 --> 00:34:41.076
เราสามารถมาปรับตรงนี้ได้นะครับ

00:34:41.159 --> 00:34:42.160
แล้วผมตั้งชื่อว่า app

00:34:43.159 --> 00:34:45.276
เดี๋ยวเรามาดู result กันดีกว่านะครับ

00:34:45.359 --> 00:34:46.600
ผมกด save ปั๊บ

00:34:48.280 --> 00:34:49.519
ลืมอัปนึง ยังไม่ได้ทำ

00:34:49.839 --> 00:34:51.239
ก็คือต้องทำการสร้าง

00:34:51.839 --> 00:34:54.280
ผมจะสร้าง database ตัวใหม่ขึ้นมานะครับ

00:34:54.960 --> 00:34:59.756
สร้าง database อีกตัวนึงนะครับ ชื่อว่า jsbkk นะครับ

00:34:59.839 --> 00:35:01.520
collection name ชื่อว่า demo

00:35:02.920 --> 00:35:06.276
แล้วผมก็ลากอันนี้ใส่ลงมาในอันนี้

00:35:06.359 --> 00:35:09.117
ลากที่เพิ่งสร้าง connection เมื่อกี้ใส่ลงมาในนี้นะครับ

00:35:09.200 --> 00:35:15.157
ลากลงมาแปะ ปึ๊บ อยู่ภายใน database jsbkk demo

00:35:15.240 --> 00:35:15.996
ใช่มั้ยครับ

00:35:16.079 --> 00:35:20.320
กด save แล้วก็ลองกด connect นะครับ

00:35:21.000 --> 00:35:22.480
กด connect ปั๊บ

00:35:28.880 --> 00:35:30.480
ใช้ Compass แล้วกันนะครับ

00:35:30.760 --> 00:35:34.036
Compass นี่คือตัว UI สำหรับ query data

00:35:34.119 --> 00:35:35.600
ของ MongoDB นั่นเองนะครับ

00:35:38.160 --> 00:35:41.200
ผมเพิ่ม connection string

00:35:41.560 --> 00:35:44.400
เฮ้ยแบบนี้คุณก็เห็นรหัสผมหมดสิ

00:35:46.040 --> 00:35:59.157
ไม่ปิดอ่ะ ผมโชว์เลยเดี๋ยวลบออกละ นี่ เก๋ๆ

00:35:59.240 --> 00:36:01.240
โอเค connect เข้าไป

00:36:03.520 --> 00:36:06.280
กดๆ มาแล้ว

00:36:06.960 --> 00:36:07.800
เกิดอะไรขึ้น

00:36:08.119 --> 00:36:10.797
นี่มี structure data ขึ้นมาละ

00:36:10.880 --> 00:36:12.117
มีเป็น database ขึ้นมาตรงนี้

00:36:12.200 --> 00:36:13.917
เห็นไหมฮะ มี collection ชื่อ demo

00:36:14.000 --> 00:36:15.240
พอคลิกเข้าไปครับ

00:36:15.640 --> 00:36:17.437
พอคลิกเข้าไป มันใช้เวลานิดนึง

00:36:17.520 --> 00:36:19.519
เพราะว่า MongoDB เนี่ยต้องวิ่งไปหา AWS

00:36:19.880 --> 00:36:22.479
ไปอ่าน read file ทั้งหมด S3 แล้วแตกออกมา

00:36:22.640 --> 00:36:25.680
เห็นไหมครับ นี่เป็น CSV นะ

00:36:26.240 --> 00:36:29.157
แต่ว่า data federation ทำการอ่านตาม path ที่เราต้องการ

00:36:29.240 --> 00:36:30.477
แล้วยิ่งไปกว่านั้น

00:36:30.560 --> 00:36:33.276
ยังจำตัวไฟล์ Excel ของเราที่เป็นค่าใช้จ่าย

00:36:33.359 --> 00:36:34.957
ของแต่ละคนในร้านเมฆได้ใช่ไหมครับ

00:36:35.040 --> 00:36:36.077
ร้าน Maidreamin นะฮะ

00:36:36.160 --> 00:36:43.677
field นะ เราสามารถทำได้นะครับ

00:36:43.760 --> 00:36:44.996
เราสามารถ query ได้

00:36:45.079 --> 00:36:50.360
อย่างเช่นอยากบอกว่า อยากจะ query เอาเฉพาะช้าง

00:36:52.560 --> 00:36:54.240
เราก็เลยเขียนไปเลย match

00:36:55.000 --> 00:36:57.037
match เมื่อกี้อะไร owner ใช่ไหมครับ

00:36:57.120 --> 00:37:02.520
owner เป็นช้าง

00:37:04.079 --> 00:37:14.117
มันก็จะโชว์ data เฉพาะช้างเห็นไหม

00:37:14.200 --> 00:37:16.637
โอเค มีแต่ช้าง มีเชกิด้วย

00:37:16.720 --> 00:37:20.477
ถ้าเกิดบอกว่า อยากจะดูเอาเฉพาะอันที่ราคา

00:37:20.560 --> 00:37:22.160
แพงกว่า 200 บาทขึ้นไป

00:37:22.760 --> 00:37:25.960
ไม่เอา เอา 800 เลยดีกว่า

00:37:30.319 --> 00:37:32.320
เมื่อกี้มีช่องอะไรนะ price ใช่ไหมครับ

00:37:35.839 --> 00:37:36.717
เอาช้างออกดีกว่า

00:37:36.800 --> 00:37:38.679
อยากรู้ว่าใคร spend เยอะดีกว่านะครับ

00:37:40.040 --> 00:37:43.520
price gte มันโดนอยู่แล้ว

00:37:44.599 --> 00:37:47.880
gte นี่คือ operator ใน aggregation

00:37:48.640 --> 00:37:53.639
ย่อมาจากคำว่า greater than equal

00:37:54.640 --> 00:37:56.038
เหลือนาทีเดียวเหรอ

00:37:56.160 --> 00:37:57.399
greater than equal 800

00:38:01.520 --> 00:38:03.000
ผมว่าผมเขียน structure ผิด

00:38:04.920 --> 00:38:09.653
ผมลืมจะเขียน greater than

00:38:09.760 --> 00:38:14.800
ไม่เป็นไร เรามี generative AI ครับ

00:38:15.480 --> 00:38:17.560
ใครไม่รู้ว่าเรามี generative AI

00:38:21.480 --> 00:38:24.179
คิดว่าเป็น script ใช่ไหม

00:38:24.759 --> 00:38:28.399
ล็อกอินแป๊บ

00:38:28.839 --> 00:38:31.480
เราสามารถ ถ้าเกิดเราบอกว่าเราอยากจะเขียน query

00:38:32.000 --> 00:38:34.120
ใน MongoDB เนี่ย จำไม่ได้จะทำยังไง

00:38:34.280 --> 00:38:39.480
เราสามารถถาม generative AI ได้นะครับ

00:38:40.160 --> 00:39:22.637
login successfully

00:39:22.720 --> 00:39:23.957
หน้าต้อง callback แล้ว

00:39:24.040 --> 00:39:26.800
จังหวะนี้ต้อง callback แล้ว

00:39:28.200 --> 00:39:31.400
นี่ครับ ใครที่นึก query MongoDB ไม่ออก

00:39:32.760 --> 00:39:33.957
แล้วต้องการจะเขียนเนี่ย

00:39:34.040 --> 00:39:36.880
เราคุยกับ generative AI ที่มากับ MongoDB ได้เลย

00:39:37.040 --> 00:39:43.920
อย่างเช่นบอกว่า query price greater

00:39:44.240 --> 00:39:45.640
เขียนแบบเป็นความคิดนะครับ

00:39:45.960 --> 00:39:47.917
คือเราก็รู้นะว่า generative AI มันสามารถ

00:39:48.000 --> 00:39:50.996
เกิดเป็นแบบว่าของที่มันไม่ถูกต้องได้

00:39:51.079 --> 00:39:53.640
เป็นแบบโดนแบบว่า hallucinate นู่นนี่นั่นได้

00:39:53.760 --> 00:39:55.599
ดังนั้นพยายามเขียนให้มัน precise เอาไว้

00:39:57.520 --> 00:40:02.080
greater than or equals นะครับ 800

00:40:05.280 --> 00:40:06.477
ไม่เป็นไร พิมพ์ผิดไปนิดนึง

00:40:06.560 --> 00:40:13.040
กด generate มันแก้ให้ผม

00:40:15.680 --> 00:40:16.157
เห็นไหมครับ

00:40:16.240 --> 00:40:18.400
แล้วเราก็จะเห็นได้ว่าเราสามารถ query data ได้

00:40:18.760 --> 00:40:19.516
มีแต่ช้างว่ะ

00:40:19.599 --> 00:40:21.783
ตบมือให้ช้างหน่อย

00:40:21.867 --> 00:40:24.159
ช้างเป็น top spender ครับ

00:40:24.280 --> 00:40:26.839
อันนี้สิ่งที่ใครที่เพิ่งเข้ามาแล้วสงสัยว่านี่คืออะไร

00:40:27.000 --> 00:40:29.797
นี่คือเราทำการ query data จาก S3 นะครับ

00:40:29.880 --> 00:40:33.839
ซึ่งเป็นไฟล์โดยการใช้ MongoDB query language

00:40:35.240 --> 00:40:36.200
เท่านี้เองนะครับ

00:40:36.800 --> 00:40:39.359
แล้วเราก็เลยเอาอันนี้ใส่เข้าไปใน lambda ใช่ไหมครับ

00:40:39.800 --> 00:40:40.320
ใส่ไปใน lambda

00:40:40.680 --> 00:40:42.756
แล้วเดี๋ยวเรามาดูกันนะว่าหน้าเว็บเราเนี่ย

00:40:42.839 --> 00:40:45.679
จะสามารถ query ออกมาได้ไหมนะครับ

00:40:50.520 --> 00:40:51.877
มันเอา 89 มาด้วยเหรอ

00:40:51.960 --> 00:40:52.477
ไหนดูซิ

00:40:52.560 --> 00:40:59.720
ใช่ครับ เพราะว่าอันนี้มันเป็น string

00:40:59.920 --> 00:41:00.720
อันนี้ผมผิดเอง

00:41:02.640 --> 00:41:05.877
ต้องไปทำพวก casting เป็นพวก true number

00:41:05.960 --> 00:41:07.120
อะไรพวกนี้นะครับ อีกทีนึง

00:41:07.359 --> 00:41:10.317
not today เดี๋ยวพี่ไทกระโดดถีบแล้ว

00:41:10.400 --> 00:41:11.680
ขอบคุณที่เช็กตรงนี้นะครับ

00:41:12.520 --> 00:41:14.317
มี 89 ติดมาเพราะเป็น string นะครับ

00:41:14.400 --> 00:41:15.520
ขออภัยด้วยนะครับ

00:41:16.079 --> 00:41:18.400
พอมันเป็น string มันก็จะเทียบกันเป็น string

00:41:19.880 --> 00:41:22.560
เรามาดู result สุดท้ายกันนิดนึงนะครับ

00:41:24.319 --> 00:41:31.340
กด search มันต้องโชว์ออกมาเนาะ

00:41:36.400 --> 00:41:40.320
สำหรับวันนี้ก็ขอบคุณมากเลยนะครับ

00:41:41.000 --> 00:41:42.276
ประมาณนี้ก่อนแล้วกัน

00:41:42.359 --> 00:41:44.036
คือเอาเป็นว่าถ้าเกิดมันติดมันก็จะเห็น

00:41:44.119 --> 00:41:46.236
แบบที่เราเห็นเนาะ ที่แบบมันออกเป็น data

00:41:46.319 --> 00:41:48.357
แต่ว่าจริงๆ ผมมีหน้าเว็บนึงที่มันควรจะใช้ได้

00:41:48.440 --> 00:41:49.600
ก็คือหน้านี้นะครับ

00:41:51.599 --> 00:41:54.957
มี backup

00:41:55.040 --> 00:41:56.680
ถ้าอยากดูภาคต่อไปไปดูใน YouTube

00:41:57.240 --> 00:41:58.040
โอเค ไม่ออกไม่เป็นไร

00:41:58.160 --> 00:41:58.837
ประมาณนี้นะครับ

00:41:58.920 --> 00:41:59.557
ขอบคุณมากเลย

00:41:59.640 --> 00:42:00.880
ขอบคุณครับ สวัสดีครับ

00:42:04.520 --> 00:42:08.080
ขอปิด section ก่อนจากนะครับ

00:42:08.680 --> 00:42:10.357
สำหรับใครที่บอกเมื่อกี้นะครับ

00:42:10.440 --> 00:42:13.480
ใครที่เผลอ deploy พวก deprecated service ไปแล้ว

00:42:13.760 --> 00:42:14.797
สามารถไปตามอ่านได้

00:42:14.880 --> 00:42:17.480
มันจะบอกอยู่ว่าต้องใช้ lib อะไรนะครับ

00:42:17.720 --> 00:42:22.436
ใช้ได้เลยนะครับ

00:42:23.200 --> 00:42:24.597
ใครอยากจะติดตามต่อนะครับ

00:42:24.680 --> 00:42:26.439
ก็มีช่องทางตามนี้นะครับ

00:42:27.319 --> 00:42:29.077
โค้ดวันนี้เดี๋ยวผมไป publish ไว้ให้นะครับ

00:42:29.160 --> 00:42:30.877
ไปแอบดูพวก pipeline อะไรต่างๆ ได้

00:42:30.960 --> 00:42:32.597
ก็เป็น intermediate นะครับ

00:42:32.680 --> 00:42:34.397
blog แล้วก็มี YouTube นะครับ

00:42:34.480 --> 00:42:36.200
ประมาณนี้นั่นเองนะครับ
