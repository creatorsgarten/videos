WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:11.040 --> 00:00:13.159
Thank you everyone for coming.

00:00:13.759 --> 00:00:14.440
I'm Chris.

00:00:14.599 --> 00:00:15.880
Nice to meet you all.

00:00:16.800 --> 00:00:20.599
Here I'm talking about this topic.

00:00:22.840 --> 00:00:23.557
Let's get start.

00:00:23.640 --> 00:00:27.679
I have so many things to talk about.

00:00:28.400 --> 00:00:29.439
A little bit about me.

00:00:30.160 --> 00:00:33.359
I'm working as a lead consultant at ThoughtWorks.

00:00:33.840 --> 00:00:38.277
I go into bunch of companies, try to make their software

00:00:38.360 --> 00:00:39.760
engineering practice better.

00:00:40.280 --> 00:00:42.800
I have been doing that for quite a while.

00:00:44.120 --> 00:00:47.680
I've been programming in many languages.

00:00:48.559 --> 00:00:50.439
There's some list here.

00:00:53.199 --> 00:00:56.360
I learn a lot about different patterns, practice,

00:00:56.559 --> 00:01:03.717
how different communities thinking about different sets

00:01:03.800 --> 00:01:08.757
of what is good, what is bad, what is qualities

00:01:08.840 --> 00:01:09.880
and what's not.

00:01:12.759 --> 00:01:19.480
I also teach bunch of courses online, offline.

00:01:20.159 --> 00:01:24.040
I'm follower of many programming communities, dramas,

00:01:24.400 --> 00:01:25.200
and debate.

00:01:25.759 --> 00:01:27.879
That's inspire me to this talk.

00:01:28.479 --> 00:01:32.877
เสียงมันนิดนึงครับ ไม่ค่อยดี

00:01:32.960 --> 00:01:36.877
I have seen a lot of people in the programming

00:01:36.960 --> 00:01:40.680
communities and inside the companies that I work with,

00:01:40.799 --> 00:01:45.076
we are debating a lot about what is the best way

00:01:45.159 --> 00:01:46.480
to program things.

00:01:48.960 --> 00:01:52.039
That's where this session coming from.

00:01:53.000 --> 00:01:57.440
Let's talk about a little bit of inspiration.

00:01:57.560 --> 00:02:05.160
I have been programming for 13 years now.

00:02:08.080 --> 00:02:10.637
We all know that we all must write a good code.

00:02:10.720 --> 00:02:12.800
But what is really good code?

00:02:14.800 --> 00:02:18.440
I'm pretty old compared to the audience here.

00:02:18.920 --> 00:02:23.440
In my university days, they taught me this book.

00:02:24.200 --> 00:02:26.239
This is called the Design Pattern.

00:02:26.840 --> 00:02:29.919
When I still in the university, they say that

00:02:30.160 --> 00:02:32.800
object-oriented programming is the best way.

00:02:33.319 --> 00:02:35.677
We all should learn about how to abstract things

00:02:35.760 --> 00:02:36.560
correctly.

00:02:36.760 --> 00:02:41.997
This is a book from GoF, which is actually acronym

00:02:42.080 --> 00:02:43.440
for Gang of Four.

00:02:44.040 --> 00:02:46.040
Sometimes we call them God of Four.

00:02:46.159 --> 00:02:49.397
They's like a very strong programmer.

00:02:49.480 --> 00:02:50.757
I don't know who they are.

00:02:50.840 --> 00:02:52.040
I just know their name.

00:02:52.879 --> 00:02:56.760
It used to be like a pinnacle of good coding design

00:02:57.200 --> 00:02:59.120
back in my university's day.

00:03:02.120 --> 00:03:06.957
After I work with in the industry for few years,

00:03:07.040 --> 00:03:12.559
then I heard this talk from Sandi Metz.

00:03:13.040 --> 00:03:14.640
She's very awesome.

00:03:14.959 --> 00:03:18.920
She's talk about how to do object-oriented programming.

00:03:19.080 --> 00:03:23.236
One topic that she talk about is the wrong abstraction

00:03:23.319 --> 00:03:29.920
is much costlier than duplication.

00:03:31.159 --> 00:03:34.520
That also resonate with me on the experience level.

00:03:35.120 --> 00:03:38.720
Many people in the community agree with that sentiment.

00:03:38.920 --> 00:03:43.199
But now, then I realize that this is contradict of

00:03:43.319 --> 00:03:47.597
what my teacher taught me in universities because

00:03:47.680 --> 00:03:50.159
we were talking about need to abstract thing.

00:03:50.959 --> 00:03:53.839
Now we say that we shouldn't abstract thing so much.

00:03:57.799 --> 00:03:58.679
Interesting.

00:03:59.200 --> 00:04:04.436
I think back again when I start my journey, like first

00:04:04.519 --> 00:04:08.397
few years in my programming career, we have this as

00:04:08.480 --> 00:04:11.279
a pinnacle of good code.

00:04:11.439 --> 00:04:13.200
It's called the Clean Code.

00:04:13.599 --> 00:04:19.317
Now we sometimes use the word "clean code" and

00:04:19.400 --> 00:04:22.920
"good code" interchangeably for some reason.

00:04:24.000 --> 00:04:27.960
Come to think about it, is clean really mean good?

00:04:28.120 --> 00:04:28.760
I don't know.

00:04:29.120 --> 00:04:32.400
But something to think about.

00:04:33.240 --> 00:04:40.157
Then after that, there's a lot of article that talk

00:04:40.240 --> 00:04:44.120
about maybe clean code is not the right thing to do

00:04:44.479 --> 00:04:45.039
anymore.

00:04:45.479 --> 00:04:48.960
I think this is article from Dan Abramov, which is

00:04:49.720 --> 00:04:52.717
a very famous person in React community.

00:04:52.800 --> 00:04:57.760
If you following the React, he's author of Redux,

00:04:57.919 --> 00:05:01.200
which is a very big state library in React.

00:05:01.440 --> 00:05:05.080
Now he's still working actively on React.

00:05:10.160 --> 00:05:13.160
Let's talk about JavaScript frontend frameworks.

00:05:13.600 --> 00:05:18.920
Boy, we have so many of them.

00:05:21.039 --> 00:05:25.480
I think this is just five one that I can think of.

00:05:25.720 --> 00:05:28.037
I believe there's much more than five.

00:05:28.120 --> 00:05:32.519
I'm not sure even thousand at this point, but okay.

00:05:33.199 --> 00:05:36.640
And I think some of you resonate with the way that

00:05:36.759 --> 00:05:38.116
each framework do things.

00:05:38.199 --> 00:05:43.720
Some of you might enjoy Vue, Angular, Svelte, or React.

00:05:46.039 --> 00:05:50.157
I found Solid to be super promising, but it's very

00:05:50.240 --> 00:05:53.920
hard to get a chance to work with it extensively.

00:05:56.600 --> 00:05:59.757
So, there's so many frameworks, and I think the

00:05:59.840 --> 00:06:02.197
audience here, since this is JavaScript Bangkok,

00:06:02.280 --> 00:06:05.077
I think you have some favorite one.

00:06:05.160 --> 00:06:08.039
Maybe not in this slide, but I guess you have some

00:06:09.520 --> 00:06:10.160
favorite.

00:06:10.520 --> 00:06:14.757
And then a while, we have people who reject all the

00:06:14.840 --> 00:06:17.400
frameworks here and say that,

00:06:18.280 --> 00:06:21.160
"No, no frameworks. Let's do HTMX."

00:06:21.720 --> 00:06:25.157
And I think we have the session about this approach

00:06:25.240 --> 00:06:28.600
in the afternoon, which is interesting to see.

00:06:29.720 --> 00:06:35.560
And they say that is too complex and unnecessary.

00:06:35.680 --> 00:06:37.840
But okay.

00:06:38.599 --> 00:06:43.760
Well, lots of contradict opinion out there, right?

00:06:44.360 --> 00:06:48.317
Well, it seems we have so many opinions on what is

00:06:48.400 --> 00:06:53.519
the right way to build the system.

00:06:54.039 --> 00:06:58.836
And when I see the debate, or when I even enjoy the

00:06:58.919 --> 00:07:00.840
debate myself, right,

00:07:01.440 --> 00:07:05.597
we usually arguing against if there is an objectively

00:07:05.680 --> 00:07:09.560
correct way to approach or build these things.

00:07:10.000 --> 00:07:16.119
Which is raise the question, is there such thing as

00:07:16.840 --> 00:07:18.560
objectively good code,

00:07:18.919 --> 00:07:22.080
or is this everything is just an opinion?

00:07:22.440 --> 00:07:25.199
Or is everything is subjective and you can do

00:07:25.319 --> 00:07:26.720
whatever you prefer?

00:07:26.840 --> 00:07:31.357
And that is one sentiment that is very common that,

00:07:31.440 --> 00:07:33.960
"Oh, just choose whatever framework you like.

00:07:34.560 --> 00:07:37.320
Doesn't matter. Just choose anything that you good at.

00:07:37.520 --> 00:07:38.280
Doesn't matter."

00:07:38.560 --> 00:07:41.319
So, that's another stance that I have seen.

00:07:41.919 --> 00:07:44.280
And maybe they are right, maybe they're not,

00:07:44.720 --> 00:07:50.037
but the good question is, is everything subjective,

00:07:50.120 --> 00:07:54.120
or is there some objectivity to it?

00:07:54.960 --> 00:07:59.196
And my answer is yes, there is such things as

00:07:59.279 --> 00:08:01.159
objectively good code.

00:08:01.759 --> 00:08:06.199
But it is not seems like it's not like what we,

00:08:06.879 --> 00:08:10.359
many engineer, might think about what objectivity

00:08:11.720 --> 00:08:12.040
means.

00:08:12.720 --> 00:08:18.197
So, today agenda is I want to let's understand what

00:08:18.280 --> 00:08:20.680
objective really means.

00:08:21.199 --> 00:08:24.037
And then we're going to define what is objectively

00:08:24.120 --> 00:08:25.159
good code.

00:08:25.759 --> 00:08:29.956
And we're going to try to see some examples of heated

00:08:30.039 --> 00:08:33.237
debate in JavaScript communities and try to apply

00:08:33.320 --> 00:08:38.039
that and see how it can be applied.

00:08:38.479 --> 00:08:41.960
Okay. So, let's get start with subjectivity and

00:08:44.120 --> 00:08:45.000
objectivity.

00:08:45.120 --> 00:08:48.957
So, I do the common first when I started talk,

00:08:49.040 --> 00:08:51.196
I do the very common thing, which is,

00:08:51.279 --> 00:08:55.077
"Hey, what exactly does it mean to be what

00:08:55.160 --> 00:08:57.040
objectivity exactly means?"

00:08:57.200 --> 00:08:58.519
And I Google it.

00:09:00.680 --> 00:09:04.316
And honestly, I don't really like the definition

00:09:04.399 --> 00:09:06.357
because the different that come in is that

00:09:06.440 --> 00:09:10.797
objectivity means lack of favoritism and lack free

00:09:10.880 --> 00:09:12.040
from bias.

00:09:12.640 --> 00:09:15.079
And I don't know what you folks think,

00:09:17.160 --> 00:09:21.436
but can we really define something by lack of another

00:09:21.519 --> 00:09:22.079
things?

00:09:22.519 --> 00:09:27.439
Can I really say mouse is defined by not a laptop?

00:09:27.959 --> 00:09:29.400
It's I don't know.

00:09:30.320 --> 00:09:33.080
But definition is weird, really weird.

00:09:33.279 --> 00:09:37.640
It's defined by lack of something.

00:09:37.920 --> 00:09:41.557
Oh, but true, maybe some word should be defined that

00:09:41.640 --> 00:09:44.957
way, but then what is really objective?

00:09:45.040 --> 00:09:49.316
Because if then I guess if I just walk around and

00:09:49.399 --> 00:09:50.160
chilling out,

00:09:50.399 --> 00:09:54.717
then I am being objective because I just chill and

00:09:54.800 --> 00:09:55.920
I have no favor.

00:09:56.079 --> 00:09:57.919
I just walking in the park.

00:09:58.519 --> 00:10:03.480
That's not really it.

00:10:04.320 --> 00:10:09.240
And then so I try to do this again, just strip out

00:10:09.560 --> 00:10:10.477
objectivity.

00:10:10.560 --> 00:10:12.400
What about the objective, right?

00:10:12.920 --> 00:10:16.960
An objective is mean to have things that you aim for

00:10:17.640 --> 00:10:20.080
and you have a goal toward.

00:10:20.600 --> 00:10:25.039
And okay, this definition seems to be much clearer

00:10:25.200 --> 00:10:27.079
than lack of something.

00:10:30.000 --> 00:10:32.157
But come get back to that a little bit.

00:10:32.240 --> 00:10:36.639
So, now I realize why people when people debate on

00:10:37.680 --> 00:10:38.196
everything,

00:10:38.279 --> 00:10:42.957
they try to put objectivity in as an adjective to

00:10:43.040 --> 00:10:46.117
everything every their opinion because objectivity

00:10:46.200 --> 00:10:49.959
seems to be defined as something good, lack of bad.

00:10:50.279 --> 00:10:54.917
So, my opinion is lack of bad quality, and I don't

00:10:55.000 --> 00:10:55.400
know.

00:10:56.440 --> 00:11:00.439
That's I don't think that's a productive way to

00:11:01.440 --> 00:11:06.280
conversation, but anyway.

00:11:06.800 --> 00:11:09.756
So, if we take just the objective, right,

00:11:09.839 --> 00:11:13.519
then objectivity might be defined as to have an

00:11:14.000 --> 00:11:16.640
objective or to have a goal.

00:11:17.320 --> 00:11:20.397
And if we combine with the previous definition,

00:11:20.480 --> 00:11:23.839
which is lack of bias or lack of favoritism,

00:11:24.279 --> 00:11:27.077
then we might be simply define objectivity as to

00:11:27.160 --> 00:11:31.477
pursue some objective effectively with our personal

00:11:31.560 --> 00:11:37.480
bias or favoritism.

00:11:37.680 --> 00:11:38.880
But okay.

00:11:39.399 --> 00:11:43.480
But then my question is, where does these goals

00:11:43.639 --> 00:11:47.960
coming from again?

00:11:49.200 --> 00:11:52.360
And I'm going to answer that question with another

00:11:52.839 --> 00:11:53.559
question.

00:11:53.839 --> 00:11:57.199
What do you care about when you are code?

00:12:04.040 --> 00:12:07.720
There's many things that different people care about.

00:12:08.240 --> 00:12:11.480
Some people maybe is performance, readability,

00:12:12.120 --> 00:12:15.480
maintainability, security, longevity.

00:12:15.680 --> 00:12:19.040
Or maybe simply something like not need to wake up

00:12:19.160 --> 00:12:22.120
at night and fix the production problem.

00:12:22.839 --> 00:12:25.760
I think most of us care about that, for sure.

00:12:30.360 --> 00:12:36.119
But I realized that these things that we care about

00:12:38.199 --> 00:12:42.479
become the goal that we put forward.

00:12:43.079 --> 00:12:46.520
So, what does it mean to have an objectively good code?

00:12:47.480 --> 00:12:51.756
I think the objectively good code is the code that has

00:12:51.839 --> 00:12:56.880
highest chance of achieving the defined objective.

00:12:57.160 --> 00:12:58.359
It's simple as that.

00:13:00.040 --> 00:13:03.800
So, no favoritism, no personal bias, for sure.

00:13:04.079 --> 00:13:06.720
We have one goal and one objective.

00:13:06.920 --> 00:13:10.079
The objectively good code is the code that helps you

00:13:10.279 --> 00:13:16.640
achieve that effectively.

00:13:16.760 --> 00:13:20.717
And now, let's raise the question about where does

00:13:20.800 --> 00:13:22.400
the objective come from?

00:13:23.000 --> 00:13:27.196
I think it comes from what we really care about.

00:13:27.279 --> 00:13:30.880
Maybe you care so much about performance, which is fine.

00:13:31.480 --> 00:13:35.440
And if you define that you care about performance,

00:13:36.120 --> 00:13:39.677
then you can have two systems and objectively

00:13:39.760 --> 00:13:41.320
compare those systems.

00:13:41.720 --> 00:13:46.040
Just look at how much time and resource is consumed.

00:13:46.160 --> 00:13:50.000
And now you can become objective about the system

00:13:50.279 --> 00:13:51.519
design itself.

00:13:51.959 --> 00:13:54.517
Or how much do you care about quick iteration?

00:13:54.600 --> 00:13:57.517
Maybe you care about being productive.

00:13:57.600 --> 00:13:59.397
We need to launch product quick.

00:13:59.480 --> 00:14:03.917
We need to fix things quick and make the software

00:14:04.000 --> 00:14:05.040
progress quick.

00:14:05.519 --> 00:14:08.919
And after you have that goal in mind, then you can be

00:14:09.240 --> 00:14:11.240
objective about it.

00:14:11.560 --> 00:14:15.479
You can evaluate based on all stats and data.

00:14:15.759 --> 00:14:19.519
You can evaluate based on the time that you measure,

00:14:19.720 --> 00:14:21.080
so on and so forth.

00:14:21.399 --> 00:14:25.517
But once you have objective inside, once you know what

00:14:25.600 --> 00:14:30.436
you care about, then we can truly be objective about

00:14:30.519 --> 00:14:36.199
system evaluation.

00:14:37.040 --> 00:14:42.280
And I think this is very important when we look into

00:14:43.480 --> 00:14:46.477
different design patterns and architecture.

00:14:46.560 --> 00:14:49.637
It's very important to understand what we really care

00:14:49.720 --> 00:14:53.119
about and what the pattern cares about,

00:14:53.240 --> 00:14:54.880
and we can compare that.

00:14:55.320 --> 00:15:01.600
And that can lead into much better understanding of

00:15:02.040 --> 00:15:08.440
how each pattern can benefit our work.

00:15:09.040 --> 00:15:11.560
So, let's go through the example.

00:15:12.199 --> 00:15:15.480
I'm gonna start with a very simple one.

00:15:16.600 --> 00:15:21.517
Since I've been programming quite long, I'm not sure

00:15:21.600 --> 00:15:24.719
if new programmers have heard of this pattern.

00:15:25.639 --> 00:15:28.920
In the past, there's a pattern called one return rule.

00:15:30.920 --> 00:15:36.157
Basically, in programming languages where you still

00:15:36.240 --> 00:15:41.000
need to do resource cleanup such as C,

00:15:41.480 --> 00:15:48.397
it is advised that you should have just one return.

00:15:48.480 --> 00:15:51.277
So, you need to make sure that you clean up all

00:15:51.360 --> 00:15:55.960
the memories, connections and everything before exit.

00:15:56.360 --> 00:15:59.637
So, it was advisable in the past that you have

00:15:59.720 --> 00:16:02.999
one single return.

00:16:03.680 --> 00:16:07.077
Today, I think we are more on the right side,

00:16:07.160 --> 00:16:12.800
which is the early return pattern where you try to

00:16:13.560 --> 00:16:17.996
organize all edge cases and unhappy paths on top

00:16:18.079 --> 00:16:22.159
and return immediately just to make it cleaner to look.

00:16:22.839 --> 00:16:29.519
And if we ask which pattern is better,

00:16:32.560 --> 00:16:38.079
I think it is very hard to evaluate on its own.

00:16:38.759 --> 00:16:40.996
Maybe you think that the right feels right,

00:16:41.079 --> 00:16:42.799
the left feels right, I don't know.

00:16:43.399 --> 00:16:48.080
But once we put the objective into this pattern,

00:16:48.440 --> 00:16:53.077
such as if objective is to make sure that all code

00:16:53.160 --> 00:16:56.600
has proper resource cleanup,

00:16:57.079 --> 00:17:02.440
then it is pretty clear that the pattern on the right

00:17:05.199 --> 00:17:07.520
is much better than pattern on the left.

00:17:08.120 --> 00:17:11.599
And on the opposite side, if we want to make sure

00:17:11.919 --> 00:17:17.000
the code is easy to follow,

00:17:17.520 --> 00:17:20.199
it is pretty clear that code on the left

00:17:20.520 --> 00:17:25.839
is better than the right.

00:17:26.439 --> 00:17:31.080
So it boils down to the question of what you care about

00:17:31.280 --> 00:17:32.200
when you code.

00:17:32.880 --> 00:17:36.517
And I'm going to repeat this message about three times

00:17:36.600 --> 00:17:41.037
during this talk and you will understand the importance

00:17:41.120 --> 00:17:44.040
of this question.

00:17:44.480 --> 00:17:48.197
And I kid you not because I work as a consultant, right?

00:17:48.280 --> 00:17:52.157
And I go in a lot of companies and I have seen some

00:17:52.240 --> 00:17:56.157
people still advocate for single return in modern

00:17:56.240 --> 00:17:59.920
programming languages where you actually have garbage

00:18:00.440 --> 00:18:01.240
collection.

00:18:01.440 --> 00:18:07.760
So sometimes we just follow the pattern without

00:18:07.960 --> 00:18:10.640
understanding the objective of the pattern itself.

00:18:10.840 --> 00:18:14.397
And that's really one thing that shows that the

00:18:14.480 --> 00:18:19.917
awareness of objective of the design patterns makes you

00:18:20.000 --> 00:18:25.999
more logical and thinking things very true.

00:18:26.679 --> 00:18:30.480
And if you don't know the objective of the pattern,

00:18:30.720 --> 00:18:33.880
I don't say don't know, if you're not aware of that,

00:18:34.159 --> 00:18:35.117
then you become like,

00:18:35.200 --> 00:18:38.956
"Hey, I have been doing this for 20 years.

00:18:39.039 --> 00:18:42.437
This feels right to me and therefore everyone should

00:18:42.520 --> 00:18:43.199
do this."

00:18:43.400 --> 00:18:45.757
Which is I don't think it's a productive stance to

00:18:45.840 --> 00:18:49.720
learn programming at all.

00:18:50.480 --> 00:18:54.760
So only after you decide what you care about,

00:18:55.280 --> 00:18:58.997
only after that, then you can be objective about which

00:18:59.080 --> 00:19:04.639
code or design pattern is actually better.

00:19:05.159 --> 00:19:07.917
Okay, the next one is a little bit relatable and

00:19:08.000 --> 00:19:15.480
heated, which is the React 𝚞𝚜𝚎𝙴𝚏𝚏𝚎𝚌𝚝 API.

00:19:17.360 --> 00:19:22.836
I have been using React since many years ago when there

00:19:22.919 --> 00:19:24.800
were still class components.

00:19:25.000 --> 00:19:28.877
And I think if you are new to React, then you might

00:19:28.960 --> 00:19:32.197
see the hooks and 𝚞𝚜𝚎𝙴𝚏𝚏𝚎𝚌𝚝 as a de facto standard

00:19:32.280 --> 00:19:35.200
and natural way of doing React.

00:19:35.720 --> 00:19:37.520
But I would say it is not.

00:19:38.200 --> 00:19:41.640
Before that, we had things called class components

00:19:41.840 --> 00:19:43.358
and we turned it into hooks.

00:19:43.720 --> 00:19:49.076
And 𝚞𝚜𝚎𝙴𝚏𝚏𝚎𝚌𝚝 is one of very controversial hooks

00:19:49.159 --> 00:19:55.960
and until today, I think David has talked about this

00:19:56.240 --> 00:20:00.120
in the past year or two years ago, I can't remember.

00:20:00.400 --> 00:20:04.956
But the point is until this day, 𝚞𝚜𝚎𝙴𝚏𝚏𝚎𝚌𝚝 is still

00:20:05.039 --> 00:20:08.117
very hard to use and very confusing to many

00:20:08.200 --> 00:20:09.117
programmers.

00:20:09.200 --> 00:20:11.637
And the data actually shows that as well.

00:20:11.720 --> 00:20:17.757
If you - I don't have the pure statistics to prove it,

00:20:17.840 --> 00:20:21.397
but based on what I have seen and community sentiment,

00:20:21.480 --> 00:20:27.437
I think it's pretty clear that a significant

00:20:27.520 --> 00:20:31.239
proportion of React developers, even the senior ones,

00:20:31.360 --> 00:20:38.879
still find 𝚞𝚜𝚎𝙴𝚏𝚏𝚎𝚌𝚝 very confusing.

00:20:39.240 --> 00:20:43.557
Okay, so let's get back to when we still tried to

00:20:43.640 --> 00:20:48.823
introduce hooks and compare hooks, 𝚞𝚜𝚎𝙴𝚏𝚏𝚎𝚌𝚝

00:20:48.907 --> 00:20:52.040
especially - not the hook or pattern, but 𝚞𝚜𝚎𝙴𝚏𝚏𝚎𝚌𝚝

00:20:52.760 --> 00:20:55.279
and the lifecycle component, right?

00:20:55.799 --> 00:21:00.560
If I just put it side by side here, which one is

00:21:10.520 --> 00:21:11.000
better?

00:21:11.520 --> 00:21:13.637
I think there's going to be a lot of opinions

00:21:13.720 --> 00:21:15.639
on which is better, right?

00:21:15.919 --> 00:21:20.680
But I think if once we put the objective into

00:21:22.000 --> 00:21:22.880
evaluation,

00:21:23.000 --> 00:21:28.320
then I think it is going to be easier to understand.

00:21:28.840 --> 00:21:32.759
And okay, so if the objective is to reduce

00:21:32.880 --> 00:21:35.439
the mental model required,

00:21:35.799 --> 00:21:37.840
one good thing about useEffect,

00:21:38.120 --> 00:21:42.119
which React team also advocate for this,

00:21:42.360 --> 00:21:47.840
to the point and I think that Dan or someone,

00:21:48.559 --> 00:21:53.200
maybe people in the React core contributor wrote about

00:21:53.320 --> 00:21:55.799
why useEffect is awesome.

00:21:56.159 --> 00:21:58.076
Honestly, and in my personal opinion,

00:21:58.159 --> 00:22:00.437
to the point that sometimes I feel like

00:22:00.520 --> 00:22:03.480
they are gaslighting me to like useEffect,

00:22:03.799 --> 00:22:06.760
but I don't know.

00:22:07.440 --> 00:22:09.196
But if you think about it, right,

00:22:09.279 --> 00:22:12.680
if the way that they advocate that hey,

00:22:12.799 --> 00:22:16.317
if you useEffect is just the way to think about

00:22:16.400 --> 00:22:21.357
useEffect is you try to synchronize external side

00:22:21.440 --> 00:22:22.917
effect into the component.

00:22:23.000 --> 00:22:25.397
You try to synchronize something from the external

00:22:25.480 --> 00:22:29.397
world into the component based on the dependency

00:22:29.480 --> 00:22:30.279
that you put in.

00:22:30.760 --> 00:22:34.399
So that and if you think of it that way, right,

00:22:34.880 --> 00:22:40.076
is one single mental model that can cover all of

00:22:40.159 --> 00:22:43.600
the lifecycle hooks.

00:22:44.200 --> 00:22:48.157
So if the objective is try to reduce the number of

00:22:48.240 --> 00:22:51.037
mental model that you need to know and cover

00:22:51.120 --> 00:22:51.677
everything,

00:22:51.760 --> 00:22:54.117
I think it's like seven lifecycle hooks,

00:22:54.200 --> 00:22:55.160
I can't remember.

00:22:55.400 --> 00:22:58.076
Then it's sure, on the left side is much better.

00:22:58.159 --> 00:23:00.440
It's just one single mental model.

00:23:00.960 --> 00:23:03.400
With a caveat, but honestly, there's a caveat

00:23:03.799 --> 00:23:05.040
that I don't know why,

00:23:05.159 --> 00:23:08.317
because when you try to say sync nothing from

00:23:08.400 --> 00:23:09.600
the outside world,

00:23:09.880 --> 00:23:11.956
then there's two way to do nothing,

00:23:12.039 --> 00:23:14.956
which is empty array, and it's mean that you sync

00:23:15.039 --> 00:23:15.720
one time.

00:23:16.080 --> 00:23:17.757
And there's another type of nothing which is

00:23:17.840 --> 00:23:18.437
undefined,

00:23:18.520 --> 00:23:20.196
which mean you sync everything.

00:23:20.279 --> 00:23:25.196
But I think that really lead to confusion because

00:23:25.279 --> 00:23:28.199
there's two type of sync nothing.

00:23:28.720 --> 00:23:31.677
So you need to know this really secret of useEffect,

00:23:31.760 --> 00:23:34.399
and I think that create a lot of confusion.

00:23:34.679 --> 00:23:37.480
And if I get to do this,

00:23:37.720 --> 00:23:40.877
I might try to make it more explicit that there's

00:23:40.960 --> 00:23:41.960
two type of nothing,

00:23:42.279 --> 00:23:44.117
which is behave differently.

00:23:44.200 --> 00:23:45.596
But now they try to hey,

00:23:45.679 --> 00:23:47.517
there's two type of nothing that you need to know,

00:23:47.600 --> 00:23:49.800
empty array and nothing.

00:23:51.240 --> 00:23:56.076
But anyway, if the objective is to reduce the number

00:23:56.159 --> 00:23:57.760
of mental model required,

00:23:58.039 --> 00:23:59.357
then sure, useEffect,

00:23:59.440 --> 00:24:01.076
you just need to remember one thing,

00:24:01.159 --> 00:24:04.760
apply to every lifecycle, nice.

00:24:05.440 --> 00:24:09.437
But if the objective is to make API clear and easy

00:24:09.520 --> 00:24:12.880
to follow for public audience,

00:24:13.840 --> 00:24:17.716
as again, I don't have the real statistic

00:24:17.799 --> 00:24:18.677
to prove that,

00:24:18.760 --> 00:24:21.757
but I think it's pretty clear that significant

00:24:21.840 --> 00:24:24.757
proportion of React dev still confusing about

00:24:24.840 --> 00:24:26.440
useEffect until this day.

00:24:26.799 --> 00:24:28.720
So I would say that it fail objective,

00:24:29.279 --> 00:24:34.240
this objective.

00:24:34.520 --> 00:24:38.476
And when we have two people talk and when we have

00:24:38.559 --> 00:24:40.000
two sides, right,

00:24:40.159 --> 00:24:42.316
then one might say that hey,

00:24:42.399 --> 00:24:43.637
you remember just one thing,

00:24:43.720 --> 00:24:45.959
you can do everything, it's so simple.

00:24:46.399 --> 00:24:47.716
But then on the other side,

00:24:47.799 --> 00:24:49.357
we have but wait,

00:24:49.440 --> 00:24:51.917
I just want to load the data into component,

00:24:52.000 --> 00:24:54.559
and now I just want to do that.

00:24:54.960 --> 00:24:56.557
And now I need to learn that there's

00:24:56.640 --> 00:24:59.560
a synchronization mechanism,

00:24:59.760 --> 00:25:01.196
and when you put this thing,

00:25:01.279 --> 00:25:04.716
then it do what I do instead of I writing

00:25:04.799 --> 00:25:06.399
componentDidMount.

00:25:07.000 --> 00:25:10.719
That's is so complex.

00:25:11.159 --> 00:25:14.559
It's I think it can be asked on either side.

00:25:14.679 --> 00:25:17.320
It's simple in one objective,

00:25:17.520 --> 00:25:24.920
but it's complex in another objective, right?

00:25:25.520 --> 00:25:32.917
So it gets back to: only after you decide what you care about,

00:25:33.000 --> 00:25:37.117
then you can be objective about which code or system design

00:25:37.200 --> 00:25:41.039
is better.

00:25:41.559 --> 00:25:47.000
And the next one is one and two-way bindings.

00:25:47.600 --> 00:25:52.039
I think in JavaScript frontend frameworks,

00:25:52.440 --> 00:25:56.557
there are maybe two main ways to think about state.

00:25:56.640 --> 00:25:59.920
And one is more on the side of two-way binding

00:26:00.080 --> 00:26:01.997
where you have just variable.

00:26:02.080 --> 00:26:06.360
And when you change the variable directly,

00:26:06.640 --> 00:26:09.277
the reactivity just goes back.

00:26:09.360 --> 00:26:11.117
Like the example is a count.

00:26:11.200 --> 00:26:12.879
I think it comes from Svelte 4

00:26:13.799 --> 00:26:15.479
because I just learned that Svelte 5

00:26:15.799 --> 00:26:19.440
you need to put $state(…) in the morning, but anyway.

00:26:19.960 --> 00:26:21.037
And on the right side,

00:26:21.120 --> 00:26:24.357
there's an advocate for one-way binding where

00:26:24.440 --> 00:26:28.237
it advocates for "Hey, you should not change the state directly.

00:26:28.320 --> 00:26:32.039
You should do it via another function or event."

00:26:32.559 --> 00:26:35.517
And it's one-way binding because you cannot change the state.

00:26:35.600 --> 00:26:38.159
It needs to go through the event,

00:26:38.559 --> 00:26:41.240
and if it flux then it dispatch and then get back,

00:26:41.440 --> 00:26:43.799
and then the data flow is one-way data flow.

00:26:44.080 --> 00:26:45.800
And this one you can change directly.

00:26:49.960 --> 00:26:54.560
So on the right side, if your objective is to

00:26:54.840 --> 00:27:00.517
try to see everything at once and try quick development,

00:27:00.600 --> 00:27:04.880
then yeah, the right side here is much better.

00:27:05.080 --> 00:27:07.677
Because if you do it in the left pattern,

00:27:07.760 --> 00:27:11.040
then you just want to pass count by one

00:27:11.159 --> 00:27:13.359
when people click the button.

00:27:13.720 --> 00:27:15.040
And now you need to do it indirectly,

00:27:15.399 --> 00:27:19.037
need to define the new event call increase function,

00:27:19.120 --> 00:27:21.557
call increase count and go back.

00:27:21.640 --> 00:27:24.039
And now it's another layer of indirection.

00:27:24.640 --> 00:27:26.437
I want to read everything directly.

00:27:26.520 --> 00:27:32.600
I don't want to look into this unnecessary indirection.

00:27:33.000 --> 00:27:34.520
So you can ask for that.

00:27:35.120 --> 00:27:38.320
And if your objective is to try to see everything at once,

00:27:38.640 --> 00:27:41.159
sure, the right is better.

00:27:41.679 --> 00:27:45.277
But if you want to make sure that you have

00:27:45.360 --> 00:27:49.119
meaningful description of why state changes,

00:27:49.559 --> 00:27:51.440
then the left side is much better

00:27:51.960 --> 00:27:54.440
because it tries to enforce you,

00:27:54.600 --> 00:27:57.076
"Hey, when you want to change the state,

00:27:57.159 --> 00:27:58.517
don't change it directly,

00:27:58.600 --> 00:28:01.279
create an event, name it properly,

00:28:01.559 --> 00:28:04.000
and then we can track all the state change

00:28:04.440 --> 00:28:06.319
based on those names."

00:28:06.919 --> 00:28:09.080
And that's the power of one-way binding

00:28:09.760 --> 00:28:11.920
which is good on one thing,

00:28:12.240 --> 00:28:13.959
good on that objective,

00:28:14.159 --> 00:28:17.480
but not good on another objective.

00:28:17.760 --> 00:28:19.200
And maybe some of you might ask,

00:28:19.320 --> 00:28:21.557
"But hey, Chris, on the right side

00:28:21.640 --> 00:28:25.436
then you can actually wrap it in a function

00:28:25.519 --> 00:28:28.079
and you can achieve the one-way binding as well."

00:28:28.519 --> 00:28:31.880
And I say, "Yes, it's true, you can do that.

00:28:32.279 --> 00:28:37.520
But then that means that you prefer

00:28:37.720 --> 00:28:42.480
having more options than less options, right?"

00:28:43.000 --> 00:28:46.720
And that's not the sentiment that everyone shares.

00:28:47.240 --> 00:28:51.279
And to be honest, there are languages such as Go or Python

00:28:51.640 --> 00:28:54.320
where they say, "Strip all the options,

00:28:54.519 --> 00:28:57.080
just do the same things, right?"

00:28:57.600 --> 00:29:00.157
So even though having more options

00:29:00.240 --> 00:29:04.479
might seem to be something objectively more valuable to you,

00:29:05.000 --> 00:29:07.956
but when you drill down to it, it might not be.

00:29:08.039 --> 00:29:11.359
And sometimes it's much better to don't have options.

00:29:11.799 --> 00:29:14.917
And I cannot ask whether it's better or worse.

00:29:15.000 --> 00:29:19.159
It's up to what is your—gets back to the same question again:

00:29:19.320 --> 00:29:24.799
what do you care about?

00:29:26.440 --> 00:29:26.680
Yep.

00:29:27.440 --> 00:29:31.997
And I think one-way binding and two-way binding

00:29:32.080 --> 00:29:38.277
comes down to many of us working in form-based

00:29:38.360 --> 00:29:39.397
application, right?

00:29:39.480 --> 00:29:44.399
Even our sponsors such as Agoda, Fastwork, right?

00:29:44.679 --> 00:29:47.836
Complicated app, but then it boils down to hotel

00:29:47.919 --> 00:29:50.919
booking, then you have a form, then you submit it,

00:29:51.240 --> 00:29:51.720
right?

00:29:52.240 --> 00:29:55.440
And when you have this kind of form, then you will ask,

00:29:55.600 --> 00:29:58.997
"Hey, I just have a form and I want to submit it,

00:29:59.080 --> 00:30:02.999
then why do I need to have all the event setName,

00:30:03.159 --> 00:30:08.357
setTitle, setOccupation to bind the data into the

00:30:08.440 --> 00:30:12.039
state to do some business logic inside for the state?"

00:30:12.519 --> 00:30:17.760
It's why can't I just bind it and that's more simple,

00:30:18.200 --> 00:30:22.119
right? In this kind of context.

00:30:23.480 --> 00:30:26.997
Back in the day, I used to work on a project

00:30:27.080 --> 00:30:31.877
management app where there's a task you create and

00:30:31.960 --> 00:30:34.239
there's a bunch of notification on the top.

00:30:36.720 --> 00:30:40.196
And one thing that we want to do is when there's new

00:30:40.279 --> 00:30:43.596
urgent task, whether it's coming from other people or

00:30:43.679 --> 00:30:46.476
coming from ourselves, we should alert that,

00:30:46.559 --> 00:30:49.399
"Hey, new urgent task, check out."

00:30:50.159 --> 00:30:55.117
And if I only have the bunch of state, which is bunch

00:30:55.200 --> 00:31:00.277
of task inside my state, and I need to try to diff it

00:31:00.360 --> 00:31:03.400
to see whether there is new urgent task coming in

00:31:03.919 --> 00:31:05.239
every time change.

00:31:05.679 --> 00:31:10.199
Wow. Oh my god, that is so complex, right?

00:31:10.799 --> 00:31:14.436
But why can't I simply have the event, maybe

00:31:14.519 --> 00:31:16.279
urgentTaskCreate event?

00:31:16.600 --> 00:31:19.277
But now I need to go look into the state change,

00:31:19.360 --> 00:31:22.436
diff it, and see that, "Hey, new things new urgent

00:31:22.519 --> 00:31:27.117
task coming. I need to put the notification."

00:31:27.200 --> 00:31:30.357
Now, in this context, seems like the complexity and

00:31:30.440 --> 00:31:40.440
simplicity just turns on the opposite side.

00:31:41.120 --> 00:31:47.037
Because if you don't name properly when the task is

00:31:47.120 --> 00:31:49.997
being tagged urgent, and then you don't have the event

00:31:50.080 --> 00:31:50.556
to track.

00:31:50.639 --> 00:31:54.839
And all you can do is try to diff the task themselves.

00:31:56.600 --> 00:31:57.000
Right?

00:31:57.600 --> 00:32:03.117
And as we become more aware of the power of one-way

00:32:03.200 --> 00:32:04.360
binding, right?

00:32:04.639 --> 00:32:10.076
This is because you can see, "Hey, this goes against

00:32:10.159 --> 00:32:12.999
the objective of one-way binding where you try to use

00:32:13.159 --> 00:32:17.316
just set only and you don't name the event of the

00:32:17.399 --> 00:32:19.239
state change properly."

00:32:19.519 --> 00:32:20.799
And, yeah.

00:32:21.399 --> 00:32:24.596
Then you can see that as you become aware of objective

00:32:24.679 --> 00:32:27.840
of each design pattern, then you can see what goes

00:32:28.000 --> 00:32:32.879
against it much better.

00:32:33.399 --> 00:32:36.877
I think I can go on with so many examples as I said,

00:32:36.960 --> 00:32:40.677
I work with many programming languages and I can go on

00:32:40.760 --> 00:32:44.199
with many examples in software engineering history.

00:32:44.559 --> 00:32:48.237
There's so many examples of this.

00:32:48.320 --> 00:32:53.117
But the takeaway that I want to say here today is not

00:32:53.200 --> 00:32:56.919
about everything being trade-off, which is true, but

00:32:58.919 --> 00:33:03.760
that's not what I want to say today.

00:33:04.360 --> 00:33:06.799
Know what you care about.

00:33:07.399 --> 00:33:12.716
You need to care about something subjectively in order

00:33:12.799 --> 00:33:16.359
to be objective.

00:33:16.639 --> 00:33:20.877
And I think the biggest misconception in the

00:33:20.960 --> 00:33:29.076
engineering community is subjectivity actually enhances

00:33:29.159 --> 00:33:31.120
the objectivity.

00:33:31.240 --> 00:33:34.436
And when I see people debate on what is the best

00:33:34.519 --> 00:33:37.917
practice, they try to remove their subjective

00:33:38.000 --> 00:33:43.120
preference or what they care about out of the equation.

00:33:43.480 --> 00:33:48.436
With the impression that it makes their argument much

00:33:48.519 --> 00:33:50.520
more objective and logical.

00:33:50.880 --> 00:33:51.840
I would say no.

00:33:52.600 --> 00:33:54.560
I would say the opposite.

00:33:54.840 --> 00:33:59.397
Awareness of what you care about actually enhances the

00:33:59.480 --> 00:34:03.720
objective quality and your objective logical evaluation

00:34:03.840 --> 00:34:05.320
of the system.

00:34:05.840 --> 00:34:08.080
𝚞𝚜𝚎𝙴𝚏𝚏𝚎𝚌𝚝 can be good or bad API.

00:34:08.599 --> 00:34:11.879
It's based on what is your objective and audience,

00:34:15.359 --> 00:34:15.759
right?

00:34:19.839 --> 00:34:25.197
And once you know that, then that sentiment nowadays,

00:34:25.280 --> 00:34:30.076
why do we need more than simple HTML, CSS, JavaScript,

00:34:30.159 --> 00:34:30.559
right?

00:34:30.760 --> 00:34:34.556
And I think there's a lot of people on the internet

00:34:34.639 --> 00:34:38.596
saying that, "Hey, JavaScript programmers, you invent

00:34:38.679 --> 00:34:45.399
new frameworks every day just to keep your job."

00:34:46.159 --> 00:34:59.516
And I say that kind is not productive to both them and

00:34:59.599 --> 00:34:59.839
us.

00:35:00.400 --> 00:35:04.797
I think when you say something is worthless and

00:35:04.880 --> 00:35:09.297
unnecessarily complex, what you should start from is

00:35:09.380 --> 00:35:11.640
being aware of what you care about.

00:35:12.160 --> 00:35:14.839
Accept the subjectivity nature of it.

00:35:15.599 --> 00:35:19.200
Then after that, you can absorb different values,

00:35:19.720 --> 00:35:23.079
absorb something that you might not care about.

00:35:23.599 --> 00:35:26.996
And once you understand that, "Hey, I don't like this

00:35:27.079 --> 00:35:30.036
pattern because they care about something that I don't

00:35:30.119 --> 00:35:31.280
give a shit about."

00:35:32.760 --> 00:35:37.440
Then you can learn the value of that pattern.

00:35:37.880 --> 00:35:46.320
And this is how you grow to be more versatile engineer.

00:35:46.680 --> 00:35:50.079
And I want to end this talk from the quote in

00:35:50.240 --> 00:35:52.077
leadership and psychotherapy.

00:35:52.160 --> 00:35:56.236
And by the way, I am really into psychology and

00:35:56.319 --> 00:36:01.117
psychotherapy, which is another topic, not for today,

00:36:01.200 --> 00:36:01.960
but, yeah.

00:36:02.560 --> 00:36:05.957
The good quote here is that "Awareness precedes choice

00:36:06.040 --> 00:36:08.797
and choice precedes changes," which comes from

00:36:08.880 --> 00:36:11.600
Robin S. Sharma.

00:36:12.200 --> 00:36:15.837
And I can say that as a consultant who needs to go and

00:36:15.920 --> 00:36:20.359
improve many engineering practices, when I'm aware of

00:36:20.560 --> 00:36:24.840
what I care about and I accept the nature of that,

00:36:25.200 --> 00:36:29.236
and I start to absorb what people in their

00:36:29.319 --> 00:36:33.797
organization care about, and I start to empathize with

00:36:33.880 --> 00:36:39.036
that, that's when I can really make change to their

00:36:39.119 --> 00:36:42.600
organization and the way they build software.

00:36:42.880 --> 00:36:47.200
I cannot make change if I don't accept what they care

00:36:47.839 --> 00:36:48.239
about.

00:36:48.839 --> 00:36:54.320
So, but it starts from being aware of what I care.

00:36:54.920 --> 00:37:01.759
So, yes, thank you for today.

00:37:02.359 --> 00:37:03.599
Okay. Thank you, P'Chris.
