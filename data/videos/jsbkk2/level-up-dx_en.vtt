WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:00.160 --> 00:00:00.480
Okay.

00:00:01.360 --> 00:00:01.920
Hello.

00:00:03.159 --> 00:00:05.559
Good afternoon everyone.

00:00:05.759 --> 00:00:06.600
My name is Nattaaek.

00:00:07.720 --> 00:00:09.200
You can call me in Thai Egg.

00:00:09.400 --> 00:00:12.050
But for foreigner I would say you can call me Egg,

00:00:12.133 --> 00:00:13.400
like a chicken egg.

00:00:13.799 --> 00:00:16.799
So it easier for you to pronounce my nickname.

00:00:17.920 --> 00:00:22.677
So today, the title is a little bit clickbait to you guys,

00:00:22.760 --> 00:00:25.679
but it was from GPT.

00:00:26.119 --> 00:00:31.557
I would like to sharing about how Agoda approaching

00:00:31.640 --> 00:00:33.277
to help developer experience,

00:00:33.360 --> 00:00:39.677
developing their application easier, less context switching.

00:00:39.760 --> 00:00:42.597
Mainly I will talking about the context switching.

00:00:42.680 --> 00:00:45.600
Does anyone know about context switching before?

00:00:45.960 --> 00:00:48.437
Okay, one, a few people.

00:00:48.520 --> 00:00:51.116
So without further ado, let's get start.

00:00:51.199 --> 00:00:54.199
I think my session will not taking that long.

00:00:54.960 --> 00:00:58.080
Who have you ever facing this before?

00:00:58.440 --> 00:01:02.120
Oh, why I cannot run it.

00:01:02.800 --> 00:01:05.076
So basically like you have project, right?

00:01:05.159 --> 00:01:07.477
Now you would like to run your client-side.

00:01:07.560 --> 00:01:12.040
You start to type and then you wait.

00:01:13.680 --> 00:01:15.480
Tiktok tiktok, very long time, right?

00:01:16.320 --> 00:01:24.960
So what do you do while you are waiting?

00:01:25.240 --> 00:01:29.076
Some people would say they go to pantry and grab some coffee,

00:01:29.159 --> 00:01:32.597
matcha, or even like a snack or drink, right?

00:01:32.680 --> 00:01:35.280
So you just go back and forth.

00:01:35.720 --> 00:01:38.157
Someone just turn around and talk to their colleagues

00:01:38.240 --> 00:01:39.877
about the life, daily life,

00:01:39.960 --> 00:01:43.117
or even like just talking about the work,

00:01:43.200 --> 00:01:47.199
for more like efficiency development,

00:01:47.439 --> 00:01:51.356
or checking an email about like does our boss sending

00:01:51.439 --> 00:01:54.000
some email or something like that.

00:01:54.520 --> 00:01:56.636
Last one was like you checking the Slack,

00:01:56.719 --> 00:01:58.676
maybe helping other developer,

00:01:58.759 --> 00:02:02.477
or someone just keep chasing you about how can we build this,

00:02:02.560 --> 00:02:04.517
how can we do that, something like that,

00:02:04.600 --> 00:02:07.676
which is they supposed to go to on-call person

00:02:07.759 --> 00:02:10.117
or someone else which should not be you,

00:02:10.200 --> 00:02:13.600
and you just kind enough to answer them.

00:02:14.120 --> 00:02:19.959
And even worse, you have IG, right?

00:02:20.680 --> 00:02:27.617
Now nowadays we have like IG, TikTok that have sound too.

00:02:28.519 --> 00:02:32.397
So basically like this kind of application actually built

00:02:32.480 --> 00:02:35.997
really good to keep tracking you to their application, right?

00:02:36.080 --> 00:02:39.182
You just like keep scrolling scrollingๆ.

00:02:39.360 --> 00:02:41.897
I think it called like a doomscrolling nowadays.

00:02:43.280 --> 00:02:45.240
So it really consuming your time.

00:02:45.599 --> 00:02:47.156
Basically, if it was me,

00:02:47.239 --> 00:02:50.236
I took like at least 20 or 10 minutes

00:02:50.319 --> 00:02:52.717
in order to escape from this application,

00:02:52.800 --> 00:02:59.000
which is like very unproductive in my opinion.

00:02:59.280 --> 00:03:01.119
Actually from the research,

00:03:01.319 --> 00:03:03.677
there are a lot of people that trying to research

00:03:03.760 --> 00:03:07.317
how long does it take in order to like get back

00:03:07.400 --> 00:03:09.997
to do the deep work, deep focusing work.

00:03:10.080 --> 00:03:13.236
It's around like 20 minutes in order for you

00:03:13.319 --> 00:03:15.716
to get back to like a deep focusing mode,

00:03:15.799 --> 00:03:17.436
which is quite long, right?

00:03:17.519 --> 00:03:19.557
Like you scrolling something,

00:03:19.640 --> 00:03:23.716
by like you just try to 𝚙𝚗𝚙𝚖 𝚍𝚎𝚟 𝚙𝚗𝚙𝚖 𝚋𝚞𝚒𝚕𝚍

00:03:23.799 --> 00:03:25.397
and then you just keep scrolling 10 minutes

00:03:25.480 --> 00:03:27.076
and then you need to wait like a 25

00:03:27.159 --> 00:03:30.079
in order to get focusing on back to work again,

00:03:30.200 --> 00:03:36.080
which is really like crucial and unproductive in my opinion.

00:03:36.360 --> 00:03:39.917
So that this one we call like a context switching,

00:03:40.000 --> 00:03:41.876
like you do something, you wait,

00:03:41.959 --> 00:03:43.400
and then you do something else.

00:03:44.599 --> 00:03:45.079
Yeah.

00:03:45.599 --> 00:03:49.677
Let me interview you about like a type of the context switching.

00:03:49.760 --> 00:03:53.000
This is just my own opinion.

00:03:53.280 --> 00:03:56.759
First one was like the technical context switching

00:03:56.879 --> 00:03:58.436
that can causing the context switching.

00:03:58.519 --> 00:04:00.279
One is like the build time.

00:04:00.519 --> 00:04:02.516
You can see this, our real application,

00:04:02.599 --> 00:04:04.236
it took like a 3 minutes in order to just

00:04:04.319 --> 00:04:06.356
𝚢𝚊𝚛𝚗 𝚜𝚝𝚊𝚛𝚝 or 𝚙𝚗𝚙𝚖 𝚜𝚝𝚊𝚛𝚝.

00:04:06.439 --> 00:04:07.397
Really long, right?

00:04:07.480 --> 00:04:09.037
And what is the real application,

00:04:09.120 --> 00:04:12.440
a little bit legacy, but yeah, it is how it is.

00:04:12.680 --> 00:04:16.076
And the next one is like when you trying to do the test,

00:04:16.159 --> 00:04:20.037
𝚢𝚊𝚛𝚗 𝚝𝚎𝚜𝚝, something like that, or do the unit test.

00:04:20.120 --> 00:04:22.277
Right now, our application took like a 5 minutes,

00:04:22.360 --> 00:04:24.119
run just one single test case.

00:04:24.639 --> 00:04:26.840
Really painful.

00:04:27.120 --> 00:04:30.120
Another one was like non-technical.

00:04:30.600 --> 00:04:32.836
I'm not sure everyone got this kind of meeting

00:04:32.919 --> 00:04:33.597
same as me or not.

00:04:33.680 --> 00:04:35.279
This is my calendar.

00:04:35.479 --> 00:04:39.437
So I cannot even barely find the time to coding,

00:04:39.520 --> 00:04:45.797
even I'm not manager, I'm just normal engineering.

00:04:45.880 --> 00:04:49.396
Another one was like non-technical as well,

00:04:49.479 --> 00:04:50.917
but work from home edition.

00:04:51.000 --> 00:04:53.836
If you guys have like your companion at your home,

00:04:53.919 --> 00:04:58.396
this is my two lovely cat that they keep come chasing me

00:04:58.479 --> 00:05:00.437
every time when I trying to working,

00:05:00.520 --> 00:05:02.836
try to get my attraction.

00:05:02.919 --> 00:05:06.357
So basically like I need to play with them

00:05:06.440 --> 00:05:08.277
in order to let them go away, right?

00:05:08.360 --> 00:05:12.157
Or like if you live with your family or your wife

00:05:12.240 --> 00:05:15.997
or your partner, basically like you might get asking,

00:05:16.080 --> 00:05:19.797
"Go wash dishes. Go wash your cloth." something like that.

00:05:19.880 --> 00:05:22.280
So you need to go there or hanging your cloth.

00:05:22.600 --> 00:05:24.556
So there is a lot of context switching

00:05:24.639 --> 00:05:26.277
that happening everywhere.

00:05:26.360 --> 00:05:29.517
But today, we will talking only for the technical one

00:05:29.600 --> 00:05:36.400
because non-technical one, I don't think I cannot fix it.

00:05:38.319 --> 00:05:38.799
Cool.

00:05:39.319 --> 00:05:42.520
What and before we going to like how we fix,

00:05:42.639 --> 00:05:46.717
what is exactly causing by the context switching?

00:05:46.800 --> 00:05:49.116
From the engineer perspective,

00:05:49.199 --> 00:05:53.080
actually it was reducing the productivity, right?

00:05:53.520 --> 00:05:55.317
Like you switching, do something,

00:05:55.400 --> 00:05:56.236
when you go back,

00:05:56.319 --> 00:05:58.956
it's kind of like very hard for you to keep focus.

00:05:59.039 --> 00:06:01.879
Maybe you also forgot what you did.

00:06:02.280 --> 00:06:02.956
Something like that.

00:06:03.039 --> 00:06:04.037
Increase error rate,

00:06:04.120 --> 00:06:06.160
like since we are engineer,

00:06:06.360 --> 00:06:08.956
we working on fixing something or developing something.

00:06:09.039 --> 00:06:10.077
If you context switching,

00:06:10.160 --> 00:06:12.239
it also increasing the error as well.

00:06:12.599 --> 00:06:14.477
For the creativity,

00:06:14.560 --> 00:06:17.880
I think we working with like very smart business people.

00:06:18.080 --> 00:06:19.720
They come with very weird idea

00:06:19.919 --> 00:06:22.717
that will help driving the business going further,

00:06:22.800 --> 00:06:23.877
making more money.

00:06:23.960 --> 00:06:27.037
So we also need to follow them too

00:06:27.120 --> 00:06:30.560
with our creativity implementation as well.

00:06:31.039 --> 00:06:33.357
But like if we are context switching

00:06:33.440 --> 00:06:36.836
in order to catch up with the original idea

00:06:36.919 --> 00:06:39.197
that you thought about to implement,

00:06:39.280 --> 00:06:40.320
it might be hard.

00:06:40.440 --> 00:06:41.877
And also job satisfaction,

00:06:41.960 --> 00:06:44.199
basically like on every company,

00:06:44.720 --> 00:06:46.157
they are the scorecard

00:06:46.240 --> 00:06:50.560
that we might need to follow and fulfill the KPI or OKR,

00:06:51.000 --> 00:06:54.160
individual or the team.

00:06:54.479 --> 00:06:55.197
So basically,

00:06:55.280 --> 00:06:57.357
if you have less productivity,

00:06:57.440 --> 00:07:01.116
you might not be able to reach to the goal

00:07:01.199 --> 00:07:04.720
that you expected to be.

00:07:05.400 --> 00:07:07.597
Next one is from like a company perspective.

00:07:07.680 --> 00:07:10.236
This one I grab from Glassdoor.

00:07:10.319 --> 00:07:13.599
Just average with my supreme mathematics skill.

00:07:13.800 --> 00:07:17.357
Basically, like normal salary in Thailand,

00:07:17.440 --> 00:07:18.676
average from Glassdoor,

00:07:18.759 --> 00:07:20.080
I'm not sure it's true or not.

00:07:20.199 --> 00:07:21.676
But yeah, it's around this one.

00:07:21.759 --> 00:07:24.597
So I divide with my math skill,

00:07:24.680 --> 00:07:29.119
it's going to be like 262.5 Thai baht per hour.

00:07:30.080 --> 00:07:33.720
Let's assume that like you got distract two times.

00:07:34.240 --> 00:07:36.157
And that means you need to recover

00:07:36.240 --> 00:07:38.639
from the context switching around one hour.

00:07:39.479 --> 00:07:41.880
And you have like four members in your team.

00:07:42.120 --> 00:07:44.116
Roughly estimation per year,

00:07:44.199 --> 00:07:47.277
the company need to pay for that context switching

00:07:47.360 --> 00:07:48.239
is around like 370.

00:07:50.120 --> 00:07:51.960
A lot money, right?

00:07:52.400 --> 00:07:55.400
Greater than my bonus.

00:07:55.840 --> 00:08:02.159
So let's talk about how as Agoda,

00:08:02.319 --> 00:08:04.597
we trying to fix the context switching

00:08:04.680 --> 00:08:05.920
from the engineer.

00:08:06.120 --> 00:08:09.477
Basically, as we know that,

00:08:09.560 --> 00:08:11.080
okay, that is the build time that slow.

00:08:11.479 --> 00:08:13.877
Is it only just me or only just you

00:08:13.960 --> 00:08:15.840
or is the whole company-wide

00:08:15.960 --> 00:08:17.880
or like just department-wide?

00:08:18.039 --> 00:08:19.037
So first of all,

00:08:19.120 --> 00:08:20.676
we need to gather the data first,

00:08:20.759 --> 00:08:24.400
whether to prove that this is the real big issue.

00:08:24.840 --> 00:08:27.717
So we have developing the plugin.

00:08:27.800 --> 00:08:28.836
This is open source.

00:08:28.919 --> 00:08:31.719
It's called Agoda Dev Feedback.

00:08:31.919 --> 00:08:34.316
I think I provide the link below.

00:08:34.399 --> 00:08:35.196
It's open source.

00:08:35.279 --> 00:08:36.636
If you guys use and feedback,

00:08:36.719 --> 00:08:39.639
feel free to PR welcome.

00:08:40.839 --> 00:08:43.560
Basically, what this one doing is

00:08:44.000 --> 00:08:50.117
it will capture the data on the build lifecycle

00:08:50.200 --> 00:08:52.917
of the build tool such as Webpack or Vite.

00:08:53.000 --> 00:08:56.077
So let's say like you do 𝚢𝚊𝚛𝚗 𝚋𝚞𝚒𝚕𝚍 on the Webpack.

00:08:56.160 --> 00:08:59.037
Once it compiler going to the end,

00:08:59.120 --> 00:09:02.960
it will providing you some JSON file like this.

00:09:03.480 --> 00:09:06.677
So basically, this JSON file will contain a lot of things,

00:09:06.760 --> 00:09:11.397
such as like CPU, RAM, how long does it take,

00:09:11.480 --> 00:09:16.159
who did implement, who did this execution,

00:09:16.279 --> 00:09:18.680
and many more.

00:09:19.200 --> 00:09:20.677
So at Agoda,

00:09:20.760 --> 00:09:24.957
we also trying to developing another service

00:09:25.040 --> 00:09:26.159
called the ingestor.

00:09:26.519 --> 00:09:30.320
So we have like an ingestor to just simple API

00:09:30.800 --> 00:09:33.559
that retrieve that JSON file as a body.

00:09:34.560 --> 00:09:36.357
And then just save to the Hadoop.

00:09:36.440 --> 00:09:36.876
That's it.

00:09:36.959 --> 00:09:38.800
Simple as that.

00:09:39.320 --> 00:09:41.637
Then every time when you build,

00:09:41.720 --> 00:09:42.840
you will have the JSON,

00:09:42.959 --> 00:09:45.316
and then we will passing the JSON body

00:09:45.399 --> 00:09:48.037
as the request to the ingestor.

00:09:48.120 --> 00:09:50.720
Ingestor save to the Hadoop table.

00:09:51.160 --> 00:09:57.277
And then we plot it into the Superset dashboard.

00:09:57.360 --> 00:09:58.517
This one we use Superset.

00:09:58.600 --> 00:09:59.717
You can use Metabase

00:09:59.800 --> 00:10:02.357
or whatever that you can plot.

00:10:02.440 --> 00:10:03.677
This is how it looks.

00:10:03.760 --> 00:10:07.117
There is like the name here, list of the people.

00:10:07.200 --> 00:10:10.557
So we can monitoring whether this guy working or not,

00:10:10.640 --> 00:10:12.637
how many times that guy build.

00:10:12.720 --> 00:10:14.999
No, I didn't mean to do like that.

00:10:15.160 --> 00:10:15.756
So basically,

00:10:15.839 --> 00:10:19.279
we trying to check like maybe this guy took like

00:10:20.320 --> 00:10:22.196
33 seconds in order to building our project.

00:10:22.279 --> 00:10:26.717
It also can help be like our repository health check,

00:10:26.800 --> 00:10:29.799
whether how does our contributor feel.

00:10:30.120 --> 00:10:32.637
And then we can try to optimize based on that,

00:10:32.720 --> 00:10:35.999
try to helping them to reduce this time

00:10:36.200 --> 00:10:37.680
in order to build.

00:10:37.800 --> 00:10:39.637
So they will have fast feedback

00:10:39.720 --> 00:10:41.519
and have less context switching.

00:10:42.560 --> 00:10:44.677
And there is the trend over there.

00:10:44.760 --> 00:10:45.677
As you can see,

00:10:45.760 --> 00:10:48.920
there is around like 25 seconds to 30.

00:10:50.600 --> 00:10:52.440
That was the build Webpack.

00:10:52.600 --> 00:10:55.720
So basically, our application right now,

00:10:56.279 --> 00:10:57.917
we using the Webpack,

00:10:58.000 --> 00:11:01.280
which is coming from the create-react-app.

00:11:01.639 --> 00:11:03.160
And then we do eject.

00:11:03.600 --> 00:11:05.717
Which is very messy Webpack right now,

00:11:05.800 --> 00:11:09.159
and we barely touch it because we don't know what it is.

00:11:11.480 --> 00:11:15.680
And then one funny thing is like previously,

00:11:16.880 --> 00:11:21.237
they remove some of the table here.

00:11:21.320 --> 00:11:21.717
Previously,

00:11:21.800 --> 00:11:26.436
it has the way to check which operation system

00:11:26.519 --> 00:11:31.957
or which CPU or RAM that running this.

00:11:32.040 --> 00:11:34.597
And we found that like there is around

00:11:34.680 --> 00:11:37.677
two or three guys that use very old model

00:11:37.760 --> 00:11:39.840
of the CPU or RAM.

00:11:40.040 --> 00:11:44.077
We just asking them to request to the IT support,

00:11:44.160 --> 00:11:45.717
and they will get new replacement,

00:11:45.800 --> 00:11:48.080
and their life will easier.

00:11:48.440 --> 00:11:50.957
But like if the normal developer

00:11:51.040 --> 00:11:52.799
that developing right now,

00:11:53.519 --> 00:11:55.196
how do we trying to fix that?

00:11:55.279 --> 00:11:59.560
First thing is like we seeking the new build tool.

00:11:59.959 --> 00:12:02.800
I think you guys might be able to guess what it is.

00:12:03.480 --> 00:12:05.120
Can someone guess it?

00:12:05.800 --> 00:12:07.157
Vite, right?

00:12:07.240 --> 00:12:07.637
Yeah.

00:12:07.720 --> 00:12:09.160
Basically, we try Vite.

00:12:10.320 --> 00:12:12.277
But at Agoda,

00:12:12.360 --> 00:12:14.077
we cannot like just go ahead,

00:12:14.160 --> 00:12:17.277
like yolo, migrate to Vite and deploy to production.

00:12:17.360 --> 00:12:19.397
It's kind of like very crucial.

00:12:19.480 --> 00:12:23.759
So we need to do kind of like AB testing as well.

00:12:23.880 --> 00:12:24.677
So basically,

00:12:24.760 --> 00:12:26.157
we have like two bundles,

00:12:26.240 --> 00:12:28.077
that build from Webpack and build from Vite.

00:12:28.160 --> 00:12:30.440
And then we running as an experiment, 50/50,

00:12:31.680 --> 00:12:33.560
and then see the result.

00:12:33.920 --> 00:12:35.479
This is the result.

00:12:35.839 --> 00:12:37.399
You guys see like the yellow?

00:12:38.040 --> 00:12:42.320
At least like it coming down from 25 or 30

00:12:43.000 --> 00:12:44.839
down to 10 seconds.

00:12:45.199 --> 00:12:47.319
This is like a very good sign

00:12:47.560 --> 00:12:50.597
that we help developer experience developing

00:12:50.680 --> 00:12:52.637
in our local environment

00:12:52.720 --> 00:12:53.637
or even like CI,

00:12:53.720 --> 00:12:55.880
we also making build faster as well.

00:12:56.480 --> 00:12:59.279
So CI/CD process is faster.

00:13:00.680 --> 00:13:01.160
Yeah.

00:13:03.639 --> 00:13:08.760
And then we also not just doing only the build.

00:13:09.279 --> 00:13:11.600
We also tracking the test.

00:13:12.120 --> 00:13:15.357
So every time when you run test, we also capture everything

00:13:15.440 --> 00:13:19.477
and we can see whether this kind of test taking two seconds.

00:13:19.560 --> 00:13:21.679
Is it too long in your opinion?

00:13:21.800 --> 00:13:24.440
So if it's too long, shall we optimize it?

00:13:24.760 --> 00:13:27.677
So we can have a story or technical improvement

00:13:27.760 --> 00:13:34.000
in our backlog and trying to improve every single sprint.

00:13:34.600 --> 00:13:38.439
Okay, then that's it for the technical part.

00:13:38.600 --> 00:13:42.196
Actually, I would like to share the bonus one.

00:13:42.279 --> 00:13:45.677
This is just my own opinion, like how do I solve

00:13:45.760 --> 00:13:48.600
non-technical context switching.

00:13:48.720 --> 00:13:50.676
It might not work for you guys,

00:13:50.759 --> 00:13:53.680
but this is what I do.

00:13:54.360 --> 00:13:57.559
The first one is for the meeting marathon.

00:13:57.759 --> 00:14:01.037
I do block busy and busy this time.

00:14:01.120 --> 00:14:03.316
But you see that it doesn't work for me, right?

00:14:03.399 --> 00:14:07.237
There are still many meetings

00:14:07.320 --> 00:14:10.520
that trying to steal my busy time.

00:14:10.880 --> 00:14:14.760
Or another way is we do the notification snooze.

00:14:15.160 --> 00:14:17.917
So basically when Slack is coming in

00:14:18.000 --> 00:14:19.556
or new email coming in,

00:14:19.639 --> 00:14:21.880
I will not get any notification at all.

00:14:22.040 --> 00:14:23.556
So I will not get context switching

00:14:23.639 --> 00:14:26.477
trying to go back to Outlook and checking email

00:14:26.560 --> 00:14:28.823
or answer some Slack channel.

00:14:28.907 --> 00:14:32.039
I will have some period to answer.

00:14:32.160 --> 00:14:33.797
But if it's crucial,

00:14:33.880 --> 00:14:38.560
they can just walk to my desk and ask.

00:14:39.160 --> 00:14:41.399
What about IG?

00:14:42.079 --> 00:14:45.959
So actually the way that I did is

00:14:46.639 --> 00:14:50.237
I have following some particular account.

00:14:50.320 --> 00:14:52.520
This one is called close IG hourly.

00:14:53.120 --> 00:14:55.157
Basically, I just follow this guy.

00:14:55.240 --> 00:14:57.040
Every time when I scrolling the reel,

00:14:57.480 --> 00:15:02.559
they're going to show up showing some clickbait reel

00:15:03.680 --> 00:15:05.116
that I would want to watch,

00:15:05.199 --> 00:15:08.756
like someone dancing, someone do something.

00:15:08.839 --> 00:15:11.560
And then it will end up with the quote

00:15:11.720 --> 00:15:14.597
that go back to work, something like that.

00:15:14.680 --> 00:15:15.756
So this works for me,

00:15:15.839 --> 00:15:19.200
but I'm not sure it may not work for you.

00:15:19.800 --> 00:15:20.957
This is soft core.

00:15:21.040 --> 00:15:23.837
I also have hardcore edition as well.

00:15:23.920 --> 00:15:27.957
The hardcore edition is I use this kind of application.

00:15:28.040 --> 00:15:31.359
Basically, I use Opal, the right one.

00:15:31.959 --> 00:15:37.037
So it blocking the time to going to IG and Facebook

00:15:37.120 --> 00:15:39.160
or YouTube, something like that.

00:15:39.319 --> 00:15:42.316
So if I would like to really want to go there,

00:15:42.399 --> 00:15:44.519
I just need to snooze for five minutes,

00:15:45.040 --> 00:15:46.637
and then I can go back to work.

00:15:46.720 --> 00:15:48.797
This is how I would proceed to

00:15:48.880 --> 00:15:51.319
the non-context switching thing.

00:15:53.040 --> 00:15:54.400
That's it, actually.

00:15:54.519 --> 00:15:57.200
Is it too fast?

00:15:57.720 --> 00:15:58.920
How much time left?

00:16:00.800 --> 00:16:04.160
Actually, ten minutes left.

00:16:05.079 --> 00:16:06.600
So you can do anything else.

00:16:07.079 --> 00:16:08.800
Actually, I don't have anything,

00:16:09.000 --> 00:16:14.720
some pop quiz, something like that.

00:16:15.240 --> 00:16:17.640
But anyone have any questions so far?

00:16:20.560 --> 00:16:21.160
Yep.

00:16:24.000 --> 00:16:28.996
Thank you ครับ, just a question about the A/B testing

00:16:29.079 --> 00:16:31.037
for the webpack and Vite.

00:16:31.839 --> 00:16:34.837
Just curious on how you perform the A/B testing

00:16:34.920 --> 00:16:37.637
because from what I understand,

00:16:37.720 --> 00:16:39.717
I'm quite familiar with the A/B testing

00:16:39.800 --> 00:16:42.917
by setting up some cookie on the user side

00:16:43.000 --> 00:16:44.919
and we measuring the result.

00:16:45.240 --> 00:16:49.236
But from your side, how you perform this A/B testing?

00:16:49.319 --> 00:16:50.717
By asking developer to,

00:16:50.800 --> 00:16:53.957
"Hey, 50% could you guys use webpack

00:16:54.040 --> 00:16:56.919
and another 50% you are using Vite?"

00:16:57.360 --> 00:16:59.436
So basically at Agoda,

00:16:59.519 --> 00:17:02.370
we develop our own in-house a lot of thing.

00:17:02.453 --> 00:17:04.599
A/B testing also one of our tool.

00:17:04.880 --> 00:17:16.077
So basically, every time when you visit agoda.com

00:17:16.160 --> 00:17:19.799
or some other page in Agoda company,

00:17:20.079 --> 00:17:23.839
you will get allocate directly when you hit the API.

00:17:24.439 --> 00:17:26.956
We will have the backend that will grab

00:17:27.039 --> 00:17:28.920
the experiment allocation for you,

00:17:29.280 --> 00:17:30.640
whether you get A or B.

00:17:30.799 --> 00:17:32.677
We have allocation type, two type.

00:17:32.760 --> 00:17:34.357
One is the user type base.

00:17:34.440 --> 00:17:36.277
Another one is the property type base

00:17:36.360 --> 00:17:38.720
because we serve hotel as well, right?

00:17:39.320 --> 00:17:41.840
So it's on our backend.

00:17:42.080 --> 00:17:44.557
And then we have a lot of thing

00:17:44.640 --> 00:17:47.960
that outside of my area to check whether

00:17:48.760 --> 00:17:51.560
this A or B should win, something like that.

00:17:52.840 --> 00:17:55.320
Is it answer your question?

00:17:55.520 --> 00:17:56.239
No, right?

00:17:58.120 --> 00:18:01.716
Actually, I mean developers have the options

00:18:01.799 --> 00:18:05.317
to build the project by webpack or by Vite.

00:18:05.400 --> 00:18:11.396
อ๋อ okay.

00:18:11.760 --> 00:18:14.480
Let me tell the architecture right now

00:18:14.799 --> 00:18:16.956
for our application.

00:18:17.039 --> 00:18:18.197
We use Razor View.

00:18:18.280 --> 00:18:19.476
You guys know Razor View, right?

00:18:19.559 --> 00:18:20.120
It's from C#.

00:18:22.799 --> 00:18:25.720
And then Razor View is we have server-side rendering.

00:18:26.159 --> 00:18:28.677
We have our React application,

00:18:28.760 --> 00:18:31.680
which is we build both Vite and webpack.

00:18:32.280 --> 00:18:33.317
Once we build those,

00:18:33.400 --> 00:18:36.197
we will have two bundle at the same time.

00:18:36.280 --> 00:18:39.317
And then we have the experiment on the Razor View

00:18:39.400 --> 00:18:42.517
that connect to the experiment platform

00:18:42.600 --> 00:18:45.680
that we have to check whether you should use

00:18:46.159 --> 00:18:48.317
bundle Vite or webpack bundle.

00:18:48.400 --> 00:18:49.959
That's how we did.

00:18:50.120 --> 00:18:54.960
A little bit gymnastic way, but it works.

00:18:55.120 --> 00:18:55.879
Thank you ครับ.

00:18:58.120 --> 00:19:01.117
Thank you for your questions and for your answer as well.

00:19:01.200 --> 00:19:09.400
Anyone else have any questions?

00:19:09.520 --> 00:19:13.920
Are there any chance libraries this can be invasively

00:19:14.280 --> 00:19:15.557
used against developers?

00:19:15.640 --> 00:19:18.599
For example what if I don't want to work for eight hours

00:19:18.760 --> 00:19:21.800
and you monitor how long this guy does a build and run

00:19:23.840 --> 00:19:24.237
test?

00:19:24.320 --> 00:19:26.440
It's invasive monitoring, right?

00:19:26.880 --> 00:19:27.360
Yeah.

00:19:27.880 --> 00:19:29.599
Yeah, right.

00:19:30.039 --> 00:19:32.040
Are there any ways to prevent it?

00:19:32.720 --> 00:19:33.720
I don't think so.

00:19:34.640 --> 00:19:38.400
Right now from my head I don't have any solution

00:19:39.080 --> 00:19:44.437
to prevent this kind of thing.

00:19:44.520 --> 00:19:46.560
Okay, thank you ครับ

00:19:47.240 --> 00:19:51.596
So I want to ask a bit away from the topic,

00:19:51.679 --> 00:19:54.677
but I would ask how was your experience changing

00:19:54.760 --> 00:19:57.159
from webpack to Vite?

00:19:57.679 --> 00:20:00.200
I think it's quite easy in my opinion.

00:20:06.720 --> 00:20:09.159
Basically our challenging was not coming from

00:20:09.640 --> 00:20:11.557
the official library that you can download

00:20:11.640 --> 00:20:13.680
from the npmjs package.

00:20:14.039 --> 00:20:17.520
The most challenging that we facing so far is

00:20:17.720 --> 00:20:20.037
the module federation.

00:20:20.120 --> 00:20:23.716
We use micro frontend on some particular place.

00:20:23.799 --> 00:20:27.557
So this one is kind of like very and Vite doesn't

00:20:27.640 --> 00:20:28.637
support it out of the box.

00:20:28.720 --> 00:20:31.157
So we need to develop our own plugin in order

00:20:31.240 --> 00:20:32.200
to make it work.

00:20:32.720 --> 00:20:37.400
The second one was our own in-house.

00:20:38.520 --> 00:20:42.000
Actually we are very bad at the packaging.

00:20:42.120 --> 00:20:47.277
So when we have a lot of breaking change and some

00:20:47.360 --> 00:20:49.677
breaking change doesn't support Vite.

00:20:49.760 --> 00:20:52.920
So we need to fix that most of the time.

00:20:53.400 --> 00:20:55.757
That was the challenging but if normal flow

00:20:55.840 --> 00:20:56.760
is super easy.

00:20:56.960 --> 00:20:59.237
And I didn't try RS pack yet because it just

00:20:59.320 --> 00:21:04.080
recently released after I already migrate to Vite.

00:21:05.120 --> 00:21:07.400
Thank you.

00:21:08.000 --> 00:21:08.960
Thank you ครับ

00:21:10.840 --> 00:21:11.996
Anyone else?

00:21:12.079 --> 00:21:13.760
Okay, not yet.

00:21:14.000 --> 00:21:15.157
Thank you so much นะครับ

00:21:15.240 --> 00:21:15.836
Thank you so much ครับ

00:21:15.919 --> 00:21:16.799
Thank you so much.
