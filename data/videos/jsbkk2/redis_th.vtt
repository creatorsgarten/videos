WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:00.399 --> 00:00:01.119
โอเคครับ

00:00:04.319 --> 00:00:08.837
ผมไม่แน่ใจนะว่าทุกคนรู้จักพวก hexagonal กันขนาดไหนเนาะ

00:00:08.920 --> 00:00:12.759
แต่ว่าผมว่าน่าจะเคยได้ยินพวก NestJS กันมาบ้างนะครับ

00:00:13.679 --> 00:00:15.716
โอเค อันนี้เดี๋ยวผมแนะนำตัวก่อนนะครับ

00:00:15.799 --> 00:00:18.077
ก็ชื่อเล่นชื่อเป้นะครับ

00:00:18.160 --> 00:00:22.960
ก็มีบล็อกแล้วก็มีเพจ jitrak.dev นะครับ

00:00:24.720 --> 00:00:27.717
หลายคนอาจจะสงสัยว่า เฮ้ย จริงๆ แล้วอะ

00:00:27.800 --> 00:00:30.436
ไอ้คนนี้มันไปไหนวะ ทำไมวันนี้มันไม่มาเนาะ

00:00:30.519 --> 00:00:34.397
เออ มันเป็นอะไรของมันทำไมมันไม่มานะครับ

00:00:34.480 --> 00:00:40.360
โอเคครับ ก็เพิ่งเป็นโควิดครับ แบบสดๆ ร้อนๆ เลยนะครับ

00:00:40.680 --> 00:00:45.439
ก็เลยมาไม่ได้นะครับ โดนแบนออกจากงาน

00:00:46.199 --> 00:00:48.000
แล้วเค้าก็ส่งวิดีโอมา

00:00:48.480 --> 00:00:49.837
ไม่แน่ใจว่าจะได้ยินหรือเปล่านะครับ

00:00:49.920 --> 00:00:51.359
สวัสดีครับ ผมแบนนะครับ

00:00:51.800 --> 00:00:54.877
ขอบคุณทุกคนมากนะครับที่ให้ความสนใจเข้ามาฟังใน session นี้

00:00:54.960 --> 00:00:55.359
นะครับ

00:00:55.879 --> 00:00:59.000
ก่อนผมต้องบอกเลยว่าตัวผมเองเนี่ยไม่สามารถเข้าไป

00:01:00.199 --> 00:01:01.996
ร่วมงานหรือไปเจอทุกคนได้โดยตรงนะครับ

00:01:02.079 --> 00:01:05.519
เนื่องจากว่าตัวผมเนี่ยเพิ่งฟื้นจากโควิดมานะครับ

00:01:05.760 --> 00:01:07.477
แต่ว่าทุกคนไม่ต้องเป็นห่วงไปนะครับ

00:01:07.560 --> 00:01:11.277
เพราะว่าเป้กับผมเนี่ยเราได้เตรียมเนื้อหามาร่วมกันแล้วว่า

00:01:11.360 --> 00:01:13.919
เรา implement อะไรไปแล้วจะเอามาแชร์ให้ทุกคนนะครับ

00:01:14.240 --> 00:01:17.957
ยังไงต้องบอกเลยว่าหวังว่าทุกคนนะครับจะสนุกและหรือ

00:01:18.040 --> 00:01:20.597
ได้แนวคิดอะไรสักอย่างเอาไปประยุกต์ใช้กับงานของตัวเอง

00:01:20.680 --> 00:01:21.079
นะครับ

00:01:21.200 --> 00:01:24.076
ก็ต้องขอโทษอีกครั้งที่ไม่สามารถไปด้วยตัวเองได้

00:01:24.159 --> 00:01:27.396
แล้วก็ขอบคุณทุกคนมากนะครับที่เข้ามาฟัง session ของเรา

00:01:27.479 --> 00:01:29.320
ขอให้สนุกนะครับ

00:01:30.000 --> 00:01:31.597
ครับ ก็โดนแบนนะครับ

00:01:31.680 --> 00:01:34.040
แต่ว่าส่งอัดวิดีโอมาเมื่อเช้าให้นะครับ

00:01:38.799 --> 00:01:40.639
สไลด์หน้าถัดไป

00:01:41.479 --> 00:01:44.316
โอเคครับ ก็เราพูดถึง decorator เนาะ

00:01:44.399 --> 00:01:48.597
ผมก็อยากจะเล่าก่อนเนาะว่า decorator เนี่ยมันคืออะไรเนาะ

00:01:48.680 --> 00:01:52.197
ถ้าแบบมาถึงเรากระโดดข้ามไปดูโค้ดจริงเลยเนี่ย

00:01:52.280 --> 00:01:55.280
มันอาจจะแบบงงกันได้เนาะว่าเกิดอะไรขึ้นนะครับ

00:01:56.200 --> 00:02:00.237
โอเค จริงๆ แล้วอะ ในภาษาอื่นๆ นะครับ

00:02:00.320 --> 00:02:02.557
ใน framework อื่นๆ น่ะ อย่าง Spring Boot หรือ .NET

00:02:02.640 --> 00:02:06.320
เนี่ยเค้าก็มีของที่คล้ายๆ กันอยู่เนาะ

00:02:06.439 --> 00:02:11.840
ไม่แน่ใจว่าใครเคยแตะ Spring Boot หรือฝั่ง .NET มาบ้างนะครับ

00:02:12.040 --> 00:02:16.117
จริงๆ แล้วอะ ถ้าใน Java นะครับ

00:02:16.200 --> 00:02:18.880
เค้าก็จะเรียกว่าใน Spring Boot อะเนาะ

00:02:19.080 --> 00:02:20.717
ก็จะเรียกว่า annotation นะครับ

00:02:20.800 --> 00:02:22.796
เพราะถ้าของที่มาจาก Google เนี่ย

00:02:22.879 --> 00:02:25.279
ไอ้พวกเนี้ยจะเรียกว่า annotation กันนะครับ

00:02:26.319 --> 00:02:28.760
อย่างเช่นพวก @Controller หรืออะไรอย่างนี้นะครับ

00:02:28.959 --> 00:02:31.197
อันนี้ผมยกตัวอย่างให้ง่าย ครับ

00:02:31.280 --> 00:02:34.239
หรือว่าถ้าฝั่ง C# ก็จะเรียกว่า attribute นะครับ

00:02:34.599 --> 00:02:41.320
มันก็จะเห็นว่ามันเป็นตัววงเล็บนะครับ สี่เหลี่ยมนะครับ

00:02:42.680 --> 00:02:45.117
คราวนี้ ใน TypeScript นะครับ

00:02:45.200 --> 00:02:50.440
มันก็คล้ายๆ กันนะ แต่ว่ามันเรียกว่า decorator แทนนะครับ

00:02:51.800 --> 00:02:58.837
หลักๆ ก็คือแบบเหมือนเป็นแบบทำเรื่อง add annotation

00:02:58.920 --> 00:03:02.436
แล้วก็ meta programming ให้กับ class หรือ member ของ

00:03:02.519 --> 00:03:03.319
class ได้นะครับ

00:03:05.440 --> 00:03:08.360
คราวนี้เราพูดถึง NestJS เนาะ

00:03:08.519 --> 00:03:12.957
ผมก็ให้ดูตัวอย่างของ NestJS กันนะครับ

00:03:13.040 --> 00:03:16.796
ก็จะเห็นว่ามันมี decorator ที่เป็น @Controller กับ @Get

00:03:16.879 --> 00:03:17.236
อยู่นะครับ

00:03:17.319 --> 00:03:23.397
ก็คืออันนี้ทำเหมือนทำ controller เพื่อรับ HTTP request

00:03:23.480 --> 00:03:28.356
โดยที่แบบแปะแค่ 2 อันนี้เข้าไปมันก็สามารถทำได้ง่ายๆ

00:03:28.439 --> 00:03:28.760
แล้วนะครับ

00:03:30.640 --> 00:03:33.236
ครับ ข้อดีของ NestJS อีกอย่างนึงนะครับ

00:03:33.319 --> 00:03:36.277
ก็คือมันมีเรื่องพวกตัว injectable หรืออะไรอย่างนี้

00:03:36.360 --> 00:03:37.040
ให้เราได้ด้วยนะครับ

00:03:37.319 --> 00:03:40.280
แต่ว่าอันนี้ก็เป็นตัวอย่างง่ายๆ เนาะ

00:03:41.040 --> 00:03:43.837
ครับ แล้วก็เราก็เอาของเมื่อกี๊อะครับ

00:03:43.920 --> 00:03:45.796
มารวมอยู่ในนี้ทีเดียวเลยนะครับ

00:03:45.879 --> 00:03:47.597
ก็ใส่ @Module นะครับ

00:03:47.680 --> 00:03:50.677
แล้วก็เอา controller ที่สร้างเมื่อกี๊กับ app service

00:03:50.760 --> 00:03:52.236
ตรงเนี้ยมาแปะไว้ให้มันนะครับ

00:03:52.319 --> 00:03:55.477
เดี๋ยวตัว app controller เนี่ย ตัวเนี้ยนะครับ

00:03:55.560 --> 00:03:58.279
มันก็จะโดน inject ของเข้ามาให้เองนะครับ

00:04:00.439 --> 00:04:05.037
จริงๆ แล้วมันก็มี decorator อีกเยอะมากเลยนะครับ

00:04:05.120 --> 00:04:10.199
ใน NestJS เนี่ยที่เราสามารถใช้งานได้นะครับ

00:04:13.280 --> 00:04:16.400
เมื่อกี๊เราพูดถึงปูพื้นเรื่อง decorator ไปแล้ว

00:04:16.880 --> 00:04:20.160
คราวนี้เรามาพูดถึงเรื่อง hexagonal บ้างนะครับ

00:04:20.840 --> 00:04:25.997
ก็จริงๆ แล้ว ก็มีสรุปนะ สั้นๆ นะครับ

00:04:26.080 --> 00:04:28.317
ก็คือมีคนชื่อเนี้ยเนาะ

00:04:28.400 --> 00:04:32.437
แล้วก็ชื่อ hexagonal architecture อีกชื่อนึงน่ะ

00:04:32.520 --> 00:04:35.396
หรือเค้าก็เรียกว่า port หรือ port และ adapter

00:04:35.479 --> 00:04:37.840
architecture นะครับ

00:04:38.639 --> 00:04:41.277
อันนี้เราลองดูรูปนะครับ

00:04:41.360 --> 00:04:43.556
ก็จะมีฝั่งซ้ายและฝั่งขวานะครับ

00:04:43.639 --> 00:04:46.039
ฝั่งซ้ายนี่ก็จะเป็น driving side นะครับ

00:04:46.800 --> 00:04:49.277
วิ่งเข้าผ่าน application ไปนะครับ

00:04:49.360 --> 00:04:54.400
แล้วก็ไปออกฝั่ง driven side อีกทีนึง

00:04:55.160 --> 00:04:58.317
จริงๆ แล้วมันจะเป็นอย่างนี้นะครับ

00:04:58.400 --> 00:05:02.200
ให้มองว่ามันจะเป็นตัว port port เชื่อม 2 ฝั่งนะครับ

00:05:02.440 --> 00:05:05.797
ฝั่งขาเข้าเนี่ยจะเห็นว่ามันเหมือนมันเสียบปลั๊กเนาะ

00:05:05.880 --> 00:05:09.360
เสียบปลั๊กนะครับ เอามาปลั๊กเข้ากับ port

00:05:09.479 --> 00:05:11.799
แล้วก็ไปวิ่งข้างใน application

00:05:11.919 --> 00:05:15.157
เสร็จแล้วอะมันก็ไปออกกับอีก port นึง

00:05:15.240 --> 00:05:16.717
โดยที่เหมือนเสียบปลั๊กเหมือนกัน

00:05:16.800 --> 00:05:21.396
เหมือนเราเสียบ USB ถ้าอธิบายให้เห็นภาพนะครับ

00:05:21.479 --> 00:05:22.956
ถ้าลองดูด้านซ้ายนะครับ

00:05:23.039 --> 00:05:26.116
จะเห็นว่าด้านซ้ายเนี่ยจะเป็น server เรียกมา

00:05:26.199 --> 00:05:28.799
หรือเป็น user คนที่เรียกเข้ามาก็ได้นะครับ

00:05:29.120 --> 00:05:32.880
เสร็จแล้วเนี่ยก็จะวิ่งเข้ามาใน application เนาะ

00:05:33.080 --> 00:05:36.079
ฝั่งขวาเนี่ยอาจจะออกเป็นไฟล์หรือไปเซฟลง

00:05:36.199 --> 00:05:39.720
หรือไปอ่านข้อมูลจาก database เอานะครับ

00:05:41.120 --> 00:05:43.797
ด้านซ้ายเนี่ยให้มองว่ามันเป็นอาจจะเป็น user interface

00:05:43.880 --> 00:05:44.280
ก็ได้นะครับ

00:05:44.600 --> 00:05:45.920
เป็นขาเข้าเนาะ

00:05:46.319 --> 00:05:49.600
ส่วนฝั่งขวาเนี่ยก็ไปต่อกับพวก infrastructure

00:05:49.759 --> 00:05:55.797
ก็แบบเขียนลงเครื่อง เขียนไฟล์ลงเครื่องหรือต่อ database

00:05:55.880 --> 00:05:56.280
นะครับ

00:05:58.720 --> 00:06:02.479
อันนี้ก็ให้เห็นภาพนะครับว่าแบบเออเนี่ย

00:06:03.440 --> 00:06:08.319
ตัว application ตรงกลางเนี่ยจะเห็นว่ามันมี domain

00:06:08.599 --> 00:06:09.639
ย่อยเข้าไปอีกด้วยนะครับ

00:06:10.039 --> 00:06:15.103
แต่ว่าอันนี้ผมคงไม่ลงลึกเนาะ

00:06:15.187 --> 00:06:19.317
จริงๆ แล้วเนี่ยมันก็คล้ายๆ พวก clean architecture

00:06:19.400 --> 00:06:20.556
หรืออะไรพวกนี้เหมือนกันนะครับ

00:06:20.639 --> 00:06:24.559
ก็หลักๆ แล้วเนี่ยการทำแบบเนี้ยมัน มันดียังไงเนาะ

00:06:24.840 --> 00:06:29.477
ก็อย่างแรกเลยนะครับ ก็ลดความผูกติดกับ framework นะครับ

00:06:29.560 --> 00:06:32.516
ทำให้โค้ดเราเนี่ยเทสต์ได้ง่ายนะครับ

00:06:32.599 --> 00:06:35.197
เทสต์ง่ายมากๆ จริงๆ เลยนะครับ

00:06:35.280 --> 00:06:36.956
ถ้าแบบเขียน unit test อะไรอย่างเงี้ย

00:06:37.039 --> 00:06:39.997
ถ้าแบบเราไม่ดีไซน์เป็น hexagonal เนี่ย

00:06:40.080 --> 00:06:41.277
เวลาเราจะเขียนเทสต์เนี่ย

00:06:41.360 --> 00:06:44.116
เรามี hit database หรืออะไรอย่างเงี้ย ปวดหัวนะครับ

00:06:44.199 --> 00:06:45.720
มาม็อก database กันนะครับ

00:06:46.759 --> 00:06:48.597
ไม่ depend กับ UI ด้วยเนาะ

00:06:48.680 --> 00:06:51.159
แล้วก็แบบสมมติว่าเราไปต่อ API ข้างนอก

00:06:52.080 --> 00:06:56.800
เราก็มันไปจริงข้างนอกจริงๆ อะเนาะ มันก็เปราะบางนะครับ

00:06:57.599 --> 00:07:00.516
ตัว objective ของเรื่องพวกเนี้ยเนี่ยก็คือ

00:07:00.599 --> 00:07:02.520
ทำให้มันแบบไม่ depend กับ framework

00:07:02.840 --> 00:07:05.317
แล้วก็สามารถเขียนเทสต์ได้ง่ายนะครับ

00:07:05.400 --> 00:07:08.479
ลอจิกมันไม่กระจายด้วยนะ ต้องพูดอย่างนี้นะครับ

00:07:10.840 --> 00:07:13.037
อันนี้ก็เป็นรูปแบบเต็มเนาะ

00:07:13.120 --> 00:07:18.280
ซึ่งผมคงไม่พาไปทัวร์เพราะว่าภาพดับอีกแล้ว

00:07:18.960 --> 00:07:22.077
โอเคครับ ก็อันนี้ไปอ่านได้นะครับ

00:07:22.160 --> 00:07:24.720
เดี๋ยวมีแจกสไลด์ตอนท้ายนะครับ

00:07:27.039 --> 00:07:30.277
อันนี้ลองมาดูกันนะครับแบบอธิบายเป็นรูปเนาะ

00:07:30.360 --> 00:07:31.560
ให้เห็นภาพกันนะครับ

00:07:31.680 --> 00:07:34.477
ด้านซ้ายเนี่ยเป็นขาเข้าเนาะ เป็น adapter นะครับ

00:07:34.560 --> 00:07:36.917
อาจจะมาเรียก use case ของเรานะครับ

00:07:37.000 --> 00:07:39.399
แล้วก็ไปต่อกับฝั่งที่เป็น port

00:07:42.199 --> 00:07:43.317
เมื่อกี้ไม่เห็นภาพ

00:07:43.400 --> 00:07:45.680
เราแปลงให้มันเป็นของจริงหน่อยนะครับ

00:07:46.000 --> 00:07:52.317
ก็จะเห็นว่าเราเป็นตัว controller ที่รับ HTTP request นะครับ

00:07:52.400 --> 00:07:55.560
ตัวเนี้ยมันก็จะไปเรียก use case ต่อนะครับ

00:07:55.759 --> 00:07:57.280
หลังจากเรียก use case แล้วเนี่ย

00:07:57.639 --> 00:08:03.320
ตัว use case เนี่ยก็จะไปเรียกตัว repository ต่ออีกทีนึง

00:08:04.080 --> 00:08:06.796
ให้มองว่า repository เนี่ยเป็น port นะครับ

00:08:06.879 --> 00:08:10.361
โดยที่เราจะมีตัว implement จริงๆ เนี่ย

00:08:11.360 --> 00:08:13.637
ก็เป็น item Mongo repository เนาะ

00:08:13.720 --> 00:08:16.639
อันนี้คือถ้าจะเปลี่ยน Mongo จริงๆ ไปต่ออย่างอื่นก็ได้นะครับ

00:08:16.960 --> 00:08:22.120
แต่ว่าอันนี้ผมยกตัวอย่างเป็น Mongo ครับ

00:08:22.240 --> 00:08:27.919
สมมุติเรารูปภาพไม่มา โอเคครับ

00:08:28.319 --> 00:08:32.997
ก็สมมุติว่าเราเรียก controller เนี่ยมาเรียก use case

00:08:33.080 --> 00:08:35.000
get item by ID use case นะครับ

00:08:35.640 --> 00:08:38.479
เสร็จแล้วเนี่ย ตัว use case เนี่ยก็ไปเรียก

00:08:38.919 --> 00:08:42.477
item repository.𝚏𝚒𝚗𝚍𝙱𝚢𝙸𝚍 เนาะ

00:08:42.560 --> 00:08:45.279
คราวนี้ไอ้ตัวเนี้ย เนื่องจากว่าเราเวลาเราโยนของ

00:08:45.519 --> 00:08:47.637
เราก็จะคุยผ่าน interface ก็คือเป็น port เนาะ

00:08:47.720 --> 00:08:49.357
แต่ว่าตัว implement จริงเนี่ย

00:08:49.440 --> 00:08:51.717
เราก็คือเป็นตัว Mongo repository นะครับ

00:08:51.800 --> 00:08:54.357
ก็ 𝚏𝚒𝚗𝚍𝙱𝚢𝙸𝚍 แล้วก็ตัวเนี้ยมันก็จะไปต่อกับ

00:08:54.440 --> 00:08:58.680
ตัว database ที่เป็น Mongo ของเรา

00:08:59.440 --> 00:09:02.719
อันนี้ไปเร็วมั้ยครับ

00:09:03.399 --> 00:09:06.920
โอเค เดี๋ยวลองมาดูตัว demo code กันนะครับ

00:09:08.320 --> 00:09:11.640
อันนี้เป็นตัว controller นะครับ

00:09:12.000 --> 00:09:16.517
จะเห็นว่าผมเป็น path item เนาะ

00:09:16.600 --> 00:09:18.920
path item v1 นะครับ

00:09:19.200 --> 00:09:21.436
โดยที่ตัว controller เนี่ย

00:09:21.519 --> 00:09:28.436
เรามีการ constructor รอรับตัว get item by ID use case

00:09:28.519 --> 00:09:29.240
เข้ามานะครับ

00:09:29.600 --> 00:09:35.237
เสร็จแล้วเนี่ย เราก็มี function นะครับที่เป็นเส้น get

00:09:35.320 --> 00:09:38.200
นะครับ ก็รับ param เป็น item ID เข้ามานะครับ

00:09:38.480 --> 00:09:40.837
หลังจากเราได้ item ID มาแล้วเนี่ย

00:09:40.920 --> 00:09:42.440
เราก็เอา item ID เนี่ยไปเรียก

00:09:42.920 --> 00:09:44.996
ไปโยนให้กับ use case อีกทีนึง

00:09:45.079 --> 00:09:47.839
ตัว use case เป็นคน execute นะครับ

00:09:48.519 --> 00:09:52.439
ตัว use case เนี่ย ก็จะเห็นว่าผมใช้ inject

00:09:53.640 --> 00:09:56.399
ตัว item repository เข้ามานะครับเหมือนกัน

00:09:56.640 --> 00:09:59.520
โดยตัวเนี้ย ให้มองว่ามันเป็นแค่ interface

00:09:59.720 --> 00:10:03.080
โดยที่เราจะใช้ concrete class

00:10:03.560 --> 00:10:07.800
โดยการ binding เข้ามานะครับทีหลัง

00:10:08.160 --> 00:10:10.277
หลังจากนั้นเราก็ execute นะครับ

00:10:10.360 --> 00:10:12.440
พอเรา execute ปุ๊บเนี่ย ก็จะเห็นว่า

00:10:13.079 --> 00:10:15.720
มีการไปเรียก repository 𝚏𝚒𝚗𝚍𝙱𝚢𝙸𝚍

00:10:16.000 --> 00:10:18.637
ซึ่งให้มองว่ามันเป็นแค่ interface เนาะ

00:10:18.720 --> 00:10:23.920
แต่ว่าตัว implement จริงเราว่ากันทีหลังนะครับ

00:10:25.399 --> 00:10:27.196
อันนี้ตัว interface ที่ผมบอกนะครับ

00:10:27.279 --> 00:10:28.720
อันนี้ผมลดโค้ดแล้วนะ

00:10:29.519 --> 00:10:32.760
เอาแค่เส้นเดียวก่อน เดี๋ยวโค้ดมันจะรกนะครับ

00:10:33.600 --> 00:10:38.399
ก็รับ item ID มานะครับ ก็เป็น promise เนาะ

00:10:38.959 --> 00:10:42.996
ก็ maybe อาจจะได้ตัว item ออกไป

00:10:43.079 --> 00:10:46.320
หรือว่า undefined ออกไปนะครับ

00:10:47.000 --> 00:10:49.637
คราวนี้ ตัว Mongo repository เนี่ย

00:10:49.720 --> 00:10:52.639
เราก็ implement ตัว item repository ตัวนี้อีกทีนึงนะครับ

00:10:53.480 --> 00:10:56.077
ก็มีการผูกกับ framework เนาะ

00:10:56.160 --> 00:10:58.279
ก็อาจจะ inject เข้ามานะครับ

00:10:59.320 --> 00:11:01.680
เสร็จแล้วเราก็ไป implement จริงๆ ในนี้อีกทีนึง

00:11:02.000 --> 00:11:05.237
แต่เนื่องจากว่าเราเป็น hexagonal เนาะ

00:11:05.320 --> 00:11:07.080
ปกติแล้วเราต่อ database ออกมาเนี่ย

00:11:07.240 --> 00:11:11.196
มันจะได้ของที่เป็น object เหมือนของ database เนาะ

00:11:11.279 --> 00:11:13.837
แต่ว่าเวลาเรากลับเอามาใช้ในโค้ดเราเนี่ย

00:11:13.920 --> 00:11:16.920
ถ้าเรากลับมาดูรูปตรงนี้นะครับ

00:11:17.880 --> 00:11:19.639
จะเห็นว่ามันคือ entity เนาะ

00:11:20.240 --> 00:11:25.316
เราพยายามใช้ของที่มันไม่ผูกติดกับ framework

00:11:25.399 --> 00:11:26.560
หรือ database ใดๆ นะครับ

00:11:29.920 --> 00:11:33.117
เพราะฉะนั้นน่ะ จะเห็นว่าตัวเนี้ยนะครับ

00:11:33.200 --> 00:11:34.959
ผมก็จะ map กลับมาเป็น domain นะครับ

00:11:35.279 --> 00:11:37.680
map กลับมาเป็น to domain นะครับ

00:11:37.839 --> 00:11:41.957
โดยที่ถ้าให้เห็นภาพนะครับ

00:11:42.040 --> 00:11:45.556
underscore ID ตัวเนี้ย มันเป็น object ID

00:11:45.639 --> 00:11:47.876
ของตัว Mongo database นะครับ

00:11:47.959 --> 00:11:51.520
ผมก็มา 𝚝𝚘𝚂𝚝𝚛𝚒𝚗𝚐 นะครับ แล้วก็ as item ID

00:11:51.800 --> 00:11:53.600
ซึ่งอันนี้เนื่องจากว่า

00:11:54.160 --> 00:11:55.357
ไอ้คนที่เป็น COVID เนี่ย

00:11:55.440 --> 00:11:56.837
ตอนแรกผมจะเอาแบบ simple เนาะ

00:11:56.920 --> 00:11:58.157
เป็น as string ง่ายๆ เนี่ย

00:11:58.240 --> 00:12:00.077
เออ ไอ้คนที่เป็น COVID บอกว่า

00:12:00.160 --> 00:12:01.880
เอ้ย ขอใช้ branded type นะ

00:12:02.320 --> 00:12:03.760
แต่เจ้าตัวไม่อยู่นะครับ

00:12:04.320 --> 00:12:07.039
ไม่แน่ใจว่ารู้จัก branded type กันรึเปล่า

00:12:07.480 --> 00:12:09.077
เดี๋ยวไปดูโค้ดกันอีกทีนึงครับ

00:12:09.160 --> 00:12:19.359
โอเค เดี๋ยวผมเปิดโค้ดหมดเลยดีกว่า branded type

00:12:20.172 --> 00:12:56.719
จริงๆ แล้วมันก็ อ่าว รูปเอาอีกแล้ว มามั้ย มาหน่อยครับ

00:12:57.399 --> 00:12:58.680
โอเคครับ

00:12:59.240 --> 00:13:02.520
จริงๆ แล้วลองไป search เรื่อง branded type ได้กันนะ

00:13:02.959 --> 00:13:08.157
ก็ดีนะครับ เพราะว่าจะทำให้เราแบบมั่นใจว่า

00:13:08.240 --> 00:13:11.316
เราไม่ pass ของมั่ว ประมาณนั้นแหละครับ

00:13:11.399 --> 00:13:15.200
แต่ว่าก็สไลด์เรา เอ้ย โค้ดเราไม่ขึ้นนะครับ

00:13:57.160 --> 00:14:02.996
ได้ข่าวว่าเป็น JavaScript Bangkok 2.0.1 แล้วนี่ครับ

00:14:03.079 --> 00:14:03.637
ใช่มั้ยครับ

00:14:03.720 --> 00:14:07.839
อันนี้ผมว่า .1 อาจจะยังไม่พอเนาะ

00:14:08.519 --> 00:14:09.719
โอเคครับ

00:14:10.120 --> 00:14:14.637
ก็จริงๆ แล้วอันนี้มันก็แค่เป็นทำแบรนด์ไทป์ขึ้นมานะครับ

00:14:14.720 --> 00:14:16.876
แต่ว่าไม่น่าจะว่าโค้ดเล็กไปรึเปล่า

00:14:16.959 --> 00:14:17.960
ผมซูมอีกหน่อย

00:14:18.399 --> 00:14:21.200
โอเค ข้างล่างผมย่อลงก่อน

00:14:24.240 --> 00:14:24.560
ครับ

00:14:25.880 --> 00:14:29.000
โอเค เราไปลองดูแบรนด์ไทป์กันนะครับ

00:14:30.240 --> 00:14:33.480
จริงๆ แล้วก็ไม่ได้มีอะไรเลยนะครับ

00:14:33.880 --> 00:14:36.519
ก็แค่เวลาเราพาสของมาเนี่ย

00:14:37.120 --> 00:14:39.558
เราจะไม่ได้พาสแค่ string เปล่าๆ เข้าไป

00:14:39.959 --> 00:14:41.756
เราก็แค่ strict type มันหน่อย

00:14:41.839 --> 00:14:45.519
เหมือนมี type เฉพาะขึ้นมาอีกนิดนึงนะครับ

00:14:46.199 --> 00:14:49.039
อันนี้ถ้าผมเปิดเต็มจอนี่มันจะดับอีกมั้ย

00:14:49.240 --> 00:14:49.919
โอ้โห รอดๆ

00:14:50.759 --> 00:14:56.679
โอเค อันนี้ให้เห็นนะครับว่าผมบอกว่ารอด เอาเลย

00:14:59.959 --> 00:15:03.196
ครับ ก็จะให้เห็นว่าตัวที่เรารับเข้ามาเนี่ย

00:15:03.279 --> 00:15:06.760
ของที่ออกจาก database มาเนี่ย เราไม่ได้ใช้ตรงๆ นะ

00:15:07.240 --> 00:15:09.797
การที่ตัวในแอปพลิเคชันของเราเนี่ย

00:15:09.880 --> 00:15:12.037
use case ของเราเนี่ยจะใช้งานเนี่ย

00:15:12.120 --> 00:15:15.957
มันต้องเป็นโดเมนและมันไม่ใช่ item ที่เป็น type database

00:15:16.040 --> 00:15:19.517
เกิดวันดีคืนดีเนี่ย เราอยากจะเปลี่ยนของอะนะครับ

00:15:19.600 --> 00:15:21.797
อย่างเช่น ตอนแรกผมต่อ MongoDB

00:15:21.880 --> 00:15:24.639
อยู่ดีๆ บอก เอ๊ย ต้องการเปลี่ยนเป็น SQL อย่างเงี้ย

00:15:25.639 --> 00:15:29.357
คือข้อดีคือตัว use case ของเราเนี่ย แทบจะไม่เปลี่ยนเลย

00:15:29.440 --> 00:15:30.399
เราใช้ตัวเดิม

00:15:30.519 --> 00:15:36.837
เราแค่ไปเปลี่ยนตัวฝั่ง port ที่ implement

00:15:36.920 --> 00:15:40.240
จากเปลี่ยนจาก MongoDB เป็น PostgreSQL ก็ได้นะครับ

00:15:41.240 --> 00:15:44.079
โค้ดเราถ้าเราเขียนแบบปกติอะเนาะ

00:15:44.199 --> 00:15:46.480
แบบอยู่ในก้อนเดียว อยู่ใน service เดียวเลยเนี่ย

00:15:46.920 --> 00:15:48.637
ตาม document ของ NestJS เนี่ย

00:15:48.720 --> 00:15:53.999
เราก็จะเจอปัญหาว่า โอ้โห วันดีคืนดีอยากจะเปลี่ยน database

00:15:54.199 --> 00:15:55.759
ไม่เอาแล้ว อันนี้แพง

00:15:56.399 --> 00:15:58.840
มีตัวที่ดีกว่า ตัวใหม่ออกมาอะไรอย่างเงี้ย

00:15:59.079 --> 00:16:02.440
โอ้ ตาย รื้อโค้ดพังทั้งแผงนะครับ

00:16:04.279 --> 00:16:07.959
โอเค เมื่อกี้ผมบ่นปัญหาไปเนาะ

00:16:09.160 --> 00:16:10.800
เราเจอปัญหาอีกอย่างนึงครับ

00:16:12.639 --> 00:16:19.039
ตามที่ผมบอกเลยเมื่อกี้ database MongoDB Atlas โอ้โห

00:16:19.639 --> 00:16:22.996
ยิ่งเจอแบบช่วงพีคๆ อะไรอย่างงี้

00:16:23.079 --> 00:16:25.196
แบบ M50 เอาไม่อยู่

00:16:25.279 --> 00:16:27.079
เปิด sharding แล้วด้วยอะไรอย่างเงี้ยนะครับ

00:16:27.480 --> 00:16:31.277
โอ้โห แบบราคาแบบคุยกับ business อะไรอย่างงี้

00:16:31.360 --> 00:16:32.399
แบบเหงื่อตกเลยนะครับ

00:16:32.720 --> 00:16:38.029
แบบแพงๆ อะไรอย่างงี้เนาะ

00:16:38.112 --> 00:16:41.917
จริงๆ แล้วเราก็ใช้พวก caching ได้เนาะ

00:16:42.000 --> 00:16:43.917
ไม่ต้อง hit database ทุกครั้งอะไรอย่างเงี้ยนะครับ

00:16:44.000 --> 00:16:46.556
จริงๆ ในตัว doc ของ NestJS เนี่ย

00:16:46.639 --> 00:16:48.160
ก็มีตัว cache manager

00:16:48.959 --> 00:16:51.797
แต่ว่ามันแคชให้เราก็จริง

00:16:51.880 --> 00:16:57.277
แต่ว่ามันไม่ได้มีวิธี invalidate cache ให้เราอะเนาะ

00:16:57.360 --> 00:16:59.440
คราวนี้ผมก็ยกตัวอย่างว่า

00:16:59.800 --> 00:17:03.077
อย่างเช่นผม find all find by ID

00:17:03.160 --> 00:17:06.120
ถ้าแบบมีการไป hit รอบนึงเนี่ย ผมต้องการจะแคชไว้

00:17:08.959 --> 00:17:10.236
ถ้าใช้แคชปกติเนี่ย

00:17:10.319 --> 00:17:13.277
มันก็ cache manager ที่แบบสำเร็จรูปของเขามาเนาะ

00:17:13.360 --> 00:17:14.277
มันก็ใช้ได้แหละ

00:17:14.360 --> 00:17:19.116
แต่ว่าปัญหาคือ มีวันดีคืนดีต้องการ invalidate cache เนี่ย

00:17:19.199 --> 00:17:22.319
โอ้โห cache manager ไม่ตอบโจทย์แล้วแหละ

00:17:25.679 --> 00:17:28.157
อย่างเช่นมีเคสอัพเดต มีเคส delete เข้ามาอะไรอย่างเงี้ย

00:17:28.240 --> 00:17:29.997
อันนี้ผมยกตัวอย่างให้เห็นภาพเนาะ

00:17:30.080 --> 00:17:31.440
แบบต้องการ invalidate cache เนี่ย

00:17:31.880 --> 00:17:33.716
มีอัพเดตเนี่ย แคชมันไม่อัพเดต

00:17:33.799 --> 00:17:36.600
ซึ่งปกติแล้วเราก็จะใช้เป็น TTL ถูกมั้ย

00:17:36.919 --> 00:17:39.320
เราอาจจะทำ time to live อะไรอย่างงี้ไว้นะครับ

00:17:39.679 --> 00:17:41.600
แต่ว่าพอมันเป็น TTL เนี่ย

00:17:43.120 --> 00:17:48.077
มันก็มีช่วงเวลาที่ data มันจะยังผิดอยู่

00:17:48.160 --> 00:17:50.119
จนกว่า TTL จะหมดนะครับ

00:17:52.360 --> 00:17:55.920
first solution นะ ผมก็คิด โอเค

00:17:56.600 --> 00:18:01.799
เอาไงดี คุยกับเพื่อนเนาะที่ไม่มาเพราะโควิดนี่แหละ

00:18:03.039 --> 00:18:03.359
ครับ

00:18:05.200 --> 00:18:06.960
solution แรกเนี่ย เราเอาเป็นแบบ

00:18:08.480 --> 00:18:09.960
เราไปอยู่ใน use case มั้ย

00:18:10.520 --> 00:18:13.600
เลือกไปเขียน if else doc ไว้ใน use case

00:18:13.720 --> 00:18:15.680
อืม แต่มันก็มีข้อเสียนะ

00:18:16.000 --> 00:18:17.476
มันไม่ใช่ business logic

00:18:17.559 --> 00:18:20.200
ทำไมมันต้องไปอยู่ใน use case ในแอปพลิเคชันด้วย

00:18:21.720 --> 00:18:24.637
แล้วตัดปัญหาถัดไปนะครับ fix test case

00:18:24.720 --> 00:18:29.716
โอ้โห เรามี 100 200 use case 300 use case อย่างเงี้ย

00:18:29.799 --> 00:18:31.476
จริงๆ น่าจะเยอะกว่านั้นนะครับ

00:18:31.559 --> 00:18:33.160
ในโค้ดที่ทำงานกันอยู่เนี่ย

00:18:33.280 --> 00:18:35.557
โอ้ fix กี่ที่วะเนี่ย

00:18:35.640 --> 00:18:41.877
ไปเติม repo แบบต่อ Redis อะไรอย่างเงี้ย

00:18:41.960 --> 00:18:43.440
แทนที่จะต่อ MongoDB ตรงเนาะ

00:18:43.679 --> 00:18:45.559
โอ้โห เพิ่มกี่ที่วะเนี่ย

00:18:47.280 --> 00:18:49.440
แก้ test ไม่รู้ไม่จบไม่สิ้น

00:18:50.039 --> 00:18:52.476
อันนี้ลองมาดูตัวอย่างนะครับ แบบง่ายๆ เนาะ

00:18:52.559 --> 00:18:53.877
อันนี้อาจจะ run ไม่ได้จริงเนาะ

00:18:53.960 --> 00:18:56.600
เพราะว่าผมแค่ยกตัวอย่างให้เห็นภาพว่ามันประมาณนี้

00:18:56.919 --> 00:19:01.880
ก็คือถ้าไป get ต่อ item cache repository เนี่ย

00:19:02.200 --> 00:19:02.836
ไปต่อตัวนี้

00:19:02.919 --> 00:19:06.120
ซึ่งตัวนี้เบื้องหลังเราอาจจะ implement เป็น Redis

00:19:07.159 --> 00:19:08.237
หรือตัวอื่นๆ ก็ได้นะครับ

00:19:08.320 --> 00:19:10.480
อาจจะเป็นแบบย้อนยุคไปหน่อยก็เป็น Memcached

00:19:11.080 --> 00:19:12.716
อะไรอย่างงี้เนาะ

00:19:12.799 --> 00:19:14.240
คราวนี้ตัวนี้ก็จะเห็นว่า

00:19:14.799 --> 00:19:15.880
ถ้าเราเจอ hit นะ

00:19:16.120 --> 00:19:17.956
ถ้ามันไม่ undefined หรืออะไรอย่างงี้

00:19:18.039 --> 00:19:20.040
โอเค งั้นก็คืนไปเลย จบ

00:19:20.880 --> 00:19:23.479
แต่ถ้ามันไม่เจอก็ไปต่อ database ปกติ

00:19:24.440 --> 00:19:27.517
แล้วลองคิดดูว่าโค้ดตรงนี้อยู่ทุก use case

00:19:27.600 --> 00:19:30.560
เป็นหลายร้อยไฟล์นะครับ

00:19:30.679 --> 00:19:33.476
โอ้ แล้วผมเขียน test ด้วยไง

00:19:33.559 --> 00:19:37.480
โอ้โห unit test พังเป็นแผงแน่นอนแบบนี้

00:19:37.840 --> 00:19:42.000
โอเค ก็เลย โอเค ไม่อยากแก้ use case

00:19:42.200 --> 00:19:43.600
มันไม่ใช่ business logic ด้วย

00:19:44.400 --> 00:19:48.320
มันควรจะลองดูอีกท่าหนึ่งมั้ย

00:19:49.440 --> 00:19:52.637
ไปเลือกใน MongoDB repository

00:19:52.720 --> 00:20:00.239
ก็ดี ผมปกติตัว repository ผมไม่ run unit test เนาะ

00:20:00.360 --> 00:20:02.640
มันต่อ database อะไรอย่างงี้เนาะ เราไม่มี test เนาะ

00:20:03.039 --> 00:20:05.120
เพราะปกติผมแค่เขียนแค่อยู่ใน test นะครับ

00:20:05.280 --> 00:20:08.920
เล่าก่อน ก็แบบ เอ๊ย ไม่ต้องแก้ test เว้ย

00:20:09.600 --> 00:20:13.640
แต่ว่ามันก็เยอะอยู่ดีนะ ถ้าไปเขียน if อย่างงี้

00:20:14.240 --> 00:20:18.800
แล้วพอมันไม่มี test อื้อหือ มันจะพังป่าววะ

00:20:21.120 --> 00:20:23.557
อันนี้ก็ concept คล้ายๆ กับเมื่อกี้นะครับ

00:20:23.640 --> 00:20:25.360
แต่ว่าแค่ย้ายที่เนาะ

00:20:25.720 --> 00:20:27.199
solution ที่ 2 ที่คิดออกนะ

00:20:27.520 --> 00:20:28.960
ก็ย้ายที่มาอยู่ตรงนี้

00:20:29.720 --> 00:20:31.640
อยู่ใน MongoDB repository แทน

00:20:32.120 --> 00:20:35.956
โอ้ ก็ยังไม่ตอบโจทย์อะ

00:20:36.039 --> 00:20:38.720
ปวดหัว เอาไงดีวะ

00:20:41.480 --> 00:20:44.560
แต่ว่าก่อนหน้านี้เราเขียน NestJS อยู่แล้ว

00:20:44.840 --> 00:20:46.799
decorator เต็มบ้านเต็มเมือง

00:20:47.559 --> 00:20:51.637
หรือว่า decorator มันตอบโจทย์เราวะ นะครับ

00:20:51.720 --> 00:20:53.757
ก็เป็น final solution ขึ้นมานะครับ

00:20:53.840 --> 00:20:59.520
ก็ไปแปะ decorator บนหัวของ method ใน MongoRepository นะครับ

00:21:00.520 --> 00:21:04.716
แล้วก็เทสต์เก่าที่อยู่ใน use case เนี่ย

00:21:04.799 --> 00:21:09.040
เราไม่ต้องแก้เลยนะครับ เพราะว่ามันไม่เกี่ยวกันนะครับ

00:21:09.320 --> 00:21:14.836
แล้วก็เราสามารถทำ unit test สำหรับ decorator ได้ด้วยเนาะ

00:21:14.919 --> 00:21:17.599
ซึ่งอันนี้ผมไม่แน่ใจว่าเวลาจะพอหรือเปล่านะครับ

00:21:18.799 --> 00:21:21.677
ก็เดี๋ยวถ้ามีเวลาเดี๋ยวจะเปิดโค้ดให้ดูนะครับ

00:21:21.760 --> 00:21:26.320
แต่ว่าถ้าไม่มีเวลาไม่พอก็อาจจะไปดูใน git อีกทีนึงนะครับ

00:21:28.559 --> 00:21:32.421
โค้ดที่ต้องแก้เนี่ยนิดเดียว แค่แปะๆ หัวไปหน่อยเดียว decorator

00:21:32.879 --> 00:21:37.640
แน่นอน เราไม่ต้องมานั่ง error

00:21:38.080 --> 00:21:40.757
แบบถ้ามันไม่มีเทสต์ใน MongoRepository เนี่ย

00:21:40.840 --> 00:21:43.359
มันก็ไม่น่าจะ error เพราะว่าเราแค่แปะ decorator

00:21:43.600 --> 00:21:45.760
แต่เราเทสต์ที่ decorator เรียบร้อยแล้ว

00:21:47.799 --> 00:21:49.720
เรามาดูรูปตัวอย่างก่อนนะครับ

00:21:50.080 --> 00:21:54.320
ก็ decorator เนี่ย concept มันเหมือนตกแต่งเพิ่มเติมเนาะ

00:21:55.000 --> 00:21:58.559
สมมุติเรา method มันคือ function เนาะ

00:21:58.799 --> 00:22:00.596
method คือ function ของ class นะ

00:22:00.679 --> 00:22:01.919
เป็น member ของ class นะครับ

00:22:03.240 --> 00:22:04.797
ให้เห็นว่า decorator เนี่ย

00:22:04.880 --> 00:22:08.000
เราก็จะมี original method อยู่ตรงกลางนะครับ

00:22:09.000 --> 00:22:11.960
แต่ว่าเราสามารถก่อนที่จะไปเรียกจริงๆ เนี่ย

00:22:12.600 --> 00:22:13.799
เราทำอะไรกับมันก่อนได้

00:22:15.360 --> 00:22:17.517
หลังจากเรียกแล้วเราทำอะไรกับมันต่อได้เนาะ

00:22:17.600 --> 00:22:21.879
อันนี้ decorator สำหรับ method ของ class นะครับ

00:22:22.799 --> 00:22:24.797
อันนี้มีตัวอย่างคล้ายๆ กันเลย

00:22:24.880 --> 00:22:28.200
เค้าทำ decorator memorize พอดีนะครับ

00:22:29.120 --> 00:22:31.836
อันนี้ก็จะเห็นว่าเราเอา 𝚍𝚎𝚜𝚌𝚛𝚒𝚙𝚝𝚘𝚛.𝚟𝚊𝚕𝚞𝚎 มาเนี่ย

00:22:31.919 --> 00:22:35.520
อันนี้มันก็คือ original method นะครับ ของ class นั้นนะครับ

00:22:37.000 --> 00:22:39.839
แล้วก็เค้าก็ return descriptor ออกไป

00:22:40.400 --> 00:22:45.560
จริงๆ มัน .target หรือ propertyKey อาจจะต้องไปดู

00:22:45.919 --> 00:22:49.437
แต่ว่าแต่ละแบบว่า decorator ของ class

00:22:49.520 --> 00:22:52.520
decorator ของ method ของ class เนี่ย มันเป็นยังไงนะครับ

00:22:52.760 --> 00:22:55.037
หรือว่าแค่ของ function ธรรมดาเนี่ย เป็นยังไง

00:22:55.120 --> 00:22:57.399
ก็ผมว่าไปดู doc ของ TypeScript ได้

00:22:59.640 --> 00:23:01.320
อันนี้เป็นตัว implement จริง

00:23:01.600 --> 00:23:03.517
ผมไม่แน่ใจว่าเล็กมันเล็กไปหรือเปล่านะ

00:23:03.600 --> 00:23:05.757
เค้าก็ทำคล้ายๆ

00:23:05.840 --> 00:23:08.520
ถ้ามันเล็กไปเดี๋ยวผมเปิด มันจะดับหรือเปล่า

00:23:10.840 --> 00:23:12.877
ผมจะเปิดให้ดูนะครับ

00:23:12.960 --> 00:23:20.283
ก็ตัวเนี้ย ก็มีคนคิดคล้ายๆ ของเราเนาะ

00:23:24.400 --> 00:23:27.600
ก็จะเห็นว่าเค้าทำเป็น memorize ขึ้นมาเนี่ย

00:23:28.080 --> 00:23:32.080
ก็เช็ก concept แบบคล้ายที่ผมคิดเลย

00:23:32.480 --> 00:23:35.520
อารมณ์เดียวกันเด๊ะเลย ใช้ cache set อะไรอย่างนี้นะครับ

00:23:36.000 --> 00:23:37.797
แต่ว่าอันนี้เค้าไม่มีเรื่อง invalid cache เนาะ

00:23:37.880 --> 00:23:42.677
เดี๋ยวผมเล่าต่อ เสร็จแล้วเค้าก็เอา memorize มาแปะบนหัวนี้นะครับ

00:23:42.760 --> 00:23:44.960
ถ้าสมมุติเราเรียก fibo 2 รอบ

00:23:46.120 --> 00:23:48.397
รอบแรกอาจจะไม่มี cache เนาะ

00:23:48.480 --> 00:23:50.640
แต่ว่ารอบที่ 2 เนี่ย มี cache แน่นอนนะครับ

00:23:51.200 --> 00:23:55.200
รวมถึงจริงๆ แล้วตัว fibo เนี่ย มันเป็น recursive เนาะ

00:23:55.520 --> 00:23:56.917
จะเห็นว่ามันเป็น recursive

00:23:57.000 --> 00:23:59.437
ซึ่งอันไหนเคยคำนวณแล้วมันก็จะไม่คำนวณซ้ำนะครับ

00:23:59.520 --> 00:24:02.920
ก็เป็นเรื่อง performance นะครับ

00:24:06.559 --> 00:24:08.517
จากโค้ดเมื่อกี๊เนาะ

00:24:08.600 --> 00:24:10.279
ผมก็แปลงมาเป็นรูปให้เห็นง่ายๆ เนาะ

00:24:11.520 --> 00:24:16.317
ถ้ามี cache แล้ว ถ้ามี cache

00:24:16.400 --> 00:24:18.279
ถ้ามี cache ก็คืน cache ไปเลยนะครับ

00:24:18.559 --> 00:24:20.960
โดยไม่ต้องเรียก original method นะครับ

00:24:23.360 --> 00:24:26.157
ถ้าเกิดไม่มี cache มาก่อนเนาะ

00:24:26.240 --> 00:24:28.517
ครั้งแรกก็จะต้องเรียกผ่าน original method

00:24:28.600 --> 00:24:31.799
เสร็จแล้วก็เอา cache ไป set นะครับ

00:24:32.240 --> 00:24:34.037
แล้วก็ return มันออกมานะครับ

00:24:34.120 --> 00:24:37.360
อันนี้ก็จะแบบ simple หน่อยนะครับ

00:24:38.120 --> 00:24:41.320
คราวนี้ ขา invalid cache ที่ผมคิดไอเดียขึ้นมาเนี่ย

00:24:42.039 --> 00:24:45.557
ก็คล้ายๆ กันนี่ ก็ delete cache with combination key

00:24:45.640 --> 00:24:47.476
เดี๋ยวอันนี้ผมเล่าต่อเนาะ

00:24:47.559 --> 00:24:48.637
หลักๆ ก็คือไป delete cache

00:24:48.720 --> 00:24:51.679
หลังจากเราอัพเดตหรืออะไรหรือ create ใหม่ขึ้นมาเนี่ย

00:24:51.919 --> 00:24:53.480
เราก็ไป invalid มันซะ

00:24:54.080 --> 00:24:56.600
มันจะได้ยิง request เข้ามาแล้วก็

00:24:57.799 --> 00:25:00.320
เดี๋ยวมัน hit รอบใหม่ให้เราเองนะครับ

00:25:01.399 --> 00:25:05.480
อันนี้ผมยกตัวอย่าง key ที่ผมพูดไปเมื่อกี๊เนาะ

00:25:05.760 --> 00:25:07.397
อันนี้เป็นทีมผมทำเนาะ

00:25:07.480 --> 00:25:11.600
ก็ถ้าสมมุติว่ามี all key find all อย่างเงี้ย

00:25:11.840 --> 00:25:13.399
ผมก็แปะ all key ให้เลย

00:25:14.200 --> 00:25:18.840
เกิดส่ง ID มาเป็น 1 ก็เราจะ cache key ชื่อนี้ไว้นะครับ

00:25:20.000 --> 00:25:22.877
หรือว่าแบบส่ง status available color

00:25:22.960 --> 00:25:25.836
แบบเป็น 2 key เข้ามาในการ search หาอะไรอย่างเงี้ย

00:25:25.919 --> 00:25:27.240
เราก็แปะอย่างนี้ได้นะครับ

00:25:27.679 --> 00:25:30.196
อันนี้ก็เหมือนกันก็ใช้ 2 key นะครับ

00:25:30.279 --> 00:25:34.479
ก็คือ country กับ status ในการหาอะไรอย่างนี้ก็ได้นะครับ

00:25:37.200 --> 00:25:40.359
เดี๋ยวเราไปดูโค้ดเรากันดีกว่านะครับ

00:25:42.440 --> 00:25:46.520
ผมให้ดูตัว repository ก่อนนะครับ

00:25:49.240 --> 00:25:54.440
อันนี้ผมปิดตรงข้างล่างก่อน

00:25:55.120 --> 00:25:59.080
จะเห็นว่าผมมี base key อยู่นะครับ

00:25:59.559 --> 00:26:01.600
แล้วก็มี key combination

00:26:02.200 --> 00:26:04.679
เกิดเราสร้างของใหม่ขึ้นมาเนี่ย

00:26:05.679 --> 00:26:08.160
เราก็จะมา invalid แก๊งพวกนี้นะครับ

00:26:08.600 --> 00:26:12.397
เนื่องจากว่าเรามี search หลายแบบนะครับ

00:26:12.480 --> 00:26:14.680
มี search find all มี search ด้วย ID

00:26:15.320 --> 00:26:17.880
มี search ด้วย status กับ color นะครับ

00:26:18.679 --> 00:26:23.840
มี search ด้วย country กับ category นะครับ

00:26:25.279 --> 00:26:28.677
ก็จะเห็นว่าเราผมทำไว้อย่างเงี้ย

00:26:28.760 --> 00:26:31.076
ก็คือเราสามารถ search ของได้นะครับ

00:26:31.159 --> 00:26:34.836
แล้วก็เกิดวันดีคืนดีเรามีอัพเดตหรือมี create ของใหม่ขึ้นมา

00:26:34.919 --> 00:26:38.397
จริงๆ อันนี้อาจจะต้องมาดูเรื่อง field ละเอียดๆ หน่อยอีกทีนึงนะครับ

00:26:38.480 --> 00:26:40.919
แต่ว่าอันนี้ผมทำแบบง่ายๆ ให้เห็นภาพกันว่า

00:26:41.200 --> 00:26:43.279
สมมุติว่ามีเคสอัพเดตของเข้ามาเนี่ย

00:26:45.440 --> 00:26:49.557
สมมุติว่าเป็นเราเคย search ด้วย country กับ category อันเนี้ย

00:26:49.640 --> 00:26:52.800
ไอ้ตัวเนี้ยจะโดน invalid ทีเดียวเลยนะครับ

00:26:56.279 --> 00:27:00.280
เดี๋ยวเราไปดูตัว decorator ของเรากันนะครับ

00:27:02.640 --> 00:27:07.440
อันนี้ก็จะเห็นว่ามันที่ไม่พอหรือเปล่าครับ

00:27:07.559 --> 00:27:10.237
เนี่ยเราก็จะเก็บ original method ไว้ก่อนนะครับ

00:27:10.320 --> 00:27:15.399
เสร็จแล้วเราก็ override ไอ้ตัว method เนี่ย

00:27:15.640 --> 00:27:18.840
ด้วย function ที่ wrap เข้าทั้งก้อนเลยนะครับ

00:27:19.159 --> 00:27:21.360
เสร็จแล้วผมก็มีไป gen key ขึ้นมานะครับ

00:27:21.919 --> 00:27:25.240
gen key นี่คืออะไร gen key น่าจะเด้งไปอีกทีนึง

00:27:25.880 --> 00:27:30.880
แต่หลักๆ ก็คือเป็นเหมือนอันเนี้ยนะครับ

00:27:31.159 --> 00:27:34.717
ก็คือแบบ gen ขึ้นมาแล้วก็เอา value ของตัวเองแปะเข้าไป

00:27:37.760 --> 00:27:41.880
อันนี้ก็เช็คว่าถ้าไป get มาแล้วเจอ cache key เนี่ย

00:27:42.120 --> 00:27:46.760
ไอ้ตัว cache key ตัวเนี้ยเจอมาปุ๊บก็คืนออกไปเลยนะครับ

00:27:48.200 --> 00:27:53.239
โอเค แต่ถ้าไม่เจอเราก็จะเรียก original method ก่อน 1 ทีนะครับ

00:27:53.760 --> 00:27:58.836
โดยที่ตัวเนี้ยจะเห็นว่าผมใช้เป็น domain หรือ array ของ domain เนาะ

00:27:58.919 --> 00:28:04.637
ซึ่งอันเนี้ยผมรับเป็นตัว Redis mapper เข้ามาตัวนี้นะครับ

00:28:04.720 --> 00:28:07.436
ก็คืออันนี้ก็คือเป็น model จากต้นทางเนาะ

00:28:07.519 --> 00:28:10.877
เวลาเราได้ของจาก database หรืออะไรมาเนี่ย

00:28:10.960 --> 00:28:13.120
มันจะเป็นแบบ entity ของ Mongo

00:28:13.880 --> 00:28:17.120
หรือเป็นแบบ type ที่มันยังไม่พร้อมใช้งานในระบบเราเนี่ย

00:28:17.679 --> 00:28:19.917
ก็จะเป็นตัวนี้ก่อน

00:28:20.000 --> 00:28:23.237
แล้วก็เราบอกว่าเดี๋ยวเราจะ convert มาเป็นตัว domain

00:28:23.320 --> 00:28:24.839
ในระบบของเราอีกทีนึงนะครับ

00:28:27.200 --> 00:28:30.196
เสร็จแล้วเราก็โอเค เราก็ได้ resource มาแล้ว

00:28:30.279 --> 00:28:32.760
เราก็ไป map domain to cache อีกทีนึงนะครับ

00:28:33.000 --> 00:28:34.719
map domain to cache อยู่ข้างล่าง

00:28:34.880 --> 00:28:36.399
ก็จะจริงๆ แล้วก็ไม่มีอะไร

00:28:37.840 --> 00:28:45.599
ถ้ามันได้ของออกมาเป็น array

00:28:45.880 --> 00:28:47.436
มันก็จะไป map เป็น array ออกมา

00:28:47.519 --> 00:28:52.637
ถ้ามันไม่ใช่ array เราก็จะ map เป็น domain model ธรรมดา

00:28:52.720 --> 00:28:55.596
หรือ unify ออกไปนะครับ

00:28:55.679 --> 00:29:01.159
เสร็จแล้วก็ไป set cache key นะครับ

00:29:02.799 --> 00:29:07.200
โดยทั้งหมดเนี่ยผมก็ run test

00:29:07.720 --> 00:29:10.596
อันนี้ก็จริงๆ อันนี้ก็จะมี test อยู่เหมือนกันนะครับ

00:29:10.679 --> 00:29:20.560
test ผมก็ยกตัวอย่างเช่นตัวนี้ spy counter

00:29:22.159 --> 00:29:24.120
โอเค spy counter เนี่ยครับ

00:29:24.519 --> 00:29:27.557
ถ้าเราเรียก find all เนี่ย 3 ครั้งเนี่ย

00:29:27.640 --> 00:29:33.157
มันจะต้องไปคิดแค่เรียกไอ้ตัวจริงๆ เนี่ย

00:29:33.240 --> 00:29:36.240
ไอ้ตัว original method แค่ครั้งเดียวนะครับ

00:29:36.960 --> 00:29:39.157
ก็จริงๆ ก็ทำไว้หลายเคสนะครับ

00:29:39.240 --> 00:29:40.920
แต่ว่าผมคงไม่เล่าหมดนะครับ

00:29:46.080 --> 00:29:48.720
ให้ดูอันนี้อีกทีนึงครับ find by ID เนี่ย

00:29:49.039 --> 00:29:51.436
แล้วผมก็ทำ spy ไว้อีกทีนึงนะครับ

00:29:51.519 --> 00:29:54.040
ทำ test case ขึ้นมา

00:29:54.880 --> 00:29:59.359
จริงๆ แล้วอันนี้ผมใช้ตัวช่วยหลายอย่างเลยเหมือนกันนะครับ

00:30:02.840 --> 00:30:04.200
before each ผมอยู่ไหน

00:30:06.000 --> 00:30:09.200
อันนี้ผมใช้ testing module ของ NestJS นะครับ

00:30:10.200 --> 00:30:15.000
แต่ว่าอีกตัวนึงผมว่า point สำคัญของเราตอนนี้น่าจะไม่ใช่ตัวนี้ละ

00:30:15.440 --> 00:30:18.560
เราไปดูตัว invalidate cache key ดีกว่า

00:30:19.240 --> 00:30:21.397
ก็หลักๆ แล้วขอโทษครับ

00:30:21.480 --> 00:30:26.680
น่าจะต้องไปดูตัว implement มันก่อนเนาะ

00:30:27.399 --> 00:30:28.920
ให้ดูอีกทีนึงครับ

00:30:29.080 --> 00:30:30.436
เวลาจะ invalidate cache เนี่ย

00:30:30.519 --> 00:30:33.999
ผม invalidate ทางปลั๊กนี้เลยนะครับ

00:30:34.679 --> 00:30:36.637
เดี๋ยวจะไม่ทัน ผมกลัวเหลือน้อยมากเลย

00:30:36.720 --> 00:30:41.800
เดี๋ยวผมยิง request ให้ดูดีกว่านะครับ

00:30:42.480 --> 00:30:49.596
โอเค มาถึงผมจะลองยิง terminal ด้วย

00:30:49.679 --> 00:30:51.836
โอเค อันนี้จะเห็นว่ายิงไปนะครับ

00:30:51.919 --> 00:30:53.637
ผมพ่น log debug เอาไว้นะครับ

00:30:53.720 --> 00:31:00.476
ก็เป็น not hit นะครับ

00:31:00.559 --> 00:31:03.600
อันนี้จะเห็นว่ามันไม่ hit เนาะ

00:31:03.919 --> 00:31:07.119
แล้วก็อันนี้คืนของว่างเปล่ามาเลยนะครับ

00:31:09.080 --> 00:31:13.960
เสร็จแล้วผมไปยิง create item 1 นะครับ

00:31:14.360 --> 00:31:16.159
ชื่อ Red เป็น Red นะครับ

00:31:17.000 --> 00:31:21.280
เสร็จแล้วผมไปลอง get all อีกทีนึงนะครับ

00:31:21.960 --> 00:31:24.480
ก็จะเห็นว่า cache not hit อยู่เนาะ

00:31:25.120 --> 00:31:27.157
อันนี้ผมตั้ง delay ไว้ให้เหมือนแบบจำลอง

00:31:27.240 --> 00:31:31.400
เหมือนแบบต่อ database แล้วมันช้าอะไรอย่างนี้นะครับ

00:31:33.200 --> 00:31:36.196
เนี่ยครับก็จะเห็นว่าอันเนี้ยเราคืนมาก้อนนึง

00:31:36.279 --> 00:31:44.401
และถ้าผมยิงอีกรอบนึงก็จะเห็นว่ามัน hit ละ

00:31:45.840 --> 00:31:48.920
ยิงรอบนี้ไม่เจอ ยิงอีกรอบนึงเจอเลยนะครับ

00:31:50.279 --> 00:31:54.599
คราวนี้ผมไปสร้างตัวสีฟ้าเป็นตัวที่ 2 ขึ้นมานะครับ

00:31:54.880 --> 00:31:57.959
ผมกลับมายิง get all นะครับ

00:31:59.039 --> 00:32:03.519
ก็จะเห็นว่ามันไม่เจอนะครับ

00:32:04.240 --> 00:32:07.280
ผมก็ยิงอีกรอบ รอบนี้เจอละ

00:32:14.399 --> 00:32:19.400
โอเค ก็จะเห็นว่ายิงรอบนึงมันไม่เจอเนาะ

00:32:19.720 --> 00:32:21.997
เวลาเรายิงไปเนี่ยมันจะมี invalidate cache นะครับ

00:32:22.080 --> 00:32:25.120
ซึ่งจริงๆ แล้วอันนี้ผมก็ทำไว้หลายแบบเหมือนกันนะครับ

00:32:25.600 --> 00:32:30.400
อันนี้ผมยิง get by ID ยิงรอบแรกไม่เจอนะครับ

00:32:31.080 --> 00:32:33.879
ปึ๊บ ยิงรอบ 2 hit นะครับ

00:32:36.320 --> 00:32:41.917
สมมติผมไปยิงเคสอื่นบ้างนะครับ

00:32:42.000 --> 00:32:50.879
โอเค เอาเคส search ด้วยทั้ง country แล้วก็ category นะครับ

00:32:53.320 --> 00:32:55.440
ยิงรอบแรกไปนะครับ ไม่เจอนะครับ

00:32:56.480 --> 00:32:58.800
เสร็จแล้วผมยิงอีกรอบนึงนะครับ

00:32:59.639 --> 00:33:03.799
ปึ๊บ คราวนี้มันก็จะ hit ละ

00:33:04.679 --> 00:33:07.397
คราวนี้ลองไป update ดูนะครับ

00:33:07.480 --> 00:33:10.637
ผมไป update เดี๋ยวผมดึงตรงนี้ลงหน่อยดีกว่า

00:33:10.720 --> 00:33:14.999
ไม่เกิดประโยชน์เลย ผมขอ get all อีกครั้งนึงครับ

00:33:15.159 --> 00:33:22.556
get all ปั๊บ อันนี้เนื่องจากว่ามันไม่ cache hit นะ

00:33:22.639 --> 00:33:24.320
มันน่าจะต้องรอสักแป๊บนึงนะครับ

00:33:24.880 --> 00:33:26.680
ก็จะขึ้นมา 2 ตัวแล้วเนาะ

00:33:27.200 --> 00:33:30.679
โอเค ผมยิงอีกรอบนึง

00:33:30.960 --> 00:33:32.639
ปิดอันนี้ด้วย จะได้เห็นชัดๆ

00:33:32.880 --> 00:33:36.200
ปึ๊บ ขึ้นเลยนะครับ ไม่ต้องรอต่อ database

00:33:36.519 --> 00:33:38.600
จากการ mock ไว้

00:33:39.360 --> 00:33:42.917
เสร็จแล้วเดี๋ยวผมไปยิง update นะครับ

00:33:43.000 --> 00:33:46.117
ยิง update ตัวแรกนะครับ

00:33:46.200 --> 00:33:54.640
ปั๊บ อันนี้อาจจะช้าหน่อยเพราะว่ามีการไป file นิดนึงนะครับ

00:33:56.000 --> 00:33:57.479
status available โอเค

00:33:59.600 --> 00:34:01.956
อันนี้ผมยิง get all item อีกครั้งนึงครับ

00:34:02.039 --> 00:34:06.000
อันนี้ก็จะเห็นว่ามันไม่เจอเนาะครับ

00:34:06.399 --> 00:34:07.360
ก็เลยช้าหน่อย

00:34:08.159 --> 00:34:12.079
ก็จะเห็นว่าตัว name เนี่ยมันเปลี่ยนเป็น JavaScript Bangkok 2.0 แล้ว

00:34:12.320 --> 00:34:14.677
แล้วก็ status เป็น unavailable เรียบร้อยแล้วครับ

00:34:14.760 --> 00:34:16.880
จากการ update ก่อนหน้านี้นะครับ

00:34:19.159 --> 00:34:21.759
ถ้าสมมติผมยิง get all อีกรอบนึงมันน่าจะต้องไวละ

00:34:22.679 --> 00:34:24.877
ปั๊บ hit นะครับ

00:34:24.960 --> 00:34:28.040
ปิดๆๆ อันนี้ก่อน จะได้เห็นชัดๆ ครับ

00:34:29.240 --> 00:34:32.040
ยิงปึ๊บขึ้นเลยนะครับ เพราะติด cache นะครับ

00:34:34.639 --> 00:34:37.076
โอเค เดี๋ยวอันนี้ผมสรุปนะครับ

00:34:37.159 --> 00:34:39.119
เพราะว่ากลัวจะไม่ทันเวลากัน

00:34:40.720 --> 00:34:44.437
ตัวนี้นะครับ ก็จะเห็นว่ามันค่อนข้างจะใช้งานได้ระดับนึง

00:34:44.520 --> 00:34:46.036
เราสามารถ invalidate cache ได้

00:34:46.119 --> 00:34:50.276
โดยที่ปกติแล้วเนี่ย ถ้าเราใช้ cache manager ปกติเนี่ย

00:34:50.359 --> 00:34:52.357
มันจะทำอะไรแบบนี้ไม่ได้นะครับ

00:34:52.440 --> 00:34:54.637
แล้วก็อันนี้ สังเกตดูว่า code ผมอ่ะ

00:34:54.720 --> 00:34:57.600
ถ้ามาดูตัว repository ของผมเนี่ย

00:34:57.960 --> 00:35:00.797
ผมไม่ต้องไปแก้ไขมันเลยนะครับ

00:35:00.880 --> 00:35:03.880
ผมแค่เติม decorator ไว้ข้างบนหัวมันนิดนึงนะครับ

00:35:04.400 --> 00:35:06.240
แต่ว่าอาจจะมีข้อจำกัดอยู่บ้างนะครับ

00:35:06.960 --> 00:35:12.359
ข้อจำกัดที่ว่าก็คือ file key ที่ใช้ในการ file เนี่ย

00:35:13.200 --> 00:35:17.920
ถ้ามันเปลี่ยนเนี่ย มันก็จะยังไม่อัพเดทนะครับ

00:35:19.240 --> 00:35:22.480
อธิบายไม่เห็นภาพ ผมว่าเรายิงให้ดูดีกว่า

00:35:24.560 --> 00:35:28.200
โอเค ผมขอรีทีนึง จะได้ clear ของ

00:35:28.800 --> 00:35:30.797
โอเคครับ เดี๋ยวผมยิงใหม่นะครับ

00:35:30.880 --> 00:35:34.000
ปึ๊บ สีแดง สีฟ้านะครับ

00:35:36.000 --> 00:35:38.439
ยิง get all รอซิ มายัง

00:35:41.720 --> 00:35:45.720
โอเค มา 2 ตัวละ

00:35:46.560 --> 00:35:52.197
สมมติว่าผม search ด้วย status available นะครับ

00:35:52.280 --> 00:35:57.000
กดไปรอบแรกเนี่ย โอเค ก็จะได้ของมา 2 ตัวตามนี้นะครับ

00:35:58.160 --> 00:36:01.080
แล้วผมไป update มันเป็น unavailable เนี่ย

00:36:02.119 --> 00:36:08.920
แล้วผมก็กลับมา get by state get ด้วยอันนี้อีกทีนึง

00:36:09.680 --> 00:36:13.160
ซึ่งอันนี้ อ้าว จอดับผมก็ไม่รู้ตัว

00:36:15.119 --> 00:36:17.317
โอเค เดี๋ยวกัวเกินเวลาครับ

00:36:17.400 --> 00:36:18.880
ผมว่าเดี๋ยวไปอ่าน code ดีกว่า

00:36:19.119 --> 00:36:23.760
แต่ว่า point สำคัญคือมันจะไม่ได้ key ที่ใช้ในการ search อ่ะครับ

00:36:23.880 --> 00:36:25.840
ไม่ควรจะเปลี่ยนแปลงได้ครับ

00:36:25.960 --> 00:36:28.240
สำหรับอันนี้ที่เป็นปัญหาอยู่นะครับ

00:36:28.680 --> 00:36:33.276
แต่ว่างานที่ผมใช้อยู่ปกติ key มันค่าค่อนข้างจะคงที่อยู่แล้ว

00:36:33.359 --> 00:36:35.439
ก็เลยไม่เจอปัญหาที่ว่านะครับ

00:36:36.119 --> 00:36:39.036
solve problem ของผมอย่างจริงจังนะครับ

00:36:39.119 --> 00:36:41.236
ก็ไม่เจอปัญหานะครับ

00:36:41.319 --> 00:36:45.760
ก็ load size database ไปได้เยอะ

00:36:46.440 --> 00:36:51.000
ราคาครึ่งนึงได้อ่ะครับ หลังจากมาใช้ Redis ไปนะครับ

00:36:51.680 --> 00:36:53.880
ก็อันนี้ใกล้จบครับ

00:36:54.040 --> 00:36:57.036
จริงๆ ผมมี course อยู่กับทาง born to dev นะครับ

00:36:57.119 --> 00:37:00.117
ก็เป็น RESTful API by NestJS นะครับ

00:37:00.200 --> 00:37:03.200
ก็ใช้กับ MongoDB แล้วก็เป็น hexagonal architecture นะครับ

00:37:04.560 --> 00:37:10.639
ครับ โอเค แล้วก็มี อ้าว รูปไม่ขึ้น

00:37:11.240 --> 00:37:15.280
โอเคครับ มีเพจนะครับ ก็ jitrak.dev นะครับ

00:37:16.480 --> 00:37:18.557
เขียน blog อยู่บ้างเหมือนกันครับ

00:37:18.640 --> 00:37:24.560
โอเคครับ Q&A ครับ

00:37:25.240 --> 00:37:26.880
ที่ใช้กดยิง request ครับ

00:37:27.680 --> 00:37:30.200
อันนี้คือต้อง dev อะไรเพิ่มมั้ยครับ หรือมี plugin ลงได้เลย

00:37:30.839 --> 00:37:35.397
อันนี้ใช้ REST Client ของ VS Code ได้เลยครับ

00:37:35.480 --> 00:37:42.677
เป็น plugin ตัวนี้ครับ

00:37:42.760 --> 00:37:45.117
อันนี้เล่าให้เนาะ เผื่อใครไม่รู้อ่ะครับ

00:37:45.200 --> 00:37:49.557
ก็ไอ้ตัวนี้มันทำให้เราสามารถยิง request ได้ง่ายนะครับ

00:37:49.640 --> 00:37:52.799
คือปกติแล้วผมว่าหลายคนก็คงจะไปใช้พวก Postman

00:37:52.960 --> 00:37:53.919
หรืออะไรอย่างงี้กันเนาะ

00:37:54.160 --> 00:37:56.119
ซึ่งผมไม่ค่อยชอบ Postman นะครับ

00:37:56.760 --> 00:38:01.236
ข้อเสียของมันคือมันไม่ได้อยู่ใน Git อยู่ใน source code เราอ่ะ

00:38:01.319 --> 00:38:03.157
ผมต้องการให้มันอยู่ใน source code

00:38:03.240 --> 00:38:06.800
ผมก็เลยใช้ REST Client ในการ save ตัว request เอาไว้

00:38:07.560 --> 00:38:08.399
โอเคครับ

00:38:08.960 --> 00:38:10.840
ครับ น่าจะไม่มีคำถามแล้วครับ

00:38:11.280 --> 00:38:13.036
ครับ ขอบคุณครับ

00:38:13.119 --> 00:38:14.080
ครับ ขอบคุณครับ
