WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:04.200 --> 00:00:05.479
Hello everyone.

00:00:10.120 --> 00:00:11.797
Let me introduce myself.

00:00:11.880 --> 00:00:12.919
My name is Ivan.

00:00:13.480 --> 00:00:15.960
I'm from Jakarta, Indonesia.

00:00:16.720 --> 00:00:21.079
Who's been to Jakarta or Indonesia?

00:00:21.359 --> 00:00:22.919
Who's been to Bali?

00:00:26.840 --> 00:00:27.960
Same person.

00:00:30.599 --> 00:00:33.597
I'm a Web GDE, Google Developer Expert for web,

00:00:33.680 --> 00:00:36.160
and I'm a senior engineer at Human Made.

00:00:37.120 --> 00:00:40.557
I am very excited to be here with you,

00:00:40.640 --> 00:00:42.800
and thank you for coming to my talk today.

00:00:43.719 --> 00:00:48.837
This topic I'm so excited to share with you

00:00:48.920 --> 00:00:51.000
because I've been waiting it for a while.

00:00:52.719 --> 00:00:54.160
This is about testing.

00:00:55.359 --> 00:01:00.240
To test your application to ensure its reliability

00:01:00.960 --> 00:01:02.116
when you have upgrade,

00:01:02.199 --> 00:01:04.559
or when you have any additional features,

00:01:04.920 --> 00:01:10.320
you ensure your software still do what it does

00:01:10.680 --> 00:01:12.680
and still reliable.

00:01:14.240 --> 00:01:18.960
Speaking about browser automations in your life,

00:01:19.640 --> 00:01:23.637
has any one of you feel like when you code

00:01:23.720 --> 00:01:25.877
or you make something for your application,

00:01:25.960 --> 00:01:28.600
you feel like, "It works on my machine."

00:01:28.960 --> 00:01:31.959
But in client's machine, it doesn't.

00:01:33.840 --> 00:01:38.480
Also, browser automations is supposed to be

00:01:39.399 --> 00:01:41.199
when you test on your machine, it's fast,

00:01:42.479 --> 00:01:44.559
but when you test on the cloud,

00:01:44.920 --> 00:01:48.359
or you call it continuous integrations or CI,

00:01:49.680 --> 00:01:51.920
it's so slow.

00:01:53.079 --> 00:01:55.676
Sometimes, it burns your GitHub action time,

00:01:55.759 --> 00:01:58.359
and you have to pay a lot more money for it.

00:02:01.560 --> 00:02:06.000
And it's only run on certain browser, unfortunately.

00:02:06.719 --> 00:02:08.799
We have the same problem.

00:02:09.280 --> 00:02:11.839
So, how can we solve it?

00:02:13.879 --> 00:02:16.637
Tools that we use to automate our browser

00:02:16.720 --> 00:02:19.240
usually cut one of this.

00:02:19.400 --> 00:02:21.320
It's either WebDriver, Puppeteer,

00:02:22.239 --> 00:02:25.717
or maybe you use Playwright, TestCafe,

00:02:25.800 --> 00:02:27.239
or maybe you use Cypress.

00:02:30.120 --> 00:02:32.480
So, how it works, actually?

00:02:32.840 --> 00:02:34.317
It's on a high level,

00:02:34.400 --> 00:02:37.400
and it categorize into high level and low level.

00:02:37.920 --> 00:02:40.520
On the high level, usually where we use it,

00:02:40.920 --> 00:02:44.800
we use either like Cypress or TestCafe.

00:02:45.400 --> 00:02:48.039
We write our test in JavaScript.

00:02:48.159 --> 00:02:51.080
We interact with the web APIs through Node.js like,

00:02:51.920 --> 00:02:54.400
"browser, navigate to this link,

00:02:55.000 --> 00:02:58.640
and click this button, or click that element."

00:02:59.000 --> 00:03:02.997
And you try to run the end-to-end testing.

00:03:03.080 --> 00:03:07.239
For example, you run a login process,

00:03:07.360 --> 00:03:09.560
like you go to a login screen,

00:03:09.799 --> 00:03:12.760
fill in the username and password, and login,

00:03:12.920 --> 00:03:15.840
and to ensure the login still works.

00:03:16.640 --> 00:03:21.080
On the low-level part, we have two protocol.

00:03:21.200 --> 00:03:26.677
It's either WebDriver classic protocol,

00:03:26.760 --> 00:03:29.483
and we use Chrome DevTools.

00:03:32.000 --> 00:03:33.997
As the name suggests, Chrome DevTools

00:03:34.080 --> 00:03:39.200
is only works for Chromium-based browser.

00:03:39.640 --> 00:03:42.919
So, how the WebDriver works?

00:03:43.439 --> 00:03:45.120
It's usually like this,

00:03:45.280 --> 00:03:49.760
like your automation tools, like 𝚠𝚎𝚋𝚍𝚛𝚒𝚟𝚎𝚛.𝚒𝚘,

00:03:51.360 --> 00:03:53.280
it use the browser driver.

00:03:53.680 --> 00:03:57.760
It's either ChromeDriver, Gecko for Firefox,

00:03:58.360 --> 00:03:59.757
Safari, and Edge driver.

00:03:59.840 --> 00:04:02.960
It's already built-in inside your browser.

00:04:03.360 --> 00:04:04.199
You can use it,

00:04:04.799 --> 00:04:09.359
and it interact from your automation tools

00:04:09.879 --> 00:04:10.999
to the browser.

00:04:12.239 --> 00:04:16.919
Let's take example of this simple simplified demo.

00:04:17.359 --> 00:04:20.400
You navigate to a URL,

00:04:21.160 --> 00:04:23.560
and you click on the Espresso.

00:04:23.840 --> 00:04:28.717
So, how it works on the 𝚠𝚎𝚋𝚍𝚛𝚒𝚟𝚎𝚛.𝚒𝚘 code?

00:04:28.800 --> 00:04:29.480
It's easy.

00:04:30.160 --> 00:04:34.600
You set up the browser: Firefox, Chrome, Edge, Safari.

00:04:35.120 --> 00:04:38.920
You ask the browser, the driver,

00:04:39.160 --> 00:04:40.160
"Go to this URL."

00:04:40.840 --> 00:04:44.920
And then, click the Espresso link.

00:04:45.600 --> 00:04:46.960
That's it.

00:04:47.800 --> 00:04:51.800
This is how it works inside, behind the scene.

00:04:52.320 --> 00:04:55.120
From the WebDriver, it navigate,

00:04:55.320 --> 00:04:58.679
it send HTTP request.

00:04:59.039 --> 00:05:02.077
And then, the browser driver come back

00:05:02.160 --> 00:05:05.680
with the same HTTP response like this.

00:05:07.320 --> 00:05:10.877
It's nothing special.

00:05:10.960 --> 00:05:12.997
It's just HTTP, you request, response.

00:05:13.080 --> 00:05:14.959
It's like a REST API endpoint.

00:05:16.039 --> 00:05:18.000
That's how it works behind the scene.

00:05:18.160 --> 00:05:20.757
But the problem and the challenge comes with this

00:05:20.840 --> 00:05:21.920
number two.

00:05:22.600 --> 00:05:28.480
What happened here is when your automation tools ask,

00:05:29.039 --> 00:05:30.800
"navigate to this page."

00:05:31.039 --> 00:05:34.037
But the element that you are asking

00:05:34.120 --> 00:05:37.360
or you're looking for is not yet available

00:05:37.560 --> 00:05:41.320
because the browser still render it.

00:05:42.160 --> 00:05:43.920
What happened is behind the scene,

00:05:44.440 --> 00:05:46.559
it has a long polling.

00:05:46.919 --> 00:05:48.240
Like it keep asking,

00:05:48.680 --> 00:05:50.440
"Is the Espresso loaded?

00:05:50.680 --> 00:05:51.757
Is the Espresso loaded?

00:05:51.840 --> 00:05:53.039
Is the Espresso loaded?"

00:05:53.240 --> 00:05:53.640
Nope.

00:05:53.919 --> 00:05:55.560
And until it's time out,

00:05:55.880 --> 00:05:59.236
then you wasted your time and money

00:05:59.319 --> 00:06:02.280
on a GitHub action or Bitbucket time.

00:06:03.280 --> 00:06:07.079
So, it's so slow.

00:06:07.759 --> 00:06:09.558
But the good thing with the WebDriver,

00:06:09.840 --> 00:06:12.037
it support cross browser.

00:06:12.120 --> 00:06:13.797
It works on Safari browser,

00:06:13.880 --> 00:06:15.037
it works on Firefox,

00:06:15.120 --> 00:06:17.760
it works on almost every browser.

00:06:18.120 --> 00:06:19.640
The not-so-good part,

00:06:19.800 --> 00:06:23.920
it is slow and only support high-level control.

00:06:34.240 --> 00:06:40.560
Okay, the second part is CDP, Chrome DevTools Protocol.

00:06:40.840 --> 00:06:43.759
As the name suggests, it's only for Chromium browser.

00:06:44.199 --> 00:06:45.759
And of course, you know, Puppeteer.

00:06:46.120 --> 00:06:50.760
It's behind the browser automation for Chrome.

00:06:51.280 --> 00:06:53.759
How it works is, it doesn't use the browser driver.

00:06:54.000 --> 00:06:59.080
It directly interacts through the browser, through WebSocket.

00:06:59.720 --> 00:07:02.440
And since it's used WebSocket, it's bidirectional by default.

00:07:04.759 --> 00:07:07.680
So, how we set up on Puppeteer is the same.

00:07:08.240 --> 00:07:09.519
We set up the browser.

00:07:11.440 --> 00:07:15.120
We ask the browser to go to the URL, click it.

00:07:15.960 --> 00:07:19.240
Now, how it works behind the scene is,

00:07:19.800 --> 00:07:23.597
it sends everything, all the command, all at once,

00:07:23.680 --> 00:07:28.880
not all of them, but just asks without waiting for response.

00:07:29.680 --> 00:07:32.597
So, it's not HTTP request and response anymore.

00:07:32.680 --> 00:07:37.757
It's just send it and forget it and waiting for the browser

00:07:37.840 --> 00:07:40.839
to reply through the WebSocket.

00:07:41.879 --> 00:07:45.080
So, there is no long pulling.

00:07:45.520 --> 00:07:48.280
That's why it is fast, bidirectional.

00:07:50.520 --> 00:07:52.759
And it also supports low-level control,

00:07:53.199 --> 00:07:56.119
such as, it can intercept network requests.

00:07:56.479 --> 00:07:58.919
It can also simulate device mode,

00:07:59.120 --> 00:08:06.079
like in Puppeteer, you can define you want to simulate mobile.

00:08:06.240 --> 00:08:08.116
You want to simulate geolocations.

00:08:08.199 --> 00:08:12.240
And you want to subscribe to console messages.

00:08:13.240 --> 00:08:17.599
And while WebDriver doesn't support this low level.

00:08:18.199 --> 00:08:26.559
Thus, in summary, CDP or Chrome DevTools Protocol, it's fast.

00:08:26.919 --> 00:08:30.279
It can access low-level control,

00:08:30.520 --> 00:08:33.920
but it's not a standard.

00:08:34.200 --> 00:08:38.396
It's only available in Chrome-based browser.

00:08:38.479 --> 00:08:40.520
It's not inclusive.

00:08:42.360 --> 00:08:45.200
So, how we can improve this?

00:08:45.800 --> 00:08:48.680
And why I'm so excited about this, is,

00:08:49.440 --> 00:08:55.760
how can we combine both of the best from these two worlds?

00:08:56.440 --> 00:09:00.440
Like, how can we have a fast bidirectional from CDP

00:09:01.120 --> 00:09:03.520
and have a cross browser from WebDriver?

00:09:04.200 --> 00:09:09.000
So, if you have two tools and we combine, and tada!

00:09:09.680 --> 00:09:11.880
It's called WebDriver BiDi.

00:09:12.640 --> 00:09:13.920
It's called BiDi, not BD.

00:09:14.480 --> 00:09:15.879
It's called bidirectional.

00:09:17.000 --> 00:09:21.957
So, it's a WebDriver and it supports WebSocket direct

00:09:22.040 --> 00:09:22.520
bidirectional.

00:09:24.160 --> 00:09:31.800
So, with WebDriver BiDi, it uses the same protocol,

00:09:33.720 --> 00:09:36.077
I can say it's a new web standard,

00:09:36.160 --> 00:09:40.240
which is getting the technology from the Chrome DevTools

00:09:40.959 --> 00:09:43.876
Protocol and make it as a new standard

00:09:43.959 --> 00:09:46.680
as a web next generation of WebDriver.

00:09:48.519 --> 00:09:51.040
And it uses WebSocket.

00:09:51.320 --> 00:09:59.637
WebDriver BiDi is in collaborations between browsers vendor,

00:09:59.720 --> 00:10:02.122
automation tools like Selenium and webdriver.io,

00:10:03.079 --> 00:10:07.479
and it's also testing provider.

00:10:07.959 --> 00:10:10.559
So, we know, we have a new tools.

00:10:10.839 --> 00:10:12.400
We have a new standard.

00:10:12.680 --> 00:10:17.000
And how can we propose this to the current test?

00:10:17.680 --> 00:10:21.240
As a good thing with WebDriver BiDi is,

00:10:22.000 --> 00:10:25.599
you can upgrade your code without touching

00:10:25.880 --> 00:10:29.160
or refactor your code at all.

00:10:29.600 --> 00:10:33.996
All you need later on is just change configurations

00:10:34.079 --> 00:10:36.400
to make it work with WebDriver BiDi.

00:10:36.600 --> 00:10:40.040
For example, webdriver.io version 9

00:10:40.639 --> 00:10:44.160
already has initial support for WebDriver BiDi.

00:10:44.720 --> 00:10:48.039
All you need is later on, I will give you example,

00:10:48.200 --> 00:10:52.397
but it's just a simple configurations,

00:10:52.480 --> 00:10:54.477
just one line of configurations,

00:10:54.560 --> 00:10:59.160
and you can use WebDriver BiDi in your test.

00:10:59.800 --> 00:11:01.080
As same as Puppeteer.

00:11:01.600 --> 00:11:05.277
Now, Puppeteer already use Chrome and Firefox

00:11:05.360 --> 00:11:06.200
behind the scene.

00:11:06.800 --> 00:11:08.839
And all you need is just active,

00:11:09.279 --> 00:11:13.600
Firefox already support WebDriver BiDi by default,

00:11:14.040 --> 00:11:15.760
while Chrome still use CDP,

00:11:15.959 --> 00:11:18.560
but you can change it to use WebDriver BiDi.

00:11:21.040 --> 00:11:21.440
Okay.

00:11:21.680 --> 00:11:24.240
Now, let's take example of this page.

00:11:24.920 --> 00:11:26.960
And now we add one more,

00:11:27.560 --> 00:11:34.477
which is not possible for classic WebDriver protocol before,

00:11:34.560 --> 00:11:39.040
which is catch a console errors log.

00:11:39.720 --> 00:11:41.720
Same like WebDriver WebDriverIO,

00:11:42.560 --> 00:11:46.320
you can just add WebSocket URL.

00:11:47.000 --> 00:11:47.480
That's it.

00:11:48.200 --> 00:11:56.280
Now, your test can use WebDriver BiDi capability.

00:11:56.480 --> 00:11:59.279
And then, you can use either Chrome or Firefox.

00:12:01.040 --> 00:12:01.960
And that's it.

00:12:02.720 --> 00:12:05.080
Safari? Where is Safari?

00:12:05.600 --> 00:12:06.920
Not yet.

00:12:07.680 --> 00:12:08.319
I hope so.

00:12:09.040 --> 00:12:10.919
Okay? Soon.

00:12:12.199 --> 00:12:18.277
And now, to monitor log messages,

00:12:18.360 --> 00:12:24.800
all you need is just like how you do it with CDP

00:12:25.360 --> 00:12:27.957
or you can subscribe to your session

00:12:28.040 --> 00:12:31.719
and then you can see the log entry on the console log.

00:12:31.959 --> 00:12:35.880
This is useful if you want to test

00:12:36.199 --> 00:12:40.717
to ensure that your app doesn't throw any JavaScript error

00:12:40.800 --> 00:12:45.720
or if you're expecting your application to throw any error,

00:12:45.920 --> 00:12:49.439
so you can make an assertion or test about it.

00:12:50.839 --> 00:12:54.477
You can do this now with WebDriver BiDi using WebDriverIO.

00:12:54.560 --> 00:12:58.677
It's not possible in WebDriver version 8 below.

00:12:58.760 --> 00:13:02.440
It's only possible on WebDriver version 9 above.

00:13:03.040 --> 00:13:06.562
So, you subscribe to it through the WebSocket,

00:13:07.279 --> 00:13:10.079
then you can listen to it and make an assertion

00:13:11.160 --> 00:13:15.196
if any JavaScript error occurs,

00:13:15.279 --> 00:13:21.760
and you can ensure your application doesn't throw any error

00:13:22.639 --> 00:13:24.839
during your test.

00:13:25.639 --> 00:13:27.280
This is an example.

00:13:28.560 --> 00:13:34.677
You can run and then you can see assertion error here

00:13:34.760 --> 00:13:39.800
and it's coming from those log error messages.

00:13:40.240 --> 00:13:44.600
So, WebDriver BiDi can monitor the console log

00:13:45.100 --> 00:13:47.519
caught exceptions as early as possible.

00:13:48.560 --> 00:13:52.116
One thing that I found useful is when I combine it

00:13:52.199 --> 00:13:55.799
with the Web Vitals Core Web Vitals,

00:13:55.920 --> 00:13:57.480
there is a web-vitals.js.

00:13:58.000 --> 00:14:00.520
You can combine it with web-vitals.js

00:14:01.079 --> 00:14:05.120
and you can log your message where you can track your LCP,

00:14:05.800 --> 00:14:07.118
Largest Contentful Paint,

00:14:07.480 --> 00:14:11.279
or your INP, Interaction to Next Paint, and CLS.

00:14:11.639 --> 00:14:15.640
So, you can log those data during your test.

00:14:16.440 --> 00:14:20.837
You can ensure that your application doesn't regress

00:14:20.920 --> 00:14:28.440
in performance while developing your application.

00:14:28.720 --> 00:14:33.597
This is useful because you can output your text

00:14:33.680 --> 00:14:38.320
inside the console log and capture it inside the test.

00:14:39.600 --> 00:14:40.436
And plenty more,

00:14:40.519 --> 00:14:42.239
you can see the Web BiDi roadmap

00:14:43.079 --> 00:14:46.237
and there are more controls they are building

00:14:46.320 --> 00:14:49.080
into this protocol.

00:14:50.519 --> 00:14:53.920
And it interoperates as I said before,

00:14:54.199 --> 00:14:55.880
you don't need to change your code

00:14:56.360 --> 00:14:59.000
if you're already using Cypress, TestCafe,

00:14:59.279 --> 00:15:01.027
and all other tests.

00:15:01.600 --> 00:15:07.196
It has support by default if your application

00:15:07.279 --> 00:15:12.920
or test already supports Firefox and Chrome and Safari.

00:15:14.120 --> 00:15:15.840
It will switch between itself.

00:15:16.120 --> 00:15:19.237
If the test is running on Chrome and Firefox,

00:15:19.320 --> 00:15:23.079
it will use BiDi by default.

00:15:23.519 --> 00:15:25.880
Firefox uses BiDi by default.

00:15:26.160 --> 00:15:28.200
Chrome uses CDP, but you can set it.

00:15:28.680 --> 00:15:31.756
While if the test runs on Safari,

00:15:31.839 --> 00:15:35.157
it will fall back to the previous protocol

00:15:35.240 --> 00:15:37.039
using WebDriver classic.

00:15:37.399 --> 00:15:41.240
Of course, the monitoring console log doesn't run,

00:15:41.560 --> 00:15:43.880
but it doesn't break your code.

00:15:44.480 --> 00:15:47.080
Your test will still run as usual.

00:15:47.600 --> 00:15:49.917
So, that's the interoperability

00:15:50.000 --> 00:15:54.080
and backward compatibility with this protocol.

00:15:54.440 --> 00:15:57.360
And same goes with the Puppeteer code.

00:15:58.440 --> 00:15:59.959
You can set up the browser.

00:16:00.120 --> 00:16:06.320
All you need is add the protocol: 'webDriverBiDi'.

00:16:07.720 --> 00:16:12.760
And it will use the protocol behind the scene automatically.

00:16:12.959 --> 00:16:16.436
While the same like the monitor log messages,

00:16:16.519 --> 00:16:17.397
you can do the same.

00:16:17.480 --> 00:16:21.996
You can already do this if using Puppeteer with Chrome,

00:16:22.079 --> 00:16:24.676
but now you can use this if using Firefox

00:16:24.759 --> 00:16:28.837
with WebDriver BiDi.

00:16:28.920 --> 00:16:31.920
And that's all, and thank you.