WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:02.000 --> 00:00:03.639
ขอบคุณครับ

00:00:04.319 --> 00:00:08.000
ยังไม่เสร็จ แต่เดี๋ยวขอเซ็ตอัพอีกแป๊บนึงนะครับ

00:00:08.440 --> 00:00:10.200
รอสักครู่ ไม่เป็นไรครับ

00:00:11.000 --> 00:00:11.559
จะได้แล้ว

00:00:13.679 --> 00:00:14.919
ไว้ตรงนี้แล้วกัน

00:00:18.600 --> 00:00:20.080
สวัสดีทุกคนนะครับผม

00:00:20.640 --> 00:00:23.837
ขอต้อนรับเข้าสู่ session What I Use and What I Build

00:00:23.920 --> 00:00:26.080
to Make My Life Easier This Year นะครับ

00:00:26.720 --> 00:00:28.717
ที่ผมตั้งชื่อหัวข้อไว้แบบนี้

00:00:28.800 --> 00:00:32.597
เพราะว่าผมมีหลายๆ เรื่องที่อยากจะมาเล่าให้ฟังมากๆ เลยครับ

00:00:32.680 --> 00:00:35.037
จนเลือกไม่ถูกเลยว่าจะพูดเกี่ยวกับเรื่องอะไร

00:00:35.120 --> 00:00:38.037
ก็เลยกะว่าจะจับเอาเรื่องต่างๆ ที่ผมได้เรียนรู้ในปีนี้

00:00:38.120 --> 00:00:41.677
มามัดรวมกันเป็น session นี้นะครับ

00:00:41.760 --> 00:00:44.120
ฉะนั้นก็อาจจะจับฉ่ายนิดนึงนะครับผม

00:00:45.640 --> 00:00:47.680
ในปีนี้ผมได้ทำหลายๆ โปรเจคครับ

00:00:47.879 --> 00:00:50.116
ทั้งโปรเจคที่ทำงาน โปรเจคงานอดิเรกด้วย

00:00:50.199 --> 00:00:52.757
แล้วก็พบว่าในปีนี้มีโปรเจคหลายตัวมาก

00:00:52.840 --> 00:00:54.397
ที่ถ้าเป็นผมเมื่อปีที่แล้วเนี่ย

00:00:54.480 --> 00:00:56.240
ผมจะทำโปรเจคพวกนี้ไม่ได้เลย

00:00:57.120 --> 00:01:00.276
ซึ่งแน่นอนครับ มันเกิดมาจากการมาของพวก

00:01:00.359 --> 00:01:02.160
generative AI และ LLM เนาะ

00:01:02.399 --> 00:01:05.200
ซึ่งเอาจริงๆ เนี่ย ผมค่อนข้างสองจิตสองใจ

00:01:05.600 --> 00:01:06.637
เกี่ยวกับหัวข้อนี้เหมือนกัน

00:01:06.720 --> 00:01:08.960
เพราะว่าผมรู้สึกว่า talk เกี่ยวกับเรื่อง AI

00:01:09.360 --> 00:01:11.439
ผมว่ามันเยอะจนมันจะเกลื่อนแล้ว

00:01:11.600 --> 00:01:14.237
แต่สำหรับผมน่ะ มัน impact workflow ต่างๆ

00:01:14.320 --> 00:01:14.840
ของผมมาก

00:01:15.159 --> 00:01:16.676
ก็เลยคิดว่าอยากจะให้ session นี้

00:01:16.759 --> 00:01:19.117
เหมือนเป็นการตกตะกอนเรื่องที่ได้เรียนรู้

00:01:19.200 --> 00:01:20.119
ของตัวเองนะครับ

00:01:20.640 --> 00:01:23.800
นอกจากนี้ครับ ปีนี้ผมได้เรียนรู้เครื่องมือหลายๆ ตัว

00:01:24.079 --> 00:01:25.797
ที่มัน impact การทำงานของผมมาก

00:01:25.880 --> 00:01:29.277
ฉะนั้น session นี้ก็เลยอยากจะมาแนะนำเครื่องมือต่างๆ

00:01:29.360 --> 00:01:31.079
ให้ได้รู้จักกันนะครับ

00:01:31.240 --> 00:01:32.517
ขอแนะนำตัวก่อนแล้วกันครับ

00:01:32.600 --> 00:01:34.277
ผมชื่อไทยนะครับ ไทย ปางสกุลยานนท์

00:01:34.360 --> 00:01:36.277
ปัจจุบันทำงานอยู่ที่ Eventpop

00:01:36.360 --> 00:01:39.597
ผมทำ community อยู่ชื่อว่า Creators Garden นะครับ

00:01:39.680 --> 00:01:41.316
ซึ่งเดี๋ยวเราจะพูดกันถึงต่อไปนะครับ

00:01:41.399 --> 00:01:44.437
แล้วก็มีเว็บไซต์อยู่ dtin.th นะครับ

00:01:44.520 --> 00:01:47.716
แล้วก็มี YouTube channel ชื่อ DTINTH นะครับ

00:01:47.799 --> 00:01:50.119
ก็ไป subscribe กันได้นะครับ

00:01:51.280 --> 00:01:52.200
เข้าเรื่องดีกว่าครับ

00:01:52.320 --> 00:01:56.160
สำหรับ session นี้ ผมจะพูดถึงโปรเจคหนึ่งเป็นหลักครับ

00:01:56.320 --> 00:01:59.517
นั่นก็คือเว็บไซต์ของ creatorsgarden.org นะครับ

00:01:59.600 --> 00:02:01.517
ก็จะเป็นเว็บของกลุ่ม Creators Garden

00:02:01.600 --> 00:02:03.600
แปลตรงๆ ก็คือสวนนักสร้างเนี่ยแหละ

00:02:04.079 --> 00:02:06.597
กลุ่มเราเนี่ย จัด event กันหลากหลายรูปแบบมาก

00:02:06.680 --> 00:02:09.799
ไม่ว่าจะเป็นพวก event tech หรือแบบสายศิลปะ

00:02:10.080 --> 00:02:13.559
คณิตศาสตร์ วิทยาศาสตร์ การศึกษา การเงิน

00:02:13.720 --> 00:02:14.876
รวมถึงเรื่องความรักด้วย

00:02:14.959 --> 00:02:17.317
ซึ่งทั้งนี้ก็ขึ้นอยู่กับว่าเจ้าของงานเนี่ย

00:02:17.400 --> 00:02:19.000
อยากจะจัด event แบบไหนเนาะ

00:02:19.360 --> 00:02:26.077
ซึ่งแต่ละ event เนี่ย ก็จะเป็น lead โดยคนละคนกันนะครับ

00:02:26.160 --> 00:02:30.436
จริงๆ เราไม่ได้ fix นะว่าจะเป็น event หมวดไหน

00:02:30.519 --> 00:02:33.197
เราจะมีความ anti-discipline นิดหน่อย

00:02:33.280 --> 00:02:35.837
ก็คือพยายามเอาหลายๆ เรื่องมายำรวมกันนะครับ

00:02:35.920 --> 00:02:38.677
แล้วก็พวกเราไม่ได้มีโครงสร้างหรือแผนงานที่ตายตัวครับ

00:02:38.760 --> 00:02:40.037
ก็คือไม่ได้มีคณะกรรมการ

00:02:40.120 --> 00:02:43.080
หรือไม่ได้มี target อะไรเลยว่าปีนึงจะต้องจัดกี่งาน

00:02:43.480 --> 00:02:46.357
แต่ว่าเวลาที่ใครก็ตามเนี่ย อยากจะจัด event เนี่ย

00:02:46.440 --> 00:02:47.240
เราก็มาคุยกัน

00:02:47.720 --> 00:02:49.757
แล้วก็ถ้าเขาพร้อมที่จะเป็น lead เนี่ย

00:02:49.840 --> 00:02:52.757
เราก็ช่วยให้งานมันเกิดขึ้นมานะครับ

00:02:52.840 --> 00:02:55.557
โดยกลุ่มเราเนี่ย จะมีพวก share resource ต่างๆ นะครับ

00:02:55.640 --> 00:02:59.000
เพื่อให้สามารถจัดงานได้ง่ายขึ้น ไม่ต้องเริ่มจากศูนย์

00:02:59.440 --> 00:03:02.000
ก็คือเรามีเว็บไซต์ มี account Eventpop

00:03:02.159 --> 00:03:04.477
มีเพื่อนๆ ที่มาช่วยเป็น volunteer ในงานนะครับ

00:03:04.560 --> 00:03:08.076
แล้วก็มีพวกเครื่องมืออุปกรณ์ มี platform social

00:03:08.159 --> 00:03:09.159
มีทีมไลฟ์นะครับ

00:03:10.159 --> 00:03:13.197
อย่างรอบนี้เราก็จ้างไลฟ์ True มาช่วยนะครับ

00:03:13.280 --> 00:03:16.037
แต่ว่าพวกงานที่เราไม่ค่อยมีงบ เราก็ไลฟ์กันเองนะครับ

00:03:16.120 --> 00:03:20.197
เรามีทีมอยู่ แล้วก็มี platform social นะครับ

00:03:20.280 --> 00:03:21.799
รวมถึง channel YouTube ครับ

00:03:22.200 --> 00:03:26.716
อย่างหนึ่งที่ผมได้ทำในปีนี้ก็คือ section วิดีโอนะครับ

00:03:26.799 --> 00:03:28.156
บนเว็บไซต์ครับ

00:03:28.239 --> 00:03:30.677
ก็จะเป็นหน้าที่รวบรวมวิดีโอจาก session ต่างๆ

00:03:30.760 --> 00:03:32.156
ที่เราอัปโหลดขึ้น YouTube นะครับ

00:03:32.239 --> 00:03:34.637
แต่ว่าเรามีการจัด filter ต่างๆ

00:03:34.720 --> 00:03:36.597
เพื่อให้สามารถหาวิดีโอของแต่ละงาน

00:03:36.680 --> 00:03:38.757
แล้วก็หาวิดีโอของแต่ละ speaker ได้ด้วย

00:03:38.840 --> 00:03:40.156
ฉะนั้น speaker แต่ละคนเนี่ย

00:03:40.239 --> 00:03:42.197
ก็จะมีเหมือนเป็นหน้าเว็บของตัวเอง

00:03:42.280 --> 00:03:45.479
ที่รวบรวมหัวข้อของ speaker คนนั้นอยู่นะครับ

00:03:46.000 --> 00:03:50.680
แต่ละคลิปนะครับ สิ่งที่ผมอยากให้มันมี

00:03:50.920 --> 00:03:53.317
ก็คืออยากจะให้แต่ละคลิปเนี่ย มีบทถอดคำพูด

00:03:53.400 --> 00:03:55.040
แล้วก็มี subtitle เนาะ

00:03:55.200 --> 00:03:57.880
เพราะว่าบางทีเวลาผมดู YouTube ข้างนอกนะ

00:03:58.000 --> 00:04:00.640
บางทีก็ไม่อยากเปิดเสียง แล้วก็ไม่อยากใส่หูฟัง

00:04:00.760 --> 00:04:03.037
ก็คิดว่าคงจะดีถ้ามันมี subtitle ให้อ่านเนาะ

00:04:03.120 --> 00:04:08.117
ปกติคลิปภาษาอังกฤษเนี่ย มี auto generate caption

00:04:08.200 --> 00:04:09.559
อยู่แล้ว ซึ่งแม่นยำพอสมควร

00:04:09.680 --> 00:04:12.197
แต่พอเป็นภาษาไทยเนี่ย เมื่อก่อน YouTube ไม่มี

00:04:12.280 --> 00:04:12.996
ตอนนี้มีเนาะ

00:04:13.079 --> 00:04:16.757
แต่ว่าสำหรับพวก tech talk ที่มีเนื้อหาที่เป็น technical

00:04:16.840 --> 00:04:19.560
มีคำศัพท์เทคนิคเยอะอ่ะ มันยังไม่แม่นยำพอ

00:04:20.199 --> 00:04:23.160
ฉะนั้นเนี่ย พอเรามีบทถอดคำพูดอยู่บนหน้าเว็บนะ

00:04:23.360 --> 00:04:24.717
เนื้อหามันจะครบถ้วนขึ้น

00:04:24.800 --> 00:04:26.960
แล้วมันก็จะเป็นผลดีต่อ SEO ใช่มั้ย

00:04:27.120 --> 00:04:28.760
search engine optimization เนาะ

00:04:29.120 --> 00:04:32.080
นอกจากบทถอดคำพูดแล้วเนี่ย คือบางวิดีโอก็ยาว

00:04:32.639 --> 00:04:35.517
เราก็จะอยากให้มันมีการแบ่งเนื้อหาเป็น chapter ต่างๆ

00:04:35.600 --> 00:04:35.757
นะครับ

00:04:35.840 --> 00:04:37.116
เพื่อให้ทุกคนสามารถเข้ามาดู

00:04:37.199 --> 00:04:38.676
แล้วก็เห็นภาพรวมเกี่ยวกับเนื้อหา

00:04:38.759 --> 00:04:41.000
ก่อนที่จะเข้าไปดูจริงๆ ได้นะครับ

00:04:41.360 --> 00:04:44.917
ฉะนั้นเนี่ย โปรเจคนี้ก็อาจจะเฉพาะทางนิดนึง

00:04:45.000 --> 00:04:46.757
ก็เชื่อว่าหลายๆ คนที่ฟัง session นี้

00:04:46.840 --> 00:04:50.757
ก็อาจจะไม่ได้สนใจเรื่องการทำ subtitle มากสักเท่าไหร่เนาะ

00:04:50.840 --> 00:04:54.963
แต่สำหรับผมเนี่ย มันเป็นอะไรที่ผมได้เรียนรู้เยอะมากๆ

00:04:55.560 --> 00:04:57.317
ก็เลยอยากจะขอใช้โปรเจคนี้

00:04:57.400 --> 00:04:59.039
เป็นตัวอย่างเพื่อถอดบทเรียนออกมาครับ

00:05:01.199 --> 00:05:04.997
ก่อนหน้านี้ผมก็ทำ subtitle ให้คลิปใน channel

00:05:05.080 --> 00:05:05.797
YouTube ตัวเองนะครับ

00:05:05.880 --> 00:05:06.997
ก็คือทำแบบ manual เลย

00:05:07.080 --> 00:05:09.797
ก็ฟังเอง ถอดคำพูดเอง ทำ subtitle เอง

00:05:09.880 --> 00:05:13.717
เพราะมันมีโปรแกรมฟรีๆ เช่น Amara หรือ Happy Scribe

00:05:13.800 --> 00:05:13.956
เนี่ย

00:05:14.039 --> 00:05:16.717
ก็คือใช้ฟรี support ลิงก์ YouTube ด้วย

00:05:16.800 --> 00:05:18.597
แล้วก็มี keyboard เยอะมาก สะดวกมากๆ

00:05:18.680 --> 00:05:21.600
แต่เวลาทำ subtitle ทีเนี่ย คือแบบเหนื่อยมาก

00:05:22.000 --> 00:05:23.917
จากที่เคยลองทำนะครับ คลิป 10 นาที

00:05:24.000 --> 00:05:25.680
ผมใช้เวลาทำประมาณชั่วโมงนึง

00:05:26.440 --> 00:05:28.956
ฉะนั้นถ้าเรามีวิดีโอคอนเทนต์ 1 ชั่วโมงเนี่ย

00:05:29.039 --> 00:05:30.360
ก็คูณเข้าไปครับ

00:05:30.840 --> 00:05:33.116
ก็อาจจะใช้เวลาประมาณ 6-8 ชั่วโมงครับ

00:05:33.199 --> 00:05:35.077
ซึ่งผมว่าผมก็ใช้คอมพิวเตอร์คล่องแล้วนะ

00:05:35.160 --> 00:05:36.757
พิมพ์ก็คิดว่าก็พิมพ์เร็วใช้ได้

00:05:36.840 --> 00:05:38.400
แต่ก็ยังใช้เวลาเยอะมากๆ อยู่ดี

00:05:38.759 --> 00:05:41.280
แต่ข้อดีก็คือไม่ต้องจ่ายตังค์ใช่มั้ย

00:05:41.880 --> 00:05:44.079
ทำเอง ทำเองก็ฟรีใช่มั้ยฮะ

00:05:44.520 --> 00:05:47.757
แต่พอผมทำคลิปนึงเสร็จเนี่ยคือผมแทบจะ burn out ไปเลย

00:05:47.840 --> 00:05:49.437
แล้วนี่แค่วิดีโอของตัวเองนะครับ

00:05:49.520 --> 00:05:50.797
ถ้าเป็นวิดีโอของคนอื่นเนี่ย

00:05:50.880 --> 00:05:53.116
ผมก็คงแบบไม่ได้มีไฟจะมาทำให้ขนาดนั้น

00:05:53.199 --> 00:05:55.519
ถ้าเกิดมันต้องใช้ effort เยอะขนาดนี้ครับ

00:05:56.120 --> 00:05:59.920
อีกทางเลือกนึงก็คือเราอาจจะจ้างมืออาชีพมาทำ subtitle

00:06:00.080 --> 00:06:00.396
ให้เรานะครับ

00:06:00.479 --> 00:06:02.037
ซึ่งเท่าที่ผมเคยลองหาดูเนี่ย

00:06:02.120 --> 00:06:03.477
ก็จะคิด rate เป็นนาทีครับ

00:06:03.560 --> 00:06:04.880
ซึ่งถ้าเราตีเป็นชั่วโมงเนี่ย

00:06:05.720 --> 00:06:08.836
เท่าที่ผมลองหาดูนะก็ราคาก็เป็นหลักพันนะครับ

00:06:08.919 --> 00:06:12.199
ซึ่งจากที่ผมเคยลองทำ subtitle ด้วยตัวเองก็คิดว่า

00:06:12.400 --> 00:06:14.197
เออ มันสมเหตุสมผลและราคาแบบเนี้ย

00:06:14.280 --> 00:06:17.000
เพราะผมทำ subtitle เองทีคือเลือดตาแทบกระเด็น

00:06:17.440 --> 00:06:20.440
แถมถ้าเป็นการทำ subtitle มืออาชีพนะฮะ นี่ครับ

00:06:20.599 --> 00:06:21.556
มีกฎเต็มไปหมดเลย

00:06:21.639 --> 00:06:23.997
มี guideline เรื่องการทำ subtitle เต็มไปหมดเลย

00:06:24.080 --> 00:06:25.159
ว่าจะเอาอะไรไว้ตรงไหน

00:06:25.400 --> 00:06:27.396
เขียนสะกดตัวเลขยังไงอะไรพวกเนี้ย

00:06:27.479 --> 00:06:30.880
อันนี้ที่โชว์ให้ดูนะครับเป็น guideline ของ Netflix นะครับ

00:06:31.440 --> 00:06:34.077
โอเค ซึ่งงาน meetup ของเราเนี่ย

00:06:34.160 --> 00:06:36.279
ส่วนมากก็จะมีคอนเทนต์ประมาณ 2-3 ชั่วโมง

00:06:36.720 --> 00:06:37.836
งบก็ไม่น่าจะพอ

00:06:37.919 --> 00:06:39.680
หรือเอาจริงๆ น่ะ คือเราจัดงานฟรี

00:06:40.319 --> 00:06:41.477
งาน meetup ส่วนมากเนี่ย

00:06:41.560 --> 00:06:43.277
ฉะนั้นเราไม่มีงบอะไรเลยด้วยซ้ำนะครับ

00:06:43.360 --> 00:06:45.480
แล้วเอาจริงๆ เราก็ไม่ได้ต้องการ subtitle

00:06:45.720 --> 00:06:48.396
ระดับ professional แบบระดับ Netflix ขนาดนั้นนะครับ

00:06:48.479 --> 00:06:50.236
แค่มีบทถอดคำพูดไว้ให้อ่านได้เนี่ย

00:06:50.319 --> 00:06:52.480
ผมว่าก็ดีเกินพอแล้วนะครับ

00:06:52.880 --> 00:06:55.516
ฉะนั้นเนี่ยในช่วงปี 2 ปีที่ผ่านมา

00:06:55.599 --> 00:06:57.516
ผมเลยศึกษาเกี่ยวกับเครื่องมือต่างๆ

00:06:57.599 --> 00:06:59.116
ที่จะมาช่วยกระบวนการตรงนี้ครับ

00:06:59.199 --> 00:07:01.919
แต่เดี๋ยวผมจะขอพักโปรเจคนี้ไว้ก่อน

00:07:02.039 --> 00:07:06.437
ผมจะขอสลับไปพูดเกี่ยวกับเรื่อง large language model

00:07:06.520 --> 00:07:07.199
ก่อนนะครับ

00:07:07.639 --> 00:07:10.800
ก็ปัจจุบันเนี่ยตัวที่ได้รับความนิยมสูงสุดก็นี่เนาะ

00:07:11.120 --> 00:07:13.037
ChatGPT Claude Gemini เนาะ

00:07:13.120 --> 00:07:14.717
ก็จะมีคนมาถามผมบ่อยๆ ว่า

00:07:14.800 --> 00:07:17.639
ถ้าเลือกได้แค่ตัวเดียวเนี่ย จะจ่ายเงินให้ตัวไหนดี

00:07:17.759 --> 00:07:20.079
เพราะแต่ละตัวเนี่ย 20 เหรียญต่อเดือนทั้งนั้นเลยใช่มั้ย

00:07:20.199 --> 00:07:22.319
ถ้าอยากใช้ทั้ง 3 ตัวก็ 60 ใช่มั้ย

00:07:22.720 --> 00:07:23.520
ไม่รู้จะคุ้มมั้ย

00:07:23.879 --> 00:07:25.796
ดังนั้นถ้าให้เลือกเนี่ยจะจ่ายตัวไหนดี

00:07:25.879 --> 00:07:27.717
ซึ่งผมให้คำตอบไม่ได้เลยครับ

00:07:27.800 --> 00:07:31.197
เพราะว่าแต่ละตัวเนี่ยมีข้อดีข้อเสียต่างกันหมดเลย

00:07:31.280 --> 00:07:32.757
ฉะนั้นเนี่ยผมเลยต้องใช้ทุกตัว

00:07:32.840 --> 00:07:33.758
แต่ขณะเดียวกันเนี่ย

00:07:34.240 --> 00:07:37.919
ผมก็ไม่ได้จ่ายเงิน 20 เหรียญต่อเดือนให้แอปไหนซักแอปเลย

00:07:38.639 --> 00:07:39.597
ทำยังไงครับ

00:07:39.680 --> 00:07:42.757
ก็คือพวกแอป ChatGPT Claude Gemini เนี่ย

00:07:42.840 --> 00:07:44.796
ผมมองว่ามันเป็น เค้าเรียกว่าเป็น service

00:07:44.879 --> 00:07:47.158
เป็นบริการที่ออกแบบมาให้คนทั่วไป

00:07:47.360 --> 00:07:50.317
หรือคนที่ไม่ได้มีความรู้ด้านเทคนิคเนี่ยสามารถใช้งานได้ง่าย

00:07:50.400 --> 00:07:51.556
ซึ่ง service พวกเนี้ย

00:07:51.639 --> 00:07:54.277
ถ้าอยากจะใช้เวอร์ชันที่แบบฉลาดๆ ฟีเจอร์เยอะๆ เนี่ย

00:07:54.360 --> 00:07:57.479
ก็ใช่มั้ย เหมาจ่ายรายเดือน 20 เหรียญนะครับ

00:07:57.840 --> 00:08:01.800
แต่บริษัทพวกเนี้ยก็ได้พัฒนา model ที่เปิดให้นักพัฒนา

00:08:02.039 --> 00:08:04.076
หรือคนที่สามารถใช้งานมันเป็นเนี่ย

00:08:04.159 --> 00:08:06.239
ก็สามารถเข้าไปใช้งานมันได้ตรงๆ ด้วย

00:08:06.800 --> 00:08:10.236
โดย model พวกเนี้ยก็จะคิดราคาตามปริมาณที่ใช้งานจริงนะครับ

00:08:10.319 --> 00:08:11.640
เรียกว่าคิดเป็น token น่ะ

00:08:11.800 --> 00:08:15.199
ซึ่งถ้าใช้น้อยก็จ่ายน้อย ใช้เยอะก็จ่ายเยอะครับ

00:08:15.720 --> 00:08:18.960
ซึ่งเวลาผมเอาไอ้เนี่ยไปแนะนำก็จะมีคนบอกว่า

00:08:19.960 --> 00:08:21.437
กลัวว่าถ้าใช้เยอะเกินแล้วมันจะ

00:08:21.520 --> 00:08:24.320
สุดท้ายมันจะเสียตังค์เยอะกว่าเหมาจ่าย

00:08:24.520 --> 00:08:25.997
ซึ่งจากประสบการณ์ของผมนะครับ

00:08:26.080 --> 00:08:27.997
คือผมใช้เองคนเดียวทั้ง 3 เจ้านะ

00:08:28.080 --> 00:08:30.116
อันนี้ผมเอา billing ของตัวเองมาให้ดูนะครับ

00:08:30.199 --> 00:08:33.037
ก็ไม่เคยใช้รวมกันเกิน 50 เหรียญเลย

00:08:33.120 --> 00:08:37.080
แล้วส่วนมากอ่ะผมจะใช้ไม่ถึงเดือนละ 20 เหรียญด้วยซ้ำนะครับ

00:08:37.760 --> 00:08:40.080
ฉะนั้นเนี่ยก็สามารถไปลองเล่นกันดูได้นะครับ

00:08:40.880 --> 00:08:42.396
บางเจ้าก็จะเป็นแบบเติมเงิน

00:08:42.479 --> 00:08:44.400
ก็คือไม่ต้องกลัวว่าจะโดนบิลช็อกนะ

00:08:44.640 --> 00:08:47.637
แล้วก็บางเจ้าเนี่ยก็เป็นเก็บตังค์รายเดือนนะครับ

00:08:47.720 --> 00:08:50.080
แต่เราตั้ง budget alert ได้นะครับ

00:08:50.519 --> 00:08:52.237
แล้วเราสามารถใช้งาน model พวกเนี้ย

00:08:52.320 --> 00:08:53.680
โดยไม่ต้องเขียนโค้ดเลยด้วย

00:08:53.800 --> 00:08:56.719
ก็คือเข้าไปใช้งานที่ console ของแต่ละเจ้านะครับ

00:08:57.080 --> 00:08:58.560
อย่างในรูปด้านซ้ายนะครับ

00:08:59.440 --> 00:09:00.760
อันเนี้ยด้านซ้ายคือ ChatGPT

00:09:01.000 --> 00:09:03.277
ส่วนด้านขวาคือ OpenAI platform ครับ

00:09:03.360 --> 00:09:04.957
จะเห็นว่าการใช้งานเนี่ยคล้ายๆ กันเลย

00:09:05.040 --> 00:09:06.280
ก็คือเป็นการแชทใช่มั้ย

00:09:06.760 --> 00:09:08.277
แล้วใน OpenAI platform เนี่ย

00:09:08.360 --> 00:09:11.159
จะเห็นว่ามันมี setting ต่างๆ ให้เลือกเยอะขึ้นด้วยนะครับ

00:09:11.440 --> 00:09:12.557
อันนี้ก็คล้ายๆ กันครับ

00:09:12.640 --> 00:09:14.600
ด้านซ้าย Claude ด้านขวา Anthropic

00:09:14.800 --> 00:09:18.800
แล้วก็อันนี้ด้านซ้าย Gemini ด้านขวา Google AI Studio นะครับ

00:09:19.480 --> 00:09:20.677
ก็อย่างที่บอกไปนะครับ

00:09:20.760 --> 00:09:23.679
แต่ละ model เนี่ยจะมีจุดเด่นจุดด้อยแตกต่างกันออกไป

00:09:23.839 --> 00:09:25.077
ฉะนั้นถ้าเราอยากจะรู้นะครับ

00:09:25.160 --> 00:09:28.040
เราต้องทำไง ต้องทดสอบถูกมั้ยครับ ต้องทดลอง

00:09:28.800 --> 00:09:30.680
โอเค ตัวอย่างนี้นะครับ

00:09:30.880 --> 00:09:34.480
ผมต้องการจะทดสอบความสามารถด้านภาษาไทยของ model แต่ละตัว

00:09:34.800 --> 00:09:38.237
ผมเลยเอาเรื่องเล่าภาษาอังกฤษเรื่องนึงเกี่ยวกับ yak shaving

00:09:38.320 --> 00:09:38.477
นะครับ

00:09:38.560 --> 00:09:41.316
เอามาแปะแล้วก็เขียนในคำสั่งใน prompt อ่ะ

00:09:41.399 --> 00:09:44.200
ว่าช่วยเล่าเรื่องนี้เป็นภาษาไทยให้หน่อยนะครับ

00:09:44.440 --> 00:09:45.996
เสร็จแล้วผมก็ลองเทียบผลลัพธ์ดู

00:09:46.079 --> 00:09:48.040
อันนี้ผมจะลองเริ่มจากตัวฟรีก่อนนะ

00:09:48.680 --> 00:09:51.717
ผมพบว่าทั้ง Claude กับ ChatGPT เนี่ย

00:09:51.800 --> 00:09:53.357
แปลชื่อเรื่องได้อย่างถูกต้อง

00:09:53.440 --> 00:09:56.597
ก็คือ yak shaving ก็แปลว่าการโกนขนจามรีเนาะ

00:09:56.680 --> 00:10:00.799
แต่ Gemini เนี่ยดันแปลเป็นการเลื่อยขนยัก

00:10:01.399 --> 00:10:03.756
ซึ่งเอาจริงๆ เนี่ย Gemini เนี่ย

00:10:03.839 --> 00:10:04.957
มันแปลมาหลายแบบมาก

00:10:05.040 --> 00:10:06.117
ไม่ว่าผมจะลองกี่ครั้ง

00:10:06.200 --> 00:10:08.237
เหมือนมันก็ไม่รู้ซักทีว่า yak เนี่ย

00:10:08.320 --> 00:10:10.920
ในภาษาอังกฤษมันคือจามรีนะครับ

00:10:11.279 --> 00:10:13.157
ฉะนั้นเนี่ยพอผมเอาตัวฟรีมาเทียบกันเนี่ย

00:10:13.240 --> 00:10:14.797
แล้วเห็นผลลัพธ์ออกมาแบบนี้แล้วคือแบบ

00:10:14.880 --> 00:10:17.559
ใครมันจะไปกล้าจ่ายตังค์ให้ Gemini Advanced ใช่มั้ย

00:10:18.399 --> 00:10:20.800
วันก่อนผมลองคุยกับ Gemini ดูนะครับว่า

00:10:20.959 --> 00:10:23.040
Can you speak Thai? พูดภาษาไทยได้มั้ย

00:10:23.480 --> 00:10:25.839
คิดว่าจะ มันตอบว่าอะไรครับ

00:10:26.519 --> 00:10:28.239
มันตอบว่า อันยองฮาเซโย

00:10:29.800 --> 00:10:33.639
แต่ตอบเป็นภาษาไทยนะ เราก็บอกว่าพูดภาษาไทยไม่ได้

00:10:34.760 --> 00:10:38.040
แต่ตอบเป็นภาษาไทยผมก็ไม่รู้ทำไมมันมึนขนาดนี้

00:10:38.800 --> 00:10:41.196
ฉะนั้นเนี่ย โอเค ไม่เป็นไร

00:10:41.279 --> 00:10:44.160
เมื่อกี้อาจจะไม่แฟร์เพราะว่าเราเอาตัวฟรีมาเทียบกันเนาะ

00:10:44.320 --> 00:10:47.277
ไหน เราลองจ่ายตังค์แล้วใช้ตัวที่ดีที่สุดของแต่ละเจ้า

00:10:47.360 --> 00:10:48.560
ดูบ้างนะครับ

00:10:48.720 --> 00:10:50.196
ผมก็ลองทำแบบเดิมครับ

00:10:50.279 --> 00:10:52.756
รอบนี้ไปใช้คอนโซลแต่ละตัวแทนเนาะ

00:10:52.839 --> 00:10:55.917
รอบนี้ทั้ง 3 model แปลถูกต้องแล้วนะครับ

00:10:56.000 --> 00:10:58.756
เราก็ต้องเอาผลลัพธ์มากางดูนะครับว่าตัวไหนแปลออกมา

00:10:58.839 --> 00:10:59.640
ได้ดีที่สุด

00:10:59.760 --> 00:11:02.917
ซึ่งผมพบว่ารอบนี้ gpt-4 กับ Claude เนี่ย

00:11:03.000 --> 00:11:05.320
มันจะแปลเรื่องราวแบบตรงตัวมากๆ

00:11:05.839 --> 00:11:08.077
แต่ Gemini เนี่ย ผมว่ามันน่าสนใจกว่าตัวอื่น

00:11:08.160 --> 00:11:11.677
เพราะว่าผมลองอ่านแล้วรู้สึกเหมือนมันพยายามทำให้

00:11:11.760 --> 00:11:13.880
เนื้อเรื่องมันเข้ากับบริบทคนไทยด้วย

00:11:14.040 --> 00:11:18.037
อย่างเช่น wax the car เนี่ย ก็ลงแว็กซ์รถ

00:11:18.120 --> 00:11:19.480
Gemini ก็เปลี่ยนเป็นล้างรถ

00:11:20.200 --> 00:11:22.077
Home Depot มันก็เปลี่ยนเป็น HomePro

00:11:22.160 --> 00:11:24.600
หรือสะพานแทบแมนซี มันก็กลายเป็นสะพานพระราม 8

00:11:24.880 --> 00:11:25.680
ใช่มั้ย

00:11:27.079 --> 00:11:30.436
อีกเรื่องนึงที่ผมพบคือภาษาอังกฤษเนี่ย

00:11:30.519 --> 00:11:33.677
มันเป็นภาษาที่แทบทุกประโยคมันจะต้องมี subject

00:11:33.760 --> 00:11:34.400
มีประธาน

00:11:34.560 --> 00:11:36.597
ฉะนั้นเนี่ย เวลาพอแปลเป็นภาษาไทยตรงๆ

00:11:36.680 --> 00:11:41.117
มันจะทื่อๆ แบบ "ฉันสามารถยืม EasyPass

00:11:41.200 --> 00:11:41.920
ของเพื่อนบ้านได้"

00:11:42.079 --> 00:11:45.357
มันจะทื่อนิดนึง แต่ Gemini เนี่ย ตัดคำว่าฉันออกไป

00:11:45.440 --> 00:11:47.797
มันทำให้ฟังดูเป็นธรรมชาติมากขึ้นนะครับ

00:11:47.880 --> 00:11:50.117
แถมรู้ด้วยว่าบ๊อบเนี่ย น่าจะเป็นผู้ชาย

00:11:50.200 --> 00:11:51.519
ก็เลยเรียกว่าลุงบ๊อบ

00:11:51.680 --> 00:11:52.837
เอาจริงๆ ผมลองหลายรอบ

00:11:52.920 --> 00:11:55.879
บางทีมันก็เปลี่ยนชื่อลุงบ๊อบกลายเป็นลุงสมศักดิ์ให้เลย

00:11:56.560 --> 00:11:58.119
หรือบางทีมันก็แปลตรงตัวนะ

00:11:58.240 --> 00:12:01.680
แต่ว่า feature เนี้ย เป็น feature ที่ผมไม่เคยเห็น

00:12:01.920 --> 00:12:03.797
Claude หรือ GPT ทำให้นะครับ

00:12:03.880 --> 00:12:06.917
ฉะนั้น สำหรับโจทย์ช่วยเล่าเรื่องเป็นภาษาไทยให้หน่อยเนี่ย

00:12:07.000 --> 00:12:08.440
ผมก็พบว่าโมเดลเสียเงินเนี่ย

00:12:09.000 --> 00:12:12.159
ตัว Gemini Pro เนี่ย จะชนะขาดไปเลยนะครับ

00:12:12.839 --> 00:12:15.436
ฉะนั้นเนี่ย เรื่องที่ผมอยากฝากไว้ให้ทุกคนลองก็คือ

00:12:15.519 --> 00:12:18.236
เดี๋ยวนี้มันง่ายมากๆ ที่เราจะไปลองเล่นกับ AI model

00:12:18.320 --> 00:12:18.876
ต่างๆ เนาะ

00:12:18.959 --> 00:12:22.397
ตอนนี้แต่ละเจ้าก็ต่างแข่งกันทำให้ของตัวเอง

00:12:22.480 --> 00:12:24.480
ใช้งานง่ายมากที่สุด ราคาถูกที่สุด

00:12:24.720 --> 00:12:26.599
ก็แนะนำให้ลองกันเยอะๆ นะครับ

00:12:28.279 --> 00:12:29.876
ถ้าเราใช้มันผ่านคอนโซลนะ

00:12:29.959 --> 00:12:31.397
ก็เราไม่ต้องจ่าย flat rate ละ

00:12:31.480 --> 00:12:33.040
ก็ไปจ่ายตามจริงเนาะ

00:12:33.320 --> 00:12:36.517
แล้วก็สามารถตั้งค่าปรับแต่งอะไรต่างๆ ได้เยอะกว่าด้วย

00:12:36.600 --> 00:12:38.637
แถมอีก feature นึงครับ ผมชอบมากๆ

00:12:38.720 --> 00:12:41.000
คือเราสามารถแก้คำตอบของโมเดลได้ด้วยเนาะ

00:12:41.120 --> 00:12:43.436
อย่างเช่นอันนี้ครับ ผมใช้ Google AI Studio เนาะ

00:12:43.519 --> 00:12:46.199
ช่วยแปลข้อความจากภาษาอังกฤษมาเป็นภาษาไทยให้หน่อย

00:12:46.880 --> 00:12:48.037
ผมว่ามันก็แปลดีอยู่นะ

00:12:48.120 --> 00:12:50.717
แต่ผมไม่ชอบที่มันแปลคำว่า endpoint เป็นจุดปลาย

00:12:50.800 --> 00:12:52.196
เพราะรู้สึกไม่มีใครใช้กันอ่ะ

00:12:52.279 --> 00:12:54.597
คือแบบถ้าจะต่อ IO token เนี่ย

00:12:54.680 --> 00:12:55.637
เราต้องไปเลือกจุดปลายไหน

00:12:55.720 --> 00:12:57.159
ก็ไม่มีใครพูดแบบนั้นกันใช่มั้ย

00:12:58.320 --> 00:13:00.436
ซึ่งถ้าพวก Gemini หรือ ChatGPT เนี่ย

00:13:00.519 --> 00:13:03.600
ปกติเราไม่สามารถแก้ไขข้อความที่โมเดลมันตอบมาได้

00:13:03.800 --> 00:13:07.277
เราก็ต้องไปแก้ prompt ของเราหรือไม่ก็คุยกับโมเดลต่อว่า

00:13:07.360 --> 00:13:08.999
เฮ้ย ช่วยไม่แปลคำนี้หน่อยได้มั้ย

00:13:09.440 --> 00:13:11.756
ไม่งั้นมันก็จะใช้คำว่าจุดปลาย จุดปลาย จุดปลาย

00:13:11.839 --> 00:13:12.717
ไปเรื่อยๆ นะครับ

00:13:12.800 --> 00:13:14.357
แต่ Google AI Studio เนี่ย

00:13:14.440 --> 00:13:16.996
เรา edit คำตอบของโมเดลได้เลย

00:13:17.079 --> 00:13:19.319
ผมก็จัดการแก้เป็น endpoint แล้วก็มากด rerun

00:13:19.519 --> 00:13:20.037
ข้างล่างนะครับ

00:13:20.120 --> 00:13:23.837
มันก็เลิกแปล endpoint เป็นจุดปลายให้ละ

00:13:23.920 --> 00:13:27.357
ฉะนั้น เราสามารถควบคุมการทำงานของโมเดล

00:13:27.440 --> 00:13:29.800
โดยการแก้ไขคำตอบมันได้ด้วยนะครับ

00:13:31.480 --> 00:13:34.597
แต่ว่าพวก service สำเร็จรูปเนี่ย ไม่ใช่ว่ามันไม่ดีนะ

00:13:34.680 --> 00:13:37.879
ผมว่ามันก็มีข้อดีมากๆ อย่างนึง

00:13:38.600 --> 00:13:39.996
คือมัน integrate อะไรต่างๆ

00:13:40.079 --> 00:13:41.717
ไว้ให้เราใช้งานได้สะดวกนะครับ

00:13:41.800 --> 00:13:43.717
อย่างเช่นอันนี้ครับ ผมชอบมากเลยก็คือ

00:13:43.800 --> 00:13:46.477
เวลาผมเห็นคลิป YouTube แต่ไม่มีเวลาเข้าไปดูอ่ะ

00:13:46.560 --> 00:13:48.280
ผมก็ก๊อปลิงก์ YouTube มาแปะ

00:13:49.040 --> 00:13:51.116
แล้วก็บอกให้ Gemini สรุปให้หน่อย

00:13:51.199 --> 00:13:53.397
อันนี้ Google AI Studio ทำไม่ได้นะครับ

00:13:53.480 --> 00:13:55.157
ต้องเป็นตัวแอป Gemini นะครับ

00:13:55.240 --> 00:13:57.996
ซึ่งเวิร์กมาก โดยเฉพาะพวกคลิปที่มันแบบมีความ clickbait

00:13:58.199 --> 00:14:00.759
หรือพวกคลิปยาวๆ แต่ไม่เข้าเนื้อหาซักทีอ่ะ

00:14:01.320 --> 00:14:05.399
ก็จะโยนให้ Gemini ช่วยสรุปให้ก่อนนะครับ

00:14:07.079 --> 00:14:10.316
แล้วค่อยตัดสินใจนะครับว่าจะดูดีมั้ย

00:14:10.399 --> 00:14:12.797
ซึ่งสะดวกมาก แล้วที่ผมชอบคือ

00:14:12.880 --> 00:14:14.756
มันดีทั้ง 2 ฝ่ายนะ

00:14:14.839 --> 00:14:17.237
ก็คือพอเราให้ Gemini สรุปให้เนี่ย

00:14:17.320 --> 00:14:19.159
มันจะไปนับวิวใน YouTube ให้ด้วย

00:14:20.600 --> 00:14:22.876
ซึ่งถ้าใครยังไม่เคยลองกับคอนโซลพวกนี้เลยนะครับ

00:14:22.959 --> 00:14:25.037
ผมแนะนำให้ลอง Google AI Studio ดูก่อนเนาะ

00:14:25.120 --> 00:14:26.876
เพราะมันฟรี สามารถเริ่มใช้งานได้เลย

00:14:26.959 --> 00:14:28.360
โดยไม่ต้องผูกบัตรนะครับ

00:14:29.120 --> 00:14:32.957
โอเค เดี๋ยวผมจะพาไปดูอีกโปรเจคนึงที่ผมเคยอยากทำมานาน

00:14:33.120 --> 00:14:35.717
แล้วเพิ่งมาได้ทำปีนี้นะครับ

00:14:35.800 --> 00:14:37.876
คือเดี๋ยวนี้โทรศัพท์ iPhone Android นะ

00:14:37.959 --> 00:14:40.239
เราสามารถใช้ฟังก์ชันสแกนเอกสารได้แล้วใช่มั้ย

00:14:40.399 --> 00:14:42.000
มันก็จะได้เป็นไฟล์ PDF นะฮะ

00:14:42.360 --> 00:14:44.436
แล้วสมัยก่อนเนี่ย ผมเคยอยากทำระบบที่แบบ

00:14:44.519 --> 00:14:47.316
เราถ่ายรูปใบเสร็จอ่ะ แล้วให้มันเซฟใส่ database ให้

00:14:47.399 --> 00:14:50.440
เราจะได้คำนวณรายรับรายจ่ายเราได้ง่ายขึ้นนะครับ

00:14:50.959 --> 00:14:52.597
ก่อนหน้านี้ผมเคยลองพยายามทำเนาะ

00:14:52.680 --> 00:14:55.196
โดยใช้ Google Cloud Vision API นะครับ

00:14:55.279 --> 00:14:58.800
ซึ่งหน้าที่ของมันเนี่ย คือมันจะแกะข้อความออกจากไฟล์รูป

00:14:59.240 --> 00:15:01.237
ก็คือเรียกว่าเป็นการทำ OCR นะครับ

00:15:01.320 --> 00:15:03.277
แล้วเราจะได้เป็นไฟล์ JSON แบบนี้

00:15:03.360 --> 00:15:05.676
ที่บอกว่าตัวอักษรอะไรอยู่ตรงไหนบ้าง

00:15:05.759 --> 00:15:07.277
ซึ่งผลลัพธ์มันแม่นมากๆ นะครับ

00:15:07.360 --> 00:15:10.277
แต่การจะเอาข้อมูลนี้ไปใช้ก็คือ ค่อนข้าง challenge

00:15:10.360 --> 00:15:10.637
นะครับ

00:15:10.720 --> 00:15:13.360
เพราะว่าเราต้อง match ว่าข้อความไหนตรงกับตัวเลขไหน

00:15:13.519 --> 00:15:16.237
แถมบางทีเนี่ย มันดันจับเอาบล็อกหลายๆ บล็อกอ่ะ

00:15:16.320 --> 00:15:17.560
มารวมกันเป็นบล็อกเดียวด้วย

00:15:17.720 --> 00:15:20.116
ฉะนั้นสำหรับผมเนี่ย มันแทบจะเป็นไปไม่ได้เลย

00:15:20.199 --> 00:15:23.157
ที่จะเขียนโค้ดให้มันประมวลผลได้ทุกกรณีนะครับ

00:15:23.240 --> 00:15:25.880
ผมก็เลยพับโปรเจคนี้ไว้ก่อนนะครับ

00:15:26.560 --> 00:15:29.876
โอเค ทีนี้ พอปีนี้ ผมมารู้จัก Google AI Studio นะ

00:15:29.959 --> 00:15:32.037
ก็ได้ลองเอาโปรเจคนี้กลับมาทำใหม่

00:15:32.120 --> 00:15:36.876
ก็คือเขียน prompt อัปโหลด PDF ไฟล์ขึ้นไปนะครับ

00:15:36.959 --> 00:15:38.240
แล้วก็กดปุ่ม run นะครับ

00:15:38.399 --> 00:15:40.077
แล้วก็จะได้ผลลัพธ์หน้าตาประมาณนี้

00:15:40.160 --> 00:15:42.077
คือมันทำเป็นตารางให้เลยนะครับ

00:15:42.160 --> 00:15:44.719
ผมก๊อปไปใส่ใน Google Sheets ได้เลยนะครับ

00:15:45.040 --> 00:15:47.917
หรือนอกจากนี้ มีตัวเลือก JSON mode ด้วย

00:15:48.000 --> 00:15:51.360
พอเรากดเราก็จะได้ data เป็น JSON ออกมานะครับ

00:15:51.920 --> 00:15:53.797
แล้วถ้าเรากด get code ข้างบนนะครับ

00:15:53.880 --> 00:15:55.756
เราก็จะได้โค้ดที่เราเอาไปใช้ integrate

00:15:55.839 --> 00:15:57.920
ต่อกับระบบของเราได้นะครับ

00:15:58.319 --> 00:16:02.037
ฉะนั้นเนี่ย ตอนนี้ผมก็สามารถดึงข้อมูลออกจากไฟล์ใบเสร็จ

00:16:02.120 --> 00:16:03.037
ที่สแกนออกมาได้แล้วนะครับ

00:16:03.120 --> 00:16:05.159
โดยที่ผมยังไม่ได้เขียนโค้ดอะไรเลยนะครับ

00:16:06.480 --> 00:16:08.996
แล้วเวลาเอาข้อมูลจากโมเดลนี้ไปใช้

00:16:09.079 --> 00:16:10.477
ก็อย่าลืมตรวจสอบความถูกต้องนะครับ

00:16:10.560 --> 00:16:12.639
อันนี้ผมลองตรวจสอบตัวเลขละ ถูกต้องหมด

00:16:12.759 --> 00:16:13.959
แต่ว่าจะเห็นว่าด้านบนเนี่ย

00:16:14.240 --> 00:16:16.277
ชื่อร้านอาหารมันก็สะกดผิดเนาะ

00:16:16.360 --> 00:16:21.520
หรือข้าวไข่ข้นมันก็กลายเป็นข้าวไข่ขันอะไรแบบนี้

00:16:22.120 --> 00:16:24.797
ครับก็จะเห็นว่าพอเราใช้คอนโซลพวกนี้เป็นเนี่ย

00:16:24.880 --> 00:16:27.120
มันทำให้เราทำอะไรได้เยอะขึ้นเลยจากงาน

00:16:27.399 --> 00:16:28.879
ลดงาน manual ผมเยอะมาก

00:16:29.120 --> 00:16:32.157
แต่คอนโซลพวกเนี้ยบางทีมันก็ใช้งานไม่ค่อยสะดวกครับ

00:16:32.240 --> 00:16:33.996
ฉะนั้นยิ่งถ้าใช้งานบนมือถือเนี่ย

00:16:34.079 --> 00:16:37.316
คอนโซลบางตัวเนี่ยคือมันจะบอกเลยว่าเราไม่ support มือถือ

00:16:37.399 --> 00:16:39.480
ให้ไปเปิดใน desktop อ่ะ

00:16:40.519 --> 00:16:43.559
ก็จะมาแนะนำเครื่องมือตัวนึงนะครับที่ผมใช้บ่อยมาก

00:16:44.279 --> 00:16:46.440
ชื่อว่า Open Web UI นะครับ

00:16:46.680 --> 00:16:49.440
หน้าที่ของมันคือเหมือนเป็น front-end สำหรับ API

00:16:49.800 --> 00:16:51.157
ของ OpenAI นะครับ

00:16:51.240 --> 00:16:53.680
คือเราสามารถใช้งานมันแทน ChatGPT ได้

00:16:53.839 --> 00:16:56.236
feature ทั้งหมดเนี่ยอาจจะไม่เหมือนกันเนาะ

00:16:56.319 --> 00:16:58.236
แต่ว่าอย่างน้อยเราก็ไม่ต้องจ่าย 20 เหรียญต่อเดือน

00:16:58.319 --> 00:16:59.357
ให้ ChatGPT Pro

00:16:59.440 --> 00:17:02.116
เราก็ไปเอา API key ของ ChatGPT มาเสียบ

00:17:02.199 --> 00:17:05.037
แล้วเราก็ใช้ตัวนี้แทนนะครับ

00:17:05.120 --> 00:17:06.839
แอปเนี้ยเป็น open source

00:17:06.959 --> 00:17:09.480
แล้วก็มี image Docker พร้อมใช้นะครับ

00:17:09.600 --> 00:17:10.797
ก็คือเป็นแบบ self-host

00:17:10.880 --> 00:17:11.637
คือถ้าเราอยากจะใช้เนี่ย

00:17:11.720 --> 00:17:13.996
เราก็ต้องเอา image Docker มา deploy เองนะครับ

00:17:14.079 --> 00:17:18.040
หรือจะ clone โค้ดมาแล้วก็ run เองเลยก็ได้เหมือนกันนะครับ

00:17:18.559 --> 00:17:20.197
โดยตัว Open Web UI เนี่ย

00:17:20.280 --> 00:17:22.236
มันจะสามารถทำงานกับ service ต่างๆ

00:17:22.319 --> 00:17:26.277
ที่มี API endpoint หน้าตาเหมือนของ OpenAI ได้นะครับ

00:17:26.360 --> 00:17:28.317
ฉะนั้นถ้าเราอยากจะใช้งานกับ model อื่นๆ

00:17:28.400 --> 00:17:30.277
อย่าง Claude หรือ Gemini ล่ะทำยังไงนะครับ

00:17:30.360 --> 00:17:32.596
ก็จะมี software ตัวนึงชื่อ LiteLLM นะครับ

00:17:32.679 --> 00:17:35.277
ตัวเนี้ยเป็น proxy ที่ implement API

00:17:35.360 --> 00:17:38.480
ที่มันจุดปลายต่างๆ มันเหมือนของ OpenAI อ่ะครับ

00:17:41.480 --> 00:17:44.437
แต่ว่าตัวมันเองเนี่ยสามารถคุยกับ API

00:17:44.520 --> 00:17:45.557
ของหลายๆ เจ้าได้นะครับ

00:17:45.640 --> 00:17:47.397
ซึ่งจริงๆ มันคุยได้เป็นสิบๆ ตัวเลย

00:17:47.480 --> 00:17:49.640
รวมถึง Anthropic กับ Gemini ด้วยนะครับ

00:17:49.919 --> 00:17:51.517
ซึ่งขั้นตอนการ set up เนี่ย

00:17:51.600 --> 00:17:53.517
อันนี้ผมเขียนไว้ในเว็บไซต์ผมแล้วนะครับ

00:17:53.600 --> 00:17:54.956
เดี๋ยวท้ายสไลด์เนี่ย

00:17:55.039 --> 00:17:56.797
หรือว่าจริงๆ มันจะมีลิงก์เล็กๆ อยู่ตรงเนี้ย

00:17:56.880 --> 00:17:59.560
ก็จะรวบรวมลิงก์ทั้งหมดไว้นะครับ

00:18:00.240 --> 00:18:02.076
ก็พอ set ไว้แล้วนะครับ

00:18:02.159 --> 00:18:05.079
เราจะสามารถใช้โปรแกรมเนี้ยเพื่อคุยกับทั้ง 3 model

00:18:05.280 --> 00:18:08.040
หรือจะคุยกับทั้ง 3 model พร้อมๆ กันเลยก็ได้นะครับ

00:18:08.720 --> 00:18:10.797
ครับแล้วตัว Open Web UI เนี่ย

00:18:10.880 --> 00:18:12.640
รองรับการทำงานหลาย user ด้วย

00:18:12.919 --> 00:18:17.237
ก็คือเราสามารถ set ไว้ให้ใช้งานกันแบบภายใน

00:18:17.320 --> 00:18:18.636
แชร์กันใช้ในองค์กรอ่ะ

00:18:18.719 --> 00:18:21.117
โดยที่ไม่ต้องจ่ายค่า AI เป็นรายหัวได้ด้วยนะครับ

00:18:21.200 --> 00:18:23.039
อืมก็สะดวกมาก

00:18:23.240 --> 00:18:24.677
นอกจาก Open Web UI เนี่ย

00:18:24.760 --> 00:18:27.677
จริงๆ ยังมีเครื่องมือ open source แบบเต็มโลก

00:18:27.760 --> 00:18:30.720
open source เลยอ่ะที่เราสามารถลองไป deploy ใช้เองได้

00:18:30.880 --> 00:18:32.476
ก็แนะนำให้ลองหาเล่นกันดูนะครับ

00:18:32.559 --> 00:18:34.517
เพราะมันจะช่วยให้เราได้ฝึก skill infrastructure

00:18:34.600 --> 00:18:36.237
แล้วก็ skill DevOps ด้วยนะครับ

00:18:36.320 --> 00:18:37.877
แล้วเราก็จะได้ deploy เครื่องมือ

00:18:37.960 --> 00:18:40.757
ที่เราได้ใช้ในชีวิตประจำวันจริงๆ ด้วยนะครับ

00:18:40.840 --> 00:18:44.479
ก็สามารถลองไปหาดูใน GitHub หรือ Reddit ได้นะครับ

00:18:44.760 --> 00:18:47.277
จริงๆ มีเครื่องมือ self-host อีกตัวนึงนะครับ

00:18:47.360 --> 00:18:50.239
ที่อยากจะแนะนำให้รู้จักกันชื่อว่า Grist นะครับ

00:18:50.400 --> 00:18:52.801
ถ้าให้ผมเทียบก็คงคล้ายๆ แบบ Airtable

00:18:52.919 --> 00:18:54.437
กับ Google Sheets ผสมกันนะครับ

00:18:54.520 --> 00:18:56.679
เป็น spreadsheet ผสมกับ database

00:18:57.159 --> 00:18:58.797
แต่ว่ามันเป็นแบบที่เรา host เองได้

00:18:58.880 --> 00:19:02.119
ฉะนั้นก็จะไม่มีข้อจำกัดว่าห้ามเกิน 1,000 row

00:19:02.360 --> 00:19:02.919
อะไรแบบเนี้ย

00:19:03.280 --> 00:19:05.440
แล้วก็มี API ให้ใช้งานด้วยนะครับ

00:19:06.120 --> 00:19:08.277
อย่างโปรเจค Scan by Set ก่อนหน้าเนี้ย

00:19:08.360 --> 00:19:10.600
ผมก็ทำ script ไว้ว่าพอเราอัปโหลดไฟล์

00:19:11.080 --> 00:19:12.757
ขึ้นโฟลเดอร์นึงใน Google Drive

00:19:12.840 --> 00:19:14.797
ก็ให้ script เนี้ยไปดูดไฟล์ PDF มา

00:19:14.880 --> 00:19:17.160
แล้วส่งไปให้โมเดล Gemini ให้จัดการสรุป

00:19:17.400 --> 00:19:19.637
แล้วก็ส่งผลลัพธ์ไปไว้บน Grist นะครับ

00:19:19.720 --> 00:19:21.797
ฉะนั้นเนี่ย ผมพบว่า API ของมันเนี่ย

00:19:21.880 --> 00:19:24.357
ใช้งานง่ายกว่าทั้ง Airtable และ Google Sheets เลย

00:19:24.440 --> 00:19:26.880
ฉะนั้นเนี่ยตอนไปเที่ยวรอบล่าสุดเนี่ย

00:19:27.440 --> 00:19:29.437
ผมก็ใช้วิธีนี้แหละก็คือ Scan by Set

00:19:29.520 --> 00:19:30.476
อัปขึ้น Google Drive

00:19:30.559 --> 00:19:31.716
เสร็จแล้วพอ run script เนี่ย

00:19:31.799 --> 00:19:33.360
ข้อมูลต่างๆ ก็จะมาโผล่ใน Grist

00:19:33.600 --> 00:19:35.197
โดยที่เราแทบไม่ต้องพิมพ์เองเลย

00:19:35.280 --> 00:19:36.800
ก็แค่ตรวจทานนะครับ

00:19:37.320 --> 00:19:40.999
ก็ลองไปเล่นกันดูได้นะครับชื่อ Grist G R I S T นะครับ

00:19:41.679 --> 00:19:45.637
โอเค ก็หลังจากที่ผมได้ลองเล่น model หลายๆ ตัวเนี่ย

00:19:45.720 --> 00:19:47.997
ในหัวข้อถัดไปที่จะถึงนี้นะครับ

00:19:48.080 --> 00:19:50.240
ผมก็จะมาพูดเกี่ยวกับว่า

00:19:50.640 --> 00:19:53.720
ความคิดเห็นเกี่ยวกับ model ทั้ง 3 ตัวเป็นยังไงบ้างนะครับ

00:19:53.880 --> 00:19:55.836
จากที่ได้น่าจะเห็นไปก่อนหน้าเนี้ย

00:19:55.919 --> 00:19:58.560
คือ Gemini เนี่ยผมว่ามันค่อนข้างเก่งด้านภาษามากๆ

00:19:58.919 --> 00:20:01.197
ถ้าเป็นพวกงานแปลหรือเกลาคำเนี่ย

00:20:01.280 --> 00:20:03.359
ผมก็จะลอง Gemini เป็นอันดับแรกเนาะ

00:20:03.559 --> 00:20:04.956
ส่วนถ้าเป็นเรื่องเกี่ยวกับโค้ดเนี่ย

00:20:05.039 --> 00:20:06.919
ผมจะชอบผลลัพธ์ของ Claude มากที่สุด

00:20:07.280 --> 00:20:09.836
ผมว่าผลลัพธ์มันค่อนข้างดีกว่า ChatGPT นะ

00:20:09.919 --> 00:20:12.120
แต่ว่า result เนี่ยมันคือตอนนี้นะ

00:20:12.360 --> 00:20:14.479
ในอนาคตอาจจะ outdated นะครับ

00:20:15.039 --> 00:20:17.956
ซึ่งผมใช้ VS Code extension ตัวนึงนะครับ

00:20:18.039 --> 00:20:18.997
ชื่อ continue.dev

00:20:19.080 --> 00:20:20.877
ตอนเนี้ยผมใช้แบบใช้เยอะมากๆ เลย

00:20:20.960 --> 00:20:22.317
extension ตัวเนี้ยใช้ฟรี

00:20:22.400 --> 00:20:24.237
ก็คือไม่ต้องจ่ายค่า subscription

00:20:24.320 --> 00:20:26.397
แค่เอา API key ของ Claude เนี่ย

00:20:26.480 --> 00:20:28.157
มาเสียบเข้า extension เนี้ย

00:20:28.240 --> 00:20:30.476
แล้วเราก็จ่ายแค่ค่า model นะครับ

00:20:30.559 --> 00:20:32.320
มันก็ช่วยงานผมหลายๆ อย่างมาก

00:20:32.760 --> 00:20:34.437
อย่างเช่นเวลาผมทำโปรเจกต์อ่ะฮะ

00:20:34.520 --> 00:20:36.000
โดยเฉพาะเวลาผม prototype นะ

00:20:36.240 --> 00:20:38.757
บางทีอ่ะผมจะอยากทำให้มัน work ก่อน

00:20:38.840 --> 00:20:41.880
ฉะนั้นผมจะเขียนทุกอย่างรวมกันเข้าไปในไฟล์เดียวเลย

00:20:42.360 --> 00:20:43.877
เพราะว่าเวลาเราแก้โค้ดเนี่ย

00:20:43.960 --> 00:20:45.999
เราจะได้ไม่ต้องสลับไฟล์ไปมาใช่มั้ย

00:20:46.480 --> 00:20:48.680
ทุกอย่างมันอยู่ในไฟล์เดียวเลยก็ดูแลง่าย

00:20:48.799 --> 00:20:51.157
แต่พอโปรเจกต์มันเริ่มใหญ่ครับแล้วโค้ดเริ่มเยอะ

00:20:51.240 --> 00:20:54.559
ผมก็เริ่มงงเพราะว่าทุกอย่างมันพันกันเป็นสปาเกตตีไปเลย

00:20:55.799 --> 00:20:57.237
ผมก็ใช้ continue เนี่ยแหละ

00:20:57.320 --> 00:21:00.037
บอกว่าช่วยแกะโค้ดที่เกี่ยวกับระบบผลักศัพท์

00:21:00.120 --> 00:21:01.880
ออกไปอีกไฟล์นึงให้หน่อย

00:21:02.919 --> 00:21:05.997
มันก็จัดให้แล้วมันก็สร้างไฟล์นี้ให้ครับ

00:21:06.080 --> 00:21:08.517
แล้วมันก็จัดการแก้โค้ดก่อนหน้าเนี้ย

00:21:08.600 --> 00:21:11.239
ให้มันไปเรียกฟังก์ชันในไฟล์นั้นนะครับ

00:21:13.200 --> 00:21:16.000
แต่บางทีเนี่ยเราต้อง brief มันเยอะเหมือนกันนะ

00:21:16.279 --> 00:21:18.239
คือบางทีเราต้อง brief มันละเอียด

00:21:18.400 --> 00:21:20.517
เพราะว่าเอาจริงๆ มันก็อ่านใจเราไม่ได้

00:21:20.600 --> 00:21:21.877
ถึงแม้ว่าเราจะคิดว่าแบบ

00:21:21.960 --> 00:21:25.437
เออมันใกล้เคียงกับสิ่งที่อ่านใจเราได้มากขนาดนั้น

00:21:25.520 --> 00:21:27.759
แต่ว่าบางทีเราก็ต้อง brief มันดีๆ

00:21:28.559 --> 00:21:30.677
ผมพบว่าวิธีเนี้ยเวลาผม refactor อ่ะ

00:21:30.760 --> 00:21:32.199
ถึงผมจะต้องเขียน prompt ยาวนะ

00:21:32.320 --> 00:21:35.000
แต่ว่าอย่างน้อยอ่ะผมสามารถโฟกัสกับภาพรวมได้

00:21:35.120 --> 00:21:38.196
แล้วรายละเอียดปลีกย่อยเนี่ยก็ให้ Claude ดูแลให้

00:21:38.279 --> 00:21:39.357
ทำให้เวลาผม refactor อ่ะ

00:21:39.440 --> 00:21:41.879
ผมตาลายน้อยลงมากเลยนะครับ

00:21:42.559 --> 00:21:44.880
อีกท่านึงที่ผมชอบใช้ก็คือ

00:21:45.240 --> 00:21:48.797
บางทีผมก็ส่งโค้ดจำนวนนึงแล้วก็ส่งให้มันดูเป็นตัวอย่าง

00:21:48.880 --> 00:21:51.880
แล้วก็บอกว่าช่วยเขียน development guide ให้หน่อย

00:21:52.880 --> 00:21:56.237
ถ้ามีคนมาเข้าโปรเจกต์เราเนี่ย

00:21:56.320 --> 00:21:58.279
เค้าจะได้รู้อะไรอยู่ที่ไหน

00:21:58.679 --> 00:21:59.956
ควรจัดโครงสร้างโค้ดยังไง

00:22:00.039 --> 00:22:01.397
เขียน test ยังไงอะไรแบบเนี้ย

00:22:01.480 --> 00:22:03.480
เราก็จะได้เป็นไฟล์ readme มาใช่มั้ยครับ

00:22:04.159 --> 00:22:05.596
เสร็จแล้วไฟล์ readme เนี่ยแหละ

00:22:05.679 --> 00:22:08.279
ผมก็เอามาใช้ reference ว่า

00:22:08.679 --> 00:22:10.157
เวลาขอให้มันเขียนโค้ดเพิ่มเนี่ย

00:22:10.240 --> 00:22:13.559
ก็บอกว่าให้ไปดูไฟล์ readme ซะว่าจะเขียนโค้ดยังไง

00:22:14.640 --> 00:22:19.879
พอเขียนโค้ดเสร็จเราให้มันช่วยเขียน test ให้ด้วยนะครับ

00:22:20.559 --> 00:22:23.117
โอเค ฉะนั้นเนี่ยถ้าเป็นเรื่องโค้ดเนี่ย

00:22:23.200 --> 00:22:24.476
ผมจะยกให้ Claude นะครับ

00:22:24.559 --> 00:22:26.196
นอกจากนี้ครับผมว่า Claude เนี่ย

00:22:26.279 --> 00:22:29.357
จะตอบคำถามต่างๆ ได้ค่อนข้างตรงประเด็นมากที่สุดนะครับ

00:22:29.440 --> 00:22:32.237
เทียบกับ Gemini คือบางทีมันจะมึนๆ บ้าง

00:22:32.320 --> 00:22:33.760
ตอบหลงประเด็นบ้างนะครับ

00:22:34.440 --> 00:22:35.880
แต่เท่าที่ผมลองกับเพื่อนนะ

00:22:36.559 --> 00:22:38.557
โดยเฉพาะแบบเวลาปรึกษาปัญหาต่างๆ

00:22:38.640 --> 00:22:40.757
ปัญหาชีวิตปัญหาลับปัญหาการงานอะไรพวกเนี้ย

00:22:40.840 --> 00:22:43.240
บางทีผมก็แบบเออผมไม่รู้เหมือนกันจะแนะนำยังไง

00:22:43.559 --> 00:22:46.199
มาลองใช้ Gemini ให้คำตอบดู

00:22:46.320 --> 00:22:47.596
ผมพบว่า Gemini เนี่ย

00:22:47.679 --> 00:22:51.117
ค่อนข้างแสดงความใส่ใจต่อความรู้สึกได้มากกว่าตัวอื่นๆ

00:22:51.200 --> 00:22:52.559
เผลอๆ เก่งกว่าผมด้วยซ้ำ

00:22:53.320 --> 00:22:54.836
ในขณะที่คำตอบของ Claude เนี่ย

00:22:54.919 --> 00:22:56.196
จะค่อนข้างเน้นใช้ตรรกะ

00:22:56.279 --> 00:23:01.200
หรือว่าเป็นเจ้า logic มากกว่านะครับ

00:23:04.480 --> 00:23:06.637
ก็จะมีอีกการทดลองนึงที่ผมเคยทำนะครับ

00:23:06.720 --> 00:23:10.280
คือผมเคยส่ง model พวกเนี้ยไปสอบ O-NET ม. 6 นะครับ

00:23:10.480 --> 00:23:13.917
ก็พบว่า Claude เนี่ยได้คะแนนเยอะที่สุดนะครับ

00:23:14.000 --> 00:23:17.920
ฉะนั้นเนี่ยถ้าเรื่องแบบความ

00:23:18.600 --> 00:23:20.280
คือผมไม่รู้ว่าจะเรียกว่าฉลาดดีมั้ย

00:23:20.480 --> 00:23:22.117
เพราะว่ามันก็เป็นแค่ language model เนาะ

00:23:22.200 --> 00:23:27.076
แต่ Claude เนี่ยมันสามารถแสดงให้เรารู้สึกว่า

00:23:27.159 --> 00:23:30.040
มันฉลาดได้มากกว่าเจ้าอื่นเท่าที่ผมลองนะ

00:23:30.880 --> 00:23:34.080
แต่ก็ไม่ใช่ว่า Claude มันจะไม่มีปัญหาใช่มั้ยครับ

00:23:34.320 --> 00:23:37.797
คือปัญหาคือเวลาคนใช้กันเยอะๆ เนี่ย

00:23:37.880 --> 00:23:39.677
บางที API มันจะล่มครับ

00:23:39.760 --> 00:23:42.040
แล้วมันจะ error กลับมาบอกว่า overload

00:23:42.240 --> 00:23:43.599
ทำให้ใช้งานไม่ได้ครับ

00:23:44.039 --> 00:23:46.557
ส่วน Gemini ก็มีเรื่องน่ารำคาญของมันเหมือนกันครับ

00:23:46.640 --> 00:23:49.359
คือมันจะมี content filter ที่ค่อนข้าง aggressive เนาะ

00:23:49.559 --> 00:23:51.196
ถ้าบางทีอ่ะมันตอบๆ อยู่

00:23:51.279 --> 00:23:54.037
แล้วถ้าเกิดไป trigger safety filter มันเมื่อไหร่เนี่ย

00:23:54.120 --> 00:23:56.157
คำตอบจะถูกบล็อกทันทีนะครับ

00:23:56.240 --> 00:23:57.317
ส่วน Claude ก็เช่นกัน

00:23:57.400 --> 00:24:00.437
บางทีมันก็จะปฏิเสธที่จะทำงานบางอย่างนะครับ

00:24:00.520 --> 00:24:02.836
อย่างผมเนี่ยเคยเอาเนื้อเพลงภาษาอังกฤษมาแปะ

00:24:02.919 --> 00:24:05.877
แล้วก็บอกว่าช่วยเขียนเป็นคำอ่านภาษาไทยให้หน่อย

00:24:05.960 --> 00:24:07.918
คือแบบช่วยทำเป็นคาราโอเกะให้หน่อยอ่ะ

00:24:08.267 --> 00:24:10.476
Gemini ครับ ไม่ตอบอะไรมาเลย

00:24:10.559 --> 00:24:11.600
คือน่าจะโดนบล็อก

00:24:12.159 --> 00:24:14.877
Claude บอกว่าทำไม่ได้

00:24:14.960 --> 00:24:17.159
เพราะว่าเนื้อเพลงเนี่ยติดลิขสิทธิ์

00:24:17.679 --> 00:24:23.239
ส่วน GPT ครับ ไม่ปฏิเสธทำให้เลยนะครับ

00:24:23.919 --> 00:24:25.157
โอเค กลับมาที่หน้านี้ครับ

00:24:25.240 --> 00:24:28.316
จะเห็นว่า GPT-4 ด้านซ้ายมันยังโล่งอยู่เลย

00:24:28.399 --> 00:24:29.757
คือผมก็ไม่รู้จะว่ายังไงเหมือนกัน

00:24:29.840 --> 00:24:34.037
เพราะว่าผมก็ยังหาไม่เจอว่ามันมีจุดไหนที่มันโดดเด่น

00:24:34.120 --> 00:24:35.960
กว่าเจ้าอื่นนะครับ ในเชิงความสามารถนะ

00:24:36.080 --> 00:24:38.757
คือเอาจริงๆ เนี่ย ผมมองว่า Gemini เนี่ยมันก็เก่งภาษา

00:24:38.840 --> 00:24:39.840
Claude ก็เก่งโค้ด

00:24:39.960 --> 00:24:44.877
แต่ GPT-4 เนี่ย ก็หาจุดเด่นด้านโมเดลผมยังหาไม่เจอแล้วกัน

00:24:44.960 --> 00:24:46.076
ไม่ใช่ว่ามันไม่มีข้อดีนะ

00:24:46.159 --> 00:24:48.240
ผมคิดว่าทุกอย่างมันมีข้อดี แค่ต้องหาให้เจอ

00:24:49.840 --> 00:24:52.719
อย่างน้อยมันไม่ปฏิเสธงานเท่าตัวอื่น

00:24:53.159 --> 00:24:56.517
และด้วยความที่มันอยู่มานาน API มันตอนนี้ผมรู้สึกว่า

00:24:56.600 --> 00:24:58.080
มันเสถียรมากที่สุดเลย

00:24:58.559 --> 00:25:00.719
หลังๆ แทบจะไม่เจอมันล่มเลยนะครับ

00:25:01.279 --> 00:25:02.877
ส่วนพูดถึงสไตล์การเขียนเนาะ

00:25:02.960 --> 00:25:04.759
โมเดลแต่ละตัวก็จะมีเอกลักษณ์

00:25:05.039 --> 00:25:09.200
ซึ่งบางคนเนี่ยก็จะบอกว่าแต่ละโมเดลมีนิสัยเฉพาะของมัน

00:25:09.320 --> 00:25:11.716
อย่าง Gemini เนี่ยผมรู้สึกว่ามันใช้ภาษาเก่งดีนะ

00:25:11.799 --> 00:25:14.640
แต่บางทีมันชอบใช้ศัพท์แบบเว่อร์วังอลังการไปอะครับ

00:25:14.799 --> 00:25:18.637
บางทีผมให้มันช่วยเขียน description ให้วิดีโอนะครับ

00:25:18.720 --> 00:25:21.557
แล้วบางทีเนี่ยมันก็จะ generate description มาแบบว่า

00:25:21.640 --> 00:25:25.316
พบกับ speaker สุดครูนำเสนอเทคนิคสุดล้ำคุณประโยชน์

00:25:25.399 --> 00:25:28.880
อะไรต่างๆ น่าทึ่งมาก ไม่ดูไม่ได้แล้วแก อะไรแบบเนี้ย

00:25:29.720 --> 00:25:31.596
ผมต้องเขียนคำสั่งเพื่อเบรกมัน

00:25:31.679 --> 00:25:33.237
บอกว่าแบบ เฮ้ย ใจร่มๆ หน่อย

00:25:33.320 --> 00:25:35.877
ไม่ต้องทำเหมือนว่าทุกอย่างมันน่าตื่นเต้นขนาดนั้น

00:25:35.960 --> 00:25:37.080
ก็ได้นะครับ

00:25:37.760 --> 00:25:38.840
ส่วน Claude นะครับ

00:25:39.679 --> 00:25:40.677
ผมเวลาคุยกับมันอะ

00:25:40.760 --> 00:25:43.677
ผมรู้สึกว่าเหมือนคุยกับเพื่อนที่เค้าจริงจังตลอดเวลา

00:25:43.760 --> 00:25:46.200
เวลาผมพิมพ์ไป 1 ประโยค มันจะตอบมา 1 เรียงความ

00:25:47.320 --> 00:25:50.797
ครับ ส่วน GPT-4 ก็ผมว่ามันก็ balance ดีนะครับ

00:25:50.880 --> 00:25:51.757
ก็ประมาณนี้แล้วกัน

00:25:51.840 --> 00:25:54.560
ก็อันนี้คือความเห็นของผมเกี่ยวกับ 3 โมเดลนี้

00:25:55.720 --> 00:25:57.797
จะมีอีกโมเดลนึงที่อยากจะพูดถึงครับ

00:25:57.880 --> 00:26:00.039
แต่ผมเพิ่งได้ลองมันมาไม่ถึงสัปดาห์เลย

00:26:00.880 --> 00:26:02.596
ก็เลยไม่สามารถออกความเห็นได้เยอะนะครับ

00:26:02.679 --> 00:26:07.596
ชื่อว่า Llama 2 online ของ Perplexity นะครับ

00:26:07.679 --> 00:26:10.797
จุดเด่นของมันคือด้วยความที่มันเป็นโมเดลแบบ online เนี่ย

00:26:10.880 --> 00:26:13.399
เราสามารถถามคำถามเกี่ยวกับเหตุการณ์ปัจจุบันได้

00:26:14.799 --> 00:26:16.517
อ่านใน feed แล้วเห็นประเด็นดราม่า

00:26:16.600 --> 00:26:18.797
หรือเพื่อนพูดถึงเทรนด์อะไรต่างๆ ที่มันดราม่า

00:26:18.880 --> 00:26:20.120
แล้วผมไม่ได้ตามข่าวเนี่ย

00:26:20.440 --> 00:26:23.357
ผมถาม Perplexity ก็มีโอกาสที่จะได้คำตอบ

00:26:23.440 --> 00:26:24.237
ที่ทันเหตุการณ์ครับ

00:26:24.320 --> 00:26:25.558
แล้วจากที่ผมทดสอบดูอะ

00:26:25.679 --> 00:26:28.196
ข่าวบางข่าวเนี่ย หรือบางเรื่องเนี่ย

00:26:28.279 --> 00:26:30.279
ข่าวมันยังออกมาไม่ถึงครึ่งวันด้วยซ้ำ

00:26:30.480 --> 00:26:32.037
มันก็เอามาตอบได้นะครับ

00:26:32.120 --> 00:26:34.437
เอาเป็นว่าผมขอไม่ยกตัวอย่างดราม่าแล้วกัน

00:26:34.520 --> 00:26:37.360
แต่ว่าระหว่างที่ผมปั่นสไลด์อยู่เนี่ย ผมก็ทดลองดู

00:26:37.559 --> 00:26:39.719
พบว่ามีแค่ Perplexity ตัวเดียวเท่านั้น

00:26:40.080 --> 00:26:43.920
ที่สามารถตอบได้ว่าหมูเด้งเป็นฮิปโปนะครับ

00:26:44.600 --> 00:26:46.037
แล้วถ้ามันเด้งเป็นหมูแดงด้วย

00:26:46.120 --> 00:26:48.640
ตัวอื่นจะไม่รู้ว่าหมูเด้งเนี่ย

00:26:49.360 --> 00:26:51.200
มันคิดว่าเราสะกดคำว่าหมูแดงผิด

00:26:53.360 --> 00:26:54.319
ครับ จ้า

00:26:55.159 --> 00:26:58.000
โอเค ก็จะเห็นว่าโมเดลพวกนี้

00:26:58.360 --> 00:27:00.716
มีการพัฒนาปรับปรุงอยู่เรื่อยๆ นะครับ

00:27:00.799 --> 00:27:02.836
ฉะนั้นก็อยากจะให้ช่วยกันทดลอง

00:27:02.919 --> 00:27:04.237
แล้วก็เปรียบเทียบกันเยอะๆ นะครับ

00:27:04.320 --> 00:27:05.680
แล้วก็มาแชร์ use case กัน

00:27:06.320 --> 00:27:08.520
อาจจะไม่ต้องทำเป็นงานวิจัยจริงจังก็ได้เนาะ

00:27:08.760 --> 00:27:11.162
อย่างก่อนหน้านี้ผมไปกินไหตี่เหลากับเพื่อนๆ

00:27:11.720 --> 00:27:14.196
แล้วจู่ๆ ก็สงสัยกันว่า AI โมเดลเนี่ย

00:27:14.279 --> 00:27:18.639
มันตัวไหนเนี่ย ปรุงน้ำจิ้มได้อร่อยสุด

00:27:18.840 --> 00:27:20.360
ผมก็ถามแต่ละตัวเลย

00:27:20.520 --> 00:27:24.200
ขอ 1 สูตร แต่ GPT-4 มันให้มา 2 ก็เลยทำ 2

00:27:24.559 --> 00:27:27.596
โอเค ก็ลองทำแล้วก็ลองชิมแล้วก็รีวิวกันดู

00:27:27.679 --> 00:27:30.159
พอชิมเสร็จเพื่อนผมกลับไปบ้านเค้าไปกดซื้อ Claude

00:27:30.919 --> 00:27:32.440
โปร 20 เหรียญ

00:27:35.480 --> 00:27:38.716
ครับ ฉะนั้นเนี่ย แค่นี้ก็เป็น research ได้แล้วเนาะ

00:27:38.799 --> 00:27:40.120
เราลองได้หลายอย่างมากเลยเนาะ

00:27:40.440 --> 00:27:44.277
โอเคครับ กลับมาที่โปรเจค subtitle แบบอัตโนมัติดีกว่า

00:27:44.360 --> 00:27:46.877
คือมันก็จะมีบริษัท AI หลายๆ เจ้าใช่มั้ย

00:27:46.960 --> 00:27:49.637
ที่มีบริการ speech-to-text ให้ใช้นะครับ

00:27:49.720 --> 00:27:53.678
และแต่ละเจ้าเนี่ย ก็ต่างพูดเหมือนกันว่าของเราดีที่สุด

00:27:54.039 --> 00:27:55.599
ทำไงดี test ครับ

00:27:56.519 --> 00:27:59.239
ใช่ครับ test research นะครับ

00:27:59.440 --> 00:28:02.316
ผมใช้ 3 นาทีแรกของคลิปวิดีโอนี้นะครับ

00:28:02.399 --> 00:28:03.956
เป็นชุดข้อมูลทดสอบนะครับ

00:28:04.039 --> 00:28:06.157
เสร็จแล้วผมก็โยนไปให้โมเดลแต่ละตัวนะครับ

00:28:06.240 --> 00:28:07.836
โยนไปประมาณ 20 กว่า model เนี่ย

00:28:07.919 --> 00:28:09.640
แล้วก็จดคำตอบที่ได้มานะครับ

00:28:10.360 --> 00:28:11.757
แล้วก็ส่วน ground truth เนี่ย

00:28:11.840 --> 00:28:14.879
คือเราก็แกะคำพูดเอานะครับ

00:28:15.240 --> 00:28:17.357
ฉะนั้นเนี่ย เราเริ่มจากเครื่องมือทั่วๆ ไปก่อนนะ

00:28:17.440 --> 00:28:19.679
เดี๋ยวเนี่ยเวลาเราไลฟ์ขึ้น Facebook นะ

00:28:20.440 --> 00:28:22.959
Facebook มันทำ subtitle ภาษาไทยให้ด้วยใช่มั้ย

00:28:23.559 --> 00:28:25.200
แต่สิ่งหนึ่งที่ผมสังเกตคือ

00:28:25.360 --> 00:28:27.596
เวลาโมเดล speech-to-text เนี่ย

00:28:27.679 --> 00:28:29.639
มันสามารถฟังคำภาษาไทยได้

00:28:29.960 --> 00:28:33.836
มันจะเสียความสามารถในการสะกดคำภาษาต่างประเทศนะครับ

00:28:33.919 --> 00:28:35.677
สะกดคำภาษาอื่นๆ ไม่ค่อยได้เลย

00:28:35.760 --> 00:28:39.160
เช่น metrics เนี่ย มันก็สะกดเป็น matrix

00:28:39.600 --> 00:28:42.480
หรือ LCP เนี่ย ก็สะกดเป็นคำอ่านแบบเนี่ย

00:28:43.480 --> 00:28:45.836
หรือคำว่า largest contentful paint เนี่ย

00:28:45.919 --> 00:28:49.436
มันก็ข้ามไปเลย ไม่เขียนอะไรให้เลยนะครับ

00:28:49.519 --> 00:28:51.359
ฉะนั้นก็ยังใช้ไม่ได้นะครับ

00:28:51.519 --> 00:28:54.997
YouTube เนี่ย เมื่อก่อนมันไม่มี auto caption ภาษาไทย

00:28:55.080 --> 00:28:58.640
ตอนนี้มันมีแล้ว แต่ว่าอาการหนักพอๆ กันนะครับ

00:28:59.159 --> 00:29:02.209
โอเคนอกจากนี้นะครับ cloud ยักษ์ใหญ่ 3 เจ้าเนาะ

00:29:02.292 --> 00:29:04.517
Azure, AWS, Google Cloud เนี่ย

00:29:04.600 --> 00:29:07.797
ต่างมี speech-to-text ของตัวเองกันหมดนะครับ

00:29:07.880 --> 00:29:10.637
แต่ก็ไม่มีโมเดลตัวไหนที่สามารถสะกดคำว่า

00:29:10.720 --> 00:29:14.037
largest contentful paint ได้ถูกต้องเลยสักตัวเดียวนะครับ

00:29:14.120 --> 00:29:16.677
ก็พอเข้าใจได้เพราะว่ามันเป็นศัพท์เทคนิค

00:29:16.760 --> 00:29:18.520
ที่เฉพาะทางมากๆ นะครับ

00:29:19.080 --> 00:29:21.716
ส่วนตัวเลขด้านขวานะครับ เรียกว่าเป็น word error rate

00:29:21.799 --> 00:29:21.917
นะครับ

00:29:22.000 --> 00:29:24.520
ก็คือมีคำผิดอยู่กี่เปอร์เซ็นต์นะครับ ซึ่งยิ่งน้อยยิ่งดี

00:29:24.799 --> 00:29:27.596
อย่าง 20% เนี่ย แปลว่าทุกๆ 5 คำเนี่ย

00:29:27.679 --> 00:29:29.757
ก็จะมีคำผิด 1 คำนะครับ

00:29:29.840 --> 00:29:31.277
ซึ่งถ้าผิดเยอะขนาดเนี่ย

00:29:31.360 --> 00:29:34.200
ก็ยังเอาไปใช้งานจริงไม่ค่อยได้เท่าไหร่นะครับ

00:29:34.799 --> 00:29:37.596
ในปี 2022 เนี่ย OpenAI เนี่ย

00:29:37.679 --> 00:29:39.997
ปล่อย model ตัวนึงชื่อว่า Whisper นะครับ

00:29:40.080 --> 00:29:45.397
คือก่อนหน้านี้ พวก model speech-to-text เจ้าต่างๆ เนี่ย

00:29:45.480 --> 00:29:47.357
เหมือนแต่ละภาษามันก็จะ train แยกกัน

00:29:47.440 --> 00:29:49.596
แต่ Whisper เนี่ย ต่างจากเจ้าอื่นคือ

00:29:49.679 --> 00:29:52.000
เค้า train ทุกๆ ภาษาพร้อมๆ กัน

00:29:52.279 --> 00:29:55.237
แล้วได้มาเป็นไฟล์ model ไฟล์เดียว แถมเป็น open source ด้วย

00:29:55.320 --> 00:29:58.120
คือเราโหลดมารันเองในเครื่องเราได้เลยไม่ต้องจ่ายตังค์นะครับ

00:29:59.000 --> 00:30:01.399
ซึ่งพอทดลองนะครับ ก็พบว่าดีขึ้นมาก

00:30:02.000 --> 00:30:04.960
สะกด largest contentful paint เนี่ย เกือบถูก

00:30:05.519 --> 00:30:07.200
word error rate เนี่ย เหลือ 7%

00:30:07.840 --> 00:30:11.680
ซึ่งเป็นตัวแรกที่น้อยกว่า 10% เท่าที่ผมทดลองมานะ

00:30:13.080 --> 00:30:14.836
ผมก็เลยลองเอามาทำคลิปดูนะครับ

00:30:14.919 --> 00:30:19.479
ก็พบว่าคลิป 1 ชม. เนี่ย จะใช้เวลาประมาณ 4-6 ชม. นะครับ

00:30:21.200 --> 00:30:24.157
เพราะว่า word error rate 7% เนี่ย

00:30:24.240 --> 00:30:27.076
มันก็จะยังมีคำผิดแทบทุกบรรทัดเลย

00:30:27.159 --> 00:30:28.476
แปลว่าเวลาผมรีวิวอ่ะ

00:30:28.559 --> 00:30:30.440
ผมก็ต้อง pause แทบทุกบรรทัดเพื่อแก้

00:30:30.840 --> 00:30:33.800
สุดท้ายมันก็เลยไม่ได้ประหยัดเวลาขนาดนั้นนะครับ

00:30:34.240 --> 00:30:36.316
ต่อมาผมก็มาเจอ docs ของ OpenAI ครับ

00:30:36.399 --> 00:30:38.797
ที่บอกว่า ถ้าอยากให้คุณภาพดีขึ้นเนี่ย

00:30:38.880 --> 00:30:41.560
ก็ลองเอา output ของ speech-to-text

00:30:42.039 --> 00:30:45.119
เอามา post-process ด้วย large language model ดูสิ

00:30:45.720 --> 00:30:46.476
ผมเลยลองดูครับ

00:30:46.559 --> 00:30:48.037
อันนี้เป็นอีก talk นึงนะครับ

00:30:48.120 --> 00:30:50.320
อันนี้ผมทำ subtitle ให้

00:30:50.480 --> 00:30:54.640
เพื่อที่จะลองทดสอบ approach นี้ดู

00:30:55.279 --> 00:30:56.757
ปัญหาตัวนึงของ Whisper เนี่ย

00:30:56.840 --> 00:31:00.160
คือมันไม่ค่อย consistent นะ

00:31:00.440 --> 00:31:02.157
บางทีมันก็สะกดคำฝรั่งได้

00:31:02.240 --> 00:31:04.556
แต่จู่ๆ บางทีมันก็สะกดไม่ได้ซะงั้น

00:31:04.639 --> 00:31:06.357
อย่างอันนี้ มันสะกดทุกคำเป็นภาษาไทย

00:31:06.440 --> 00:31:07.639
จนอ่านไม่รู้เรื่องเลย

00:31:08.639 --> 00:31:09.596
ระหว่างที่อ่านนะครับ

00:31:09.679 --> 00:31:13.839
ให้ลองจินตนาการดูนะว่ามันคือคำว่าอะไรนะครับ

00:31:14.200 --> 00:31:15.320
แล้วเดี๋ยวจะเห็นเฉลย

00:31:16.000 --> 00:31:18.157
โอเค ผมก็ลองเอามาใส่ I/O/M นะ

00:31:18.240 --> 00:31:21.037
ผมก็ต้องใส่ prompt เข้าไปว่าช่วยแก้คำผิดต่างๆ ให้หน่อยนะ

00:31:21.120 --> 00:31:23.357
แต่จะเห็นว่า prompt ผมเนี่ย มันยังไม่ค่อยเจาะจง

00:31:23.440 --> 00:31:24.956
ฉะนั้นมันเลยแก้อะไรให้ผมไม่ได้

00:31:25.039 --> 00:31:28.119
ผมก็ต้องใส่ prompt ใส่ตัวอย่าง

00:31:28.240 --> 00:31:30.759
ใส่ข้อกำหนดอะไรต่างๆ เพิ่มจนมันเริ่มจับทางได้

00:31:30.880 --> 00:31:31.757
ซึ่งจริงๆ prompt เนี่ย

00:31:31.840 --> 00:31:33.839
ยาวกว่านี้อีกประมาณ 2-3 เท่านะครับ

00:31:34.000 --> 00:31:37.157
แต่พอมันจับทางได้เนี่ย ผลลัพธ์มันก็จะดีขึ้นเองครับ

00:31:37.240 --> 00:31:39.640
อย่างเช่น ตัวอย่างนี้ครับ ผมส่งไปให้ Claude นะ

00:31:40.360 --> 00:31:43.240
แล้วพอผมใช้ Claude มันแก้ให้เกือบหมดเลย

00:31:43.960 --> 00:31:45.677
มันช่วยแก้ได้เยอะมากๆ นะครับ

00:31:45.760 --> 00:31:47.716
แต่ก็ยังมีบางคำที่มันแก้ไม่ได้นะครับ

00:31:47.799 --> 00:31:49.760
ซึ่งตรงนี้ ผมก็ต้อง manual เอาเนาะ

00:31:49.880 --> 00:31:54.080
แต่ก็จะเห็นว่าจากเดิมที่ผมต้องแก้ 7 จุด มันเหลือ 2 จุด

00:31:55.159 --> 00:31:57.959
แปลว่าก็น่าจะช่วยลดงานได้ค่อนข้างเยอะนะครับ

00:31:58.320 --> 00:32:01.440
โอเค ผมก็ลองทำ subtitle ด้วยวิธีนี้นะครับ

00:32:01.559 --> 00:32:03.316
ก็พบว่าคลิป 1 ชม. เนี่ย

00:32:03.399 --> 00:32:05.239
จะเหลือใช้เวลาประมาณ 3-4 ชม. ละ

00:32:06.039 --> 00:32:08.599
ก็แปลว่าเราประหยัดเวลาไปได้ประมาณครึ่งนึงละ

00:32:08.799 --> 00:32:09.757
แต่ในขณะเดียวกัน

00:32:09.840 --> 00:32:13.239
เราจะเริ่มมีค่าใช้จ่ายด้านการรัน model นะครับ

00:32:13.880 --> 00:32:17.639
ตอนนั้นเนี่ย ผมก็แบบ เออ เราเจอเทคนิคแล้วแหละ

00:32:18.080 --> 00:32:20.240
ผมก็เตรียมเขียนบทความแชร์เทคนิค

00:32:21.360 --> 00:32:25.237
แต่ผมดันมาเจอสิ่งที่เรียกว่า multimodal AI model ซะก่อน

00:32:25.320 --> 00:32:25.917
มันคืออะไรครับ

00:32:26.000 --> 00:32:29.517
มันคือ model ที่สามารถ process ได้มากกว่า 1 ช่องทาง

00:32:29.600 --> 00:32:32.556
ก็คือสามารถ process ข้อความและเสียงพร้อมๆ กันได้นะครับ

00:32:32.639 --> 00:32:35.357
ก่อนหน้านี้ ผมรู้ว่า Gemini เนี่ย รับไฟล์ภาพได้

00:32:35.440 --> 00:32:38.117
แต่ไม่เคยรู้เลยว่ามันรับไฟล์เสียงได้ด้วย

00:32:38.200 --> 00:32:39.480
จนกระทั่งผมไปอ่าน docs มัน

00:32:40.399 --> 00:32:43.157
มันบอกว่าเราส่งไฟล์เสียงไปให้ได้เลยนะ

00:32:43.240 --> 00:32:44.596
ผมก็ โอ้

00:32:45.120 --> 00:32:46.559
ก็ดีนะ ลองดูดีกว่า

00:32:47.919 --> 00:32:48.956
ผมก็เลยลองดูครับ

00:32:49.039 --> 00:32:52.277
แล้วผมก็ตะลึงมากว่า Gemini 1.5 Pro เนี่ย

00:32:52.360 --> 00:32:55.279
มันสามารถสะกดคำต่างๆ ได้อย่างถูกต้องเกือบหมดเลย

00:32:55.480 --> 00:32:58.160
และเป็นตัวแรกที่สะกดคำว่า largest contentful paint

00:32:58.720 --> 00:33:02.076
ได้ถูกต้องโดยที่ไม่ต้องให้ context อะไรมันเพิ่มเติมด้วยนะครับ

00:33:02.159 --> 00:33:04.080
Word error rate เนี่ยลดลงเหลือ 2.5%

00:33:04.960 --> 00:33:06.320
ก็คือลดไป 3 เท่า

00:33:07.480 --> 00:33:09.637
แล้วพอผมลองอีกเนี่ยผมก็พบว่า

00:33:09.720 --> 00:33:11.037
เฮ้ย ไม่ใช่แค่ไฟล์เสียงนี่

00:33:11.120 --> 00:33:13.359
ไฟล์วิดีโอก็ทำได้ด้วย

00:33:13.480 --> 00:33:15.237
แล้วพอเราส่งไฟล์วิดีโอเข้าไปเนี่ย

00:33:15.320 --> 00:33:19.360
มันอ่าน text บนสไลด์เพื่อทำให้สามารถถอดความได้แม่นยำ

00:33:19.480 --> 00:33:20.640
มากขึ้นอีกด้วยนะครับ

00:33:21.120 --> 00:33:23.280
ฉะนั้นเนี่ย เทคนิคที่ผม research มาก่อนหน้านี้

00:33:23.399 --> 00:33:25.596
ก็คือแทบจะล้มกระดานทิ้งครับ

00:33:25.679 --> 00:33:27.157
ต้องรื้อใหม่หมดเลยนะครับ

00:33:27.240 --> 00:33:29.836
ฉะนั้นเนี่ย takeaway ก็คือช่วงเนี้ย

00:33:29.919 --> 00:33:32.917
เทคโนโลยี AI เนี่ยมันเปลี่ยนไปเร็วมากๆ

00:33:33.000 --> 00:33:34.397
มีอะไรใหม่ๆ มาเรื่อยๆ เลย

00:33:34.480 --> 00:33:36.277
ฉะนั้นผลลัพธ์ในสไลด์เนี้ยผมก็ไม่รู้ว่า

00:33:36.360 --> 00:33:37.959
มันจะอยู่ไปได้อีกนานเท่าไหร่เนาะ

00:33:38.559 --> 00:33:41.798
โอเค ทีเนี้ยผมก็คิดว่า เออ หวานหมูแล้ว

00:33:41.919 --> 00:33:44.037
เราอัปโหลดไฟล์วิดีโอไปให้ Gemini Pro

00:33:44.120 --> 00:33:45.956
บอกว่าช่วยสร้างไฟล์ subtitle มาให้หน่อย

00:33:46.039 --> 00:33:46.799
แค่นี้ก็จบใช่มั้ย

00:33:47.200 --> 00:33:49.997
แต่พอลองดูจริงๆ ครับ ไม่จบครับ

00:33:50.080 --> 00:33:51.076
ปัญหาเต็มเลย

00:33:51.159 --> 00:33:56.157
หนึ่งก็คือ เราไม่มีข้อมูลเกี่ยวกับ timing information นะครับ

00:33:56.240 --> 00:34:00.157
คือ Gemini เนี่ยจะไม่บอกว่าคำไหนพูดในวินาทีไหนนะครับ

00:34:00.240 --> 00:34:02.040
คือผลลัพธ์มันแม่นยำมากก็จริง

00:34:02.279 --> 00:34:05.320
แต่พอมันไม่มี timing เราก็เอามาสร้าง subtitle ไม่ได้ถูกมั้ย

00:34:05.760 --> 00:34:07.637
เทียบกับพวก speech recognition ธรรมดาเนี่ย

00:34:07.720 --> 00:34:09.437
อย่างอันเนี้ยผมใช้ Speechmatics นะ

00:34:09.520 --> 00:34:12.999
ที่จะเห็นว่าถึง word error rate เนี่ยมันเยอะกว่า 10 เท่า

00:34:13.280 --> 00:34:15.480
แต่มันบอกเวลาเป็นไร ทำได้เลย

00:34:16.839 --> 00:34:19.996
ถ้า Gemini เนี่ยเราขอให้มันช่วยใส่ timestamp ให้

00:34:20.079 --> 00:34:22.280
มันก็ทำให้ได้นะ แต่มันมั่วหมดเลย

00:34:23.040 --> 00:34:26.316
อย่างที่ 2 ครับ คือ Gemini API เนี่ยมันมี limit ของมันอยู่

00:34:26.399 --> 00:34:28.677
คือถ้าเราส่งไฟล์วิดีโอที่มันยาวมากๆ เนี่ย

00:34:28.760 --> 00:34:29.717
สักพักมันจะ time out

00:34:29.800 --> 00:34:31.400
แล้วตอบเป็น internal error กลับมา

00:34:31.679 --> 00:34:34.800
แถม output เนี่ยมัน output ได้แค่ทีละ 8,000 token

00:34:34.960 --> 00:34:38.479
แปลว่าเราให้มันฟังคลิปยาวๆ แล้วสรุปสั้นๆ อะ แบบเนี้ยทำได้

00:34:38.639 --> 00:34:40.119
แต่ถ้าเราบอกให้มันถอดคำพูด

00:34:40.399 --> 00:34:41.919
ให้มันถอดคำพูดทั้งหมดเนี่ย

00:34:42.240 --> 00:34:45.760
มันก็ทำได้เหมือนกัน แต่มันถอดไปสักพักนึงมันจะตัดจบนะครับ

00:34:46.079 --> 00:34:47.596
แล้วก็อีกปัญหานึงที่เจอก็คือ

00:34:47.679 --> 00:34:49.836
บางทีมันก็ตัดบรรทัดแปลกๆ อะ

00:34:49.919 --> 00:34:51.596
บางทีมันก็ไปตัดบรรทัดกลางประโยค

00:34:51.679 --> 00:34:53.357
หรือบางทีมันก็ไม่ตัดบรรทัดให้เลย

00:34:53.440 --> 00:34:56.079
แบบ talk 30 นาทีมันเขียนเป็น paragraph เดียวให้เลย

00:34:57.160 --> 00:34:59.120
ซึ่งเราก็ต้องมาออกแบบวิธีครับ

00:34:59.240 --> 00:35:01.439
ว่าทำยังไงถึงจะแก้ 3 ปัญหานี้ได้เนาะ

00:35:01.720 --> 00:35:04.197
เรื่องแรกเนี่ย วิดีโอยาวเกิน limit ก็อาจจะไม่ยาก

00:35:04.280 --> 00:35:05.877
ก็คือเราก็แบ่งเป็นส่วนย่อยๆ

00:35:05.960 --> 00:35:07.320
แล้วก็ค่อยๆ ทำแยกกันใช่มั้ย

00:35:07.640 --> 00:35:08.519
แต่ว่าจะแบ่งยังไง

00:35:08.680 --> 00:35:11.276
ถ้าเราแบ่งแบบไม่ได้แบ่งแบบดีๆ อะ

00:35:11.359 --> 00:35:13.520
บางทีมันตัดวิดีโอกลางประโยค

00:35:14.040 --> 00:35:15.960
result ที่ได้มันก็ไม่ดีใช่มั้ย

00:35:16.480 --> 00:35:18.516
จากที่ผมศึกษามาเนี่ย ทำได้ 2 วิธีหลักๆ

00:35:18.599 --> 00:35:20.880
ก็คือวิเคราะห์คลื่นเสียงว่าตรงไหนที่หยุดพูด

00:35:21.240 --> 00:35:22.440
กับอีกวิธีนึงก็คือ

00:35:23.000 --> 00:35:24.957
ใช้ text-to-speech ตัวที่ไม่แม่นยำ

00:35:25.040 --> 00:35:28.200
แต่ว่าให้ข้อมูล timing เรามาได้ครับ

00:35:28.560 --> 00:35:30.516
ซึ่งผมคิดว่าไอ้ข้อมูล timing เนี่ย

00:35:30.599 --> 00:35:31.317
เดี๋ยวมันจะมีประโยชน์

00:35:31.400 --> 00:35:33.399
ผมเลยเลือกใช้ออปชันนี้ก่อนนะครับ

00:35:34.079 --> 00:35:36.640
ผมก็เริ่มจากแปลงไฟล์วิดีโอนะครับ

00:35:37.160 --> 00:35:38.437
แปลงเป็นไฟล์เสียงเนาะ

00:35:38.520 --> 00:35:40.597
เสร็จแล้วก็โยนไปให้ Speechmatics นะครับ

00:35:40.680 --> 00:35:44.036
พอโยนเสร็จเนี่ย Speechmatics เนี่ยมัน

00:35:44.119 --> 00:35:46.080
ถึงคำฝรั่งมันจะสะกดไม่ค่อยได้นะ

00:35:46.440 --> 00:35:49.760
แต่ทุกๆ คำเนี่ยมันจะพยายามสะกดเป็นภาษาไทย

00:35:50.200 --> 00:35:53.800
เทียบกับหลายๆ model ที่พอเจอคำฝรั่งปุ๊บมันข้ามไปเลย

00:35:54.359 --> 00:35:58.800
เรื่อง timing อะ ผมให้ Speechmatics เป็นอันดับต้นๆ ครับ

00:35:59.319 --> 00:36:03.197
ผลลัพธ์ที่ได้ก็จะเป็นหน้าตาแบบเนี้ยครับ

00:36:03.280 --> 00:36:06.080
ก็คือเราจะมี start time end time แล้วก็มีข้อความเนาะ

00:36:06.280 --> 00:36:08.477
ซึ่งเราสามารถเอามา analysis ได้ว่า

00:36:08.560 --> 00:36:10.800
มีตรงไหนที่หยุดพูดนะครับ

00:36:11.440 --> 00:36:13.276
อันนี้ผมเอาข้อมูลมา visualize นะครับ

00:36:13.359 --> 00:36:16.320
ก็คือ talk ประมาณ 30 นาทีอะ

00:36:16.800 --> 00:36:20.477
ผมดูว่ามีตรงไหนบ้างที่หยุดพูดมากกว่า 1 วินาทีนะครับ

00:36:20.560 --> 00:36:23.036
เสร็จแล้วผมก็หาจุดที่เราจะตัดนะครับ

00:36:23.119 --> 00:36:24.197
ก็คือแบ่งครึ่งตรงกลาง

00:36:24.280 --> 00:36:25.320
เสร็จแล้วเราก็ตัดโชะ

00:36:26.200 --> 00:36:30.877
แล้วก็ตัดไปเรื่อยๆ จนแต่ละคลิปเนี่ยสั้นกว่า 3 นาทีนะครับ

00:36:30.960 --> 00:36:33.557
เสร็จแล้วแต่ละคลิปเนี่ยเราจะสามารถเอาไป process ได้

00:36:33.640 --> 00:36:34.957
แล้วทำแบบ parallel ได้ด้วย

00:36:35.040 --> 00:36:37.479
เพราะว่าตอนเนี้ยแต่ละส่วนมันแยกกันหมดแล้วใช่มั้ยฮะ

00:36:37.920 --> 00:36:41.480
โดยแต่ละส่วนเนี่ย ผมก็โยนให้ Gemini ใช่มั้ย

00:36:41.599 --> 00:36:45.996
เราก็จะได้บทถอดคำพูดที่ค่อนข้างแม่น

00:36:46.079 --> 00:36:47.360
แต่ไม่มี timestamp

00:36:47.880 --> 00:36:50.357
แถมสไตล์ก็อาจจะตัดบรรทัดแปลกๆ

00:36:50.440 --> 00:36:51.877
ซึ่งอันเนี้ยแก้ไม่ยากครับ

00:36:51.960 --> 00:36:54.080
ก็คือส่งอันเนี้ยไปให้ Claude

00:36:54.440 --> 00:36:57.440
บอกว่าให้ช่วยแก้ให้หน่อย

00:36:57.800 --> 00:36:59.557
แล้วช่วยจัดรูปแบบข้อความอีกที

00:36:59.640 --> 00:37:05.637
ฉะนั้นเนี่ย จริงๆ เนี่ยผมให้มันช่วยแก้คำผิดบางส่วนด้วย

00:37:05.720 --> 00:37:07.996
ฉะนั้นเนี่ยก็จะได้บทถอดคำพูดที่ดีขึ้น

00:37:08.079 --> 00:37:12.157
จะเห็นว่าจาก 2.5% เนี่ย ตอนนี้ลดเหลือ 0.6% นะครับ

00:37:12.240 --> 00:37:14.640
แล้วผมก็เอา result จาก Speechmatics เนี่ย

00:37:14.839 --> 00:37:17.960
ที่มีข้อมูล timing เนี่ยมาส่งไปให้ GPT-4

00:37:18.440 --> 00:37:20.477
บอกว่าช่วยเอาบทถอดคำพูดจากด้านซ้าย

00:37:20.560 --> 00:37:22.077
กับเวลาจากด้านขวามารวมกันหน่อย

00:37:22.160 --> 00:37:25.840
สุดท้ายเราก็จะได้เป็นคล้ายๆ ไฟล์ subtitle นะครับ

00:37:26.520 --> 00:37:28.117
ก็คือเรียบร้อยแล้ว 1 ส่วน

00:37:28.200 --> 00:37:30.397
เราก็ทำอีก 11 ส่วนที่เหลือนะครับ

00:37:30.480 --> 00:37:34.120
เราก็จะรวมกันได้เป็นไฟล์ subtitle เรียบร้อยพร้อมรีวิวนะครับ

00:37:34.280 --> 00:37:36.440
ฉะนั้นเนี่ยพอผมใช้วิธีเนี้ย

00:37:36.599 --> 00:37:38.720
ก็พบว่ามันเหลือคำผิดน้อยมากๆ

00:37:38.880 --> 00:37:40.880
จาก 7% เนี่ยตอนนี้ลดเหลือไม่ถึง 1%

00:37:41.720 --> 00:37:44.720
ทำให้มันประหยัดเวลาไปได้อีกครึ่งนึงนะครับ

00:37:44.880 --> 00:37:45.357
แปลว่าอะไร

00:37:45.440 --> 00:37:46.917
แปลว่าตอนนี้พอผมรีวิวเนี่ย

00:37:47.000 --> 00:37:49.480
ผมสามารถดูคลิปด้วย speed 2x เลย

00:37:49.760 --> 00:37:53.516
แล้วพอจุดไหนที่ผมเห็นว่า เฮ้ย you สะกดผิดนี่นา

00:37:53.599 --> 00:37:55.117
ก็ค่อย pause แล้วแก้ครับ

00:37:55.200 --> 00:37:57.557
ฉะนั้นจากเดิมที่ใช้ 6-8 ชั่วโมงเนี่ย

00:37:57.640 --> 00:37:59.800
ลดเวลาไปได้เกือบ 4 เท่าแล้วนะ

00:38:01.319 --> 00:38:04.080
แต่ก็จะมีค่าใช้จ่ายที่เพิ่มขึ้นอีกครับ

00:38:04.760 --> 00:38:10.440
แต่ก็ถือว่ายังถูกเมื่อเทียบกับ option อื่นเนาะ

00:38:11.200 --> 00:38:14.080
ก็จะมีค่าใช้จ่ายเพิ่มขึ้นในการ run model นะครับ

00:38:14.760 --> 00:38:15.800
ซึ่ง code ทั้งหมดเนี่ย

00:38:16.480 --> 00:38:18.397
ก็ผมลองมาหลายแบบมากแล้ว

00:38:18.480 --> 00:38:20.276
code ทั้งหมดเนี่ยก็จะอยู่บน GitHub นะครับ

00:38:20.359 --> 00:38:21.880
ก็เขียนด้วย Node.js TypeScript

00:38:22.319 --> 00:38:26.000
แล้วในนี้ก็จะมีตัวอย่างพร้อมของแต่ละ step ด้วยนะครับ

00:38:26.240 --> 00:38:28.200
ก็ไปดูกันได้นะครับ

00:38:28.560 --> 00:38:30.996
ทีนี้ก็จะเห็นว่าพอเราใช้ AI model

00:38:31.079 --> 00:38:32.160
พอถึงจุดนึงเนี่ย

00:38:32.319 --> 00:38:34.117
ก็ก่อนหน้านี้เราใช้ console ใช่มั้ย

00:38:34.200 --> 00:38:35.996
พอถึงจุดนึงเราจะต้องเริ่มเขียน script ละ

00:38:36.079 --> 00:38:39.080
ซึ่งเอาจริงๆ เราก็ใช้ Claude เขียน script ให้ก็ทำได้ใช่มั้ย

00:38:40.040 --> 00:38:42.276
เพราะว่าเราดูแค่ word error rate มันไม่พอ

00:38:42.359 --> 00:38:45.837
แต่ละ service เนี่ยมันมีจุดดีจุดเด่นต่างกัน

00:38:45.920 --> 00:38:47.516
ซึ่งเค้าไม่ได้เขียนใน doc หรอก

00:38:47.599 --> 00:38:49.159
เราต้องไปลองเองเราถึงจะเจอใช่มั้ย

00:38:49.680 --> 00:38:51.036
พูดถึง TypeScript ครับ

00:38:51.119 --> 00:38:54.557
ก็สมัยก่อนเวลาผมทำ project ที่ใช้ภาษา TypeScript เนาะ

00:38:54.640 --> 00:38:56.957
package.json ผมจะเต็มไปด้วย dependency ต่างๆ

00:38:57.040 --> 00:39:01.120
ที่ช่วยทำให้เครื่องมือต่างๆ มัน support TypeScript ใช่มั้ย

00:39:01.400 --> 00:39:04.477
แต่เดี๋ยวนี้หลายๆ เครื่องมือเริ่ม support TypeScript

00:39:04.560 --> 00:39:05.516
แบบ built-in แล้วนะครับ

00:39:05.599 --> 00:39:07.996
ทำให้เดี๋ยวนี้ package.json ผมสั้นลงเนาะ

00:39:08.079 --> 00:39:12.998
แล้วเมื่อก่อนเนี่ยผมจะต้องปวดหัวกับการแก้ไฟล์ tsconfig.json มากๆ

00:39:13.440 --> 00:39:16.240
แต่เดี๋ยวนี้มันมี package ที่เป็น preset ตั้งต้น

00:39:16.359 --> 00:39:17.957
ให้เราสามารถดึงมาใช้ได้แล้วนะครับ

00:39:18.040 --> 00:39:21.437
ก็ทำให้ไฟล์ tsconfig ผมอะเหลือ 3 บรรทัด

00:39:21.520 --> 00:39:23.919
หรือบางทีผมก็ตบเหลือบรรทัดเดียวนะครับ

00:39:24.599 --> 00:39:26.117
โอเค มาถึงจุดนี้นะครับ

00:39:26.200 --> 00:39:27.637
ผมก็ตื่นเต้นมากๆ เลย

00:39:27.720 --> 00:39:30.397
เพราะว่ากว่าจะเอาทุกอย่างมาประกอบเข้าด้วยกันเนี่ย

00:39:30.480 --> 00:39:31.837
คือลองผิดลองถูกมาเยอะมาก

00:39:31.920 --> 00:39:33.240
แล้วก็รื้อทิ้งเยอะมากด้วย

00:39:33.680 --> 00:39:36.917
แต่สุดท้ายผมก็ได้แชร์โพสต์บน Facebook ครับ

00:39:37.000 --> 00:39:38.557
เผื่อว่าแบบใครที่เจอปัญหาเดียวกัน

00:39:38.640 --> 00:39:40.720
จะได้ลองเอาเทคนิคอันนี้ไปลองใช้ดู

00:39:41.040 --> 00:39:43.276
ปรากฏว่ามีคนมา comment เยอะเลยว่า

00:39:43.359 --> 00:39:44.957
เฮ้ย เคยลองใช้ตัวนู้นตัวนี้หรือยัง

00:39:45.040 --> 00:39:45.996
อันนี้แม่นมากเลยนะ

00:39:46.079 --> 00:39:48.319
แม่นจนน่าแปลกใจเลยลองเอาไปเทียบดูได้

00:39:48.560 --> 00:39:53.120
ซึ่งผมก็พบว่าแบบ เออ พอเราแชร์แล้วเนี่ย

00:39:53.720 --> 00:39:57.597
เราพบว่าเราได้พบกับคนที่เจอปัญหาเดียวกัน

00:39:57.680 --> 00:39:58.557
แล้วก็แก้วิธีอื่นๆ

00:39:58.640 --> 00:40:01.157
แล้วบางทีก็เป็นวิธีที่เราคาดไม่ถึงเนาะ

00:40:01.240 --> 00:40:03.036
หรือบางตัวเราไม่รู้จักด้วยซ้ำนะครับ

00:40:03.119 --> 00:40:04.637
หรืออย่างเพจ My Lobster เนี่ย

00:40:04.720 --> 00:40:07.960
ก็โพสต์ content แชร์วิธีที่ช่อง My Lobster เนี่ย

00:40:08.319 --> 00:40:10.040
ใช้กับ channel YouTube ของตัวเอง

00:40:10.880 --> 00:40:13.317
ก็พอเราแชร์แล้วเค้าก็แชร์ต่อ

00:40:13.400 --> 00:40:15.680
แล้วก็แชร์ความรู้ของตัวเองครับ

00:40:17.040 --> 00:40:19.357
มันก็เลยเหมือนเรากลายเป็นว่าเราอะ

00:40:19.440 --> 00:40:22.516
เป็นฝ่ายที่ได้เรียนรู้จากการแชร์นะครับ

00:40:22.599 --> 00:40:24.877
ฉะนั้นเนี่ยถ้าผมไม่ได้แชร์เรื่องนี้บน Facebook

00:40:24.960 --> 00:40:31.117
ผมก็คงไม่ได้รู้วิธีการแก้ไขปัญหาของคนอื่นๆ

00:40:31.200 --> 00:40:33.880
แถมได้รู้จักคนใหม่ๆ ที่ชอบลองใช้พวก AI

00:40:34.599 --> 00:40:36.600
แล้วเราก็แชร์ความรู้ต่างๆ นะครับ

00:40:37.280 --> 00:40:40.440
โอเค ฉะนั้นพอผมถูกป้ายยามาก็ต้องลองใช่มั้ย

00:40:40.680 --> 00:40:42.159
ก็ research ต่อนะครับ

00:40:42.480 --> 00:40:44.236
ตัวนึงที่มีคนแนะนำมากๆ เนี่ย

00:40:44.319 --> 00:40:46.276
อย่างน้อยมีแนะนำมาอย่างน้อย 3 คนนะ

00:40:46.359 --> 00:40:48.077
ก็คือ CapCut นะครับ

00:40:48.160 --> 00:40:50.519
ก็ของ Bytedance นะ เจ้าของ TikTok ใช่มั้ย

00:40:51.000 --> 00:40:53.120
หลายคนบอกว่าถอดคำพูดได้ดีมาก

00:40:53.240 --> 00:40:54.357
อันนี้เท่าที่ผมลองดูนะ

00:40:54.440 --> 00:40:55.677
คือเหมือนมันไม่มี API ให้ใช้

00:40:55.760 --> 00:40:57.600
เราก็ต้องโหลดแอป desktop มาเนาะ

00:40:57.720 --> 00:40:58.877
ซึ่งถือว่าดีครับ

00:40:58.960 --> 00:41:01.200
ดีกว่า Facebook ของและก็ YouTube

00:41:02.200 --> 00:41:03.077
แล้วก็อีกตัวนึงครับ

00:41:03.160 --> 00:41:04.637
เป็น model ของ iApp นะครับ

00:41:04.720 --> 00:41:05.957
เป็น model สัญชาติไทย

00:41:06.040 --> 00:41:07.236
แล้วก็มีเว็บให้ใช้ฟรีด้วย

00:41:07.319 --> 00:41:08.236
แล้วแบบใช้สะดวกมากเลย

00:41:08.319 --> 00:41:09.917
คือเราอัปโหลดไฟล์วิดีโอไปเนี่ย

00:41:10.000 --> 00:41:11.996
แล้วเดี๋ยวมันส่งไฟล์ srt กลับมาให้เลย

00:41:12.079 --> 00:41:14.320
คือแบบ automatic มากๆ

00:41:14.760 --> 00:41:17.280
ตอนที่ผมทดสอบเนี่ย word error rate จะอยู่ที่ประมาณ 18%

00:41:18.280 --> 00:41:20.919
แต่เดือนที่แล้วครับ เดือนกันยา

00:41:21.079 --> 00:41:25.159
เค้าบอกว่าเค้าเพิ่งปล่อยตัว model pro ออกมานะครับ

00:41:25.359 --> 00:41:28.756
โอเค ผมก็ลองดูเหลือ 3.5% ครับ

00:41:28.839 --> 00:41:29.680
ซึ่งน้อยมาก

00:41:29.839 --> 00:41:31.157
แถมเป็น model ภาษาไทยด้วย

00:41:31.240 --> 00:41:33.079
แถมให้ข้อมูล timestamp ได้ด้วย

00:41:33.960 --> 00:41:37.600
แปลว่าไอ้ที่ผมลองมาก่อนหน้านี้ก็ใช่มั้ย

00:41:38.839 --> 00:41:43.679
เออ ก็เตรียมรื้อนะครับ

00:41:45.800 --> 00:41:46.120
โอเค

00:41:46.800 --> 00:41:50.800
นะครับของเราก็เลยโอเคครับ

00:41:51.560 --> 00:41:55.397
ก็จะเห็นว่าวงการเนี่ยอะไรต่างๆ มันไปเร็วมากๆ นะครับ

00:41:55.480 --> 00:41:57.560
เทคนิคต่างๆ เนี่ย outdated เร็วมากนะ

00:41:58.079 --> 00:42:01.236
แต่บทเรียนและประสบการณ์เนี่ยแหละผมคิดว่ามันติดตัวเราไปนะครับ

00:42:01.319 --> 00:42:05.120
เราจะเวลาคนถามเราจะได้บอกได้ว่าตัวเนี้ยมีข้อดีข้อเสียยังไง

00:42:05.480 --> 00:42:07.800
ซึ่งมันยากมากที่เราจะ list ออกมาให้หมด

00:42:10.200 --> 00:42:11.157
ประมาณนั้นแหละครับ

00:42:11.240 --> 00:42:15.120
ผมก็เอาลองเอาตัว iApp ASR Pro มาใช้ดูนะครับ

00:42:15.240 --> 00:42:16.880
ก็ใช้เวลาประมาณ 1-3 ชม.

00:42:17.640 --> 00:42:21.117
ใช้เวลา review เยอะขึ้นนิดหน่อยเพราะว่า word error rate

00:42:21.200 --> 00:42:22.239
มันก็ยังสูงกว่า Gemini

00:42:22.599 --> 00:42:25.476
แต่มันสะดวกขึ้นเยอะเพราะว่าระบบต่างๆ มัน automatic

00:42:25.559 --> 00:42:26.117
พอสมควร

00:42:26.200 --> 00:42:27.996
คือมี timestamp มีอะไรพวกเนี้ย

00:42:28.079 --> 00:42:32.996
ผมไม่ต้องเอาไปโยนเข้า model นึงแล้วก็เอามารวมกัน

00:42:33.079 --> 00:42:34.920
ฉะนั้นเนี่ยทำมันง่ายขึ้นมากเลย

00:42:36.520 --> 00:42:40.036
แถมราคาก็ค่อนข้างโอเคมากๆ ด้วยนะครับ

00:42:40.119 --> 00:42:42.760
ซึ่งถ้าผมเอามาผ่าน large language model อีกรอบเนี่ย

00:42:43.160 --> 00:42:45.840
มันก็จะยิ่งลด word error rate ไปได้อีกนะครับ

00:42:45.960 --> 00:42:48.119
แต่ขั้นตอนกับราคามันก็อาจจะเยอะขึ้นหน่อย

00:42:48.599 --> 00:42:50.036
ฉะนั้นทุกอย่างมันไปเร็วมาก

00:42:50.119 --> 00:42:54.080
แล้วก็เดี๋ยวก็คงจะมี Atom 5 Atom 6 ต่อไปในอนาคตนะครับ

00:42:54.520 --> 00:42:58.797
โอเค ทีนี้พอเรารู้แล้วว่าเรามีหนทางที่จะสามารถทำ subtitle

00:42:58.880 --> 00:43:00.917
ให้กับทุกวิดีโอในอนาคตเนี่ย

00:43:01.000 --> 00:43:03.317
ก็โอเคเราลองทำหน้าเว็บดูบ้าง

00:43:03.400 --> 00:43:08.600
ซึ่งส่วนตัวเนี่ยผมห่วยมากเวลาออกแบบ UI/UX

00:43:08.960 --> 00:43:09.837
เข้าขั้นห่วยเลย

00:43:09.920 --> 00:43:12.880
เวลาผมต้องทำ UI เนี่ยผมมักจะใช้ของสำเร็จรูป

00:43:13.119 --> 00:43:14.400
เช่น ใช้ Bootstrap นะ

00:43:14.960 --> 00:43:17.959
แต่เดี๋ยวนี้มันจะมีเครื่องมือ AI เช่น v0.dev

00:43:18.280 --> 00:43:19.797
ผมว่าหลายๆ คนน่าจะเคยได้ยินแล้วล่ะ

00:43:19.880 --> 00:43:21.476
ก็อันนี้ก็คือ prompt ที่ผมเขียนไปเนาะ

00:43:21.559 --> 00:43:23.236
แล้วก็จะได้หน้าวิดีโอแบบนี้มา

00:43:23.319 --> 00:43:25.720
ผมก็ใช้เป็นต้นแบบในการ implement นะครับ

00:43:26.359 --> 00:43:28.880
แต่บางทีเนี่ยเราต้อง brief มันละเอียดนิดนึง

00:43:29.000 --> 00:43:30.516
ถึงจะได้ผลลัพธ์ที่น่าพอใจนะครับ

00:43:30.599 --> 00:43:32.760
อันนี้ก็คือ prompt ที่ผมใช้เนาะ

00:43:33.440 --> 00:43:37.317
โอเค พอผมทำซับมาเรื่อยๆ มีหน้าเว็บวิดีโอเรียบร้อยแล้ว

00:43:37.400 --> 00:43:41.357
ตอนนี้กลายเป็นว่าจุดที่กินเวลาผมมากที่สุดคือการ review

00:43:41.440 --> 00:43:44.317
แต่ละวิดีโอแล้วก็การแก้ไข subtitle เนาะ

00:43:44.400 --> 00:43:46.400
เพราะมันยังเป็น process ที่มันต้อง manual อยู่

00:43:48.359 --> 00:43:51.917
ผมเลยตัดสินใจว่าโอเคผมต้องสร้างโปรแกรมแก้ subtitle

00:43:52.000 --> 00:43:52.800
ของตัวเองแล้วแหละ

00:43:53.319 --> 00:43:56.077
แต่ผมไม่อยากเสียเวลามาใช้ทำ backend มากนัก

00:43:56.160 --> 00:43:59.797
อยากจะโฟกัสกับการทำเครื่องมือให้มันใช้สะดวกขึ้นนะครับ

00:43:59.880 --> 00:44:03.197
ผมก็ไปพบว่ามันมีสิ่งนึงที่เรียกว่า Google Apps Script อยู่

00:44:03.280 --> 00:44:06.357
แล้วเวลาเปิด Google Sheet เนี่ยมันจะมี extension

00:44:06.440 --> 00:44:07.756
แล้วมีเมนู Apps Script

00:44:07.839 --> 00:44:10.357
ทำให้เราสามารถเขียน JavaScript เพื่อต่อเติมตัว

00:44:10.440 --> 00:44:11.756
แอป Google Sheet ได้นะครับ

00:44:11.839 --> 00:44:14.360
อันนี้ผมก็เพิ่มเมนูใหม่เข้าไปใน Google Sheet

00:44:14.720 --> 00:44:17.637
แล้วก็อันนี้ก็คือผมก็สามารถทำ subtitle ใน Google Sheet

00:44:17.720 --> 00:44:20.677
ได้ครับ

00:44:20.760 --> 00:44:24.200
อันนี้คือตัวอย่างที่ผมแก้ subtitle นะครับ

00:44:24.400 --> 00:44:27.797
อันนี้ผม speed up ให้ดูแต่ก็จะเห็นว่าพอผมแก้ในด้านขวาเนี่ย

00:44:27.880 --> 00:44:29.960
มันก็จะไปอัปเดตข้อมูลในด้านซ้ายนะครับ

00:44:30.760 --> 00:44:32.476
แปลว่าเราไม่ต้องเขียน backend เองเลย

00:44:32.559 --> 00:44:35.437
แค่ให้มันคุยกับ Google Sheet ให้รู้เรื่องนะครับ

00:44:35.520 --> 00:44:38.680
ก็ไม่ต้องห่วงเรื่อง import export อะไรแบบเนี้ย

00:44:40.319 --> 00:44:43.557
อีกอย่างนึงที่ชอบมากๆ คือพวกโปรแกรม Google Sheet

00:44:43.640 --> 00:44:44.236
และ Excel เนี่ย

00:44:44.319 --> 00:44:46.080
มันทำงานกับข้อมูลรูปแบบเป็น TSV

00:44:46.280 --> 00:44:51.080
คือถ้าผม copy ตารางออกมาเนี่ยแล้วเอามาแปะเป็นข้อความ

00:44:51.280 --> 00:44:54.996
เราจะพบว่า format มันเป็น format TSV นะครับ

00:44:55.079 --> 00:44:57.519
ก็คือแต่ละบรรทัดเนี่ยก็คือ 1 row

00:44:57.880 --> 00:45:01.837
แล้วก็แต่ละ column เนี่ยก็จะถูกแบ่งด้วยเครื่องหมาย tab \t

00:45:01.920 --> 00:45:02.760
อะเนาะ

00:45:02.960 --> 00:45:05.797
ผมสามารถเขียนโปรแกรมแบบง่ายๆ ให้ process

00:45:05.880 --> 00:45:07.917
ข้อมูลที่มีลักษณะเนี้ย

00:45:08.000 --> 00:45:10.077
แล้วผมก็ copy กลับมา paste ได้เลย

00:45:10.160 --> 00:45:12.476
ฉะนั้นเวลาเรา import export ข้อมูลอะ

00:45:12.559 --> 00:45:16.360
ผมก็จะชอบใช้ TSV เป็น format กลางในการแก้ไขข้อมูลเนาะ

00:45:16.520 --> 00:45:20.240
ฉะนั้นเนี่ยพอผมทำเครื่องมือใช้เองเนี่ยผมก็โอเค

00:45:20.440 --> 00:45:23.400
ผมสามารถต่อเติมให้มันใช้งานได้สะดวกขึ้นเรื่อยๆ

00:45:23.760 --> 00:45:26.000
ผมก็ใช้ตัวแก้ไข subtitle ตัวเองเนี่ย

00:45:27.200 --> 00:45:28.639
ใช้ไปประมาณ 20 วิดีโอได้ละ

00:45:28.960 --> 00:45:31.077
แล้วแต่ละครั้งเนี่ย ผมก็จะเจอจุดเล็กๆ

00:45:31.160 --> 00:45:34.960
ที่เราสามารถทำให้เครื่องมือมันใช้สะดวกมากขึ้นได้นะครับ

00:45:35.240 --> 00:45:36.957
แล้วก็เวลาเราทำเครื่องมือใช้เองเนี่ย

00:45:37.040 --> 00:45:39.761
บางทีมันก็ overkill นะที่เราจะทำเริ่มใหม่ตั้งแต่ศูนย์

00:45:40.240 --> 00:45:42.917
ฉะนั้นบางทีเนี่ย เราเขียนโค้ดเราให้ไปเกาะกับโปรแกรมอื่น

00:45:43.000 --> 00:45:45.840
บางทีมันก็จะประหยัดเวลากว่านะครับ

00:45:46.400 --> 00:45:47.960
เรื่องสุดท้ายที่อยากจะมาแชร์นะ

00:45:48.599 --> 00:45:50.839
ก็คือบางทีเนี่ย ผมอยากทำโปรเจค

00:45:52.240 --> 00:45:57.677
ทำ library TypeScript ไว้เพื่อ reuse กับโปรเจคต่างๆ

00:45:57.760 --> 00:45:59.437
โดยใช้ภาษา TypeScript เนาะ

00:45:59.520 --> 00:46:01.320
ซึ่งถ้าใครเคยทำ library ด้วย TypeScript

00:46:01.599 --> 00:46:04.077
ก็จะรู้ว่ามันต้องใช้เครื่องมือหลากหลายมาก

00:46:04.160 --> 00:46:07.599
ในการกว่าจะ publish library ตัวนึงได้

00:46:08.440 --> 00:46:10.637
ไหนจะเครื่องมือ test เครื่องมือ format โค้ด

00:46:10.720 --> 00:46:12.717
เครื่องมือ check โค้ด หรือทำ documentation เนี่ย

00:46:12.800 --> 00:46:14.160
โอ้ เครื่องมือเต็มไปหมดเลย

00:46:14.319 --> 00:46:17.157
ก็เลยจะมาแนะนำให้รู้จักกับ JSR นะครับ

00:46:17.240 --> 00:46:22.036
พอใช้ JSR เนี่ย ผมแทบไม่ต้องติดตั้ง build tool อะไรเพิ่มเลย

00:46:22.119 --> 00:46:23.597
คือเวลา publish package เนี่ย

00:46:23.680 --> 00:46:27.437
ผมก็ publish file .ts ไปที่ service ของ JSR เลย

00:46:27.520 --> 00:46:28.917
แล้ว JSR มันทำอะไรนะครับ

00:46:29.000 --> 00:46:32.397
มันจะสร้างหน้าเว็บให้ scope ของเรานะครับ

00:46:32.480 --> 00:46:36.036
แล้วแต่ละ package เนี่ย ก็สามารถ install ด้วย npm ได้

00:46:36.119 --> 00:46:38.677
ก็คือ service ของ JSR มันจะแปลงโค้ด TypeScript

00:46:38.760 --> 00:46:41.799
ที่เรา publish ขึ้นไปให้กลายเป็น JavaScript ให้เองเลย

00:46:44.400 --> 00:46:48.476
แถมมีขั้นตอนการติดตั้งเนี่ย อยู่ด้านขวาเลย

00:46:48.559 --> 00:46:50.319
ก็คือไม่ต้องมาเขียนใน readme เอง

00:46:51.079 --> 00:46:53.917
แถมพวกของต่างๆ ที่เรา export มาเนี่ย

00:46:54.000 --> 00:46:55.877
ก็จะมี documentation ให้อ่านนะครับ

00:46:55.960 --> 00:46:57.197
ก็คือทำไว้ได้ดีมาก

00:46:57.280 --> 00:46:58.800
ก็คือเป็นเครื่องมือที่ครบเครื่องเลย

00:47:01.880 --> 00:47:04.639
publish file .ts ไปก็จบเลยนะครับ

00:47:05.000 --> 00:47:07.837
โอเค ก็ทั้งหมดเนี่ยก็คือเรื่องที่ผมอยากจะแชร์ในปีนี้ครับ

00:47:07.920 --> 00:47:09.476
ก็หวังว่าจะเป็นประโยชน์ครับ

00:47:09.559 --> 00:47:11.756
แต่ก็ไม่รู้จะสรุป session นี้ยังไงเหมือนกันเนาะ

00:47:11.839 --> 00:47:13.799
แต่เอาเป็นว่าตอนนี้เรามีวิดีโอ

00:47:14.359 --> 00:47:16.159
เรามีวิธีสร้าง subtitle แล้ว

00:47:16.319 --> 00:47:18.679
ก่อนที่เราจะอัพขึ้น YouTube เราต้องทำอะไรเนาะ

00:47:18.800 --> 00:47:22.719
เราต้องเขียน description แล้วก็ทำ chapter ใช่มั้ย

00:47:23.559 --> 00:47:26.397
มาถึงจุดนี้ ผมเชื่อว่าทุกๆ คนน่าจะเดาออกว่า

00:47:26.480 --> 00:47:28.000
ผมจะทำยังไงต่อนะครับ

00:47:28.119 --> 00:47:30.717
ก็ใน wiki ของ Creatorsgarten เนี่ย

00:47:30.800 --> 00:47:35.437
มันจะมีข้อมูล มีรายละเอียดเกี่ยวกับขั้นตอนต่างๆ นี้นะครับ

00:47:35.520 --> 00:47:37.917
ไปดูได้ รวมถึงมี prompt และโค้ดทั้งหมด

00:47:38.000 --> 00:47:39.797
ที่เราใช้ด้วยในการ generate นะครับ

00:47:39.880 --> 00:47:41.760
จะเห็นว่า prompt ต่างๆ เนี่ย มันยาวมาก

00:47:43.200 --> 00:47:45.157
เพราะว่าคือแบบนี้ครับ

00:47:45.240 --> 00:47:47.397
คือผมเห็นว่าบางคนเนี่ย เวลาคุยกับ AI เนี่ย

00:47:47.480 --> 00:47:48.877
เค้าจะชอบคุยแบบนี้ก็คือ

00:47:48.960 --> 00:47:50.476
ขอให้มันสร้างอะไรสักอย่างให้

00:47:50.559 --> 00:47:54.077
แต่พอผลลัพธ์ไม่เป็นที่น่าพอใจ ก็คุยกับมันต่อ

00:47:54.160 --> 00:47:57.317
ช่วยแก้นี้หน่อยนะ ผลลัพธ์ก็ดีขึ้น

00:47:57.400 --> 00:48:01.680
แล้วก็ยังไม่ดี เราก็คุยต่อ จนมันดีใช่มั้ย

00:48:02.480 --> 00:48:04.800
ซึ่งผมว่ามันก็โอเคครับ

00:48:05.760 --> 00:48:07.640
เรียกว่าเป็นการคุยแบบ multi-turn

00:48:07.760 --> 00:48:09.600
ข้อดีคือมันง่ายแล้วมันเป็นธรรมชาติใช่มั้ย

00:48:09.839 --> 00:48:13.197
แต่ข้อเสียคือ ถ้าเราต้องการจะทำแบบเดิมกับเนื้อหาอื่นเนี่ย

00:48:13.280 --> 00:48:14.157
เรามี 2 ทางเลือก

00:48:14.240 --> 00:48:16.797
คือถ้าเราเริ่มใหม่ เราก็ต้องเริ่มจากศูนย์

00:48:16.880 --> 00:48:18.360
แล้วก็ค่อยๆ สอนมันใหม่ใช่มั้ย

00:48:18.920 --> 00:48:21.516
หรือไม่เราก็ต้องต่อบทสนทนานี้

00:48:21.599 --> 00:48:25.083
ก็คือเอาที่คุยกันเนี่ย แล้วก็เอา content ใหม่โปะเข้าไป

00:48:26.000 --> 00:48:28.597
กลายเป็นว่าบทสนทนาเราก็จะยาวขึ้น

00:48:28.680 --> 00:48:31.077
แล้วพอบทสนทนายาวขึ้น token มันก็จะเยอะขึ้น

00:48:31.160 --> 00:48:32.360
แล้วมันก็จะแพงขึ้นเรื่อยๆ

00:48:32.720 --> 00:48:35.597
ผมเลยแนะนำว่า ถ้าเป็น task ไหนที่เราต้องใช้กับ

00:48:35.680 --> 00:48:36.879
content หลายๆ ชิ้น

00:48:37.280 --> 00:48:39.557
ผมจะแนะนำให้ทำแบบ single-turn มากกว่า

00:48:40.200 --> 00:48:42.717
คือถ้า AI เนี่ย มันไม่ให้ผลลัพธ์ที่เราต้องการ

00:48:42.800 --> 00:48:44.480
เรากลับไปแก้ prompt ให้มันยาวขึ้น

00:48:44.640 --> 00:48:46.960
เพิ่มข้อกำหนด เพิ่มตัวอย่าง ลอง run ใหม่

00:48:47.559 --> 00:48:48.680
ก็คือแก้ brief อะ

00:48:49.000 --> 00:48:51.236
จนกระทั่งเราได้ผลลัพธ์ที่น่าพึงพอใจนะครับ

00:48:51.319 --> 00:48:55.236
ซึ่ง prompt ตัวนี้ เรา reuse ได้กับ content อื่นได้นะครับ

00:48:55.319 --> 00:48:57.077
ก็เลยเป็นเหตุผลที่ prompt มันยาว

00:48:57.160 --> 00:48:59.036
ผมก็เลยลองเอาสคริปต์ของหัวข้อวันนี้

00:48:59.119 --> 00:49:01.240
ส่งให้ Gemini ให้มันช่วยแบ่งตอน

00:49:01.400 --> 00:49:03.480
แล้วก็เขียน description ให้นะครับ

00:49:03.760 --> 00:49:06.359
แล้วผลลัพธ์ที่ได้ก็ออกมาก็ตามนี้นะครับ

00:49:07.079 --> 00:49:08.756
มันจะมีจุดผิดพลาดอยู่ประมาณ 2 จุด

00:49:08.839 --> 00:49:09.797
ซึ่งผมแก้ไปแล้วเนาะ

00:49:09.880 --> 00:49:14.276
ก็นั่นแหละเวลาใช้ AI ต้องตรวจทานผลลัพธ์มันด้วยนะครับ

00:49:14.359 --> 00:49:16.236
ส่วนลิงก์และแหล่งอ้างอิงต่างๆ นะครับ

00:49:16.319 --> 00:49:17.797
ผมจะใส่ไว้ที่ลิงก์นี้นะครับ

00:49:17.880 --> 00:49:20.961
อืม ครับผม แล้วก็ channel Creatorsgarten

00:49:21.200 --> 00:49:21.917
บน YouTube นะครับ

00:49:22.000 --> 00:49:23.359
นอกจากทั้งหมดที่เราเล่ามาเนี่ย

00:49:23.960 --> 00:49:26.236
เรายังมีการเซ็ตระบบเพื่อให้ทีมงานเราเนี่ย

00:49:26.319 --> 00:49:29.276
สามารถดูแล channel YouTube กันบน GitHub ได้ด้วยนะครับ

00:49:29.359 --> 00:49:31.397
ก็คือถ้าใครอยากจะเปลี่ยนรูป เปลี่ยน thumbnail

00:49:31.480 --> 00:49:34.357
เปลี่ยน description แก้ไขข้อมูล metadata อะไรต่างๆ เนี่ย

00:49:34.440 --> 00:49:36.077
คือ submit PR มาได้เลย

00:49:36.160 --> 00:49:38.917
แล้วพอ merge เนี่ย มันก็จะมี automation เนี่ย

00:49:39.000 --> 00:49:42.036
ที่ไปอัพเดตเนื้อหาบน channel YouTube ให้อีกทีนะครับ

00:49:42.119 --> 00:49:44.077
ซึ่งถ้าใครสนใจว่ารายละเอียดเป็นยังไงนะครับ

00:49:44.160 --> 00:49:45.877
ก็เรามี talk เกี่ยวกับเรื่องนี้อยู่นะครับ

00:49:45.960 --> 00:49:47.637
ก็ไปหาดูหรือหาอ่านดูได้นะครับ

00:49:47.720 --> 00:49:50.960
แล้วก็ฝาก subscribe ช่อง Creatorsgarten กันด้วยนะครับ

00:49:51.319 --> 00:49:53.119
โอเค สำหรับวันนี้ขอบคุณมากครับ

00:49:59.040 --> 00:50:01.520
ขอบคุณพี่ไทยมากๆ เลยนะครับ
