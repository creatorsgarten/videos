WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:02.480 --> 00:00:03.440
สวัสดีครับทุกคน

00:00:04.520 --> 00:00:10.837
เดี๋ยววันนี้มาเริ่มเซสชัน Build Simple AI Agent using

00:00:10.920 --> 00:00:12.119
TypeScript นะครับ

00:00:12.280 --> 00:00:17.080
ในที่นี้มีใครเล่นกับ OpenAI API มาแล้วบ้างฮะ

00:00:17.920 --> 00:00:22.120
รบกวนยกมือขึ้นนิดนึงฮะ ถ้าใครเล่นมาแล้วครับ

00:00:22.439 --> 00:00:23.637
ประมาณครึ่งนึงได้ครับ

00:00:23.720 --> 00:00:25.276
โอเค ถือว่าผ่านครับ

00:00:25.359 --> 00:00:28.557
ในที่นี้มีใครรู้จัก AI agent บ้างครับ

00:00:28.640 --> 00:00:32.480
แบบเคยอ่าน หรือว่าเคยผ่านตามาบ้าง

00:00:33.160 --> 00:00:36.156
โอเค ไม่เป็นไรครับวันนี้ ไม่มีอะไรยาก

00:00:36.239 --> 00:00:39.837
AI agent ก็คือเป็น OpenAI API

00:00:39.920 --> 00:00:43.080
ที่สามารถรับ feedback จาก user ได้แบบอัตโนมัติ

00:00:43.360 --> 00:00:47.520
ก็คือเขาจะพยายามเรียกพวก AI เนี่ยเป็น agent แทน

00:00:48.160 --> 00:00:50.156
โอเค ก็เดี๋ยวมาเริ่มแนะนำตัวเลยครับ

00:00:50.239 --> 00:00:52.077
ผมชื่อเล่นว่าปาร์โก้นะครับ

00:00:52.160 --> 00:00:55.279
ผมก็เป็น Tech Lead แล้วก็เป็นรองหัวหน้า

00:00:55.680 --> 00:00:59.359
High Master นะครับที่ PALO IT นะครับ

00:01:00.480 --> 00:01:03.197
โอเค ก็ผมเป็นใครนะครับ

00:01:03.280 --> 00:01:06.597
ก็คือผมเชี่ยวชาญด้านการทำ super app นั่นแหละครับ

00:01:06.680 --> 00:01:09.757
ให้พวกแบงก์ที่มีสีนะครับ

00:01:09.840 --> 00:01:15.117
แล้วก็พวกประกันที่มีสีแดงนะครับ

00:01:15.200 --> 00:01:18.197
ก็เน้นไปแบบระหว่างประเทศอะไรเงี้ยครับ

00:01:18.280 --> 00:01:23.356
ก็ประเทศเพื่อนบ้านนะครับ แถบใกล้ๆ จีนนะครับ

00:01:23.439 --> 00:01:28.076
แล้วก็ถ้าใครสนใจมีคำถามหลังจากเซสชันนี้ก็

00:01:28.159 --> 00:01:30.237
ติดต่อมาได้ในลิงก์นะครับ

00:01:30.320 --> 00:01:31.360
DM มาได้ครับ

00:01:31.560 --> 00:01:33.520
ก็ผมจะทิ้ง QR code ไว้แล้วกันนะครับ

00:01:34.040 --> 00:01:37.880
ถ้าใครสนใจก็มาติดต่อกันหลังไมค์ได้ครับ อาจจะมีคำถาม

00:01:39.000 --> 00:01:42.637
โอเค ผมขอแค่ 3 สไลด์เท่านั้นนะในการขายของ

00:01:42.720 --> 00:01:46.636
PALO IT คือใครนะครับ

00:01:46.719 --> 00:01:49.920
ก็คือเป็นบริษัท consultant ที่มีสาขาอยู่ที่

00:01:50.799 --> 00:01:51.557
10 ประเทศทั่วโลกนะครับ

00:01:51.640 --> 00:01:52.837
มีอยู่ 18 ออฟฟิศนะครับ

00:01:52.920 --> 00:01:55.716
แล้วก็เป็นที่ปรึกษาด้านเทคโนโลยีเนี่ยแหละครับ

00:01:55.799 --> 00:01:57.877
แล้วก็ทำพวก digital transformation นะครับ

00:01:57.960 --> 00:02:00.401
หลักๆ ตอนนี้นะครับเรากำลังขาย GitHub Copilot

00:02:00.640 --> 00:02:05.359
ถ้าใครสนใจเอาเข้าองค์กรก็มาติดต่อผมหลังไมค์ได้ครับ

00:02:06.039 --> 00:02:07.880
ทุกคนรู้จัก GitHub Copilot ใช่มั้ยฮะ

00:02:08.040 --> 00:02:13.680
โอเคครับ มีใครใช้แล้วเลิกไปแล้วบ้างครับ

00:02:14.360 --> 00:02:17.000
โอเคครับ เลิกไม่ได้ใช่มั้ยฮะ

00:02:17.280 --> 00:02:18.960
โอเคครับ ดีครับ

00:02:19.640 --> 00:02:21.757
ก็เซอร์วิสของเราหลักๆ มี 2 อันนะครับ

00:02:21.840 --> 00:02:24.477
ก็คือทำโปรดักต์ที่มีอยู่แล้วกับช่วยปรับปรุงโปรดักต์

00:02:24.560 --> 00:02:27.440
ที่ถูกคิดขึ้นมาใหม่นะครับ

00:02:27.840 --> 00:02:30.717
แล้วก็ระดับ organization ก็คือทำพวก DevOps

00:02:30.800 --> 00:02:33.560
ปรับปรุงพวก pipeline การ release นู่นนี่นั่นนะครับ

00:02:35.160 --> 00:02:36.960
โอเค เรามาเข้าเรื่องกันนะครับ

00:02:37.360 --> 00:02:39.796
ก็ introduction นะครับ

00:02:39.879 --> 00:02:43.000
ก็ motivation กับ background ของเซสชันนี้แล้วกัน

00:02:43.159 --> 00:02:47.637
คือผมเนี่ยพยายามศึกษา อ่าน paper แล้วกัน เรื่อง ReAct

00:02:47.720 --> 00:02:48.076
นะครับ

00:02:48.159 --> 00:02:50.319
ในที่นี้มีใครเคยได้ยินเรื่อง ReAct บ้างฮะ

00:02:50.760 --> 00:02:55.156
ที่ไม่ใช่ JavaScript นะฮะ

00:02:55.239 --> 00:02:56.076
โอเค ไม่มีเนาะ

00:02:56.159 --> 00:02:58.876
ก็คือเป็นการเขียน prompt ให้มันสามารถรับ input

00:02:58.959 --> 00:03:00.960
ใน environment จริงเข้ามาได้เนาะ

00:03:01.080 --> 00:03:03.520
ผมก็สนใจเนาะว่าแบบ

00:03:03.720 --> 00:03:06.959
ผมจะ automate ทุกอย่างที่อยู่ใน Mac ผมได้ไงเนาะ

00:03:07.080 --> 00:03:07.720
เป็นความฝันผม

00:03:08.200 --> 00:03:11.597
แล้วก็อ่าน paper ที่ชื่อว่า OS Copilot นะครับ

00:03:11.680 --> 00:03:12.236
mobile agent

00:03:12.319 --> 00:03:14.477
ซึ่งน่าสนใจมากเพราะว่าเขา automate ทุกอย่าง

00:03:14.560 --> 00:03:16.436
ในมือถือบ้าง ในคอมบ้างนะครับ

00:03:16.519 --> 00:03:20.757
แล้วก็ผมเองก็เลย ส่วนตัวเนี่ยคือสนใจด้าน DevOps

00:03:20.840 --> 00:03:22.277
แล้วก็ชอบใช้ Bash script นะครับ

00:03:22.360 --> 00:03:25.997
ก็เลยคิดว่าจะสร้าง AI ที่มัน execute bash script

00:03:26.080 --> 00:03:26.317
ได้นะครับ

00:03:26.400 --> 00:03:28.759
เพราะว่าทุกคนรู้จัก bash script ใช่มั้ยฮะ

00:03:28.920 --> 00:03:31.037
โอเค ก็คือ bash script นี่มันค่อนข้างเทพเนาะ

00:03:31.120 --> 00:03:33.957
มันแบบเป็นเหมือนกับ layer พื้นฐานที่สามารถทำได้ทุกอย่าง

00:03:34.040 --> 00:03:36.397
ผมคิดว่า เอ้ย ถ้า AI มันควบคุม bash script ได้เนี่ย

00:03:36.480 --> 00:03:39.156
แสดงว่ามันต้องควบคุมทุกอย่างในคอมพิวเตอร์ได้ถูกมั้ยครับ

00:03:39.239 --> 00:03:40.080
เกือบทุกอย่าง

00:03:40.280 --> 00:03:45.040
โอเค ก็ task นี้เนี่ย AI agent ตัวนี้เนี่ย

00:03:45.799 --> 00:03:48.197
ควรที่จะสามารถทำงาน DevOps งาน automation

00:03:48.280 --> 00:03:49.236
งาน coding ได้นะครับ

00:03:49.319 --> 00:03:51.076
ก็คือเป็น vision ของผมนะครับ

00:03:51.159 --> 00:03:54.076
แล้วสิ่งที่ทำออกมาได้นะครับ

00:03:54.159 --> 00:03:56.236
ก็ถือว่าดีพอสมควรนะครับ

00:03:56.319 --> 00:04:01.119
เดี๋ยวผมจะให้ดูเดโมประมาณ 50 วินาทีได้ครับ

00:04:01.640 --> 00:04:07.160
ก็เริ่มแรกนะครับก็คือ เดี๋ยวผมหยุดให้ก่อน

00:04:09.239 --> 00:04:13.837
โอเค ก็เราใส่ instruction สิ่งที่เราอยากได้ลงไปนะครับ

00:04:13.920 --> 00:04:17.077
สิ่งที่ AI ทำก็คือมันจะรับ instruction ของเราไปนะครับ

00:04:17.160 --> 00:04:19.996
แล้วก็ค่อยๆ ส่ง bash script ทีละอันมาให้

00:04:20.079 --> 00:04:21.640
แล้วผมก็ส่ง bash script นั้นน่ะ

00:04:21.840 --> 00:04:25.480
ไปให้ backend execute ในคอมผม

00:04:25.759 --> 00:04:27.600
ทุกคนนึกออกใช่มั้ยครับ

00:04:27.800 --> 00:04:31.200
เอา bash script ไป execute จริงๆ หลังบ้าน

00:04:31.880 --> 00:04:34.440
โอเค พี่ตามทันมั้ยครับ

00:04:35.120 --> 00:04:37.637
โอเค หลังจากได้ execute เสร็จปุ๊บ

00:04:37.720 --> 00:04:40.877
เอา output กลับไปส่งกลับไปให้ AI generate ขั้นถัดไป

00:04:40.960 --> 00:04:42.600
เราก็จะได้ bash script ขั้นถัดไป

00:04:42.720 --> 00:04:44.317
ซึ่งหมายความว่าแต่ละ step เนี่ย

00:04:44.400 --> 00:04:47.120
เราจะถูกตรวจสอบแล้วว่ามันสามารถทำงานได้

00:04:47.320 --> 00:04:49.477
ถ้าเกิดใครลองจินตนาการ workflow

00:04:49.560 --> 00:04:50.676
ที่เราทำกันอยู่ทุกวันนี้นะครับ

00:04:50.759 --> 00:04:53.519
ก็คือเราไปที่ ChatGPT ไปที่ Claude นะครับ

00:04:53.720 --> 00:04:55.797
เราได้คำสั่งเรียงเป็นตับเลย

00:04:55.880 --> 00:04:57.400
เราก็อปปี้เพสต์แล้วลองๆ รันดู

00:04:57.520 --> 00:05:00.517
แต่เราไม่รู้ว่าแต่ละ step เนี่ยมันทำงานได้มั้ยบนคอมเรา

00:05:00.600 --> 00:05:02.237
ไม่ว่าจะเป็น dependency นะครับ

00:05:02.320 --> 00:05:05.437
ไม่ว่าจะเป็น syntax ไม่ว่าจะเป็นนู่นนี่นั่นนะครับ

00:05:05.520 --> 00:05:07.116
เราไม่ได้ตรวจสอบทีละ step

00:05:07.199 --> 00:05:09.836
แล้วเราก็ต้องไปไล่ก๊อปไล่วาง ไล่ก๊อปไล่วางถูกมั้ยครับ

00:05:09.919 --> 00:05:12.797
แต่ว่าอันนี้ก็คือ ผมพยายามจะทำให้มันยิงทีเดียวครับ

00:05:12.880 --> 00:05:14.640
แล้วก็ทำทุกอย่างให้ได้สำเร็จ

00:05:15.160 --> 00:05:18.317
แต่ว่าก็ต้องเชื่อใจ agent ผมนิดนึงนะครับ

00:05:18.400 --> 00:05:19.357
ว่ามันสามารถทำงานได้

00:05:19.440 --> 00:05:22.200
เดี๋ยวผมจะเอารีโพให้ดูตอนท้ายครับ

00:05:22.960 --> 00:05:27.317
โอเค ก็ task นี้คือ set up local backend นะครับ

00:05:27.400 --> 00:05:31.120
จินตนาการดูว่าลูกค้าอยากได้ POC พรุ่งนี้นะครับ

00:05:31.560 --> 00:05:33.437
หรือว่า frontend อยากได้ POC พรุ่งนี้

00:05:33.520 --> 00:05:35.357
เราก็สามารถซัดไปเลยครับ

00:05:35.440 --> 00:05:38.799
ให้ตัวนี้ทำงานให้ได้ เสร็จภายใน 1 นาทีครับ

00:05:39.479 --> 00:05:44.079
ลองคิดดูว่าเราจะสามารถแข่งกับ AI แบบนี้ได้มั้ยนะครับ

00:05:46.160 --> 00:05:50.240
โอเค ตอนนี้ก็อยู่ที่ step ที่ 5 แล้วฮะ

00:05:51.080 --> 00:05:53.917
โอเค ก็จะเห็นว่ามันทำงานเสร็จแล้ว

00:05:54.000 --> 00:05:55.157
มันก็จะมีการเช็กนะครับ

00:05:55.240 --> 00:05:57.676
ก็ในรีโพตัวนี้ก็จะมีแบบ show status show diagram

00:05:57.759 --> 00:05:58.637
นู่นนี่นั่นนะครับ

00:05:58.720 --> 00:06:00.360
เพื่อเข้าใจการทำงานของมัน

00:06:00.919 --> 00:06:02.477
โอเค พอ task complete นะครับ

00:06:02.560 --> 00:06:05.000
เราก็จะมีแบบมี log อะไรให้ดูในรีโพนี้นะครับ

00:06:05.199 --> 00:06:09.157
แต่ว่าที่สำคัญคือเดี๋ยวจะมีโชว์ให้ดูว่า API ตัวนี้

00:06:09.240 --> 00:06:16.639
มันรันบน local แล้วจริงๆ นะครับ

00:06:17.319 --> 00:06:22.000
โอเคใกล้จบแล้วทุกคนครับ

00:06:22.560 --> 00:06:28.357
API product มาแล้วครับ

00:06:28.440 --> 00:06:32.120
ภายใน 1 นาทีนะครับ

00:06:33.639 --> 00:06:36.040
เราไปดูรายละเอียดกันนะครับ

00:06:41.199 --> 00:06:46.199
เดี๋ยวผมจะอธิบายคร่าวๆ แล้วกันนะครับวิธีการทำงานของมัน

00:06:46.720 --> 00:06:50.997
เราไปที่ shell agent นะครับแล้วก็ใส่ instruction

00:06:51.080 --> 00:06:53.037
แล้วก็มีให้เลือก 2 โหมดนะครับ

00:06:53.120 --> 00:06:56.396
ว่าจะเป็นโหมด run step by step คือเราอยากอ่านคำสั่งก่อน

00:06:56.479 --> 00:06:58.477
แล้วค่อย run หรือว่าเราอยาก run แบบ auto ไปเลย

00:06:58.560 --> 00:06:59.520
เมื่อตะกี้คือแบบ auto

00:07:00.599 --> 00:07:02.877
ผมแนะนำถ้าเกิดใครโหลด repo ไปเล่นแล้วเนี่ย

00:07:02.960 --> 00:07:05.037
ก็ลองแบบ step by step ก่อนนะครับ

00:07:05.120 --> 00:07:06.477
แบบสร้างความเชื่อใจกันก่อนฮะ

00:07:06.560 --> 00:07:09.199
คิดซะว่าเป็น junior ในทีมครับ

00:07:10.919 --> 00:07:14.720
ขออนุญาตอธิบายหลักการ react คร่าวๆ นะครับว่ามันทำงานยังไง

00:07:15.560 --> 00:07:17.760
ก่อนหน้านี้เนี่ยการใช้ LLM เนี่ยก็คือ

00:07:17.960 --> 00:07:21.116
มันจะเริ่มจากคำสั่งแล้วไป action เลยนะครับ

00:07:21.199 --> 00:07:24.116
แล้วรับ feedback แล้วก็ไป action ถัดไปเลย

00:07:24.199 --> 00:07:26.956
แต่ว่าในยุคก่อน GPT แล้วกัน

00:07:27.039 --> 00:07:28.917
แชท GPT ก็มีงานวิจัยนึงออกมาบอกว่า

00:07:29.000 --> 00:07:31.200
ถ้าเกิดเราให้มัน reasoning ก่อนเนี่ย

00:07:31.360 --> 00:07:33.919
มันจะทำงานได้ดีขึ้นเป็นอย่างมากนะครับ

00:07:34.240 --> 00:07:38.120
เราก็เลยมีการ reasoning ก่อนแล้วค่อยตามด้วย action นะครับ

00:07:38.319 --> 00:07:40.600
เพื่อเพิ่ม accuracy ของการทำงานมัน

00:07:40.759 --> 00:07:46.317
อันนี้ก็คือเป็น classic paper ที่ทุกคนแตกหน่อไปทำงานวิจัยต่อนะครับ

00:07:46.400 --> 00:07:50.956
แนะนำให้ไปอ่านดูได้นะครับ

00:07:51.039 --> 00:07:54.199
แล้วก็มาอ่าน implementation ที่สไลด์ผมได้นะครับ

00:07:54.960 --> 00:07:57.116
เรามาดู paper พื้นฐานก่อน โค้ดพื้นฐาน

00:07:57.199 --> 00:07:59.639
อันนี้คือเป็นโค้ด python นะครับ

00:07:59.800 --> 00:08:01.799
ทุกคนเคยเขียน python มาใช่มั้ยครับ

00:08:01.919 --> 00:08:09.037
หลักๆ เนี่ยจะเห็นสิ่งที่สังเกตอย่างแรกคือจะมี loop ครับ

00:08:09.120 --> 00:08:10.757
มี loop ด้านบน for loop ครับ

00:08:10.840 --> 00:08:12.437
จะวน loop ได้ 8 ครั้งครับ

00:08:12.520 --> 00:08:15.399
ก็คือ original paper เนี่ยให้โอกาส 8 ครั้งในการทำงาน

00:08:15.560 --> 00:08:17.560
8 step ไปเรื่อยๆ นะครับ

00:08:18.280 --> 00:08:22.997
สิ่งที่ต้องสังเกตก็คือบรรทัดที่นี่ครับ observation

00:08:23.080 --> 00:08:26.840
observation ก็คือเราได้ action มาใช่มั้ยครับ

00:08:27.000 --> 00:08:28.796
แล้วเราก็ได้ observation มาครับ

00:08:28.879 --> 00:08:32.037
observation เนี่ยคือเกิดจากการเรียก tool หรือเรียก API จริงๆ

00:08:32.120 --> 00:08:34.956
แล้วก็เอาผลลัพธ์เนี่ยมาประกอบตรงนี้ฮะ

00:08:35.039 --> 00:08:37.717
พอประกอบตรงนี้เนี่ยด้วยความที่เป็น text completion นะครับ

00:08:37.800 --> 00:08:40.836
เขาใส่ตัวอย่างให้เราว่าถ้าเกิดมี thought เนี่ย

00:08:40.919 --> 00:08:43.316
ซึ่งก็คือการ reasoning action มี observation

00:08:43.399 --> 00:08:47.119
เสร็จปุ๊บสิ่งที่จะตามมาคือ thought ของ step ถัดไป

00:08:47.959 --> 00:08:51.077
ด้วยความที่ยุคสมัยมันเป็นยุคก่อนแชท GPT เนาะ

00:08:51.160 --> 00:08:52.196
มันก็เลยไม่ได้ออกมาเป็นแชท

00:08:52.279 --> 00:08:54.316
มันจะออกมาเป็น text completion

00:08:54.399 --> 00:08:55.640
มันก็เหมือนกับการต่อคำ

00:08:55.760 --> 00:08:58.880
ถ้าเกิด observation จบมันก็คือ thought เลขถัดไปนั่นเองครับ

00:08:59.720 --> 00:09:01.320
ก็หลักการมีแค่นี้เลยครับ

00:09:01.720 --> 00:09:03.160
แต่ว่าสิ่งที่ผมใส่เพิ่มไปเนี่ย

00:09:03.440 --> 00:09:07.637
เดี๋ยวจะมาอธิบายว่าใส่ไรเพิ่มเข้าไปจาก original paper นะครับ

00:09:07.720 --> 00:09:10.480
ก็บทสรุปของ react แล้วกัน

00:09:10.680 --> 00:09:14.876
ผมใส่มาเป็น stack งี้เพื่อให้เข้าใจในยุคของแชท GPT แล้วกันครับ

00:09:14.959 --> 00:09:18.756
หมายความว่าในช่องที่เป็น user นะครับ

00:09:18.839 --> 00:09:20.637
เราจะใส่ instruction เข้ามาใช่มั้ยครับ

00:09:20.720 --> 00:09:22.920
แล้ว AI ก็จะ generate thought กับ action ออกมา

00:09:23.040 --> 00:09:25.876
แล้วทีนี้ user ก็ตอบกลับไปด้วย observation

00:09:25.959 --> 00:09:30.599
ทีนี้ API มันก็จะเข้าใจแล้วว่าคือยังไงครับ

00:09:31.279 --> 00:09:39.080
ถึงตรงนี้มีใครมีคำถามเลยมั้ยครับ เชิญครับ

00:09:39.959 --> 00:09:42.917
thought เนี่ยคือการ reasoning ครับ

00:09:43.000 --> 00:09:47.357
หมายความว่าจากที่เขาหามาคือพอมีคำว่า thought เนี่ย

00:09:47.440 --> 00:09:48.837
มันจะรู้เลยว่ามันต้องทำยังไง

00:09:48.920 --> 00:09:51.357
คือผมเขียนคำอธิบายไปด้วยแหละใน original paper

00:09:51.440 --> 00:09:53.440
มันก็จะมีคำอธิบายว่า thought คืออะไร

00:09:54.120 --> 00:09:56.876
เดี๋ยวเราจะมาเห็นกันใน prompt ว่าผมอธิบายว่า thought คืออะไร

00:09:56.959 --> 00:09:58.037
มันก็จะ generate ออกมาว่า

00:09:58.120 --> 00:10:00.876
เอ้ย ควร reasoning นะว่าสิ่งที่ได้รับก่อนหน้านี้คืออะไร

00:10:00.959 --> 00:10:02.559
แล้ว step ถัดไปควรจะเป็นยังไง

00:10:03.079 --> 00:10:06.996
action ก็คือจริงๆ generate มาเป็น shot เดียวกันนะครับ

00:10:07.079 --> 00:10:09.960
ก็คือ thought เสร็จ action ครับ

00:10:11.920 --> 00:10:15.876
อธิบายไว้หมดแล้วว่าใน system prompt ว่า

00:10:15.959 --> 00:10:19.279
thought คืออะไร action คืออะไร instruction คืออะไรครับ

00:10:19.959 --> 00:10:29.677
จริงๆ มี example ให้ดูไวๆ ครับ

00:10:29.760 --> 00:10:45.080
แต่ว่าผมทำให้ดูเลยแล้วกันฮะ

00:10:51.480 --> 00:10:53.477
อันนี้ก็คือ prompt พื้นฐานนะครับ

00:10:53.560 --> 00:10:54.876
คือไม่ใช่ prompt ที่ผมใช้จริงๆ

00:10:54.959 --> 00:10:58.117
แต่ว่าเป็นไอเดีย prompt แรกเลยที่เอามาจาก langchain นะครับ

00:10:58.200 --> 00:11:00.357
จะเห็นได้ว่าผมอธิบายว่า instruction คืออะไร

00:11:00.440 --> 00:11:03.237
thought คืออะไร observation คืออะไรนะครับ

00:11:03.320 --> 00:11:06.717
แล้วก็ด้วยอิทธิฤทธิ์ของ GitHub Copilot นะครับ

00:11:06.800 --> 00:11:08.919
ผมขอทดลองอะไรให้ดูบางอย่าง

00:11:47.839 --> 00:11:50.759
ข้อดีของ GitHub นะครับ GitHub Copilot ก็คือ

00:11:50.920 --> 00:11:52.597
เราทำ prompt engineering ได้ไวครับ

00:11:52.680 --> 00:11:54.357
สามารถ generate example ได้ไวครับ

00:11:54.440 --> 00:11:57.000
มาดูอภินิหารกันนะครับ

00:11:57.680 --> 00:12:00.037
จะดูว่า prompt ที่เราเขียนมาเนี่ย ผลลัพธ์เราเป็นไง

00:12:00.120 --> 00:12:08.200
จับมาใส่ในนี่นะฮะ

00:12:09.040 --> 00:12:10.279
เห็นภาพไหมครับ

00:12:16.040 --> 00:12:19.196
โอเค ตัวอย่างการเขียน prompt ReAct เพิ่มเติมนะครับ

00:12:19.279 --> 00:12:22.640
เดี๋ยวผมเปิดให้ดู

00:12:23.480 --> 00:12:27.400
สมมุติว่าเราอยากทำ AI agent ที่เป็นนักอ่านใจนะฮะ

00:12:29.760 --> 00:12:34.680
โอเค เราก็จะบอกว่าให้ลองเดาตัวเลขขึ้นมานะครับว่า

00:12:34.839 --> 00:12:36.717
ตัวเลขที่ user คิดอยู่คืออะไรนะครับ

00:12:36.800 --> 00:12:39.277
thought ก็คือ you always think about what to do

00:12:39.360 --> 00:12:41.677
อันนี้คือเหมือนมันเข้าใจนะครับว่าเราหมายถึงอะไรนะครับ

00:12:41.760 --> 00:12:45.077
ถ้าเกิดใครเอาไปลองที่บ้านได้ครับ

00:12:45.160 --> 00:12:48.560
action นะครับก็คือ question you would like to ask

00:12:49.160 --> 00:12:52.597
ตัวอย่างมันก็จะแบบลองไปเล่นได้ครับที่บ้าน

00:12:52.680 --> 00:12:54.799
เดี๋ยวผมแจก repo เลยแล้วกันฮะ

00:12:55.639 --> 00:12:56.880
เตรียมถ่ายรูปครับ

00:13:08.360 --> 00:13:09.917
เข้าไปที่ repo นี้นะครับ

00:13:10.000 --> 00:13:12.357
download setup OpenAI API key นะครับ

00:13:12.440 --> 00:13:14.999
แล้วก็เข้าไปที่ shell agent ฮะ

00:13:15.839 --> 00:13:17.637
ก็เป็น Next.js นะครับ

00:13:17.720 --> 00:13:18.837
เป็น stack ธรรมดานะครับ

00:13:18.920 --> 00:13:20.400
ทุกคนรู้จัก Next.js ใช่มั้ยฮะ

00:13:20.760 --> 00:13:23.159
โอเค npm install เป็นกันทุกคนนะครับ

00:13:24.040 --> 00:13:26.720
โอเค ครับ ขอบคุณครับ เยี่ยมมาก

00:13:29.240 --> 00:13:32.079
โอเค ต่อเลย

00:13:33.880 --> 00:13:35.756
implementation นะครับผมทำไงนะครับ

00:13:35.839 --> 00:13:37.876
ก็คือใช้ full stack Next.js นั่นเองครับ

00:13:37.959 --> 00:13:38.996
จะมีอยู่ 2 API ครับ

00:13:39.079 --> 00:13:42.157
API ที่เรียกว่า run OpenAI กับ run bash นะครับ

00:13:42.240 --> 00:13:45.477
run OpenAI ก็คือส่งไป run ทุกอย่างไป run OpenAI เนี่ยแหละครับ

00:13:45.560 --> 00:13:49.090
run bash ก็คือ API ที่ผมจะโยน bash script

00:13:49.173 --> 00:13:51.637
เข้าไปให้ backend run นะครับมีแค่ 2 อย่าง

00:13:51.720 --> 00:13:54.438
ส่วน frontend ก็คือมีหน้าที่จัดการ state ทั้งหมด

00:13:54.600 --> 00:13:59.120
รับ OpenAI output จัดไปให้ bash script นะครับ

00:14:01.120 --> 00:14:05.717
เมื่อ 2 เดือนที่ผ่านมาผมก็อัพเดตตัว repo นี้นะครับ

00:14:05.800 --> 00:14:07.756
ให้ใช้ structure output ของตัว OpenAI

00:14:07.839 --> 00:14:11.119
ใครๆ ได้ข่าวเรื่อง structure output ของ OpenAI บ้างฮะ

00:14:11.959 --> 00:14:13.717
โอเค ข่าวไม่ดังเนาะ

00:14:13.800 --> 00:14:16.559
เอาเป็นว่าผมใช้ structure output จริงๆ ฮะ

00:14:17.079 --> 00:14:18.717
เพื่อที่จะไม่ต้องมาตัด string เองนะครับ

00:14:18.800 --> 00:14:20.597
เพราะถ้าดูจากใน original paper เนี่ย

00:14:20.680 --> 00:14:23.160
คือเค้าทำการตัด string concatenate อะไรเองหมด

00:14:23.680 --> 00:14:25.637
ผมก็เลยใช้ structure output นะครับ

00:14:25.720 --> 00:14:28.116
ผลลัพธ์ที่ได้คือพอเป็น structure output

00:14:28.199 --> 00:14:29.717
performance ต่ำลงนิดหน่อยนะครับ

00:14:29.800 --> 00:14:31.640
แต่ว่าเขียนโค้ดง่าย

00:14:32.320 --> 00:14:34.880
โอเค มาดู prompt structure จริงๆ ของผมกันบ้างครับ

00:14:35.800 --> 00:14:37.397
สิ่งที่ผมใส่เพิ่มมาจาก ReAct นะครับ

00:14:37.480 --> 00:14:40.756
ผมรวมกับ paper ที่ชื่อว่า verification step by step นะครับ

00:14:40.839 --> 00:14:43.920
ชื่อว่า let's verify step by step นะครับ

00:14:44.320 --> 00:14:46.400
หมายความว่าผมบอกใน prompt ไว้แหละว่า

00:14:46.519 --> 00:14:47.756
หลังจากที่ทำงานเสร็จนะครับ

00:14:47.839 --> 00:14:49.908
หลังจากที่ generate bash script ออกมาเนี่ย

00:14:50.000 --> 00:14:51.597
ให้ generate bash script อีกอันนึง

00:14:51.680 --> 00:14:53.279
ที่ไว้ตรวจสอบงานที่ทำด้วย

00:14:53.680 --> 00:14:55.316
มันก็จะเป็น alternate กันไปครับว่า

00:14:55.399 --> 00:14:57.756
เป็น execute เป็น validate execute validate นะครับ

00:14:57.839 --> 00:14:59.756
อันนี้คือสิ่งที่ผมใส่เข้าไปเพิ่มนะครับ

00:14:59.839 --> 00:15:02.600
ไปดูตัวอย่างการ implement ได้ในโค้ดครับ

00:15:05.399 --> 00:15:07.040
อันนี้คืออธิบายเพิ่มเติมนะครับ

00:15:07.320 --> 00:15:08.797
structure ที่ผมใส่เข้าไปนะครับก็คือ

00:15:08.880 --> 00:15:10.597
user เนี่ยก็จะพิมพ์ instruction เข้ามา

00:15:10.680 --> 00:15:13.159
ผมก็ส่งไปเรียก OpenAI นะครับ

00:15:13.560 --> 00:15:15.316
แล้วก็ extract ตัว thought ออกมา

00:15:15.399 --> 00:15:16.958
มันจะ output ออกมาเป็น JSON นะฮะ

00:15:17.320 --> 00:15:19.556
ก็เอา thought ออกมา เอา action ออกมา

00:15:19.639 --> 00:15:24.037
เอา action ไป run bash แล้วก็เก็บ observation นะครับ

00:15:24.120 --> 00:15:30.200
ก็หลักการคล้ายๆ กันนะครับจากที่พูดถึงเมื่อกี้

00:15:31.800 --> 00:15:35.240
สำหรับใครที่ยังไม่เคยใช้ OpenAI SDK นะครับ

00:15:36.240 --> 00:15:37.597
ดูอันนี้สักครู่นึง

00:15:37.680 --> 00:15:41.241
อันนี้ก็คือเป็นบทสนทนาธรรมดานะครับเหมือนกับแชททั่วไป

00:15:41.560 --> 00:15:44.597
ผมก็แค่จะโชว์ให้ดูว่าตัว message object

00:15:44.680 --> 00:15:46.637
ที่เราส่งไปให้ OpenAI จริงๆ แล้วเนี่ย

00:15:46.720 --> 00:15:48.119
มันหน้าตาเป็นไงนะฮะ

00:15:48.880 --> 00:15:50.199
ผมจะพยายามเลื่อนให้

00:15:50.480 --> 00:15:55.116
พอเห็นมั้ยฮะ

00:15:55.199 --> 00:15:59.477
จะเห็นว่ามันจะมี role นะครับกับ content สลับไปมานะครับ

00:15:59.560 --> 00:16:03.717
role เป็น user กับ role เป็น assistant นะครับ

00:16:03.800 --> 00:16:07.558
role เป็น user เนี่ยก็คือสิ่งที่ user input เข้าไป

00:16:07.920 --> 00:16:11.520
ส่วน OpenAI เนี่ยก็จะตอบกลับมาเป็น assistant ที่มี content

00:16:11.800 --> 00:16:14.400
แล้วเราก็มา concatenate กันบน frontend

00:16:15.279 --> 00:16:18.196
แล้วพอเราต้องการทำเป็น chatbot นะครับ

00:16:18.279 --> 00:16:20.236
เราก็เอา history ทั้งหมดเนี่ย

00:16:20.319 --> 00:16:22.436
ทั้ง user ทั้ง assistant ที่ตอบก่อนหน้าเนี่ย

00:16:22.519 --> 00:16:25.440
แล้วเราก็ใส่ user อันล่าสุดกลับไปนะครับ

00:16:25.639 --> 00:16:28.157
แล้วตัว OpenAI ก็จะตอบ assistant กลับมา

00:16:28.240 --> 00:16:30.519
มันก็จะมี context awareness นะครับ

00:16:30.800 --> 00:16:32.359
ตรงนี้ทุกคนเข้าใจมั้ยครับ

00:16:32.680 --> 00:16:35.320
ใครมีคำถามถึงตรงนี้ยกมือขึ้นฮะ

00:16:36.160 --> 00:16:40.799
โอเค สุดยอดฮะ

00:16:50.839 --> 00:16:52.077
อันนี้จะให้ดูตัวอย่างว่า

00:16:52.160 --> 00:16:55.157
หลังจากที่ใช้ structure output กับ ReAct

00:16:55.240 --> 00:16:57.316
บวกกับ verification step by step เนี่ย

00:16:57.399 --> 00:16:58.839
หน้าตามันจะเป็นไงนะครับ

00:17:00.959 --> 00:17:05.600
ก็จะดูคล้ายๆ ของเดิมนะครับ

00:17:06.280 --> 00:17:12.756
แล้วก็ตัว payload หน้าตาเป็นไงนะครับ

00:17:12.839 --> 00:17:15.880
ก็ใช้ structure output ก็จะได้มาเป็น JSON นะครับ

00:17:16.439 --> 00:17:18.199
ส่วน observation เนี่ยถ้าเกิดมี

00:17:18.480 --> 00:17:20.716
บางที bash script มันไม่มี output เนาะ

00:17:20.799 --> 00:17:23.437
ถ้ามีก็คือมันจะมีอะไรมาต่อตรงนี้

00:17:23.520 --> 00:17:25.236
แต่ถ้าไม่มีก็คือจะเป็น no output ไปฮะ

00:17:25.319 --> 00:17:27.920
อันนี้ผม hard code ไว้ถ้าไม่มี output อะไรออกมา

00:17:29.080 --> 00:17:30.917
ก็ส่งกลับไปกลับมาอย่างงี้นะครับ

00:17:31.000 --> 00:17:33.596
ก็จะได้ agent ที่เราต้องการครับ

00:17:33.679 --> 00:17:35.197
ถัดไปฮะ

00:17:35.280 --> 00:17:48.839
โอเค เดี๋ยวผมจะโชว์ system prompt ให้ดูนะฮะ

00:17:49.679 --> 00:17:53.199
โอเค ไหวๆ ฮะ ยาวจัดฮะ

00:17:53.640 --> 00:17:56.037
ก็จะมีอธิบายไว้ว่า thought คืออะไรนะครับ

00:17:56.120 --> 00:17:57.557
action type คืออะไรนะครับ

00:17:57.640 --> 00:18:00.037
เพราะผมมี execution กับ validate

00:18:00.120 --> 00:18:03.197
แล้วก็ action ก็คือจะระบุแบบใส่รายละเอียดไว้ว่า

00:18:03.280 --> 00:18:05.357
ต้องการให้ generate bash script ออกมาเป็นไง

00:18:05.440 --> 00:18:08.720
handle เคสนู้นเคสนี้ยังไงนะฮะ

00:18:09.400 --> 00:18:13.877
โอเค จบแล้วครับ ไม่มี quick demo ครับ

00:18:13.960 --> 00:18:15.797
ใครมีคำถามครับขอให้ยกมือขึ้นครับ

00:18:15.880 --> 00:18:20.079
ผมมีเวลา 3 นาทีฮะ

00:18:21.960 --> 00:18:25.079
โอเค ไม่ถาม ไม่ถามใช่มั้ยฮะ

00:18:25.760 --> 00:18:32.600
โอเค ก็อีกครั้งนะครับขอฝาก GitHub Copilot ไว้ครับ

00:18:33.080 --> 00:18:35.600
แล้วก็ใครต้องการ presentation นี้ครับ

00:18:36.280 --> 00:18:37.920
สแกนดาวน์โหลดไปได้เลยฮะ

00:18:38.320 --> 00:18:43.320
แจกฟรีนะครับไม่มีค่าใช้จ่าย

00:18:44.679 --> 00:18:46.877
โอเค ไม่มีคำถามใช่มั้ยครับ

00:18:46.960 --> 00:18:48.117
เสื้อฟ้า ไม่มี

00:18:48.200 --> 00:18:51.917
โอเคฮะ จบแล้วครับทุกคน

00:18:52.000 --> 00:18:58.040
ขอขอบคุณครับ สวัสดีครับ
