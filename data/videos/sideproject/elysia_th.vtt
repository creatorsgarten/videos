WEBVTT

00:00:00.200 --> 00:00:01.433
โอเค ก็

00:00:01.500 --> 00:00:04.433
ฮัลโหลๆ สวัสดีครับ

00:00:09.000 --> 00:00:12.833
โอเคฮะ ถ้าหากว่าใครเคยตาม YouTube

00:00:12.900 --> 00:00:17.433
แบบพวก tech stack พวก Theo หรือว่า ThePrimeagen

00:00:17.500 --> 00:00:21.133
ก็น่าจะพอคุ้นๆ กับวิดีโอนี้อยู่

00:00:21.200 --> 00:00:24.433
ฮัลโหลๆ โอ้ มันต้องพูดใกล้มากเลยเนาะ

00:00:24.500 --> 00:00:25.933
คือล่าสุดเมื่อประมาณ 2-3 วันที่แล้วอ่ะ

00:00:26.000 --> 00:00:30.033
มีคนทำ tech stack อันนึงชื่อว่า BETH Stack ขึ้นมา

00:00:30.100 --> 00:00:31.733
ซึ่งอันนี้เป็น- ถ้าหากว่าเข้าไปใน Twitter อ่ะ

00:00:31.800 --> 00:00:33.233
คนค่อนข้างรู้จักเยอะอยู่

00:00:33.300 --> 00:00:37.633
ทีนี้ หลักๆ มันจะมี Stack อยู่อันนึงที่ชื่อว่า Elysia

00:00:37.700 --> 00:00:41.433
ซึ่ง Elysia เนี่ยมันคือ เหมือนกับเป็น web framework

00:00:41.500 --> 00:00:43.733
เป็น TypeScript web framework ที่มันเร็วมากๆ

00:00:43.800 --> 00:00:44.933
อยู่ตัวนึง รันบน Bun

00:00:45.000 --> 00:00:47.933
ถ้าใครไม่รู้จักก็ คิดสภาพง่ายๆ ว่า

00:00:48.000 --> 00:00:51.233
สมมุติเหมือนเราเขียนโค้ดเป็นคล้ายๆ Express

00:00:51.300 --> 00:00:54.233
แต่ว่ามันเร็วกว่า Express อ่ะ แบบ 17 เท่า

00:00:54.300 --> 00:00:57.133
โดยที่เราแค่รัน แค่เขียนคล้ายๆ กับ Express อ่ะ

00:00:57.200 --> 00:00:59.333
มันเร็วขึ้นกว่าเดิมแบบ 17 เท่าเลย

00:00:59.400 --> 00:01:00.933
ทั้งหมดเนี่ย มันเขียนบน TypeScript

00:01:01.000 --> 00:01:02.933
แล้วถ้าหากว่าไปเขียนเป็น multi-thread เนี่ย

00:01:03.000 --> 00:01:04.433
ทำเป็น multi-process เนี่ย

00:01:04.500 --> 00:01:06.933
มันแอบที่จะเร็วเกือบเท่าตัว Rust Actix

00:01:07.000 --> 00:01:09.333
หรือว่าเร็วกว่า Go Fiber หรือ Gin

00:01:09.400 --> 00:01:12.032
ซึ่งถือว่าเร็วมากๆ ในการที่เอา TypeScript เนี่ย

00:01:12.100 --> 00:01:14.532
มารันเป็น web server ใช่มั้ยฮะ

00:01:14.600 --> 00:01:16.633
ซึ่งแบบว่า โอเค 17 เท่า 20 เท่า

00:01:16.700 --> 00:01:18.433
มันฟังเร็วแบบแปลกมากๆ เลยใช่มั้ย

00:01:18.500 --> 00:01:22.833
ทุกอย่างเนี่ยมันเกิดขึ้นได้ด้วยการที่ผมเขียน 2 อย่าง

00:01:22.900 --> 00:01:26.233
ก็คือ framework ตัวเนี้ยมันเอาไปรันบน Bun

00:01:26.300 --> 00:01:30.333
Bun เนี่ยมันเป็น runtime ตัวนึงที่ค่อนข้างเร็วมากๆ

00:01:30.400 --> 00:01:33.333
เขาว่าในอนาคตเนี่ย เค้าจะพยายามเอามาแทนที่ Node อยู่

00:01:33.400 --> 00:01:36.032
แต่ทีนี้เนี่ย อีกอันนึงก็คือเรามี algorithm

00:01:36.100 --> 00:01:39.933
ที่ชื่อว่า static code analysis แล้วก็ dynamic code injection

00:01:40.000 --> 00:01:42.833
เหมือนกับเราอ่านโค้ดของคนที่เขียนเนี่ย

00:01:42.900 --> 00:01:46.733
แล้วมันสร้างโค้ดขึ้นมาใหม่ โดยที่ตัด overhead อย่างอื่นออก

00:01:46.800 --> 00:01:48.933
แล้วตัวเนี้ย วันนี้จะไม่ได้มาพูดถึงเรื่องแบบว่า

00:01:49.000 --> 00:01:51.133
ทำไมมันถึงเร็ว ทำไมมันถึง อย่างนู้นอย่างนี้

00:01:51.200 --> 00:01:53.433
แต่เราจะมาพูดถึงเรื่องว่าทำไมคนถึงชอบใช้ Elysia

00:01:53.500 --> 00:01:56.233
แล้วก็เรื่อง developer experience เป็นยังไงเนาะ

00:01:56.300 --> 00:01:58.033
ก็ในนี้มีใครเคยเขียน backend เนาะ

00:01:58.100 --> 00:02:03.233
ก็จะรู้ว่า ปกติเนี่ย เวลาเราเขียน authentication เนี่ย

00:02:03.300 --> 00:02:06.633
เราจะใช้เวลา set up ค่อนข้างนาน เช่น 2 ชั่วโมง 3 ชั่วโมง

00:02:06.700 --> 00:02:09.833
แต่ใน Elysia เนี่ย ถ้าใครเคยเขียน Elysia

00:02:09.900 --> 00:02:11.733
ตอนนี้จะมี experimental project อยู่อันนึง

00:02:11.800 --> 00:02:12.733
ชื่อว่า Elysia Elf

00:02:12.800 --> 00:02:16.533
หลักๆ ก็คือ มันทำให้เราสามารถ set up project Elysia

00:02:16.600 --> 00:02:18.632
แบบว่าทุกอย่างเนี่ย ง่ายมากๆ

00:02:18.700 --> 00:02:20.033
แค่เราพิมพ์คำสั่งไม่กี่คำสั่ง

00:02:20.100 --> 00:02:21.733
เดี๋ยวเราลองมาดูกันเนาะ ว่าเป็นยังไงเนาะ

00:02:21.800 --> 00:02:26.733
ก็เดี๋ยวเราขออนุญาตวางไมค์ แล้วก็เพิ่มขนาดจอนิดนึง

00:02:26.800 --> 00:02:29.433
โอเค

00:02:31.200 --> 00:02:32.132
โอเค ก็

00:02:32.200 --> 00:02:33.933
วิธีการสร้างโปรเจกต์ Elysia เนาะ

00:02:34.000 --> 00:02:35.533
เราพิมพ์ว่า bun create elysia

00:02:35.600 --> 00:02:37.632
แล้วก็ชื่อโปรเจกต์ที่เราต้องการ

00:02:37.700 --> 00:02:39.132
ผมตั้งชื่อโปรเจกต์เป็น 08 ละกัน

00:02:43.400 --> 00:02:45.033
หลักๆ ก็จะเป็นประมาณนี้

00:02:45.100 --> 00:02:46.632
เราพิมพ์ว่า bun create

00:02:47.700 --> 00:02:49.132
แล้วก็ได้โปรเจกต์มา

00:02:49.200 --> 00:02:50.733
ทีนี้เรา cd เข้าไป

00:02:50.800 --> 00:02:52.733
ถ้าเราไปดูที่โค้ดตรงนี้เนี่ย

00:02:52.800 --> 00:02:54.833
เราจะมีโค้ดหน้าตาเป็นประมาณนี้

00:02:55.600 --> 00:02:56.733
src/index ปุ๊บ

00:02:57.500 --> 00:02:59.433
อันนี้คือ server Elysia 1 อัน

00:02:59.500 --> 00:03:00.433
หลักๆ ก็คือเราพิมพ์ว่า

00:03:00.500 --> 00:03:02.733
โอเค .get แล้วก็บอกว่า

00:03:02.800 --> 00:03:05.233
method path เนี้ยสามารถทำอะไรได้บ้าง

00:03:05.300 --> 00:03:06.333
เหมือน Express เลย

00:03:06.400 --> 00:03:07.933
คิดสภาพแบบเหมือน Express เลย

00:03:08.000 --> 00:03:09.433
แต่เราไม่มี res ไม่มี req

00:03:09.500 --> 00:03:10.533
ไม่มี request response

00:03:10.600 --> 00:03:12.433
แค่ส่งค่ากลับไป

00:03:12.500 --> 00:03:14.132
แล้วมันก็จะได้เป็น server ขึ้นมา

00:03:14.200 --> 00:03:15.733
ทีนี้เนี่ย เดี๋ยวเราลองมา setup

00:03:15.800 --> 00:03:17.933
แบบว่า authentication ดูละกันเนาะ

00:03:18.000 --> 00:03:22.632
อย่างแรกก็คือเราสร้าง Redis stack ขึ้นมา

00:03:22.700 --> 00:03:24.833
แล้วก็เดี๋ยวเราเอา Docker มา run

00:03:24.900 --> 00:03:26.433
จริงๆ น่าจะ run ไปแล้วมั้ง

00:03:26.500 --> 00:03:29.333
เอา Docker มา run Postgres ขึ้นมา

00:03:29.400 --> 00:03:31.733
เอาไว้เป็นตัวเก็บ authentication ละกันเนาะ

00:03:31.800 --> 00:03:35.533
ทีนี้เห็นว่าผมเพิ่งสร้างโปรเจกต์ใหม่ใช่มั้ย

00:03:35.600 --> 00:03:37.333
ทีนี้มันจะมี experimental อันนึง

00:03:37.400 --> 00:03:39.132
ที่ถ้าใครเคยเขียน Laravel หรือ Ruby on Rails

00:03:39.200 --> 00:03:42.533
มันจะมี CLI สำหรับการ generate โปรเจกต์ต่างๆ

00:03:42.600 --> 00:03:43.933
ตัว Elysia เนี่ยมันก็มีเหมือนกัน

00:03:44.000 --> 00:03:45.233
ชื่อ elf ทีนี้เนี่ย

00:03:45.300 --> 00:03:46.533
เวลาเราพิมพ์คำสั่งนี้เข้าไป

00:03:46.600 --> 00:03:47.933
ผมพิมพ์คำว่า elf add

00:03:48.700 --> 00:03:50.733
อันนี้จะเป็น plugin ทั้งหมดที่เราสามารถใช้ได้

00:03:50.800 --> 00:03:51.733
อยากได้อะไร อย่างเช่น

00:03:51.800 --> 00:03:53.132
สมมุติอยากได้ GraphQL

00:03:53.200 --> 00:03:54.733
อยากได้ static plugin อยากได้ swagger plugin

00:03:54.800 --> 00:03:57.132
เรา enter ปุ๊บ แล้วก็ตอบคำถามไม่กี่คำถาม

00:03:57.200 --> 00:03:58.033
แล้วมันก็จะได้เป็นตัว

00:03:59.000 --> 00:04:01.433
โค้ดด้านหลังเนี่ย

00:04:01.500 --> 00:04:03.132
มันก็จะอัพเดตมาให้ว่า

00:04:03.200 --> 00:04:05.033
เราเพิ่ม plugin อะไรเข้ามาแล้วบ้าง

00:04:05.700 --> 00:04:07.333
อย่างงี้เนี่ย เราก็เพิ่มบอกว่า

00:04:07.400 --> 00:04:09.233
เราอยากได้ plugin เป็น GraphQL

00:04:09.300 --> 00:04:11.033
เราก็จะแบบ extend ทุกอย่างมาให้หมดเลย

00:04:12.200 --> 00:04:14.433
ทีนี้เนี่ย เดี๋ยวเราลอง run server ดูก่อนนะ

00:04:14.500 --> 00:04:15.433
pnpm pnpm dev ปุ๊บ

00:04:15.500 --> 00:04:17.132
run server ที่ port 3000

00:04:17.200 --> 00:04:18.733
ไปที่ localhost 3000

00:04:18.800 --> 00:04:22.933
swagger ปุ๊บ มันก็จะมี path swagger มาให้หมดเลย

00:04:23.800 --> 00:04:25.332
อันนี้ก็คือเราไม่จำเป็นที่จะต้อง

00:04:25.400 --> 00:04:27.332
มานั่งเขียน API เองว่ามันอยากมีอะไรได้บ้าง

00:04:28.600 --> 00:04:29.933
ทีนี้เนี่ย ความเจ๋งก็คือ

00:04:30.800 --> 00:04:33.033
Elysia เนี่ยมันแอบมีของที่โกงอย่างนึง

00:04:33.100 --> 00:04:35.332
ก็คือสมมุติเราอยากได้ authentication

00:04:35.400 --> 00:04:36.933
เราพิมพ์ elf generate auth

00:04:37.000 --> 00:04:38.933
แล้วบอกว่าอยากได้ ORM เป็นอะไร

00:04:39.000 --> 00:04:40.133
ผมเอาเป็น Prisma ละกัน

00:04:40.800 --> 00:04:43.832
แล้วก็เก็บ Redis สำหรับการเก็บ session เนาะ

00:04:43.900 --> 00:04:45.533
ทีนี้เนี่ย ถ้าใครเคยใช้ Prisma เนี่ย

00:04:46.200 --> 00:04:47.433
มันเหมือนกับเป็น ORM ของ TypeScript

00:04:47.500 --> 00:04:48.832
ที่ทำให้เราสามารถเขียนโค้ด

00:04:48.900 --> 00:04:51.332
แบบง่ายมากๆ ในการจัดการกับ database

00:04:52.000 --> 00:04:54.233
ผมเอาเป็นว่า ผมเอา database เป็น Postgres

00:04:54.300 --> 00:04:58.233
แล้วก็ตั้ง URL เป็นประมาณอย่างนี้ละกัน

00:04:58.300 --> 00:05:00.832
database URL ต้องการที่จะ migrate database มั้ย

00:05:01.600 --> 00:05:04.133
yes ปุ๊บ ทีนี้ที่เหลือเนี่ย

00:05:04.200 --> 00:05:06.733
ตัวนี้มันก็จะจัดการเรื่อง migrate data ให้

00:05:06.800 --> 00:05:07.332
ทั้งหมดเลย

00:05:07.400 --> 00:05:09.533
แล้วมันก็จะถามว่าผมอยากได้ OAuth provider มั้ย

00:05:14.000 --> 00:05:15.832
โอเค ก็ Postgres แล้วก็

00:05:16.600 --> 00:05:19.533
เมื่อกี้ผมลืม migrate database แต่ไม่เป็นไร

00:05:19.600 --> 00:05:22.133
file location โอเค ทั้งหมดเรียบร้อยแล้ว

00:05:22.200 --> 00:05:23.933
ผมพิมพ์แค่นี้ แล้วผมรัน เพียงแค่รัน pnpm dev

00:05:24.600 --> 00:05:27.133
เข้า Swagger มี path เพิ่มมาให้ เป็น auth

00:05:27.200 --> 00:05:29.033
เป็นเรื่อง authentication ทั้งหมดเลย

00:05:29.100 --> 00:05:32.033
library ทั้งหมดตัวนี้ มันจะสร้างไฟล์ auth.ts

00:05:32.100 --> 00:05:35.733
ซึ่งไฟล์ตัวนี้ มันจะเหมือนกับเป็น boilerplate

00:05:35.800 --> 00:05:37.633
ว่าเราสามารถจัดการเรื่อง session ยังไงบ้าง

00:05:37.700 --> 00:05:40.332
เช่น ผมบอกว่า อยากได้ auth แล้วก็ทำ sign in

00:05:40.400 --> 00:05:44.332
ทำ sign out authentication ทุกอย่างหมดเลย

00:05:44.400 --> 00:05:47.233
ทีนี้เดี๋ยวผมลองสร้าง user ดูละกันเนาะ

00:05:47.300 --> 00:05:49.033
อันนึง เอาเป็น sign up ปึ๊บ

00:05:49.100 --> 00:05:53.533
เอาเป็น saltyaom ละกัน

00:05:53.600 --> 00:05:55.332
saltyaom98 ละกัน ประมาณนี้

00:05:55.400 --> 00:05:59.133
password 12345678 execute แล้วก็ได้ user เนาะ

00:05:59.200 --> 00:06:00.633
ทีนี้ผมลอง sign in

00:06:00.700 --> 00:06:04.733
โอเค แน่นอนว่า Swagger ค่อนข้างมีประโยชน์แหละ

00:06:04.800 --> 00:06:06.332
timer ดับไปละ

00:06:06.400 --> 00:06:09.433
ความเจ๋งของมันก็คือ Elysia เนี่ย

00:06:09.500 --> 00:06:11.332
มันสามารถทำสิ่งที่เรียก end-to-end type safety ได้

00:06:11.400 --> 00:06:13.332
ถ้าใครเคยเขียน tRPC เนี่ย

00:06:13.400 --> 00:06:15.433
แน่นอนว่าเราสามารถเอา type ที่ server

00:06:15.500 --> 00:06:16.832
มาใช้บน client ได้ใช่มั้ย

00:06:17.600 --> 00:06:19.733
ซึ่ง Elysia เนี่ยมันก็สามารถทำได้เหมือนกัน

00:06:19.800 --> 00:06:20.832
แต่มันเป็น restful

00:06:20.900 --> 00:06:23.133
สมมุติว่าผมมี server ตัวนึง

00:06:23.200 --> 00:06:28.133
ผมเพิ่ม folder ตัวนึง ชื่อว่า identity

00:06:28.700 --> 00:06:30.433
ตัวนี้เป็นโปรเจคที่ setup มาอยู่แล้ว

00:06:30.500 --> 00:06:31.832
เอาเป็นว่าเป็น Next.js ธรรมดาละกัน

00:06:31.900 --> 00:06:34.233
แล้วก็ใช้แบบง่ายๆ

00:06:34.300 --> 00:06:36.533
ก็คือมันเป็นโปรเจค Next.js ธรรมดาอันนึง

00:06:36.600 --> 00:06:38.332
แต่ว่าทีนี้เนี่ย เราจะเห็นว่า

00:06:38.400 --> 00:06:40.033
มัน import type มาจาก server ตัวนี้

00:06:40.100 --> 00:06:42.533
คำถามก็คือ server ตัวนี้ มันจะมาจาก type ตรงนี้

00:06:42.600 --> 00:06:47.832
ผมก็บอกว่า โอเค เราอยากได้ module

00:06:47.900 --> 00:06:53.533
อยากให้มันเพิ่ม type มาเป็น source

00:06:53.600 --> 00:06:55.933
เพิ่มมาเป็น src/index.ts

00:06:56.000 --> 00:07:01.332
แล้วก็ผมบอกว่าผม export type ของ server ตัวนี้มา

00:07:01.400 --> 00:07:07.332
export type App = typeof app

00:07:07.400 --> 00:07:09.133
ทีนี้เนี่ย ผมก็สามารถเอา type ของ server ตัวนี้

00:07:09.200 --> 00:07:10.832
มาใช้บน client ได้

00:07:11.700 --> 00:07:14.433
แล้วก็ผมขอทำการย้อนกลับไปตรงนี้

00:07:14.500 --> 00:07:20.633
แล้วก็ไปรันที่ identity

00:07:20.700 --> 00:07:21.832
รัน server Elysia คู่กันเนาะ

00:07:21.900 --> 00:07:24.332
แล้วก็รัน server Next.js ตัวนี้คู่กัน

00:07:24.400 --> 00:07:27.033
ไปที่ localhost 3001

00:07:31.200 --> 00:07:35.933
โอเค ทีนี้จะสังเกตเห็นว่า ตรงนี้เราไปดูที่ server

00:07:36.000 --> 00:07:40.033
ตรงนี้นะ โอเค เดี๋ยว reload แป๊บนึง reload รอบนึง

00:07:40.100 --> 00:07:42.233
แล้วก็ไปดูที่ server ตัวนี้ server ตัวนี้ API เนี่ย

00:07:42.300 --> 00:07:44.133
มันมาจากการที่เรา import type จาก server ใช่มั้ย

00:07:44.200 --> 00:07:46.133
แล้วก็ผ่านเข้าไป function ตัวนึงชื่อ edenTreaty

00:07:46.200 --> 00:07:48.033
ตัวนี้เหมือนกับเป็น tRPC สำหรับการ connect

00:07:48.700 --> 00:07:50.933
client กับ server โดยที่เราสามารถทำ type ได้

00:07:51.000 --> 00:07:53.332
เช่นสมมุติ ใน server เนี่ย ผมบอกว่าผมมี API

00:07:53.400 --> 00:07:56.533
index แล้วก็ auth ใช่มั้ย ใน auth เนี่ยมีอะไรบ้าง

00:07:56.600 --> 00:07:58.733
เราก็สามารถกดดูได้เลย แล้วก็บอกว่า สมมุติเรา

00:07:58.800 --> 00:08:02.233
อยาก sign in ใช่มั้ย แล้วก็เรียก post แล้วก็บอกว่า

00:08:02.300 --> 00:08:04.933
มันมี parameter อะไรบ้างที่เราสามารถใส่เข้าไปได้

00:08:05.000 --> 00:08:07.033
ตรงนี้ทั้งหมด type safe แล้วถ้าสมมุติว่ามีการ

00:08:07.100 --> 00:08:09.033
เปลี่ยนแปลงบน server เนี่ย บน client ก็จะเปลี่ยน

00:08:09.100 --> 00:08:12.433
ตามไปด้วย ทีนี้เดี๋ยวผมลองสร้าง API endpoint

00:08:12.500 --> 00:08:15.033
อันใหม่ดู แล้วดูว่ามันมีเพิ่มมั้ยนะ ตอนนี้เรามี auth

00:08:15.100 --> 00:08:17.433
แล้ว index เนาะ เพราะฉะนั้นเดี๋ยวเราลองสร้าง

00:08:17.500 --> 00:08:21.033
endpoint อีกตัวนึงขึ้นมาดู หน้าตาเป็นประมาณนี้

00:08:21.100 --> 00:08:24.533
ผมแอบมีโพย เผื่อกันไม่ทัน เพราะฉะนั้นผมเก็บ

00:08:24.600 --> 00:08:27.332
อันนี้มา แล้วก็รัน เพิ่ม method ชื่อ get ไปที่ path

00:08:27.400 --> 00:08:30.933
/nendodroid/skadi แล้วก็จะได้ JSON ตัวนี้ขึ้นมาเนาะ

00:08:31.000 --> 00:08:33.332
ทีนี้เราไปที่ client อีกรอบนึง เราพิมพ์คำว่า api

00:08:33.400 --> 00:08:36.633
. ปุ๊บ จะเห็นว่ามันมี path เพิ่มขึ้นมา เป็น nendodroid

00:08:36.700 --> 00:08:39.133
เหมือนเมื่อกี้ แล้วก็ .skadi แล้วก็ method ที่เราต้องการ

00:08:39.200 --> 00:08:44.033
save ปุ๊บ เราเอาเมาส์ไปทาบที่ data จะเห็นว่า

00:08:44.100 --> 00:08:46.333
type ทั้งหมดเนี่ย มันมาจากฝั่ง server หมดเลย

00:08:46.400 --> 00:08:48.533
เช่นผมบอกว่า โอเค มี id มี name มี type ปุ๊บ

00:08:48.600 --> 00:08:50.333
ทั้งหมดเนี่ยก็จะมาอยู่ตรงนี้เนาะ เพราะฉะนั้น

00:08:50.400 --> 00:08:55.233
เดี๋ยวผมลองรันบนตัวนี้ดู save แล้วรันปุ๊บ โอเค

00:08:55.300 --> 00:08:57.133
อันนี้ขาดไปนิดนึง ก็คือภาพเนี่ยมันไม่มีอยู่เนาะ

00:08:57.200 --> 00:09:00.233
เพราะฉะนั้นเดี๋ยวผมจะเพิ่มภาพเข้ามา ก็คือเราไปที่

00:09:01.200 --> 00:09:05.033
server Elysia เนาะ แล้วก็เราพิมพ์คำว่า elf add

00:09:05.100 --> 00:09:10.133
เอาเป็น static plugin แล้วกันเนาะ ปุ๊บ ทีนี้ก็จะเพิ่ม

00:09:10.200 --> 00:09:14.133
static plugin เข้ามา ทีนี้เราก็ต้องเพิ่ม folder ของตัวนี้

00:09:14.800 --> 00:09:19.633
ไปที่ public แล้วก็เพิ่มภาพเข้ามา reveal in finder

00:09:19.700 --> 00:09:23.433
ปุ๊บ copy ภาพตรงนี้มา แล้วก็เอามาใส่ในตรงนี้

00:09:23.500 --> 00:09:26.733
ปุ๊บ ตรงนี้เนี่ย มันจะมาจากการที่เราบอกว่า

00:09:26.800 --> 00:09:29.633
โอเค API ใช่มั้ย เนี่ย เรามาจากการที่เราเรียก

00:09:29.700 --> 00:09:32.033
static plugin ตัวนี้ default ของมันคือ folder ที่ชื่อ

00:09:32.100 --> 00:09:34.433
public เพราะฉะนั้นถ้าเราลองมาโหลด reload

00:09:34.500 --> 00:09:38.533
อีกรอบดูก็จะเห็นว่า ปุ๊บ อ้าว เกิดอะไรขึ้นเอ่ย

00:09:38.600 --> 00:09:41.933
อ๋อ เราลืมรัน server เนาะ เพราะฉะนั้นเราก็ไปที่

00:09:43.100 --> 00:09:51.833
server ตัวนี้ รันปุ๊บ ไม่ได้ แล้วมันก็จะได้ โอเค

00:09:51.900 --> 00:09:54.933
ไม่เป็นไร โอเค ไม่เป็นไร ภาพ อีกอย่างนึงที่อยาก

00:09:55.000 --> 00:09:58.333
ให้ดูก็คือ มันจะสามารถ sign in sign out ได้

00:09:58.400 --> 00:09:59.933
ก็คือตรงนี้เนี่ย ถ้าใครเคยเขียนเป็น React เนาะ

00:10:00.000 --> 00:10:02.233
มันก็จะสามารถทำ form authentication ได้ แต่ว่า

00:10:02.300 --> 00:10:06.733
ตัวนี้ ถ้าหากว่าเราเอา React Query เนี่ย ไปใส่ใน

00:10:06.800 --> 00:10:08.933
พวก edenTreaty เนี่ย มันก็จะขึ้นมาว่า โอเค เรา

00:10:09.000 --> 00:10:11.533
สามารถใส่ type อะไรได้บ้าง หลักๆ ก็เป็นประมาณ

00:10:11.600 --> 00:10:12.433
เท่านี้ฮะ ขอบคุณมากครับ

00:10:13.000 --> 00:10:13.533
วู้

00:10:13.600 --> 00:10:14.633
พอดีเป๊ะครับ

00:10:14.700 --> 00:10:16.033
ขอเสียงปรบมือให้พี่ออมหน่อยครับ
