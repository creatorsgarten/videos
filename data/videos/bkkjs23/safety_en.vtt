WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:03.520 --> 00:00:05.279
That's going to hurt people's ears, right?

00:00:06.240 --> 00:00:08.797
Every time I go to meetup or conference talk,

00:00:08.880 --> 00:00:10.476
I bring a rubber ducky with me because I know

00:00:10.559 --> 00:00:11.997
people are distracted sometimes,

00:00:12.080 --> 00:00:14.400
so brings the attention back into the room.

00:00:15.360 --> 00:00:16.717
I know for this one,

00:00:16.800 --> 00:00:19.600
there's going to be a little bit of a language barrier,

00:00:20.000 --> 00:00:22.077
so I'm going to adapt the talk a little bit,

00:00:22.160 --> 00:00:25.276
and if you feel like it needs to be slowed down, reworded,

00:00:25.359 --> 00:00:27.839
just don't hesitate to pause me in the middle of the talk.

00:00:29.599 --> 00:00:30.797
Really happy to be here.

00:00:30.880 --> 00:00:32.156
First time talking in Asia,

00:00:32.239 --> 00:00:33.840
so I'm really excited about that.

00:00:34.239 --> 00:00:35.917
I've absolutely been loving the vibes in Bangkok,

00:00:36.000 --> 00:00:39.600
so this is really cool that there was a BKK.JS organized.

00:00:39.920 --> 00:00:42.156
Really big thank you to Riffy for making this happen,

00:00:42.239 --> 00:00:46.316
because I sent him a random email 2 months ago,

00:00:46.399 --> 00:00:46.796
and I was like,

00:00:46.879 --> 00:00:48.717
"Hey, I'm coming to Bangkok. Can we organize something?"

00:00:48.800 --> 00:00:50.320
And it was really cool we could do that.

00:00:51.280 --> 00:00:53.837
Today, my talk is going to be about engineering

00:00:53.920 --> 00:00:55.039
without a safety net,

00:00:55.360 --> 00:00:57.439
where it works and where it hurts.

00:00:58.399 --> 00:01:00.397
This is going to be essentially a talk about

00:01:00.480 --> 00:01:01.757
finding resonating points,

00:01:01.840 --> 00:01:03.757
because I'm sure we've done a lot of these things

00:01:03.840 --> 00:01:04.796
in our engineering career,

00:01:04.879 --> 00:01:07.356
and even if you haven't started your engineering career,

00:01:07.439 --> 00:01:09.437
you'll probably resonate with a couple of the other things

00:01:09.520 --> 00:01:11.040
I'm going to say next.

00:01:12.159 --> 00:01:13.997
First thing I like to start with is something called

00:01:14.080 --> 00:01:16.557
the fast follow fallacy.

00:01:16.640 --> 00:01:19.360
There's an array over here defined of excuses,

00:01:19.920 --> 00:01:22.157
and I want everyone to reflect,

00:01:22.240 --> 00:01:25.356
and if you have never used these excuses,

00:01:25.439 --> 00:01:28.320
any of these excuses in your entire career,

00:01:28.479 --> 00:01:30.320
please lift your hand up right now.

00:01:30.799 --> 00:01:33.439
You've never said any of these things.

00:01:34.880 --> 00:01:36.959
No? Okay, we're all on the same page.

00:01:37.439 --> 00:01:40.877
Has anyone here used git commit --no-verify,

00:01:40.960 --> 00:01:41.999
skipping the hooks?

00:01:42.479 --> 00:01:45.760
Yeah? Okay. You and me, we'll have a drink afterwards.

00:01:46.240 --> 00:01:48.957
But essentially, these are safety nets.

00:01:49.040 --> 00:01:51.117
These are things also we tell ourselves when we want to

00:01:51.200 --> 00:01:53.356
bypass these safety nets and move forward

00:01:53.439 --> 00:01:55.440
because sometimes there are delivery pressures.

00:01:55.680 --> 00:01:58.160
And so we can resonate with a lot of this stuff.

00:01:58.479 --> 00:02:00.880
And so the real question we're trying to answer today is

00:02:01.360 --> 00:02:04.396
when is bypassing safety measures the right call,

00:02:04.479 --> 00:02:05.680
because sometimes it really is,

00:02:06.159 --> 00:02:07.840
and what are the long-term costs?

00:02:09.599 --> 00:02:11.357
I start this talk a little bit with going through

00:02:11.440 --> 00:02:12.477
my journey of safety nets,

00:02:12.560 --> 00:02:14.156
because I've worked at a lot of companies,

00:02:14.239 --> 00:02:17.277
and each company has their own take around how they handle

00:02:17.360 --> 00:02:19.840
safely deploying things into a production system.

00:02:20.400 --> 00:02:22.317
I've worked in companies where there are large

00:02:22.400 --> 00:02:24.637
enterprise products serving millions of users,

00:02:24.720 --> 00:02:28.637
and they only have a manual for a formal QA process.

00:02:28.720 --> 00:02:29.837
So everything's manually tested,

00:02:29.920 --> 00:02:31.519
and we'll explore what that means.

00:02:31.920 --> 00:02:34.477
Then there are startups that are obsessed with test coverage.

00:02:34.560 --> 00:02:37.117
Has anyone here been in a company before where your manager

00:02:37.200 --> 00:02:37.680
tells you,

00:02:38.080 --> 00:02:40.717
"SonarQube has to be at 90% coverage,

00:02:40.800 --> 00:02:41.997
and if it's anything below,

00:02:42.080 --> 00:02:44.399
then it's not going to production."

00:02:44.640 --> 00:02:47.277
Has anyone here used static analysis with SonarQube,

00:02:47.360 --> 00:02:49.436
and you have to see the test coverage change, right?

00:02:49.519 --> 00:02:51.680
So these are a lot of things that sometimes we gamify,

00:02:51.840 --> 00:02:53.837
but there's some companies that are obsessed with

00:02:53.920 --> 00:02:54.800
these metrics.

00:02:55.440 --> 00:02:57.917
And then there are products that are very much from

00:02:58.000 --> 00:02:58.957
a behavioral perspective,

00:02:59.040 --> 00:03:00.957
only wanting to test end-to-end tests.

00:03:01.040 --> 00:03:03.837
So no units, integration tests, anything of the sort.

00:03:03.920 --> 00:03:05.516
We just want to test the visual stuff,

00:03:05.599 --> 00:03:07.520
the stuff that the end user sees.

00:03:07.760 --> 00:03:09.357
That's also another philosophy around testing

00:03:09.440 --> 00:03:10.400
and the safety net.

00:03:10.640 --> 00:03:11.357
And then sometimes,

00:03:11.440 --> 00:03:13.436
I've even worked on high traffic platforms with

00:03:13.519 --> 00:03:14.960
tens of millions of users,

00:03:15.360 --> 00:03:19.357
and they don't have any automated or any type of tests

00:03:19.440 --> 00:03:20.317
whatsoever.

00:03:20.400 --> 00:03:22.637
And they can be even generating tens of million dollars

00:03:22.720 --> 00:03:23.357
per year,

00:03:23.440 --> 00:03:25.359
and there's no safety nets in place.

00:03:25.599 --> 00:03:27.997
This is also an interesting perspective of how much of

00:03:28.080 --> 00:03:31.279
the traditional engineering practices can you get away with

00:03:31.680 --> 00:03:34.800
before it actually becomes critical to your product survival.

00:03:35.680 --> 00:03:37.757
So, a couple of the companies I've worked at and

00:03:37.840 --> 00:03:40.156
a couple of the experiences I've had is first of all,

00:03:40.239 --> 00:03:42.240
in the connected TV application space.

00:03:42.799 --> 00:03:46.399
Has anyone here heard of applications like Eurosport

00:03:46.560 --> 00:03:49.439
or GCN, Discovery Plus?

00:03:49.599 --> 00:03:52.156
Anybody know the Discovery Channel from the US, right?

00:03:52.239 --> 00:03:55.197
So Discovery Channel has their own TV applications

00:03:55.280 --> 00:03:56.400
similar to Netflix.

00:03:56.640 --> 00:03:59.037
TV applications when I were working a lot with them,

00:03:59.120 --> 00:04:01.677
they're streaming to a lot of users.

00:04:01.760 --> 00:04:03.516
Actually, for the Tokyo 2020 Olympics,

00:04:03.599 --> 00:04:07.597
we were streaming to 1.3 having 1.3 billion minutes streamed.

00:04:07.680 --> 00:04:10.159
So that's- Anyone consider that's a small number?

00:04:11.120 --> 00:04:14.560
That's a big number, right? 1.3 billion minutes streamed.

00:04:14.959 --> 00:04:17.839
And when you're streaming the Olympics to everyone live,

00:04:18.160 --> 00:04:19.439
your product can't fail.

00:04:20.160 --> 00:04:23.836
And so clearly, we have to consider in that scenario,

00:04:23.919 --> 00:04:25.597
what are the things being put in place to make sure

00:04:25.680 --> 00:04:26.717
that thing functions.

00:04:26.800 --> 00:04:28.396
And so there were several hundred engineers,

00:04:28.479 --> 00:04:30.800
I think 2-300 engineers working on that project,

00:04:30.960 --> 00:04:33.277
and it was predominantly manual testing

00:04:33.360 --> 00:04:34.317
that I was working with.

00:04:34.400 --> 00:04:36.957
So smoke testing, sanity testing, regression testing,

00:04:37.040 --> 00:04:40.237
those are manual quality assurance terminologies being used.

00:04:40.320 --> 00:04:42.237
If you've only worked with Jest or unit test

00:04:42.320 --> 00:04:42.957
automated tests,

00:04:43.040 --> 00:04:44.877
you probably won't be familiar with that terminology,

00:04:44.960 --> 00:04:46.237
but it's really interesting to learn,

00:04:46.320 --> 00:04:47.599
and we'll explore it in a bit.

00:04:48.160 --> 00:04:50.399
Then I've worked in early stage startups where

00:04:50.800 --> 00:04:51.836
there are no users.

00:04:51.919 --> 00:04:53.277
We just get pre-seed money.

00:04:53.360 --> 00:04:54.957
You're under 30 engineers.

00:04:55.040 --> 00:04:56.077
You're just getting to know each other,

00:04:56.160 --> 00:04:58.080
just getting to build the first couple of things,

00:04:58.240 --> 00:05:00.077
and the quality gates are set by management.

00:05:00.160 --> 00:05:02.717
So yeah, sometimes you have to pass this unit testing

00:05:02.800 --> 00:05:05.437
benchmark and check the coverage every single time,

00:05:05.520 --> 00:05:06.639
like, "Okay, am I passing 90%?

00:05:07.680 --> 00:05:10.477
Should I add in a bunch of useless tests just so that

00:05:10.560 --> 00:05:13.597
they pass and they go green? Don't care about it."

00:05:13.680 --> 00:05:15.759
And then it just gets the test coverage going.

00:05:16.639 --> 00:05:18.797
There's actually a really cool website if you look it up

00:05:18.880 --> 00:05:20.320
called Stryker Mutator,

00:05:20.639 --> 00:05:23.597
and Stryker Mutator actually goes in and mutates your tests

00:05:23.680 --> 00:05:25.840
in a type of chaos engineering style,

00:05:26.400 --> 00:05:28.556
and actually tries to break them to see if your tests

00:05:28.639 --> 00:05:30.556
are actually testing something valuable,

00:05:30.639 --> 00:05:32.480
not that if I change the core code,

00:05:33.199 --> 00:05:34.396
the test will still pass as green.

00:05:34.479 --> 00:05:36.720
So it actually sees if you've done something that's valid.

00:05:37.759 --> 00:05:39.836
And then yeah, static analysis is used as the gates

00:05:39.919 --> 00:05:41.597
to make sure something ends up in a production system.

00:05:41.680 --> 00:05:44.077
Then, there are a lot of user experience focused platforms.

00:05:44.160 --> 00:05:44.956
This is a big thing.

00:05:45.039 --> 00:05:46.477
I see a lot of companies who are very UI

00:05:46.560 --> 00:05:47.676
or frontend focused.

00:05:47.759 --> 00:05:50.240
They like to test what the user experiences.

00:05:50.400 --> 00:05:51.836
So using a lot of Storybook,

00:05:51.919 --> 00:05:54.319
using a lot of snapshot testing to make sure the HTML

00:05:54.479 --> 00:05:57.517
stays consistent across multiple iterations of a component.

00:05:57.600 --> 00:05:58.877
Then end-to-end testing,

00:05:58.960 --> 00:06:02.077
because why bother test the units of your functions

00:06:02.160 --> 00:06:03.836
and so on and so forth,

00:06:03.919 --> 00:06:05.997
if you're just going to test all the clicking and

00:06:06.080 --> 00:06:07.277
different flows of logins,

00:06:07.360 --> 00:06:08.956
sign up that are users actually going to go through,

00:06:09.039 --> 00:06:10.800
because sometimes that is what matters most.

00:06:10.960 --> 00:06:13.120
And so some companies just stick with that.

00:06:14.400 --> 00:06:16.236
Then we've got some platforms that I've worked on

00:06:16.319 --> 00:06:19.116
that are really high scale and really low safety,

00:06:19.199 --> 00:06:21.116
because the priority is making sure you can deliver

00:06:21.199 --> 00:06:23.917
as fast as possible and keep on iterating

00:06:24.000 --> 00:06:25.116
and doing a lot of AB tests

00:06:25.199 --> 00:06:27.037
and delivering to customers sooner rather than later.

00:06:27.120 --> 00:06:28.477
And sometimes tests and safety nets,

00:06:28.560 --> 00:06:30.797
they can bog you down a little bit and slow things a lot.

00:06:30.880 --> 00:06:34.480
I've heard of CI/CD pipelines that can take 3 hours to pass.

00:06:35.120 --> 00:06:38.877
And if a flaky test pops up in 2 and 1/2 hours

00:06:38.960 --> 00:06:40.317
down your CI/CD pipeline,

00:06:40.400 --> 00:06:42.000
you're going to rip your hair out.

00:06:42.400 --> 00:06:44.877
So sometimes people don't want to bother about those things.

00:06:44.960 --> 00:06:46.157
But yeah, I've worked on platforms where

00:06:46.240 --> 00:06:49.680
they're generating tens of millions of dollars every year,

00:06:50.560 --> 00:06:52.797
with tens of millions of users every single month.

00:06:52.880 --> 00:06:54.639
Again, not small numbers.

00:06:55.360 --> 00:06:58.157
No automated testing suites, nothing, nada.

00:06:58.240 --> 00:07:00.240
Products have been working for over 10 years.

00:07:00.479 --> 00:07:01.757
You go there and you're shocked.

00:07:01.840 --> 00:07:04.320
You have no idea how this thing is functioning.

00:07:04.560 --> 00:07:07.360
And then there's no dedicated QA resource.

00:07:07.520 --> 00:07:08.797
So when you're actually shipping something

00:07:08.880 --> 00:07:09.676
to production system,

00:07:09.759 --> 00:07:11.440
what you're doing is going on staging,

00:07:11.599 --> 00:07:13.197
clicking around, check if it functions.

00:07:13.280 --> 00:07:15.357
Oh no, I make a new commit, builds again,

00:07:15.440 --> 00:07:16.396
click it a couple of times.

00:07:16.479 --> 00:07:16.956
Okay, it works.

00:07:17.039 --> 00:07:19.277
I get tired after testing this for the 15th time.

00:07:19.360 --> 00:07:20.719
Out to production.

00:07:20.880 --> 00:07:23.599
And if I don't get any alerts, I don't get any alerts.

00:07:23.919 --> 00:07:25.599
If you don't use PagerDuty,

00:07:25.759 --> 00:07:29.040
can't really get alerted and tired of those notifications.

00:07:29.360 --> 00:07:33.440
So then you actually get really anxious when you deploy.

00:07:34.000 --> 00:07:35.997
Has anyone ever been anxious when they deploy

00:07:36.080 --> 00:07:37.277
something to production?

00:07:37.360 --> 00:07:38.717
Like they close their eyes,

00:07:38.800 --> 00:07:42.079
they click that green button and they're done.

00:07:42.240 --> 00:07:44.317
Is anyone here not allowed to deploy

00:07:44.400 --> 00:07:46.320
after 5:00 on a Friday?

00:07:47.599 --> 00:07:50.239
I'm not allowed to deploy after 5:00 on a Friday.

00:07:50.800 --> 00:07:51.357
We were scared.

00:07:51.440 --> 00:07:53.679
I'm scared to deploy after 5:00 on a Friday.

00:07:53.919 --> 00:07:54.396
Cool.

00:07:54.479 --> 00:07:57.760
So hard truth, sometimes it's the right call to make.

00:07:58.000 --> 00:07:59.037
There's time to market,

00:07:59.120 --> 00:08:00.637
to get something out really fast,

00:08:00.720 --> 00:08:02.637
you need to just do the bare minimum

00:08:02.720 --> 00:08:04.879
to get something functional and out to users.

00:08:05.759 --> 00:08:07.917
You have limited resources in the startup space.

00:08:08.000 --> 00:08:10.236
So sometimes frontend engineers are going to develop

00:08:10.319 --> 00:08:11.277
some things with a couple of mocks

00:08:11.360 --> 00:08:13.439
because backend APIs can't be prepared.

00:08:13.599 --> 00:08:17.039
If you're in the validation phase of certain ideas,

00:08:17.199 --> 00:08:18.879
you do a lot of AB tests.

00:08:19.120 --> 00:08:21.277
You have the control and the variant of an AB test

00:08:21.360 --> 00:08:23.357
and sometimes the variant fails.

00:08:23.440 --> 00:08:25.760
So why bother testing something that might fail?

00:08:26.080 --> 00:08:28.477
Gather the analytics and maybe you stick with the original.

00:08:28.560 --> 00:08:29.676
Does anyone here work at a company

00:08:29.759 --> 00:08:31.359
that does a lot of AB testing?

00:08:32.240 --> 00:08:33.277
No? Okay.

00:08:33.360 --> 00:08:34.876
One person resonates with me.

00:08:34.959 --> 00:08:35.756
I'm happy.

00:08:35.839 --> 00:08:36.319
Cool.

00:08:36.479 --> 00:08:37.677
And then in the startup world,

00:08:37.760 --> 00:08:38.876
you have to survive sometimes.

00:08:38.959 --> 00:08:41.196
You've got like a limited runway,

00:08:41.279 --> 00:08:42.316
so you've got to work with it.

00:08:42.399 --> 00:08:44.237
So really the quote around here that I like to say is

00:08:44.320 --> 00:08:46.560
perfect is the enemy of shipped.

00:08:47.680 --> 00:08:49.517
So, a little bit of an introduction about myself.

00:08:49.600 --> 00:08:51.360
I know I've already been talking for like

00:08:51.600 --> 00:08:53.120
8 minutes and 59 seconds.

00:08:53.519 --> 00:08:54.957
But my name is Faris.

00:08:55.040 --> 00:08:57.280
I've worked at a plethora of companies before

00:08:57.440 --> 00:08:58.880
all across Europe and the US.

00:08:59.360 --> 00:09:01.599
I'm a staff software engineer at Smallpdf.

00:09:01.839 --> 00:09:03.677
I'm responsible for all payments infrastructure

00:09:03.760 --> 00:09:04.960
and monetization.

00:09:05.120 --> 00:09:08.160
So if you can't pay on our platform, it's my fault.

00:09:08.959 --> 00:09:11.277
And then I also got a background in connected TV,

00:09:11.360 --> 00:09:14.160
growth teams, monetization, fintech, fitness tech,

00:09:14.399 --> 00:09:15.756
and anything you can name.

00:09:15.839 --> 00:09:17.677
I've worked on performance engineering

00:09:17.760 --> 00:09:18.557
for a very long time.

00:09:18.640 --> 00:09:20.320
I love making things faster.

00:09:21.360 --> 00:09:23.277
I've also seen experiences where like

00:09:23.360 --> 00:09:25.517
somebody's tried to make something 10 times faster,

00:09:25.600 --> 00:09:26.557
but there's zero users.

00:09:26.640 --> 00:09:28.157
So I like to take a pragmatic take

00:09:28.240 --> 00:09:29.599
on making things faster.

00:09:29.920 --> 00:09:32.637
And I work a lot also in the engineering leadership space.

00:09:32.720 --> 00:09:34.800
I used to previously be an engineering manager.

00:09:35.040 --> 00:09:37.279
So a lot around career growth and stuff like that.

00:09:37.519 --> 00:09:40.077
I also love open source contributions.

00:09:40.160 --> 00:09:41.680
So anybody here use Raycast?

00:09:42.560 --> 00:09:42.960
Cool.

00:09:43.680 --> 00:09:45.997
Yeah, so I develop a couple of the Raycast extensions,

00:09:46.080 --> 00:09:48.400
like the official Stripe one and a couple of others.

00:09:48.959 --> 00:09:50.797
So yeah, that's something I have a little bit of fun with

00:09:50.880 --> 00:09:52.717
and I really recommend it as a project.

00:09:52.800 --> 00:09:54.797
And just like this is a meetup,

00:09:54.880 --> 00:09:56.316
I'm also the founder of ZurichJS,

00:09:56.399 --> 00:09:58.319
which is a meetup in the Swiss German space.

00:09:58.959 --> 00:10:01.117
And so I really love building communities

00:10:01.200 --> 00:10:02.637
and coming to them and supporting them

00:10:02.720 --> 00:10:03.917
because I think it's really cool stuff.

00:10:04.000 --> 00:10:05.436
And it's not easy to do.

00:10:05.519 --> 00:10:08.080
It's very stressful to put a meetup together.

00:10:08.399 --> 00:10:11.679
So big round of applause at the end for those that do that.

00:10:12.160 --> 00:10:14.077
So what is a safety net?

00:10:14.160 --> 00:10:16.240
We already started talking a little bit about that.

00:10:16.399 --> 00:10:19.517
The safety net are things that give you confidence

00:10:19.600 --> 00:10:20.880
when you ship code.

00:10:21.519 --> 00:10:23.517
So that can be testing that we talked about,

00:10:23.600 --> 00:10:26.080
and that's your manual or automated testing.

00:10:26.320 --> 00:10:27.996
Verifies expected behavior.

00:10:28.079 --> 00:10:30.557
Does this work the way I think it's going to work

00:10:30.640 --> 00:10:32.876
and the way it's defined in the specifications

00:10:32.959 --> 00:10:34.320
of my Jira ticket?

00:10:35.040 --> 00:10:35.760
Metrics.

00:10:36.160 --> 00:10:37.597
Is my system healthy?

00:10:37.680 --> 00:10:38.717
Is it working?

00:10:38.800 --> 00:10:40.159
How long is it working for?

00:10:40.480 --> 00:10:42.720
I'm only working for 8 hours a day.

00:10:43.120 --> 00:10:45.277
I want to also know if the system was still working

00:10:45.360 --> 00:10:46.237
while I was sleeping.

00:10:46.320 --> 00:10:48.397
I'm not monitoring and refreshing the thing

00:10:48.480 --> 00:10:50.080
for 24 hours a day.

00:10:50.720 --> 00:10:51.920
Observability.

00:10:52.079 --> 00:10:55.357
I can't just go jump in and put 𝚌𝚘𝚗𝚜𝚘𝚕𝚎.𝚕𝚘𝚐 everywhere.

00:10:55.440 --> 00:10:57.597
I need to know in a non-production system

00:10:57.680 --> 00:10:59.039
is something working.

00:10:59.760 --> 00:11:01.520
Then there's resilience.

00:11:01.680 --> 00:11:04.717
So something is bound to fail at some point,

00:11:04.800 --> 00:11:06.957
but have you built and put the structures in place

00:11:07.040 --> 00:11:09.439
in your platforms that when something does fail,

00:11:09.680 --> 00:11:12.477
it has mechanisms in place to get back

00:11:12.560 --> 00:11:13.839
to a working condition.

00:11:14.000 --> 00:11:16.077
A very baseline version of this is retries.

00:11:16.160 --> 00:11:17.517
If a fetch request fails,

00:11:17.600 --> 00:11:19.196
I'm going to retry something.

00:11:19.279 --> 00:11:21.117
But that's just the tip of the iceberg

00:11:21.200 --> 00:11:22.720
when it comes to resilience.

00:11:23.279 --> 00:11:25.756
So digging into a little bit more of the safety nets,

00:11:25.839 --> 00:11:27.436
there's automated testing that we already talked about,

00:11:27.519 --> 00:11:29.277
and you've got the whole test pyramid.

00:11:29.360 --> 00:11:31.037
So I'm not going to dig into every single one,

00:11:31.120 --> 00:11:32.797
but this is actually just to bring awareness,

00:11:32.880 --> 00:11:34.639
because maybe you know about unit tests,

00:11:34.800 --> 00:11:37.440
testing pure functions, testing things in isolation.

00:11:37.680 --> 00:11:39.677
And maybe integration tests is something new for you

00:11:39.760 --> 00:11:41.117
that you haven't played around with.

00:11:41.200 --> 00:11:43.196
Or maybe you didn't realize that there was a separation

00:11:43.279 --> 00:11:45.917
between integration tests and component tests,

00:11:46.000 --> 00:11:48.480
which are just for maybe UI in isolation.

00:11:49.040 --> 00:11:51.277
Then a big one, that's a big differentiator,

00:11:51.360 --> 00:11:53.357
is end-to-end tests versus system tests.

00:11:53.440 --> 00:11:55.357
And sometimes they're used a little bit interchangeably,

00:11:55.440 --> 00:11:57.277
but end-to-end tests are maybe using something

00:11:57.360 --> 00:11:58.960
like Playwright or Cypress,

00:11:59.440 --> 00:12:01.517
and you're testing all the way through

00:12:01.600 --> 00:12:04.237
from the frontend to the actual backend and back.

00:12:04.320 --> 00:12:06.556
So you're testing end-to-end if a system's working

00:12:06.639 --> 00:12:08.637
in a production or staging environment.

00:12:08.720 --> 00:12:10.397
And yes, sometimes end-to-end tests are run

00:12:10.480 --> 00:12:12.879
on a production environment against the real database.

00:12:13.600 --> 00:12:15.517
Then you have your system tests,

00:12:15.600 --> 00:12:17.519
which are then maybe just testing the front end

00:12:18.560 --> 00:12:19.517
and not touching the back end.

00:12:19.600 --> 00:12:21.120
So maybe just running it just with mocks,

00:12:21.440 --> 00:12:24.237
which are exact replicas of maybe your OpenAPI specs

00:12:24.320 --> 00:12:25.839
or your GraphQL schemas,

00:12:26.160 --> 00:12:27.917
just to test things even if the back end

00:12:28.000 --> 00:12:29.999
hasn't finished developing an endpoint.

00:12:30.560 --> 00:12:31.677
Then you've got manual testing.

00:12:31.760 --> 00:12:33.196
Does anyone here work in a company where they work

00:12:33.279 --> 00:12:33.840
with QAs?

00:12:34.160 --> 00:12:37.117
So like dedicated engineers for QAing resource,

00:12:37.200 --> 00:12:39.839
or do we just all click things around ourselves?

00:12:40.160 --> 00:12:40.880
Hands up.

00:12:41.040 --> 00:12:41.677
Thank you very much.

00:12:41.760 --> 00:12:43.837
Two, three people, four people made me happy today.

00:12:43.920 --> 00:12:44.316
Cool.

00:12:44.399 --> 00:12:46.879
So, when it comes to manual QA,

00:12:47.040 --> 00:12:50.080
they use a lot of this terminology around smoke testing,

00:12:50.399 --> 00:12:53.837
sanity testing, regressions, exploratory testing.

00:12:53.920 --> 00:12:57.120
These terms are things that we're not exposed to

00:12:57.279 --> 00:12:59.117
in the software engineering space as much

00:12:59.200 --> 00:13:00.397
if you're just a front-end developer,

00:13:00.480 --> 00:13:01.680
back-end developer.

00:13:01.839 --> 00:13:03.517
These are terminologies that are actually really

00:13:03.600 --> 00:13:05.037
interesting to start investigating

00:13:05.120 --> 00:13:07.440
because it gives you an idea of the structure

00:13:07.600 --> 00:13:09.837
or the way one can go about breaking down

00:13:09.920 --> 00:13:12.797
or segmenting types of manual testing

00:13:12.880 --> 00:13:14.957
that you may actually want to do yourself.

00:13:15.040 --> 00:13:16.237
Because let's say you have no tests

00:13:16.320 --> 00:13:18.157
and you still want to deploy something,

00:13:18.240 --> 00:13:20.477
is there a more methodical way to go about it

00:13:20.560 --> 00:13:22.637
than just clicking things and hoping for the best?

00:13:22.720 --> 00:13:24.237
And so it's actually interesting to be able

00:13:24.320 --> 00:13:26.800
to share this language with QA engineers.

00:13:27.120 --> 00:13:29.196
And this is used a lot for like higher risk features,

00:13:29.279 --> 00:13:30.077
complex user flows.

00:13:30.160 --> 00:13:31.996
You may still end up doing manual tests

00:13:32.079 --> 00:13:33.117
even though you've covered things

00:13:33.200 --> 00:13:34.640
with automated testing.

00:13:35.360 --> 00:13:36.397
Then we have metrics.

00:13:36.480 --> 00:13:38.237
So metrics are really important around

00:13:38.320 --> 00:13:39.996
how much traffic do you have.

00:13:40.079 --> 00:13:41.917
Maybe you've got 10 endpoints on your back end,

00:13:42.000 --> 00:13:43.840
but only one of them surges a lot.

00:13:44.079 --> 00:13:45.357
And that's being used the most,

00:13:45.440 --> 00:13:47.040
maybe it's your login endpoint.

00:13:47.360 --> 00:13:49.436
Then errors, the rate of errors,

00:13:49.519 --> 00:13:50.637
the distribution of errors.

00:13:50.720 --> 00:13:53.117
I'm sure some of you may use New Relic, Sentry

00:13:53.200 --> 00:13:55.597
to figure out how often is something going wrong.

00:13:55.680 --> 00:13:56.957
And if you've got 10 million users

00:13:57.040 --> 00:13:58.797
and an error is happening a hundred times a day,

00:13:58.880 --> 00:13:59.996
you don't care, it's not a big deal.

00:14:00.079 --> 00:14:02.077
But if a error starts mounting all the way

00:14:02.160 --> 00:14:03.756
and a million of those errors are happening,

00:14:03.839 --> 00:14:05.756
then you're going to get a little bit worried.

00:14:05.839 --> 00:14:08.080
And then also detecting things like latency,

00:14:08.320 --> 00:14:10.397
and then business conversions.

00:14:10.480 --> 00:14:11.917
There are also business analytics and metrics

00:14:12.000 --> 00:14:13.357
that are really important.

00:14:13.440 --> 00:14:15.517
Why this is really cool is also to understand

00:14:15.600 --> 00:14:17.840
trend analysis because not everything is static

00:14:18.480 --> 00:14:20.397
when it comes to users using your platform.

00:14:20.480 --> 00:14:22.080
If you have an e-commerce platform

00:14:22.480 --> 00:14:25.756
and Black Friday is happening and there's a massive sale,

00:14:25.839 --> 00:14:28.316
you're going to see a natural surge in the amount

00:14:28.399 --> 00:14:30.077
of traffic going to your website.

00:14:30.160 --> 00:14:32.157
If you have a static threshold of like,

00:14:32.240 --> 00:14:34.797
the second there's 5,000 errors per day,

00:14:34.880 --> 00:14:36.400
I'm going to consider it an issue,

00:14:36.720 --> 00:14:38.637
then you're going to break that threshold on days

00:14:38.720 --> 00:14:41.996
where actually historically it's normal for seasonality

00:14:42.079 --> 00:14:44.157
to have an increase on your traffic.

00:14:44.240 --> 00:14:46.077
So understanding trends of the flows

00:14:46.160 --> 00:14:47.196
that your business goes through

00:14:47.279 --> 00:14:48.556
understands makes you understand

00:14:48.639 --> 00:14:50.560
how to triage particular issues.

00:14:51.120 --> 00:14:52.397
And then we get into observability,

00:14:52.480 --> 00:14:54.157
which is very much that if you think about

00:14:54.240 --> 00:14:55.037
local observability,

00:14:55.120 --> 00:14:57.357
it's like I'm going to 𝚌𝚘𝚗𝚜𝚘𝚕𝚎.𝚕𝚘𝚐 in 15 different places

00:14:57.440 --> 00:14:59.600
and figure out what works and what doesn't work.

00:15:00.560 --> 00:15:02.797
This is essentially console logging in production

00:15:02.880 --> 00:15:04.637
or figuring out is something an error,

00:15:04.720 --> 00:15:06.316
should I be warning at this stage?

00:15:06.399 --> 00:15:08.480
That if somebody's going through a payment flow,

00:15:08.959 --> 00:15:10.957
is the error that I'm getting because the user

00:15:11.040 --> 00:15:12.797
typed their expiration date incorrect

00:15:12.880 --> 00:15:13.677
in their credit card,

00:15:13.760 --> 00:15:15.677
or did I fail to hit the Stripe API

00:15:15.760 --> 00:15:17.037
and produce a payment intent

00:15:17.120 --> 00:15:18.316
so I can execute the payment?

00:15:18.399 --> 00:15:20.957
So understanding the different types of behaviors

00:15:21.040 --> 00:15:23.360
and logs you expect to come out of your product.

00:15:23.839 --> 00:15:27.037
And then very much also to for unknown unknown detections

00:15:27.120 --> 00:15:29.116
in the sense that there's just some things

00:15:29.199 --> 00:15:30.397
you cannot predict.

00:15:30.480 --> 00:15:32.480
A lot of the flows around observability is,

00:15:32.720 --> 00:15:33.837
oh, something goes wrong,

00:15:33.920 --> 00:15:35.357
I can't figure out what goes wrong,

00:15:35.440 --> 00:15:37.277
I add a bunch of logs, deploy to production,

00:15:37.360 --> 00:15:38.876
and then read back the logs

00:15:38.959 --> 00:15:40.637
and try to narrow down what the problem is.

00:15:40.720 --> 00:15:42.080
So a lot of the times,

00:15:42.399 --> 00:15:43.996
observability can even help figure out things

00:15:44.079 --> 00:15:45.277
you didn't even know were an issue

00:15:45.360 --> 00:15:47.357
because your localhost development environment,

00:15:47.440 --> 00:15:50.157
your super powerful and fast M4 Mac

00:15:50.240 --> 00:15:51.196
is not the same environment

00:15:51.279 --> 00:15:53.200
that your users are using your platform on.

00:15:54.079 --> 00:15:55.357
And then we talked also earlier a little bit

00:15:55.440 --> 00:15:57.196
about resilience patterns where retries,

00:15:57.279 --> 00:15:59.200
really tip of the iceberg around that.

00:15:59.440 --> 00:16:01.357
But then you go have circuit breakers

00:16:01.440 --> 00:16:03.037
and retries with backoffs,

00:16:03.120 --> 00:16:04.479
and you have jitters,

00:16:04.639 --> 00:16:07.037
fixing thundering herd problems, rate limiting.

00:16:07.120 --> 00:16:09.277
There's an entire plethora of ways

00:16:09.360 --> 00:16:11.436
to go about making your platform resilient

00:16:11.519 --> 00:16:14.399
so that you can actually have self-healing properties.

00:16:14.880 --> 00:16:17.357
There are actually resilience patterns like retries,

00:16:17.440 --> 00:16:18.797
and if you just put a base retry,

00:16:18.880 --> 00:16:20.159
you can actually break your API

00:16:20.720 --> 00:16:22.559
because it hammers it too many times.

00:16:22.720 --> 00:16:23.999
If you have a retry of 10

00:16:24.639 --> 00:16:25.917
for every single API endpoint

00:16:26.000 --> 00:16:27.359
and your API is just returning a 500,

00:16:28.240 --> 00:16:29.917
and then your system decides that every time

00:16:30.000 --> 00:16:31.116
I get a non-200 code,

00:16:31.199 --> 00:16:32.400
I'm going to keep hitting the API,

00:16:32.800 --> 00:16:34.000
you're going to break the API.

00:16:34.720 --> 00:16:36.237
And so there are more intelligent ways

00:16:36.320 --> 00:16:38.397
to go about developing resilience in your systems

00:16:38.480 --> 00:16:40.080
beyond just the basic retries.

00:16:40.959 --> 00:16:42.717
And so what I like to call these are

00:16:42.800 --> 00:16:44.719
pillars of confidence.

00:16:44.880 --> 00:16:47.196
What are these things that keep my product up

00:16:47.279 --> 00:16:50.077
and functioning and what are the trade-offs

00:16:50.160 --> 00:16:51.920
or one versus the other that I want to use

00:16:52.399 --> 00:16:53.837
to be able to make sure that I'm happy

00:16:53.920 --> 00:16:54.880
with what's going out?

00:16:55.680 --> 00:16:58.077
So there's testing, observability, resilience,

00:16:58.160 --> 00:17:00.559
and all that loops into a feedback loop.

00:17:00.959 --> 00:17:03.917
So a feedback loop of telling me what's going wrong,

00:17:04.000 --> 00:17:06.480
how's it going wrong, how often is it going wrong,

00:17:06.640 --> 00:17:07.836
and all of these work together

00:17:07.919 --> 00:17:10.240
to create a comprehensive safety system.

00:17:10.559 --> 00:17:14.236
The absence of one weakens your overall confidence,

00:17:14.319 --> 00:17:17.200
but you can seldom have all of them in place.

00:17:17.360 --> 00:17:19.277
Does anyone have all of these in place

00:17:19.360 --> 00:17:21.039
at the best way possible,

00:17:21.199 --> 00:17:22.637
in the most efficient way,

00:17:22.720 --> 00:17:23.996
you have all the observability,

00:17:24.079 --> 00:17:25.840
your platform is working all the time?

00:17:26.240 --> 00:17:26.876
Nobody?

00:17:26.959 --> 00:17:28.239
Cool, we all have jobs.

00:17:28.880 --> 00:17:29.760
Fantastic.

00:17:30.000 --> 00:17:32.476
So how do we build complete confidence?

00:17:32.559 --> 00:17:34.077
If you have individual components,

00:17:34.160 --> 00:17:35.677
tests alone, you know if it works,

00:17:35.760 --> 00:17:37.277
but not in production.

00:17:37.360 --> 00:17:38.317
If you have metrics alone,

00:17:38.400 --> 00:17:40.319
you know something's wrong, but not why.

00:17:41.039 --> 00:17:42.397
Then you have resilience alone,

00:17:42.480 --> 00:17:44.240
and it can survive failures,

00:17:44.400 --> 00:17:46.317
but you can't learn from the failures

00:17:46.400 --> 00:17:47.596
and go into your retrospectives

00:17:47.679 --> 00:17:49.039
with information and data.

00:17:49.679 --> 00:17:51.920
And so all these have this combined effect

00:17:52.080 --> 00:17:53.596
to detect issues early,

00:17:53.679 --> 00:17:55.357
recover gracefully, learn, and improve

00:17:55.440 --> 00:17:56.880
because everything's iterative.

00:17:57.200 --> 00:17:58.557
You have a lot of progressive enhancements

00:17:58.640 --> 00:18:00.400
when it comes to product development.

00:18:00.880 --> 00:18:01.836
But what's really interesting is

00:18:01.919 --> 00:18:03.360
I want to talk about something called DORA.

00:18:03.840 --> 00:18:05.680
Does anyone know Dora the Explorer?

00:18:06.799 --> 00:18:08.560
Yeah, only three people know Dora.

00:18:08.880 --> 00:18:09.200
No?

00:18:09.440 --> 00:18:09.836
More?

00:18:09.919 --> 00:18:10.800
There we go.

00:18:11.360 --> 00:18:12.397
Wakey, wakey.

00:18:12.480 --> 00:18:13.680
Do I have to come back?

00:18:14.480 --> 00:18:15.517
Thank you very much.

00:18:15.600 --> 00:18:17.596
So we're not going to talk about Dora the Explorer

00:18:17.679 --> 00:18:17.836
too much,

00:18:17.919 --> 00:18:18.956
but I like to say it because there's something

00:18:19.039 --> 00:18:20.240
called DORA metrics.

00:18:20.559 --> 00:18:22.560
Has anyone here heard of DORA metrics?

00:18:23.679 --> 00:18:24.877
Okay, one person.

00:18:24.960 --> 00:18:26.237
And two people.

00:18:26.320 --> 00:18:26.877
Awesome.

00:18:26.960 --> 00:18:27.917
So DORA metrics,

00:18:28.000 --> 00:18:31.519
I find them really interesting because in the metrics game,

00:18:31.760 --> 00:18:33.277
there's usually gameified as we talked about

00:18:33.360 --> 00:18:34.237
in terms of Sonar,

00:18:34.320 --> 00:18:35.997
you know, Sonar trying to get the test coverage

00:18:36.080 --> 00:18:37.037
as high as possible.

00:18:37.120 --> 00:18:38.317
What's cool with DORA metrics is

00:18:38.400 --> 00:18:39.760
you have these core four ones.

00:18:40.160 --> 00:18:41.997
The first is deployment frequency.

00:18:42.080 --> 00:18:44.237
How often are you deploying to production environment?

00:18:44.320 --> 00:18:45.517
Lead time for changes.

00:18:45.600 --> 00:18:47.917
How long from commit to production?

00:18:48.000 --> 00:18:49.596
Then you have mean time to recovery.

00:18:49.679 --> 00:18:51.596
How long does it take when something goes wrong

00:18:51.679 --> 00:18:52.800
to get fixed?

00:18:53.200 --> 00:18:55.120
And then change failure rate.

00:18:55.440 --> 00:18:58.557
How many of my deployments out of the total deployments

00:18:58.640 --> 00:18:59.677
cause a failure?

00:18:59.760 --> 00:19:01.277
And there are these performance levels

00:19:01.360 --> 00:19:03.357
of what's low, medium, high, and elite

00:19:03.440 --> 00:19:04.797
in terms of these metrics.

00:19:04.880 --> 00:19:06.797
And what I like a lot about DORA metrics is

00:19:06.880 --> 00:19:09.760
that it doesn't care what your unit test coverage is.

00:19:09.919 --> 00:19:11.437
It doesn't care what testing you use,

00:19:11.520 --> 00:19:12.879
it doesn't care what you do.

00:19:13.120 --> 00:19:15.440
It cares about end results and outcomes.

00:19:15.760 --> 00:19:19.039
Your user does not care how many unit tests you have.

00:19:19.200 --> 00:19:21.357
Does not care how many resilience patterns you have.

00:19:21.440 --> 00:19:24.160
Your user cares how many times is my app broken?

00:19:24.559 --> 00:19:26.637
And so these are interesting ways to see that

00:19:26.720 --> 00:19:28.157
maybe you've spent two weeks

00:19:28.240 --> 00:19:29.357
for a technical debt sprint

00:19:29.440 --> 00:19:30.637
to fix a bunch of your tests,

00:19:30.720 --> 00:19:32.077
but it hasn't moved any of these metrics.

00:19:32.160 --> 00:19:33.917
That means the end user hasn't actually seen

00:19:34.000 --> 00:19:35.040
an outcome of that.

00:19:35.440 --> 00:19:36.797
And so there's a large cost when it comes

00:19:36.880 --> 00:19:37.836
to flying blind.

00:19:37.919 --> 00:19:39.836
If you have a 10 million ARR business,

00:19:39.919 --> 00:19:42.959
and you can assume that your revenue is around 1.14k

00:19:44.320 --> 00:19:47.520
per hour and you have a 99.9% uptime

00:19:48.000 --> 00:19:48.797
which sounds like a lot

00:19:48.880 --> 00:19:52.237
but it's actually up to 8.76 hours of downtime per year

00:19:52.320 --> 00:19:55.600
you could have over $10,000 per year of direct cost

00:19:56.640 --> 00:19:58.476
Take that into change failure rate

00:19:58.559 --> 00:20:00.400
and if you have a high change failure rate of 5%

00:20:00.880 --> 00:20:01.920
which sounds low

00:20:02.240 --> 00:20:05.357
takes 3.5 hours or half a working day to figure out

00:20:05.440 --> 00:20:06.557
how to resolve something

00:20:06.640 --> 00:20:08.716
which generally takes a lot longer

00:20:08.799 --> 00:20:11.520
and 100 deploys per year, which is not a lot

00:20:12.160 --> 00:20:13.840
100 deploys per year means that maybe you do

00:20:14.720 --> 00:20:15.917
two deployments a week

00:20:16.000 --> 00:20:18.480
Normally you want to be doing 5, 10 or more per day

00:20:18.720 --> 00:20:23.039
You could have $20,000 plus of cost as a result of that

00:20:23.200 --> 00:20:25.357
And so you have also hidden costs that come with that

00:20:25.440 --> 00:20:27.836
such as customer trust, engineering time

00:20:27.919 --> 00:20:28.956
team morale and more

00:20:29.039 --> 00:20:29.997
I'm 30 seconds over

00:20:30.080 --> 00:20:31.680
Am I allowed to go for 2 minutes more?

00:20:32.159 --> 00:20:32.960
Yeah, okay

00:20:33.360 --> 00:20:34.637
Everybody cool with 2 minutes more?

00:20:34.720 --> 00:20:36.237
I'll try to not speed through

00:20:36.320 --> 00:20:38.557
So, language of confidence is what I'd like to talk

00:20:38.640 --> 00:20:39.119
about next

00:20:39.919 --> 00:20:41.997
Because how do we know that there's something wrong

00:20:42.080 --> 00:20:43.596
in our development process?

00:20:43.679 --> 00:20:45.357
And we can actually take a little bit of a psychological

00:20:45.440 --> 00:20:47.357
look to this because it's the way that we communicate

00:20:47.440 --> 00:20:47.836
things

00:20:47.919 --> 00:20:51.600
Has anyone ever used these starter phrases?

00:20:52.400 --> 00:20:55.519
Somebody asks you, "Oh, how does this thing work?"

00:20:55.840 --> 00:20:58.000
"It should work this way, yeah?"

00:20:59.039 --> 00:21:02.719
Because I don't want anybody to blame me when I was wrong

00:21:02.880 --> 00:21:06.557
I want to absolve myself of any lack of confidence

00:21:06.640 --> 00:21:08.557
Because I don't have time to read the documentation

00:21:08.640 --> 00:21:10.960
I just want to tell you, "Maybe it works that way"

00:21:11.840 --> 00:21:13.600
"I have a feeling that this is an issue"

00:21:13.840 --> 00:21:15.277
"Let's just try it and see what happens"

00:21:15.360 --> 00:21:17.037
I've said all of these things

00:21:17.120 --> 00:21:18.720
I've heard all of these things

00:21:19.120 --> 00:21:21.517
But how can we go about having the kind of language

00:21:21.600 --> 00:21:24.157
which is affirmative in the sense that this is how

00:21:24.240 --> 00:21:25.040
it works?

00:21:25.280 --> 00:21:27.520
"Our metrics show 𝑥, 𝑦, and 𝑧"

00:21:27.760 --> 00:21:30.397
"The logs indicate this, and I can see from the traces

00:21:30.480 --> 00:21:32.157
that this is what's happening"

00:21:32.240 --> 00:21:34.157
And so if you find yourself using this language

00:21:34.240 --> 00:21:36.960
question why do you lack confidence in what you're doing?

00:21:37.679 --> 00:21:39.197
Same as, "We don't deploy on Fridays"

00:21:39.280 --> 00:21:40.877
I used to have a CTO that I worked with that I

00:21:40.960 --> 00:21:41.677
absolutely loved

00:21:41.760 --> 00:21:43.757
and he said, "We're not allowed to say the word Friday

00:21:43.840 --> 00:21:44.397
at work"

00:21:44.480 --> 00:21:45.437
We are not allowed to say it

00:21:45.520 --> 00:21:47.440
You're only allowed to say Thursday plus one

00:21:47.679 --> 00:21:49.357
Because if you say Friday, everything breaks

00:21:49.440 --> 00:21:50.159
It's done

00:21:50.320 --> 00:21:51.757
So, no deployments on Fridays

00:21:51.840 --> 00:21:53.197
you freeze before the holidays

00:21:53.280 --> 00:21:55.277
you do code freezes around Christmas

00:21:55.360 --> 00:21:57.997
Again, this is another smell that something is lacking

00:21:58.080 --> 00:21:59.520
confidence in your process

00:22:00.320 --> 00:22:03.037
But there are places that you can cut corners safely

00:22:03.120 --> 00:22:05.836
which is internal admin tools, static content

00:22:05.919 --> 00:22:07.037
things that aren't used that much

00:22:07.120 --> 00:22:08.237
infrequently used features

00:22:08.320 --> 00:22:10.080
But to know it's not frequently used

00:22:10.240 --> 00:22:12.476
you have to have the analytics and data to back up

00:22:12.559 --> 00:22:14.716
that that place doesn't deserve enough love

00:22:14.799 --> 00:22:16.800
in terms of a safety net perspective

00:22:17.120 --> 00:22:19.359
And there are places where it really hurts

00:22:19.840 --> 00:22:22.797
Payment processing, authentication, data migrations

00:22:22.880 --> 00:22:25.040
things that are very hard to recover from

00:22:25.520 --> 00:22:27.677
and things that directly impact cost from a business

00:22:27.760 --> 00:22:28.800
perspective

00:22:29.360 --> 00:22:31.836
There are things you can do from a deployment strategy

00:22:31.919 --> 00:22:34.716
perspective around reducing blast radiuses

00:22:34.799 --> 00:22:37.440
So, even if you don't have safety nets in place

00:22:37.600 --> 00:22:39.037
things like trunk-based development

00:22:39.120 --> 00:22:41.677
which is around the ideology of having really

00:22:41.760 --> 00:22:42.877
short-lived branches

00:22:42.960 --> 00:22:44.640
ones that only last a day or two

00:22:44.960 --> 00:22:46.320
frequently merging to main

00:22:46.720 --> 00:22:49.197
means that every time something goes wrong

00:22:49.280 --> 00:22:52.397
you're not rolling back 50,000 lines of code

00:22:52.480 --> 00:22:54.639
you're rolling back 50 lines of code

00:22:55.440 --> 00:22:56.960
And so this is really helpful

00:22:57.280 --> 00:22:59.037
I'm not going to take 2 more minutes because my biggest

00:22:59.120 --> 00:23:00.399
issue is I talk too much

00:23:00.720 --> 00:23:02.076
I'll touch a little bit about feature flags

00:23:02.159 --> 00:23:05.037
and I won't go too much into it because there's a really

00:23:05.120 --> 00:23:09.037
incredible article by Martin Fowler around feature flags

00:23:09.120 --> 00:23:10.880
and I'll say one thing about them

00:23:11.360 --> 00:23:14.317
Feature flags is where you should be duplicating

00:23:14.400 --> 00:23:16.479
the most code that you can

00:23:16.799 --> 00:23:17.997
Because if we take the example

00:23:18.080 --> 00:23:19.917
if you're trying to feature do an AB test

00:23:20.000 --> 00:23:23.040
or a feature flag across button one and button two

00:23:23.600 --> 00:23:25.596
and your React components or whatever you're using

00:23:25.679 --> 00:23:27.517
sometimes what you'll do is you'll go within your button

00:23:27.600 --> 00:23:28.400
component

00:23:28.559 --> 00:23:30.640
you'll use your feature flag system, LaunchDarkly

00:23:30.799 --> 00:23:31.360
whatever it is

00:23:31.600 --> 00:23:33.357
you'll check if something's on or off

00:23:33.440 --> 00:23:35.997
And let's say the functionality of the button is changing

00:23:36.080 --> 00:23:38.637
When I click something, the feature flag is on

00:23:38.720 --> 00:23:39.600
it does thing A

00:23:40.240 --> 00:23:42.240
If feature flag is off, it does thing B

00:23:43.039 --> 00:23:45.517
And so you're writing this code inline within your

00:23:45.600 --> 00:23:45.997
component

00:23:46.080 --> 00:23:48.317
which means that you're changing the original code

00:23:48.400 --> 00:23:51.520
which is adding risk and cyclomatic complexity to it

00:23:52.159 --> 00:23:53.836
And if you don't know the term cyclomatic complexity

00:23:53.919 --> 00:23:54.797
really worth looking up

00:23:54.880 --> 00:23:56.960
SonarQube uses this a lot

00:23:58.480 --> 00:24:01.117
And so when you're actually developing things with

00:24:01.200 --> 00:24:02.000
feature flags

00:24:02.240 --> 00:24:06.076
to have 100% guarantee in your rollbacks actually working

00:24:06.159 --> 00:24:07.197
the way it previously did

00:24:07.280 --> 00:24:09.836
you should be doing things like duplicating the component

00:24:09.919 --> 00:24:10.639
entirely

00:24:10.799 --> 00:24:12.877
and changing only the one line that's actually going to

00:24:12.960 --> 00:24:14.400
make an end difference

00:24:14.640 --> 00:24:16.399
But I'll let you read a little bit more about that

00:24:16.559 --> 00:24:18.956
The conclusion of it all is that it's about finding

00:24:19.039 --> 00:24:20.240
the right balance

00:24:20.559 --> 00:24:22.719
and that's very hard to get right

00:24:23.039 --> 00:24:24.637
And so there's no single right approach

00:24:24.720 --> 00:24:26.397
There's a lot of context from a business perspective

00:24:26.480 --> 00:24:27.677
that comes into this

00:24:27.760 --> 00:24:29.917
but knowing why you have these butterflies in your

00:24:30.000 --> 00:24:30.400
stomach

00:24:30.640 --> 00:24:32.800
this feeling that something's going to break

00:24:32.960 --> 00:24:35.280
is a really important starting point

00:24:35.600 --> 00:24:39.117
And so being targeted around your safety, strategic

00:24:39.200 --> 00:24:41.037
and knowing how to talk around confidence

00:24:41.120 --> 00:24:43.757
and use the language that is going to help you navigate

00:24:43.840 --> 00:24:46.076
these conversations is really important

00:24:46.159 --> 00:24:47.836
because the goal isn't perfection

00:24:47.919 --> 00:24:50.319
the goal is delivering value sustainably

00:24:50.480 --> 00:24:51.517
Thank you very much

00:24:51.600 --> 00:24:53.519
You can connect with me on LinkedIn here

00:24:53.840 --> 00:24:55.437
If you have feedback on the session, it's over there

00:24:55.520 --> 00:24:57.277
and I want to take a group photo because I love doing

00:24:57.360 --> 00:24:57.840
that

00:24:58.559 --> 00:25:00.637
And if you ever want to follow any of the other talks

00:25:00.720 --> 00:25:00.956
I do

00:25:01.039 --> 00:25:03.600
I'm speaking at React Summit New York this year

00:25:03.840 --> 00:25:06.877
And you can just search my name, Faris Aziz

00:25:06.960 --> 00:25:08.157
and I'm the first result on Google

00:25:08.240 --> 00:25:10.080
and you can follow all the stuff that I do

00:25:11.039 --> 00:25:12.076
And if you have any questions

00:25:12.159 --> 00:25:13.196
you're more than welcome to ask them

00:25:13.279 --> 00:25:14.157
And if you want stickers

00:25:14.240 --> 00:25:15.917
I brought them from Switzerland

00:25:16.000 --> 00:25:16.480
Cool

00:25:17.120 --> 00:25:19.037
โอเค พอ That's the talk, right?

00:25:19.120 --> 00:25:19.920
โอ้ Yeah

00:25:20.480 --> 00:25:21.117
We do the photo

00:25:21.200 --> 00:25:21.373
โอ้ That's a photo

00:25:21.456 --> 00:25:22.557
Yeah, one more photo

00:25:22.640 --> 00:25:23.120
Okay

00:25:23.520 --> 00:25:23.920
Okay

00:25:24.159 --> 00:25:27.037
We all have to choose

00:25:27.120 --> 00:25:29.277
Either we say all together "safety net"

00:25:29.360 --> 00:25:30.960
or we say "rubber ducky"

00:25:31.679 --> 00:25:32.476
"Rubber ducky"

00:25:32.559 --> 00:25:33.200
There we go

00:25:33.520 --> 00:25:34.000
Okay

00:25:35.440 --> 00:25:36.320
3 2 1 "Rubber ducky"

00:25:37.360 --> 00:25:37.757
Awesome

00:25:37.840 --> 00:25:38.400
Thank you

00:25:38.799 --> 00:25:39.279
Cool

00:25:39.760 --> 00:25:40.557
Questions?

00:25:40.640 --> 00:25:43.399
Q&A ครับ question time มีคำถามไหมครับ

00:25:43.482 --> 00:25:47.188
อย่าลืมนะครับว่าถามเป็นภาษาไทยก็ได้นะครับ

00:25:47.272 --> 00:25:48.136
เดี๋ยวแปลให้

00:25:48.219 --> 00:25:50.346
ครับมีแจก JetBrains นะครับผม

00:25:50.429 --> 00:25:52.557
มีคำถามเรื่อง QA safety net ไหมครับ

00:25:52.640 --> 00:25:55.676
spreading of the engineering practice for the speed?

00:25:55.759 --> 00:26:00.476
Okay.

00:26:00.559 --> 00:26:01.437
Any questions?

00:26:01.520 --> 00:26:02.317
If there are no questions,

00:26:02.400 --> 00:26:04.237
I assume I said everything perfectly.

00:26:04.320 --> 00:26:06.160
So please tell me I didn't.

00:26:07.279 --> 00:26:08.320
A question?

00:26:08.720 --> 00:26:11.517
Yeah, I think this one is more of the small questions.

00:26:11.600 --> 00:26:11.757
Yeah.

00:26:11.840 --> 00:26:15.520
So I just saw on your slide that you mentioned things about

00:26:15.919 --> 00:26:24.076
feature flags a bit. If implement feature flags properly, faster rollback operation

00:26:26.159 --> 00:26:29.280
Is there any sign that we can tell like,

00:26:29.440 --> 00:26:31.200
okay, we are in the right way?

00:26:32.799 --> 00:26:36.237
I would say if you are able to get an understanding

00:26:36.320 --> 00:26:38.877
of what the cyclomatic complexity of your code is.

00:26:38.960 --> 00:26:40.076
And that's a complicated term,

00:26:40.159 --> 00:26:41.437
that's more for computer science,

00:26:41.520 --> 00:26:42.797
mathematical type term.

00:26:42.880 --> 00:26:44.797
Cyclomatic complexity, if you distill it,

00:26:44.880 --> 00:26:48.237
it essentially means how many if conditions

00:26:48.320 --> 00:26:48.956
are in your code.

00:26:49.039 --> 00:26:52.476
Because a feature flag, if you simplify it,

00:26:52.559 --> 00:26:53.677
it's an if condition.

00:26:53.760 --> 00:26:54.956
If something's on, do this.

00:26:55.039 --> 00:26:56.480
If something's off, do that.

00:26:56.799 --> 00:26:59.519
The more if conditions you have in your code,

00:26:59.760 --> 00:27:02.157
the more paths for something to go wrong,

00:27:02.240 --> 00:27:04.076
and the more paths that you need to test

00:27:04.159 --> 00:27:06.239
in terms of edge cases that they exist.

00:27:06.799 --> 00:27:09.757
So the lower your cyclomatic complexity

00:27:09.840 --> 00:27:12.476
and the lower the amount of different paths

00:27:12.559 --> 00:27:14.157
there are to get to a different result

00:27:14.240 --> 00:27:16.076
of the output of your component,

00:27:16.159 --> 00:27:18.159
the closer you are to stability.

00:27:18.320 --> 00:27:21.117
And so if adding feature flags increases that

00:27:21.200 --> 00:27:22.237
in a significant amount,

00:27:22.320 --> 00:27:23.757
you're adding testing complexity

00:27:23.840 --> 00:27:25.359
and reducing guarantees.

00:27:25.679 --> 00:27:26.956
Because you just need to guarantee that

00:27:27.039 --> 00:27:28.397
even if the previous version is broken,

00:27:28.480 --> 00:27:29.117
when you roll back,

00:27:29.200 --> 00:27:30.317
you want to know it works exactly

00:27:30.400 --> 00:27:31.357
the way it did before.

00:27:31.440 --> 00:27:33.196
And copying and pasting is the easiest way

00:27:33.279 --> 00:27:34.240
to guarantee that.

00:27:34.799 --> 00:27:35.760
Yeah, thank you.

00:27:36.720 --> 00:27:40.880
All right, we do have another question right here.

00:27:42.480 --> 00:27:44.237
Hello, James from EarnIn.

00:27:44.320 --> 00:27:48.239
So I have question for the front-end observability.

00:27:48.559 --> 00:27:51.517
So just now you share about what tools

00:27:51.600 --> 00:27:54.240
are you using for front-end observability.

00:27:54.399 --> 00:27:56.239
I did use Datadog.

00:27:57.840 --> 00:27:59.517
When it comes to front-end observability,

00:27:59.600 --> 00:28:01.357
it highly depends on the amount of users you have.

00:28:01.440 --> 00:28:02.316
Because if you're using Datadog,

00:28:02.399 --> 00:28:04.960
it's going to get very expensive very quickly.

00:28:05.200 --> 00:28:07.517
So if you're talking about cutting down costs,

00:28:07.600 --> 00:28:09.037
Datadog is not going to be the way to go.

00:28:09.120 --> 00:28:09.997
And if you're going to be recording

00:28:10.080 --> 00:28:12.316
every single session that a user's having

00:28:12.399 --> 00:28:13.117
on the front-end,

00:28:13.200 --> 00:28:15.039
the expenses are going to fly through the roof.

00:28:15.360 --> 00:28:18.080
I've had the best experience personally with Sentry.

00:28:18.559 --> 00:28:20.397
Sentry is really incredible,

00:28:20.480 --> 00:28:23.360
but if your back-end is using Datadog heavily,

00:28:23.760 --> 00:28:25.997
having a way to harmonize your full stack

00:28:26.080 --> 00:28:28.397
observability becomes a lot more interesting.

00:28:28.480 --> 00:28:30.237
And so I'll say what the question is here is like

00:28:30.320 --> 00:28:32.557
what's not the best tool to use,

00:28:32.640 --> 00:28:33.997
because these tools are always going to evolve

00:28:34.080 --> 00:28:36.080
and they're meant to solve similar problems,

00:28:36.480 --> 00:28:38.956
but how can I affect my mean time

00:28:39.039 --> 00:28:41.200
to resolution the best?

00:28:41.520 --> 00:28:43.437
How fast is it for me to resolve an issue

00:28:43.520 --> 00:28:44.637
and where is my problem?

00:28:44.720 --> 00:28:46.640
Do I have enough information on the front-end?

00:28:46.799 --> 00:28:47.836
What browser is being used?

00:28:47.919 --> 00:28:49.279
What feature flags are on and off?

00:28:49.679 --> 00:28:52.076
Am I able to trace everything all the way

00:28:52.159 --> 00:28:53.596
to the back-end if maybe something failed

00:28:53.679 --> 00:28:54.637
from a database perspective

00:28:54.720 --> 00:28:56.320
and something wasn't put into the DB?

00:28:56.799 --> 00:29:00.240
So it's more of a developer experience question.

00:29:00.720 --> 00:29:01.836
Do you hate the tool?

00:29:01.919 --> 00:29:02.797
Do you love the tool?

00:29:02.880 --> 00:29:04.637
Are you excited to work with the tool?

00:29:04.720 --> 00:29:06.319
Is it hard to change the tool?

00:29:06.720 --> 00:29:08.799
Observability distilled is

00:29:09.120 --> 00:29:12.157
I'm asking my product or my code questions.

00:29:12.240 --> 00:29:13.277
Why are you doing this?

00:29:13.360 --> 00:29:14.560
How are you doing this?

00:29:14.720 --> 00:29:15.917
Why can't you do that?

00:29:16.000 --> 00:29:18.237
And so if you can answer those questions easily,

00:29:18.320 --> 00:29:19.357
you're using the right tool.

00:29:19.440 --> 00:29:20.400
If you can't,

00:29:20.799 --> 00:29:22.397
you're either not using the right tool

00:29:22.480 --> 00:29:24.720
or you're not using the tool correctly.

00:29:25.679 --> 00:29:26.319
Thank you.

00:29:26.720 --> 00:29:27.040
Cool.

00:29:27.200 --> 00:29:29.519
Now we have one last question here.

00:29:31.279 --> 00:29:33.519
So first of all, amazing session.

00:29:34.240 --> 00:29:35.920
I have some question because you say that

00:29:37.039 --> 00:29:40.316
we are trying to balance the safety with the speed,

00:29:40.399 --> 00:29:40.637
right?

00:29:40.720 --> 00:29:41.117
Yeah.

00:29:41.200 --> 00:29:42.476
But in my opinion,

00:29:42.559 --> 00:29:44.637
I think there's another factor that I want to ask

00:29:44.720 --> 00:29:46.237
that how will you balance it.

00:29:46.320 --> 00:29:48.880
It's more like the raw cost

00:29:49.200 --> 00:29:50.637
because the more safety you have,

00:29:50.720 --> 00:29:52.797
as you say, Datadog can get very expensive.

00:29:52.880 --> 00:29:54.478
Those advanced like Dynatrace,

00:29:54.720 --> 00:29:56.637
those are extremely expensive.

00:29:56.720 --> 00:29:58.559
Or even just if you use open source

00:29:58.799 --> 00:30:00.959
like Prometheus to ingest log,

00:30:01.120 --> 00:30:03.596
the infrastructure can get extremely expensive.

00:30:03.679 --> 00:30:04.079
Yeah.

00:30:04.240 --> 00:30:04.476
Yeah.

00:30:04.559 --> 00:30:07.196
Yeah, how do you not only balance the speed,

00:30:07.279 --> 00:30:10.559
but balance the dollar cost with the safety?

00:30:12.080 --> 00:30:12.320
So

00:30:13.840 --> 00:30:17.037
When it comes, again, a developer's favorite answer

00:30:17.120 --> 00:30:17.997
to everything is, "It depends."

00:30:18.080 --> 00:30:20.240
And I use "it depends" for the answer to every single

00:30:20.399 --> 00:30:21.200
question initially.

00:30:22.720 --> 00:30:27.517
When you're balancing all of that, initially the

00:30:27.600 --> 00:30:30.637
conversation is around what are the features you're

00:30:30.720 --> 00:30:31.677
trying to observe.

00:30:31.760 --> 00:30:33.596
So in my opinion, anything around payments and

00:30:33.679 --> 00:30:35.677
monetization is a non-negotiable.

00:30:35.760 --> 00:30:37.677
Because if somebody on screen is clicking and they're

00:30:37.760 --> 00:30:39.840
paying 10 baht for something, but they get charged

00:30:40.399 --> 00:30:42.559
10,000 baht, it's a nightmare.

00:30:42.799 --> 00:30:45.277
Today, I got a message because somebody wasn't

00:30:45.360 --> 00:30:47.517
refunded money fast enough on one of the products

00:30:47.600 --> 00:30:48.479
that I work on.

00:30:48.799 --> 00:30:51.920
And so it has a very direct impact on customer trust.

00:30:52.399 --> 00:30:54.397
And so, again, it depends on what you're working on.

00:30:54.480 --> 00:30:56.157
From an A/B test perspective, if you're doing A/B

00:30:56.240 --> 00:30:58.316
tests, the analytics you care about the most are

00:30:58.399 --> 00:30:58.956
business ones.

00:30:59.039 --> 00:31:00.797
So forget about the analytics, maybe from an

00:31:00.880 --> 00:31:02.560
observability perspective.

00:31:04.000 --> 00:31:07.836
But overall, it's a negotiation, and you're

00:31:07.919 --> 00:31:08.959
negotiating cost.

00:31:09.440 --> 00:31:12.557
And I don't like the idea that all the pressure of

00:31:12.640 --> 00:31:15.117
deciding what tech debt to work on, on what tool to

00:31:15.200 --> 00:31:17.360
work with is on the developer itself.

00:31:17.600 --> 00:31:19.357
I think it's a negotiation with your PM.

00:31:19.440 --> 00:31:21.357
And so if you're able to have the negotiation around

00:31:21.440 --> 00:31:24.716
cost, DoorMetrics, again, it was an interesting one

00:31:24.799 --> 00:31:26.716
because you saw on a 10 million ARR business,

00:31:26.799 --> 00:31:28.956
"Oh, how much could I lose if my system works this

00:31:29.039 --> 00:31:31.120
way or has this rate of failure or whatever?"

00:31:31.520 --> 00:31:34.557
If you're able to say that, "Hey, we make 10 million

00:31:34.640 --> 00:31:38.240
per year, and it takes me 4 hours to resolve this

00:31:38.480 --> 00:31:41.836
with Datadog, but it takes me 3 hours to resolve it

00:31:41.919 --> 00:31:44.397
with Dynatrace," you can actually calculate the

00:31:44.480 --> 00:31:47.359
uplift you get from a developer experience and

00:31:47.519 --> 00:31:50.877
infrastructure perspective versus what's saving cost

00:31:50.960 --> 00:31:52.956
on the invoice that you get every single month.

00:31:53.039 --> 00:31:53.917
Those are the hidden costs.

00:31:54.000 --> 00:31:55.360
So if you're able to put the question to your PM,

00:31:55.519 --> 00:31:57.357
it's like, "Hey, would you rather it takes me long

00:31:57.440 --> 00:32:01.360
to fix this, or it's expensive to maintain this?

00:32:01.679 --> 00:32:02.319
You pick."

00:32:02.640 --> 00:32:04.637
But as an engineer, you're a consultant.

00:32:04.720 --> 00:32:06.397
Even if you work full-time in a place, you're a

00:32:06.480 --> 00:32:06.877
consultant.

00:32:06.960 --> 00:32:09.520
You're consulting on pros and cons of direction one

00:32:09.760 --> 00:32:10.879
versus direction two.

00:32:11.600 --> 00:32:13.037
You can't just say you're going to save the company

00:32:13.120 --> 00:32:13.436
this way.

00:32:13.519 --> 00:32:14.716
You got to ask the business questions.

00:32:14.799 --> 00:32:16.956
So being able to speak the language of business and

00:32:17.039 --> 00:32:20.637
cost, and using metrics to back those up, that will

00:32:20.720 --> 00:32:22.237
make the biggest difference at the end of the day.

00:32:22.320 --> 00:32:24.956
And the last thing I'll say around observability is

00:32:25.039 --> 00:32:29.357
that it's a continuously evolving process in the

00:32:29.440 --> 00:32:31.997
sense that when I'm deploying something that I don't

00:32:32.080 --> 00:32:34.476
have a guarantee will work, I'll put 10 times more

00:32:34.559 --> 00:32:37.677
logs than something that I know works 99% of the time.

00:32:37.760 --> 00:32:40.956
And so I'll add 10 logs, but then after 2 weeks,

00:32:41.039 --> 00:32:43.117
if it's working the way I expected to, I'm going to

00:32:43.200 --> 00:32:45.120
remove the logs and save the cost.

00:32:45.519 --> 00:32:49.196
So temporary analysis for a sprint, retrospectively

00:32:49.279 --> 00:32:51.280
see if the thing's working the way you wanted to,

00:32:51.760 --> 00:32:54.557
remove the logs, and now you have almost a guarantee

00:32:54.640 --> 00:32:55.679
that it's stable.

00:32:56.240 --> 00:32:59.037
So sort of like minimum viable product, what's the

00:32:59.120 --> 00:33:01.196
minimum viable observability that you want to put

00:33:01.279 --> 00:33:02.000
in place?

00:33:02.640 --> 00:33:04.240
Okay. Thank you. Very good.

00:33:05.679 --> 00:33:07.520
Okay. Any more questions?

00:33:09.519 --> 00:33:11.436
We got three competing for the JetBrains.

00:33:11.519 --> 00:33:13.357
Okay. Now this is a problem.

00:33:13.440 --> 00:33:16.716
We have three quality questions, but we only have one

00:33:16.799 --> 00:33:19.039
code to give.

00:33:22.000 --> 00:33:23.037
I'll do you one better.

00:33:23.120 --> 00:33:25.117
I have three JetBrains licenses, too.

00:33:25.200 --> 00:33:27.277
I'll give all three of them JetBrains licenses.

00:33:27.360 --> 00:33:27.680
Wow!

00:33:30.000 --> 00:33:33.037
So you give me the names, you send me an email,

00:33:33.120 --> 00:33:34.956
I'll get you two licenses on above that.

00:33:35.039 --> 00:33:38.797
All three of you get them because taking the time to

00:33:38.880 --> 00:33:42.157
think of a question, absorbing the content, I don't

00:33:42.240 --> 00:33:44.397
think the best one or whatever deserves always the

00:33:44.480 --> 00:33:44.637
best.

00:33:44.720 --> 00:33:47.196
I think just taking a chance on yourself and asking

00:33:47.279 --> 00:33:50.316
the question should give you the confidence to do it

00:33:50.399 --> 00:33:52.316
again, and that's more important than anything.

00:33:52.399 --> 00:33:53.600
That's very cool.

00:33:54.159 --> 00:33:54.716
So cool.

00:33:54.799 --> 00:33:56.879
If you guys want stickers, I'm leaving them here.

00:33:57.760 --> 00:33:59.917
If I leave and I see the stickers are empty, my

00:34:00.000 --> 00:34:02.240
heart will be broken, but I'll understand.

00:34:02.880 --> 00:34:04.476
Cool. Thank you for your time.

00:34:04.559 --> 00:34:05.680
Let's enjoy pizza.

00:34:06.399 --> 00:34:07.519
Thank you so much.
