WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:01.040 --> 00:00:02.480
โอเคครับ สวัสดีครับผม

00:00:03.919 --> 00:00:06.840
ก็เป็นคนแรกเลยนะครับ

00:00:07.439 --> 00:00:10.317
โอเคก็สไลด์พึ่งเสร็จนะครับ

00:00:10.400 --> 00:00:14.117
จริงๆ สไลด์เยอะมากนะครับ

00:00:14.200 --> 00:00:17.640
แต่ก็ต้องตัดออกเพราะว่าน่าจะโค้ดเยอะไปนะครับ

00:00:17.800 --> 00:00:20.677
เลยเดี๋ยวใช้วิธีการเน้นคุยดีกว่านะครับ

00:00:20.760 --> 00:00:25.000
ก็ตอนนี้ก็เหลือแค่ 16 สไลด์นะครับ กับประมาณ 20 นาทีเนาะ

00:00:25.439 --> 00:00:29.919
ครับก็สวัสดีทุกคนนะครับ ที่มา BKK.JS นะครับรอบนี้

00:00:31.560 --> 00:00:34.636
สำหรับเซคชั่นของผมนะก็คือจริงๆ เป็นเรื่องเรียบง่ายมากนะครับ

00:00:34.719 --> 00:00:37.557
ถ้าใครอยู่ในสายของ JavaScript อยู่แล้วเนี่ย

00:00:37.640 --> 00:00:41.276
ก็คงจะรู้จักสิ่งที่เรียกว่า promise เนาะ

00:00:41.359 --> 00:00:43.756
เนาะหรือว่าที่เราแบบหลายปีที่ผ่านมาเรารู้จักเรื่องแบบ

00:00:43.839 --> 00:00:45.520
เอ้ยเราจะทำตามสัญญาใช่มั้ย

00:00:45.960 --> 00:00:49.440
อันเนี้ยเราจะมาคุยเรื่องสัญญาของ JavaScript เนาะ

00:00:52.559 --> 00:00:54.597
ให้เข้าใจตรงกันก่อนว่า เอ้ยโอเคมันอย่างเงี้ย

00:00:54.680 --> 00:00:55.800
เราเข้าใจตรงกันมั้ยเนาะ

00:00:55.960 --> 00:00:57.077
แล้วตอนเซคชั่นสุดท้ายเนี่ย

00:00:57.160 --> 00:01:00.520
ผมจะมีเหมือนเป็นเคสที่ผมก็ชอบเถียงกับจูเนียร์

00:01:00.920 --> 00:01:02.476
หรือแบบซีเนียร์คนอื่นเนาะ

00:01:02.559 --> 00:01:04.436
เวลาเราทำโปรเจคแบบใหญ่ๆ ด้วยกันว่า

00:01:04.519 --> 00:01:08.237
ไอ้ปัญหาที่เราเจอเราก็จะแก้ด้วยการใช้ promise ยังไงเนาะ

00:01:08.320 --> 00:01:12.560
คือทุกคนใช้ promise เป็นเนาะ ถูกมั้ยครับ

00:01:15.360 --> 00:01:17.599
ซึ่งผมก็คิดว่าผมก็ใช้เป็นนะ

00:01:18.000 --> 00:01:20.797
แต่ว่าซีเนียร์บางคนนะครับ ก็ใช้เป็นเนาะ

00:01:20.880 --> 00:01:21.800
แล้วใช้คนละวิธีกัน

00:01:21.960 --> 00:01:23.637
ซึ่งมันไม่มีใครถูกไม่มีใครผิดนะครับ

00:01:23.720 --> 00:01:26.237
เดี๋ยวเรามาดูกันว่าเราจะใช้กันแบบไหนเนาะ

00:01:26.320 --> 00:01:29.356
เพราะว่าแต่ละสถานการณ์เนาะมันจะไม่เหมือนกันนะครับ

00:01:29.439 --> 00:01:31.036
เรามาดูตัวอย่างเนาะ

00:01:31.119 --> 00:01:32.797
โค้ดนี้แบบเบสิกมากๆ เลยนะครับ

00:01:32.880 --> 00:01:35.200
ก็คือ promise เนาะมันจะลักษณะประมาณนี้

00:01:36.439 --> 00:01:39.117
ถ้าตรงไหนผิดนะครับ บอกผมได้นะ

00:01:39.200 --> 00:01:42.356
ผมจะมีเหมือนโค้ดผิดอยู่ประมาณ 2-3 จุดนะครับ

00:01:42.439 --> 00:01:47.600
ถ้าใครแบบหาเจอเนี่ยก็แสดงว่า คุณเนี่ยเหมือนผมเลยนะครับ

00:01:49.000 --> 00:01:50.597
เพราะงั้น promise มันมีแค่นี้

00:01:50.680 --> 00:01:52.240
ก็คือว่าหลักการของมันเนาะ

00:01:53.079 --> 00:01:54.636
จริงๆ promise ต้องพูดกับ asynchronous await เนาะ

00:01:54.719 --> 00:01:57.117
แต่ว่าผมจะโฟกัสที่ promise อย่างเดียวเนาะ

00:01:57.200 --> 00:01:58.917
เพราะว่าเดี๋ยวมันจะยาวเกินนะครับ

00:01:59.000 --> 00:02:01.200
ก็หลักๆ เนาะคือ promise มันคือแค่นี้เนาะ

00:02:01.399 --> 00:02:04.076
มีพารามิเตอร์ 2 ตัวคือ resolve กับ reject ใช่มั้ยครับ

00:02:04.159 --> 00:02:05.557
แล้วก็เขียนโค้ดของเราไปเนาะ

00:02:05.640 --> 00:02:07.240
นั่นหลักการมันมีอยู่แค่นี้ถูกมั้ยครับ

00:02:07.759 --> 00:02:09.320
ถ้าเราดู full code หน่อยก็คือ

00:02:09.720 --> 00:02:12.236
เราจะเอา promise เนี่ยไปทำอะไรบางอย่างใช่มั้ย

00:02:12.319 --> 00:02:15.839
ไม่ว่าจะเป็น asynchronous code หรือว่าโค้ดทั่วๆ ไปเนาะ

00:02:16.000 --> 00:02:20.199
ถ้าสุดท้ายแล้วผลลัพธ์มันเป็นสิ่งที่เราหวังเนาะ

00:02:20.680 --> 00:02:24.357
เราได้ผลที่เราหวังอย่างเช่น เราต้องการต่อ axios ใช่มั้ย

00:02:24.440 --> 00:02:26.480
เราต้องการต่อ HTTP ใช่มั้ย

00:02:26.599 --> 00:02:30.117
เราต้องการต่อ Salesforce ต้องการต่อ SAP ใช่ป่ะ

00:02:30.200 --> 00:02:31.759
คือผมต่อแทบจะทุกอย่างนะ

00:02:32.840 --> 00:02:34.920
มันต่อสำเร็จเนาะตามที่เราหวังอะ

00:02:35.360 --> 00:02:38.240
สิ่งที่เกิดขึ้นก็คือเราจะเอาไปใส่ใน resolve ถูกป่ะ

00:02:41.440 --> 00:02:43.876
แล้วถ้ามันเกิดอะไรที่แบบผิดหวังอะ

00:02:43.959 --> 00:02:46.119
สัญญาแล้วไม่เป็นสัญญาใช่ป่ะ ผิดหวังอะ

00:02:46.319 --> 00:02:48.320
เราจะเอาไปใส่ใน reject ถูกป่ะ

00:02:49.000 --> 00:02:50.236
เพื่อให้มัน reject ออกไปถูกมั้ย

00:02:50.320 --> 00:02:52.796
จริงๆ อะคอนเซ็ปต์เบสิกอะมันมีอยู่แค่นี้ใช่มั้ยครับ

00:02:52.879 --> 00:02:57.400
ทีเนี้ยสิ่งที่ใส่ไปใน resolve มันจะไปโผล่อยู่ที่นึงใช่มั้ยครับ

00:02:57.519 --> 00:03:00.320
สิ่งที่ใส่ไปใน reject อะ มันจะไปโผล่อยู่ที่นึง

00:03:00.800 --> 00:03:05.080
สมมติถ้ารันโค้ดบรรทัดแถวๆ นี้นะ

00:03:06.040 --> 00:03:08.440
จากที่เห็นเลยนะ คิดว่ามีบั๊กมั้ย

00:03:11.159 --> 00:03:12.720
ถ้าเรา console.log ออกมาครับ

00:03:13.000 --> 00:03:16.240
เราคิดว่าเราจะได้เมสเสจอะไรนะ

00:03:16.440 --> 00:03:20.037
จากคนที่ใช้เป็น แบบ compile โค้ดโดยที่ไม่ต้องเขียนโค้ด

00:03:20.120 --> 00:03:22.759
นี่เขียนด้วยกระดาษเลย compile ในหัวนะ

00:03:23.080 --> 00:03:25.080
แบบหลักสูตรที่เราจะต้องเจอนะ

00:03:26.239 --> 00:03:27.997
คิดว่าเราจะเกิดอะไรขึ้นครับ

00:03:28.080 --> 00:03:29.639
ไอ้ console.log มันจะเกิดอะไรขึ้น

00:03:30.400 --> 00:03:31.240
ได้ผลลัพธ์มั้ย

00:03:32.080 --> 00:03:34.479
ได้ undefined อะใครคิดว่าได้ undefined ครับ

00:03:35.519 --> 00:03:38.519
โอเคใครคิดว่าได้ promise object

00:03:40.280 --> 00:03:44.477
โอเคคือเคสเนี้ย มันจะได้ promise object เนาะ

00:03:44.560 --> 00:03:45.360
เพราะว่าอะไรครับ

00:03:45.840 --> 00:03:49.040
ก็คือ promise ปุ๊บมัน console.log เลยถูกมั้ย

00:03:49.519 --> 00:03:51.516
คือไอ้ promise มันยังไม่ทำงานถูกป่ะ

00:03:51.599 --> 00:03:54.360
เพราะว่ามันก็คือเหมือนเป็นหลักการของมันก็คือ

00:03:54.680 --> 00:03:58.236
เราสัญญาว่าเราจะทำให้มันเสร็จเนาะ ใช่มั้ยครับ

00:03:58.319 --> 00:04:01.000
แล้วมันก็คือข้ามไปทำงานอย่างอื่นเลยต่อถูกมั้ยครับ

00:04:01.360 --> 00:04:02.516
แสดงว่าไอ้จังหวะเนี้ย

00:04:02.599 --> 00:04:04.600
ถ้าเราไม่ได้แบบทำอะไรกับมันเพิ่มอะ

00:04:04.720 --> 00:04:08.239
ไอ้ตัว promise อะมันจะได้ object ที่ชื่อว่า promise มาถูกมั้ย

00:04:08.560 --> 00:04:12.600
ซึ่งมันก็มี 2 แบบคือ promise ที่ pending ถูกมั้ย

00:04:13.319 --> 00:04:15.197
ลองนึกภาพตามนะผมตัดสไลด์ออกไปเยอะ

00:04:15.280 --> 00:04:16.716
ก็คือเป็น pending ถูกมั้ย

00:04:16.799 --> 00:04:18.680
เป็น fulfilled ใช่ป่ะ

00:04:19.519 --> 00:04:21.159
อันสุดท้ายเป็นอะไรครับที่เป็นไปได้

00:04:21.840 --> 00:04:22.758
เป็น rejected ถูกมั้ย

00:04:22.880 --> 00:04:26.060
มี 3 อย่างขอบคุณมากครับผม น่ารักเนาะ

00:04:26.240 --> 00:04:29.799
ทีนี้เนี่ยสมมติว่าเราบอกว่าเรารองรัน promise เนาะ

00:04:29.960 --> 00:04:33.530
แบบที่ 1 เนาะ กับรัน promise แบบข้างล่างเนาะ

00:04:33.613 --> 00:04:34.997
สมมติว่าถ้าเรารันแบบเนี้ยครับ

00:04:35.080 --> 00:04:36.520
เนี่ยรันโค้ดนี้ออกมา

00:04:37.000 --> 00:04:40.080
เราคิดว่า log data 1 กับ log data 2 อะ

00:04:40.720 --> 00:04:42.480
มันเหมือนกันมั้ย หรือมันต่างกัน

00:04:49.600 --> 00:04:50.560
คิดว่าเหมือนกันมั้ย

00:04:51.800 --> 00:04:53.159
ไม่เหมือนหรอ

00:04:53.800 --> 00:04:55.840
คิดว่าแบบบนถูกหรือแบบล่างถูกครับ

00:04:56.840 --> 00:04:58.080
หรือทั้ง 2 แบบก็ถูกเหมือนกัน

00:05:03.520 --> 00:05:04.960
โหทุกคนไม่ให้ความร่วมมือเลยอะ

00:05:05.400 --> 00:05:07.200
โหชีวิตคนแรกทุกคนตื่นยัง

00:05:09.360 --> 00:05:10.280
อันนี้คือให้กำลังใจ

00:05:10.440 --> 00:05:12.920
โอเคนะก็คือถ้าจากที่เห็นเนาะ

00:05:13.039 --> 00:05:15.077
คือสมมติว่าเนี่ยก็คือแพทเทิร์นจะประมาณนี้แหละ

00:05:15.160 --> 00:05:17.799
ก็คือมันจะมีแค่ 3 เซคชั่นเนาะถ้าเอาเข้าใจง่ายๆ เนาะ

00:05:17.919 --> 00:05:20.637
ก็คือมันจะมีแค่เซคชั่นที่เป็น promise เมื่อกี้เนาะ

00:05:20.720 --> 00:05:22.039
ที่เราสร้างไว้ใช่มั้ย

00:05:22.160 --> 00:05:25.320
จากนั้นเนี่ยเราบอกว่า ถ้ามันโดน resolve ถูกมั้ย

00:05:25.639 --> 00:05:27.157
ถ้ามันสิ่งที่เราหวังไว้อะ

00:05:27.240 --> 00:05:29.850
ที่เราตั้งใจไว้ว่ามันเสร็จแล้วอะ

00:05:29.933 --> 00:05:31.519
ผลลัพธ์มันจะมาเข้าที่ไหนครับ

00:05:32.840 --> 00:05:34.440
มันจะมาเข้าที่ฟังก์ชัน then เนาะ

00:05:34.759 --> 00:05:39.279
หมายความว่าคุณโยนอะไรเข้าไปในรูของ resolve เรียกรูเลย

00:05:40.560 --> 00:05:43.600
เราโยนอะไรเข้าไปในรูของ resolve เนาะ

00:05:43.919 --> 00:05:45.080
อันเนี้ยมันจะไปโผล่ตรงไหน

00:05:45.720 --> 00:05:46.760
โผล่ที่ then ถูกป่ะ

00:05:47.360 --> 00:05:50.280
แล้วถ้าเราโยนเข้าไปที่รูของ reject อะโผล่ที่ไหน

00:05:52.520 --> 00:05:53.920
มันจะไปโผล่ที่ catch ถูกป่ะ

00:05:54.600 --> 00:06:01.236
สุดท้าย finally ครับ ทำงานตอนไหนครับ สุดท้ายเนาะ

00:06:01.319 --> 00:06:03.520
อันนี้คือเบสิกเนาะก็คือหมายความว่า

00:06:03.720 --> 00:06:04.360
จริงๆ แล้วเรา

00:06:05.400 --> 00:06:12.477
โอเคนะ จริงๆ แล้วเนี่ยเมื่อกี้คือเบสิกมากๆ เนาะ

00:06:12.560 --> 00:06:14.757
คือหมายความว่า เดี๋ยวผมพูดไปเรื่อยๆ นะครับ

00:06:14.840 --> 00:06:17.556
โอเคก็ เมื่อกี้นี้น่าจะรู้กันอยู่แล้วเนาะ

00:06:17.639 --> 00:06:21.280
ก็คือเราสามารถนะครับ resolve กับ reject ได้เนาะ

00:06:21.400 --> 00:06:26.560
ซึ่งผลลัพธ์เนี่ยมันก็จะเข้าออกตามที่เราคุยกันเมื่อกี้นี้นะครับ

00:06:34.080 --> 00:06:39.516
เดี๋ยวสไลด์ต่อไปจะมีบั๊ก

00:06:39.599 --> 00:06:41.079
แต่เรามาดูสไลด์นี้ก่อนนะครับ

00:06:41.319 --> 00:06:51.037
ถ้าสไลด์นี้สมมติว่าเอาโค้ดชุดนี้เนาะ รันออกมาครับ

00:06:51.120 --> 00:06:55.120
ทุกคนรันในหัวคิดว่า ผลลัพธ์ data 1 จะเป็นอะไรครับ

00:06:58.879 --> 00:07:08.919
รู้มั้ยครับ เดาได้มั้ย

00:07:10.280 --> 00:07:12.357
เป็น promise เหมือนเดิมถูกมั้ย

00:07:12.440 --> 00:07:12.997
เป็น promise เนาะ

00:07:13.080 --> 00:07:19.600
data 1 เป็น promise แล้ว data 2 อะครับ จะเป็นไรครับ

00:07:21.000 --> 00:07:26.680
จะเป็น null จริงป่ะครับ

00:07:27.599 --> 00:07:29.960
จะเป็น undefined เฮ้ยสุดยอด

00:07:31.000 --> 00:07:33.676
รู้ป่ะ สมมติว่าถ้าเราไม่รันในโค้ดครับ

00:07:33.759 --> 00:07:35.116
เราพยายามเนาะ

00:07:35.199 --> 00:07:38.279
คืออย่างผมเนี่ยผมจะพยายามคุยให้เข้าใจก่อนว่า

00:07:38.919 --> 00:07:41.997
คุณเข้าใจแบบภาพเดียวกันกับสิ่งที่มันเป็นมั้ย

00:07:42.080 --> 00:07:44.800
คือถ้ามันสามารถ compile ในหัวได้แล้วเรารู้อะ

00:07:45.319 --> 00:07:47.757
คือเราจะเข้าใจว่าจริงๆ มันก็มีอยู่เท่าเนี้ย

00:07:47.840 --> 00:07:50.320
มันจะไม่มีเหนือไปกว่าเนี้ย นึกออกป่ะ

00:07:51.080 --> 00:07:53.157
เออช่างมันเถอะนึกไม่ออกก็ไม่เป็นไรครับ

00:07:53.240 --> 00:07:54.836
โอเคคืออันเนี้ยมันจะได้เป็นไรครับ

00:07:54.919 --> 00:07:57.997
promise เนาะเพราะว่ามันโดนแค่แบบเหมือนกับโดนเขียนโค้ด

00:07:58.080 --> 00:07:59.519
ใช่ป่ะ data 1 เนาะ

00:07:59.879 --> 00:08:01.400
data 1 อะเก็บไรครับ promise เนาะ

00:08:01.840 --> 00:08:03.400
เวลาเรา print log ออกมาตรงเนี้ย

00:08:03.639 --> 00:08:05.080
เราจะยังไม่ได้ data ถูกป่ะ

00:08:05.199 --> 00:08:06.919
เพราะว่า promise มันยังทำงานไม่เสร็จถูกมั้ย

00:08:07.280 --> 00:08:08.680
เออมันจะข้ามไปเลยถูกมั้ย

00:08:09.120 --> 00:08:13.719
อะแต่ว่าพอเราบอกว่า data 2 เนี่ยเราสั่งให้มัน await ใช่ป่ะ

00:08:13.919 --> 00:08:15.720
อันเนี้ยมันจะรอ รอไรครับ

00:08:16.000 --> 00:08:19.160
รอ promise ถูกมั้ย ให้มัน resolve สำเร็จ

00:08:19.400 --> 00:08:21.597
ซึ่ง resolve สำเร็จเนี่ย มันก็มี 2 แบบ

00:08:21.680 --> 00:08:27.680
ก็คือ resolve ได้ใช่มั้ย กับ reject ถูกป่ะ

00:08:27.960 --> 00:08:30.917
เออซึ่งถ้าในเคสเนี้ย resolve ได้ปุ๊บอะ

00:08:31.000 --> 00:08:33.040
มันก็จะได้ data ออกมาถูกมั้ย

00:08:33.440 --> 00:08:35.200
แต่ data 2 มันไม่มีเพราะไรครับ

00:08:35.320 --> 00:08:36.719
เพราะว่าตำแหน่งของ then น่ะ

00:08:37.240 --> 00:08:38.719
เห็นป่ะมันไม่มี return อะไรเลย

00:08:39.039 --> 00:08:41.279
ก็แสดงว่าตัวแปร data 2 เนี้ยมันไม่ได้อะไร

00:08:41.440 --> 00:08:44.357
มันไม่ได้รับอะไรเข้ามามันก็จะกลายเป็น undefined ถูกป่ะ

00:08:44.440 --> 00:08:46.640
อะ ถ้าเราจะแก้โค้ดสมมตินะ

00:08:46.760 --> 00:08:48.280
เราจะแก้โค้ดบรรทัดเนี้ย

00:08:48.399 --> 00:08:57.160
ให้ไอ้ตัว data 2 มันมีค่าครับ เราต้องเพิ่มอะไร

00:08:57.760 --> 00:09:02.960
เพื่อให้ promise ของเรามันเป็นไปตามที่มันควรจะเป็นครับ

00:09:05.040 --> 00:09:07.839
รู้มั้ยเราเพิ่มไรไปใช่มั้ย

00:09:08.120 --> 00:09:11.120
ตามกฎแล้วก็คือเราควรจะเพิ่ม return เข้าไปตรงนี้ถูกมั้ย

00:09:11.480 --> 00:09:14.680
คือหมายความว่า ถ้า resolve สำเร็จใช่ป่ะ

00:09:15.000 --> 00:09:18.080
data จะไหลมาที่ไหน ไหลมาที่ then ถูกมั้ย

00:09:18.440 --> 00:09:21.080
พอไหลที่ then ปุ๊บเราต้องเขียน return ใน then

00:09:21.200 --> 00:09:25.876
เพื่อให้มันไหลออกมาจาก promise อีกทีนึง

00:09:25.959 --> 00:09:27.680
ซึ่งไอ้การไหลออกมาจาก promise น่ะมันคือ

00:09:28.120 --> 00:09:31.240
เนี่ยรอแล้วก็ไหลเข้ามาที่ตัวแปร 2 ถูกป่ะ

00:09:31.680 --> 00:09:34.756
เออแล้วจังหวะตัวแปร 2 เนี่ยเรา console.log ออกมาครับ

00:09:34.839 --> 00:09:37.316
เราจะได้ data นึกออกป่ะ

00:09:37.399 --> 00:09:39.717
เพราะฉะนั้นน่ะส่วนใหญ่ที่ผมทะเลาะกับ junior

00:09:39.800 --> 00:09:41.400
หรือว่า senior บางคนนะ

00:09:41.760 --> 00:09:43.679
ก็คือ debug แล้วไม่เจอบั๊ก

00:09:44.320 --> 00:09:48.996
เพราะว่าไม่รู้คำตอบว่าทำไมมันไม่มีข้อมูลออกมา นึกออกป่ะ

00:09:49.079 --> 00:09:51.477
เพราะว่าเราคิดว่าโค้ดมันถูกนะ compile ก็ผ่านเนาะ

00:09:51.560 --> 00:09:54.133
แต่ว่าสิ่งที่เราหายไปก็คือ return ถูกมั้ย

00:09:54.440 --> 00:09:57.519
อะ ทีนี้มันมีอีกปัญหานึงนะครับที่เราเจอก็คือ

00:09:57.959 --> 00:10:01.559
เรามี then ค่อนข้างเยอะ เรามีหลาย then ใช่มั้ย

00:10:02.000 --> 00:10:04.037
อันนี้เราถ้าเราเจอเคสแบบเนี้ย

00:10:04.120 --> 00:10:10.200
เราก็คิดว่าข้อมูลจะเป็นยังไงครับ รู้มั้ยครับ

00:10:10.399 --> 00:10:11.560
อันนี้คือเวลาที่เหลือหรอ

00:10:15.079 --> 00:10:18.436
ที่ผ่านไป 10 นาทีแล้วหรอ

00:10:18.519 --> 00:10:21.360
เฮ้ยไม่ทันแล้วอะโอเค

00:10:21.519 --> 00:10:23.583
ก็คือ then นะครับก็คือ resolve แรกเนาะ

00:10:23.667 --> 00:10:25.279
then อันแรกจะไหลเข้ามาหาไรครับ

00:10:25.920 --> 00:10:27.200
ไหลมาหาอันที่ 2 ถูกมั้ย

00:10:27.560 --> 00:10:30.196
และอันที่ 2 เนี่ยถ้าไม่มีอะไรเกิดขึ้นปุ๊บมันก็จะไรครับ

00:10:30.279 --> 00:10:31.240
ไป finally ถูกมั้ย

00:10:31.440 --> 00:10:35.200
เออ เคสเนี้ย เหมือนเดิมเลยก็คืออันเนี้ยมีบั๊ก

00:10:35.320 --> 00:10:38.159
บั๊กตรงไหนครับ ไม่มี return ถูกมั้ย

00:10:38.399 --> 00:10:41.360
ก็คือถ้าเราไม่มี return แปลว่า result อันแรกอะ

00:10:41.560 --> 00:10:45.039
มันจะไม่ไหลมาหา result ที่ 2 ถูกป่ะ เพื่อทำไรบางอย่าง

00:10:45.160 --> 00:10:47.717
แล้ว result ที่ 2 อะก็จะไม่ไหลไปหาที่

00:10:47.800 --> 00:10:49.436
ก็คือไหลมาหาเนี้ย

00:10:49.519 --> 00:10:51.517
แล้วมันก็จะไม่ออก console.log เหมือนเดิม

00:10:51.600 --> 00:10:55.080
เพราะว่ามันไม่มี return อันนี้งงมั้ย

00:10:56.240 --> 00:10:57.760
อะงงก็ปล่อยมันไปนะครับ

00:10:58.120 --> 00:10:59.839
ผมว่าจะมีปัญหากับผมคนเดียวนะครับ

00:11:00.000 --> 00:11:01.560
โอเคอะ ทีนี้ครับ

00:11:01.720 --> 00:11:03.517
สิ่งที่เราชอบใช้กันเนาะ

00:11:03.600 --> 00:11:05.996
ก็คือเมื่อกี้เนี้ยเป็นแบบพูดถึง basic ทั่วๆ ไปเนาะ

00:11:06.079 --> 00:11:07.560
คือบางคนอาจจะเข้าใจอยู่แล้วเนาะ

00:11:07.680 --> 00:11:09.917
แต่ว่าอยากจะให้ลองจินตนาการว่า

00:11:10.000 --> 00:11:11.996
ถ้าแบบเราลืมอะไรไปบางอย่างเนี่ย

00:11:12.079 --> 00:11:14.077
ก็คือผลลัพธ์ที่เกิดขึ้นมันควรจะเป็นอะไรเนาะ

00:11:14.160 --> 00:11:16.840
ซึ่งผมก็ตีกับน้อง junior บ่อยๆ นะครับว่า

00:11:17.720 --> 00:11:18.797
เนี่ยแหละคือเหตุการณ์ที่เกิดขึ้นเนาะ

00:11:18.880 --> 00:11:19.836
ทุกคนอาจจะรู้อยู่แล้วอะ

00:11:19.919 --> 00:11:20.717
ทีนี้เดี๋ยวเรามาดูต่อครับ

00:11:20.800 --> 00:11:23.719
ก็คือเมื่อกี้เนี้ยที่เรารันก็คือเป็น promise 1 ตัวใช่มั้ยครับ

00:11:24.040 --> 00:11:25.840
เออแล้วเราใส่ await ก็คือรอใช่ป่ะ

00:11:26.079 --> 00:11:28.637
แล้วถ้าเรามี promise หลายๆ ตัวอะใช่มั้ยครับ

00:11:28.720 --> 00:11:32.037
เรา await มันทุกตัวอะก็แปลว่ามันจะรอ ใช่ป่ะ

00:11:32.120 --> 00:11:36.196
รอไปตัวนึงเสร็จ ทำตัว 2 ตัว 2 เสร็จทำตัว 3 ถูกมั้ยครับ

00:11:36.279 --> 00:11:39.080
อืมทีนี้บางคนเค้าบอกว่าใช้เนี่ยเราจะใช้อะไรครับ

00:11:39.360 --> 00:11:41.959
Promise.all เพื่ออะไรรู้มั้ย

00:11:43.960 --> 00:11:46.159
สมมติว่าเรามี promise 3 ตัวเนาะ

00:11:46.680 --> 00:11:48.957
อะ promise 3 ตัวเราอยากให้ไอ้ 3 ตัวเนี้ย

00:11:49.040 --> 00:11:51.080
จริงๆ คือมันไม่มีความเกี่ยวข้องกันเลยนะ

00:11:51.200 --> 00:11:52.480
ยกตัวอย่างเช่นนะครับ

00:11:52.680 --> 00:11:54.597
อ่าผมทำหน้าจอขึ้นมา 1 หน้าจอเนาะ

00:11:54.680 --> 00:11:57.840
หน้าจออะมี dropdown list อยู่ 3 ตัว

00:11:58.160 --> 00:12:00.863
ถามว่า dropdown list 3 ตัวเนี่ยมันจำเป็นต้องรอกันมั้ย

00:12:00.947 --> 00:12:02.556
ไม่ต้องถูกป่ะ

00:12:02.639 --> 00:12:04.360
เออเราจะใช้วิธีประมาณนี้เนาะ

00:12:04.480 --> 00:12:07.637
ก็คือ promise ตัวแรกยิง API เส้นที่ 1 ถูกมั้ย

00:12:07.720 --> 00:12:11.037
ไปดึง dropdown มา ดึงเส้นที่ 2 ดึงเส้นที่ 3 มาใช่ป่ะ

00:12:11.120 --> 00:12:12.080
มันอยู่แบบนี้ใช่มั้ย

00:12:12.399 --> 00:12:14.319
แต่ถ้าเราบอกว่าเราแต่ละตัวเรา await await await

00:12:14.720 --> 00:12:15.597
เหมือนเมื่อกี้เนี้ย

00:12:15.680 --> 00:12:18.319
มันก็จะกลายเป็นว่ามันรอแต่ละตัวเสร็จถูกมั้ย

00:12:18.440 --> 00:12:20.436
ซึ่งตัวสุดท้ายอาจจะเสร็จก่อนก็ได้ใช่ป่ะ

00:12:20.519 --> 00:12:25.196
เพราะฉะนั้นน่ะโดยปกติแล้วเราจะใช้คำว่า Promise.all เนาะ

00:12:25.279 --> 00:12:29.597
เข้าไปเพื่อบอกว่ารัน 1 2 3 อะ พร้อมกันเลย เนาะ

00:12:29.680 --> 00:12:30.600
รันพร้อมกันเลย

00:12:30.800 --> 00:12:32.277
พอรันพร้อมกันเสร็จแล้วปุ๊บเนี่ย

00:12:32.360 --> 00:12:36.080
ผลลัพธ์ที่ได้เนี่ยมันจะออกมาที่ then ถูกมั้ย

00:12:36.560 --> 00:12:40.040
เนาะได้เป็น array ก็คือเนี่ยยกตัวอย่างนะครับ 1 2 3 เนาะ

00:12:40.279 --> 00:12:42.200
แต่มันยังมีเหตุการณ์แบบนี้ครับ

00:12:42.480 --> 00:12:46.240
สมมติว่า ลิงก์แรกเนาะ API แรกพัง

00:12:47.240 --> 00:12:49.600
พังด้วยเหตุผลอะไรไม่รู้ใช่มั้ย มันพัง

00:12:52.360 --> 00:12:53.996
อะ สิ่งที่เกิดขึ้นคืออะไรรู้ป่ะ

00:12:54.079 --> 00:12:57.560
อะ ตำแหน่งแรกจะเกิดไรขึ้นรู้ป่ะ รู้มั้ย

00:12:58.079 --> 00:12:58.800
อะไรเกิดไรครับ

00:13:02.480 --> 00:13:03.639
อันนั้นจะกลายเป็น reject

00:13:04.440 --> 00:13:06.906
แล้วก็ 2 3 ได้ data เหมือนเดิมถูกไหม

00:13:09.359 --> 00:13:11.116
จริงๆ ไม่ใช่นะ

00:13:11.199 --> 00:13:15.120
จริงๆ ก็คือเนี่ยมันดูเหมือนจะใช่แต่จริงๆ มันยังไม่ใช่

00:13:15.680 --> 00:13:19.480
ไอ้คำว่า all เนี่ยมันแปลว่ามันทำทุกตัวก็จริงนะ

00:13:19.720 --> 00:13:21.520
ถ้าทุกตัวสำเร็จอะเราได้ data นะ

00:13:22.120 --> 00:13:23.796
แต่ถ้ามีตัวใดตัวนึง fail อะ

00:13:23.879 --> 00:13:26.800
แม่งยกกระบุง fail หมดเลยนะถูกไหม

00:13:27.279 --> 00:13:29.519
อันเนี้ยก็เป็นบั๊กที่ผมเถียงกับน้อง junior เหมือนกัน

00:13:29.800 --> 00:13:34.037
ว่าเฮ้ยเขียนแบบเนี้ยไม่ได้บางทีนะมันไม่ได้เนาะ

00:13:34.120 --> 00:13:36.600
อีกเคสนึงถ้าบอกเอ้าแล้วพี่ถ้าผมอยากจะได้ล่ะ

00:13:36.839 --> 00:13:40.519
ผมอยากจะให้มันยิงทุกตัวเลย จะ fail ไม่ fail ไม่รู้ใช่ปะ

00:13:40.639 --> 00:13:43.560
เราใช้ตัวนี้ช่วย เคยเห็นปะ

00:13:45.040 --> 00:13:51.040
ไอ้เนี่ยคือมันบอกว่ามันไม่สนใจนะว่าจะ fail หรือจะ success ใช่ปะ

00:13:51.279 --> 00:13:53.116
ก็คือไอ้ตรงเนี้ยเหมือน all เมื่อกี้

00:13:53.199 --> 00:13:57.116
ก็คือยิงพร้อมกันหมดเลยแต่ว่ามันจะไม่ตายถ้ามัน fail เนาะ

00:13:57.199 --> 00:14:01.436
อันนั้นคือมันยิงทุกตัวครับ แล้วเอาผลลัพธ์มาบอกเรา

00:14:01.519 --> 00:14:03.037
นี่คือความต่างมีแค่นี้เนาะ

00:14:03.120 --> 00:14:06.717
คือสมมติว่าถ้าเราบอกว่าเราซีเรียสว่ายิงทุกตัวอะ

00:14:06.800 --> 00:14:08.837
มันมีโอกาสที่จะ fail กับไม่ fail ใช่มั้ย

00:14:08.920 --> 00:14:11.440
อย่างเช่นอะไรครับ มีใครบอกได้บ้าง

00:14:11.800 --> 00:14:13.560
API อะไม่ค่อยเจอหรอก

00:14:13.759 --> 00:14:19.756
แต่มันมีอันที่ผมเจอบ่อยมากเลยคือพวกต่อ SFTP ใช่ปะ

00:14:19.839 --> 00:14:21.439
มันเป็นอะไรที่แบบว่าต่อครั้งแรกได้

00:14:22.199 --> 00:14:24.160
ต่อครั้ง 2 ไม่ได้ ต่อครั้ง 3 ได้

00:14:24.560 --> 00:14:27.999
ต่อครั้ง 4 5 6 ไม่ได้เพราะว่า connection มันจะเต็มอยู่ถูกปะ

00:14:28.160 --> 00:14:30.660
เพราะฉะนั้นน่ะ ถ้าเราใช้ all ปุ๊บอะ

00:14:30.819 --> 00:14:32.837
บางทีคือมันจะ fail แบบ fail หมดเลยใช่ปะ

00:14:32.920 --> 00:14:34.957
บางทีคือมัน fail แบบ fail บางตัว

00:14:35.040 --> 00:14:37.517
แล้วก็แบบโปรแกรมมันจะเพี้ยนๆ อะไรอย่างเงี้ยครับ

00:14:37.600 --> 00:14:40.240
เพราะฉะนั้นน่ะเราจะต้องใช้ตัวนี้ช่วยในการเช็กว่า

00:14:40.759 --> 00:14:44.240
มันต่อได้ครบไหมแล้วแต่ละตัว status เป็นอะไรเนาะ

00:14:44.440 --> 00:14:47.879
โอเคครับ เข้าใจใช่ไหม

00:14:48.360 --> 00:14:50.640
ตัวนี้ครับตัวนี้อันนี้จริงๆ ผมไม่เคยใช้เลยนะ

00:14:58.519 --> 00:15:00.597
อันเนี้ยก็คือหมายความว่าตัวไหนเร็วสุดอะครับ

00:15:00.680 --> 00:15:01.919
ตัวนั้นน่ะได้ data ไป

00:15:02.560 --> 00:15:03.957
เวลาจะหมดแล้วผมพูดเยอะเกินไป

00:15:04.040 --> 00:15:05.436
ทีนี้สิ่งที่ผมเจอนะเจอแบบบ่อยๆ เลย

00:15:05.519 --> 00:15:06.717
ก็คือเวลาใช้ promise อะ

00:15:06.800 --> 00:15:07.717
เราเคยเจอ error แบบนี้ไหม

00:15:07.800 --> 00:15:10.240
ก็คือ request ใหญ่เกินไปใช่ปะ

00:15:10.680 --> 00:15:13.996
rate limit เนาะ

00:15:14.079 --> 00:15:16.237
error 500 ใช่มั้ย bad gateway ใช่มั้ย

00:15:16.320 --> 00:15:17.240
service พวกเนี้ยก็คือพัง

00:15:18.040 --> 00:15:22.756
555 นี่เคยเจอไหม

00:15:22.839 --> 00:15:24.319
518 โอเค ไม่เคยเจอเหมือนกันอะ

00:15:24.440 --> 00:15:26.157
เพราะฉะนั้นน่ะก็คือสิ่งที่ผมจะบอกเนาะ

00:15:26.240 --> 00:15:27.517
ก็คือเมื่อกี้เนี่ยเรารู้อยู่แล้วแหละ

00:15:27.600 --> 00:15:28.597
อาจจะไม่รู้บางอย่างเนาะ

00:15:28.680 --> 00:15:31.477
แต่ว่าสิ่งที่จะมีตัวช่วยให้เราทำได้เนาะ

00:15:31.560 --> 00:15:32.957
เนื่องจากเวลาผมจะหมดแล้วผมขอเร็วๆ แล้วกัน

00:15:33.040 --> 00:15:36.560
ก็คือมันจะมีตัวสิ่งที่เรียกว่า promise retry เนาะ

00:15:36.720 --> 00:15:39.717
ตัวเนี้ยก็คือเป็น lib ที่ผมมาชอบให้น้องจุ๊เนี่ยลองใช้ดู

00:15:39.800 --> 00:15:42.676
คือในกรณีที่เรายิง API ไปแล้วใช่มั้ย

00:15:42.759 --> 00:15:43.960
มัน fail รอบที่ 1 ใช่ปะ

00:15:44.480 --> 00:15:46.917
เราจะ handle ยังไงครับ ไม่รู้ถูกไหม

00:15:47.000 --> 00:15:50.157
เราต้องเขียนอะไร ยิงรอบที่ 2 มั้ย ยิงรอบที่ 3 มั้ยถูกไหม

00:15:50.240 --> 00:15:52.917
ซึ่งเราไม่มีทางรู้ว่ามันจะ success เมื่อไหร่ถูกปะ

00:15:53.000 --> 00:15:55.160
เพราะฉะนั้นไอ้คำว่า retry เนี่ยมันจะช่วยเราได้

00:15:55.519 --> 00:15:57.880
ก็คือเราแค่เอาคำว่า promise retry ไปครอบ

00:15:58.319 --> 00:16:02.090
ไปครอบสิ่งที่เราอยากจะให้มันรันก็คือตรงนี้เนาะ

00:16:02.173 --> 00:16:03.040
ดู something ตรงนี้

00:16:03.639 --> 00:16:04.840
ก็คือเราบอกว่าตรงเนี้ย

00:16:05.079 --> 00:16:08.360
ปกติ default มันคือจะ retry ประมาณ 10 รอบ

00:16:09.040 --> 00:16:09.717
แต่เราตั้งมันได้

00:16:09.800 --> 00:16:11.957
ก็คือแปลว่าสมมติรอบแรกยิง FTP ไม่ได้ใช่ปะ

00:16:12.040 --> 00:16:12.920
connect ไม่ได้ใช่ปะ

00:16:13.279 --> 00:16:15.400
ตรงเนี้ยมันจะ retry ของมันเอง

00:16:15.639 --> 00:16:19.559
รอบ 2 รอบ 3 จนกว่ามันจะ connect ได้แล้วมันก็จะต่อ

00:16:19.880 --> 00:16:22.040
เพราะฉะนั้นน่ะ น้องไม่ต้องไปเขียน promise 1 2 3 4 5

00:16:23.240 --> 00:16:26.277
พี่ผมจับไว้ 5 รอบ ต่อได้ชัวร์ใช่มั้ย

00:16:26.360 --> 00:16:28.199
มันอาจจะรอบที่ 6 ก็ได้ที่ต่อได้ใช่ปะ

00:16:28.600 --> 00:16:29.240
โอเคครับ

00:16:29.480 --> 00:16:31.280
อีกตัวนึงครับจะเป็น promise pool อันนี้

00:16:31.399 --> 00:16:34.879
อันนี้คุ้นๆ ไหมครับ promise pool รู้จักไหม

00:16:35.079 --> 00:16:39.040
เคยมีใครเคยใช้ promise pool บ้าง เคยไหมครับ

00:16:39.480 --> 00:16:40.360
ไม่เคยใช่มั้ยอะ

00:16:40.560 --> 00:16:41.756
คืออันเนี้ยปัญหาที่ผมเจอ

00:16:41.839 --> 00:16:47.077
คือสมมติว่าเราต้องการจะใช้ promise อะในการดึงเพจที่ 1 ถูกไหม

00:16:47.160 --> 00:16:47.999
ดึงเพจที่ 1 มา

00:16:48.160 --> 00:16:50.680
ปกติบนหน้าจอเราทำเพจ 1 เพจ 2 เพจ 3 ได้ถูกปะ

00:16:50.839 --> 00:16:54.720
แต่ว่าบางทีเราบอกว่าเราอยากจะ export data ออกมา

00:16:55.440 --> 00:17:00.360
สมมติ data มีอยู่ 1,000 รายการแล้วกัน

00:17:00.560 --> 00:17:04.799
ต้องยิงวนยิง promise อะ กี่รอบดีอะ

00:17:04.959 --> 00:17:05.679
10 รอบใช่ปะ

00:17:06.000 --> 00:17:08.399
10 รอบปุ๊บอะ เราเขียน promise 10 ตัวอะเกิดอะไรขึ้น

00:17:09.079 --> 00:17:10.879
บางทีอะมันไปชน rate limit ถูกไหม

00:17:11.000 --> 00:17:13.557
ชน rate limit ก็คือ AWS แม่งล็อกไปเลยว่า

00:17:13.640 --> 00:17:16.480
rate limit คือห้ามยิงเกินกี่ตัวต่อวินาทีถูกปะ

00:17:16.959 --> 00:17:19.400
ปัญหาก็คือเราจะยิงไม่ได้ใช่มั้ย

00:17:19.640 --> 00:17:20.996
เพราะฉะนั้นวิธีการก็คือเราจะใช้ตัวเนี้ยช่วย

00:17:21.079 --> 00:17:24.119
ช่วยในการทำเหมือนสร้าง pool ขึ้นมา

00:17:24.319 --> 00:17:28.277
เพื่อบอกว่าเฮ้ย ยิงทีละ 2 ตัวเนาะ

00:17:28.360 --> 00:17:31.080
คือยิงทีละ 2 ตัว ตัวใดตัวนึงเสร็จอะ

00:17:31.240 --> 00:17:32.439
เอาตัวที่ 3 มาเสียบ

00:17:32.679 --> 00:17:34.197
ตัวที่ 3 เสร็จเอาตัวที่ 4 มาเสียบ

00:17:34.280 --> 00:17:36.840
แต่ว่าในขณะเดียวกันน่ะมันจะยิงแม่ง 2 ตัวเสมอ

00:17:37.039 --> 00:17:39.596
อันเนี้ยเราจะสามารถหลบ rate limit ได้ใช่ปะ

00:17:39.679 --> 00:17:42.000
บางทีบอกว่าเฮ้ยมึงก็ไปบอก infra ดิ

00:17:42.280 --> 00:17:43.547
ให้ infra เปลี่ยน rate limit

00:17:44.693 --> 00:17:47.680
โอ้ มึงกล้าคุยกับเค้าไหมล่ะ

00:17:50.480 --> 00:17:52.238
ต่อมาครับก็เป็นเรื่องของอันเนี้ย

00:17:52.360 --> 00:17:53.677
ใครชอบใช้ axios หรอ

00:17:53.760 --> 00:17:55.956
มีเหมือนกันคือผมจะบอกว่ามันมีเหมือนกันนะครับ

00:17:56.039 --> 00:17:58.080
ก็คือใช้ในเคสเดียวกันนะครับ

00:17:59.400 --> 00:18:00.637
ตัวนี้นะครับ เหมือนกัน

00:18:00.720 --> 00:18:03.360
ก็คือเมื่อกี้ promise ใช่มั้ยเราเอา promise ไปครอบใช่ปะ

00:18:03.559 --> 00:18:06.117
ถ้าใครใช้ RxJS ก็คือเอา RxJS ไปครอบเหมือนกันเนาะ

00:18:06.200 --> 00:18:09.997
แต่แค่ lib เนี้ยมันจะช่วยทำให้เราไม่ต้องไปนั่งพะวง

00:18:10.080 --> 00:18:13.440
ว่ามันยิงรอบแรกได้ ยิงรอบ 2 ได้ รอบ 3 ไม่ได้อะไรอย่างเงี้ยใช่ปะ

00:18:13.559 --> 00:18:15.520
เราใช้วิธีเนี้ยในการทำ

00:18:15.720 --> 00:18:17.157
ซึ่งอันเนี้ยมันเป็น lib ที่มีอยู่แล้วนะครับ

00:18:17.240 --> 00:18:18.596
ก็คือเราสามารถ setting ได้เลยว่า

00:18:18.679 --> 00:18:19.880
เราอยากให้ยิงแบบกี่รอบ

00:18:20.320 --> 00:18:23.920
หรือยิง 1 รอบไม่ได้ใช่ปะรอ 5 วินาที

00:18:25.200 --> 00:18:26.800
รอบ 2 ไม่ได้รอ 10 วินาที

00:18:27.080 --> 00:18:28.679
รอบ 3 ไม่ได้รอ 20 วินาทีอย่างเงี้ย

00:18:31.640 --> 00:18:33.400
ไปอ่าน doc เอาเองนะครับ

00:18:34.360 --> 00:18:37.680
หมดแล้วอะ หมดรึยัง ยัง โอเค

00:18:38.919 --> 00:18:41.440
นะครับ ผมว่าผมหมดแหละ ประมาณนี้ครับ

00:18:41.540 --> 00:18:43.917
ที่อยากจะมาแชร์นะก็คือเป็นปัญหาโลกแตกแหละ

00:18:44.000 --> 00:18:45.997
ที่แบบใครใช้ promise ก็ต้องเจอเนาะ

00:18:46.080 --> 00:18:47.596
แล้วก็จะต้องทะเลาะกับน้อง dev อะไรอย่างเงี้ย

00:18:47.679 --> 00:18:50.476
ว่าแบบเฮ้ยโปรแกรมมันหน่วงโปรแกรมมันช้าอะไรเงี้ยนะครับ

00:18:50.559 --> 00:18:52.720
ก็ใช้พวกเนี้ยช่วยได้

00:18:53.400 --> 00:18:56.640
โอเคครับ

00:19:04.039 --> 00:19:04.359
ครับ

00:19:08.440 --> 00:19:12.596
ครับผม ก็ขอขอบคุณนะครับ พี่พีพีนะครับ

00:19:12.679 --> 00:19:17.079
ที่มาเล่าเรื่องของ promise นะครับผม

00:19:17.480 --> 00:19:18.836
แล้วก็มีเทคนิคต่างๆ ครับ

00:19:18.919 --> 00:19:22.199
ผมมีแบบการ retry การหลบ rate limit นะครับผม

00:19:22.840 --> 00:19:27.080
ต่อไปนะครับ ก็จะเป็นสู่ช่วงของการทำ Q&A นะครับ

00:19:27.320 --> 00:19:28.757
ก็อย่าลืมนะครับ

00:19:28.840 --> 00:19:30.596
เรามี encouragement ให้ทุกคนถามตอบ

00:19:30.679 --> 00:19:32.799
เรามีตั๋ว JetBrains 1 ปีนะครับ

00:19:32.960 --> 00:19:34.197
สำหรับคนที่ถาม meaningful question

00:19:34.280 --> 00:19:36.040
เกี่ยวกับเรื่อง promise นะครับผม

00:19:37.880 --> 00:19:39.959
มีคำถาม Q&A ตรงไหนมั้ยครับผม

00:19:40.440 --> 00:19:42.160
มีใครมีคำถามมั้ยครับผม

00:19:49.880 --> 00:19:53.397
มีคำถาม อาจจะไม่ได้เกี่ยวกับ promise ตรงๆ

00:19:53.480 --> 00:19:55.437
ก็เรื่องการใช้ async await อะครับ

00:19:55.520 --> 00:19:59.920
ก็คืออยากรู้ประมาณว่าเวลาเรามี 2 ฟังก์ชันเนาะ

00:20:00.600 --> 00:20:04.920
อันนี้พี่พอ ผมว่าพี่น่าจะมีความเข้าใจเรื่องของตัว MVC

00:20:05.240 --> 00:20:08.797
พวก repository level service level อะไรพวกนี้

00:20:08.880 --> 00:20:10.760
สมมุติมีฟังก์ชัน A จะ call ฟังก์ชัน B

00:20:11.320 --> 00:20:15.757
ซึ่งผมบอกว่าฟังก์ชัน B เป็น async แล้วมีการใช้ await

00:20:15.840 --> 00:20:18.320
คำถามคือฟังก์ชัน A ที่ไป call ฟังก์ชัน B อะ

00:20:18.880 --> 00:20:20.680
จะต้องกลายเป็น async await ด้วยมั้ย

00:20:20.799 --> 00:20:23.360
เพื่อที่จะเอา resolve data ออกมา

00:20:23.919 --> 00:20:25.280
อันนั้นคือที่ผมเข้าใจ

00:20:25.679 --> 00:20:27.880
ทีนี้ระหว่าง คือมันมี 2 ท่า

00:20:28.440 --> 00:20:30.039
1 คือ B return promise ตรงๆ

00:20:30.200 --> 00:20:33.076
กับ 2 ก็คือเป็น async await แบบที่ B level

00:20:33.159 --> 00:20:34.117
และที่ A level ด้วย

00:20:34.200 --> 00:20:36.237
แต่อยากรู้ว่ามันต่างกันแค่ไหนครับ

00:20:36.320 --> 00:20:37.557
ระหว่าง return promise ตรงๆ

00:20:37.640 --> 00:20:41.239
กับ async await ที่ low level

00:20:41.440 --> 00:20:42.956
และไป async await ที่ high level

00:20:43.039 --> 00:20:44.640
ในจุดที่เราอยากจะได้ result ด้วย

00:20:47.280 --> 00:20:48.520
พอเข้าใจคำถามอยู่แล้วครับ

00:20:50.080 --> 00:20:53.476
คือมันทำได้ 2 แบบเนาะ

00:20:53.559 --> 00:20:55.960
เดี๋ยวผมอาจจะ ถ้าเป็นคำถามเนี่ย

00:20:57.360 --> 00:20:58.440
เราน้องฝึกงานใช่มั้ย สมมุติ

00:20:59.053 --> 00:21:00.836
เคยเป็นน้องในทีมน้องฝึกงานอย่างงี้นะครับ

00:21:00.919 --> 00:21:02.357
ปกติผมก็จะบอกว่า

00:21:02.440 --> 00:21:05.280
คือถามว่าไอ้ตัวฟังก์ชันนั้นน่ะ มันได้ data เลยป่าว

00:21:05.400 --> 00:21:07.360
คือถ้าไม่ได้ data เลยใช่ป่ะ มันก็ไม่ต้องทำอะไร

00:21:08.200 --> 00:21:10.680
แต่ถ้ามันบอกว่า เฮ้ย อันเนี้ยมันต้องไป call API ใช่มั้ย

00:21:10.919 --> 00:21:12.360
มาได้ data มาก่อนใช่ป่ะ

00:21:12.720 --> 00:21:15.000
แล้วฟังก์ชันที่ 2 อะ มันต้องไป call FTP

00:21:15.559 --> 00:21:17.640
เพื่อได้ data เพื่อได้ connection มาก่อน

00:21:18.120 --> 00:21:20.520
แสดงว่าทั้ง 2 ตัว เราควรเปลี่ยน

00:21:20.840 --> 00:21:22.360
เราอาจจะใช้ไอ้ตัวเนี้ยครับไปครอบเลย

00:21:22.720 --> 00:21:24.400
ถ้าถามผมนะ ก็คือไปครอบเนาะ

00:21:24.520 --> 00:21:30.517
เอาไปครอบเพื่อบอกว่า เฮ้ย ถ้าคุณ resolve ข้อมูลได้แล้ว

00:21:30.600 --> 00:21:33.596
เราเอา data ที่ได้ไปหยอดใน resolve

00:21:33.679 --> 00:21:35.637
อันนั้นเราได้ data มาแล้ว 1 ก้อนใช่ป่ะ

00:21:35.720 --> 00:21:40.400
ส่วนอันที่ 2 อะครับ เราก็ให้มันไปต่อตัว FTP เนาะ

00:21:40.600 --> 00:21:42.399
เพื่อให้ได้ resolve ออกมาเหมือนกัน

00:21:43.120 --> 00:21:44.519
ทีเนี้ย จุดเนี้ยเราก็ดูว่า

00:21:44.679 --> 00:21:46.359
เราสามารถรันพร้อมกันเลยได้มั้ย

00:21:46.919 --> 00:21:47.960
พร้อมกันเลยคือเหมือนว่า

00:21:48.080 --> 00:21:52.000
เราจำเป็นจะต้องใช้ข้อมูลอันแรกเพื่อเอาไปต่อ FTP มั้ย

00:21:52.360 --> 00:21:54.397
ถ้าไม่ใช่ใช่ป่ะ เราก็ยิงพร้อมกันไปเลย

00:21:54.480 --> 00:21:57.917
ก็คือใช้ไอ้ตัว all เมื่อกี้อะก็ได้

00:21:58.000 --> 00:21:59.076
ก็คือให้มันยิงพร้อมกันไปเลย

00:21:59.159 --> 00:22:02.960
คือมึงดึงไฟล์ไป ก็คือขอโทษ ดึงข้อมูลไป ต่อ FTP ไป

00:22:03.559 --> 00:22:05.039
แต่ ณ จุดที่มันเสร็จพร้อมกันน่ะ

00:22:05.159 --> 00:22:08.196
เราถึงเอา 2 ฟังก์ชันนั้นมารวมกัน

00:22:08.279 --> 00:22:10.320
ก็เป็นวิธีที่สามารถเราลดเวลาได้

00:22:11.600 --> 00:22:14.240
โอเค ถ้างั้นผมขออนุญาตเพิ่ม context บริบทก่อน

00:22:14.760 --> 00:22:16.879
สมมุติที่มี application นึงเนาะ

00:22:17.279 --> 00:22:21.000
ที่ service level ที่ code ฟังก์ชันที่ service level

00:22:21.400 --> 00:22:25.039
ที่ไป call ตัว repository ฟังก์ชันนึง

00:22:25.559 --> 00:22:27.596
ซึ่งเป็นการที่ตัว repository เนี่ย

00:22:27.679 --> 00:22:29.720
ก็คือไป call เอาข้อมูลจาก database เนาะ

00:22:30.120 --> 00:22:34.317
ซึ่ง ณ การรอข้อมูลน่ะ จะเกิดที่ repository level

00:22:34.400 --> 00:22:35.400
low level ข้างล่าง

00:22:35.960 --> 00:22:40.119
ทีนี้ service จะมา call ข้อมูลที่ผ่าน repository ครับ

00:22:40.240 --> 00:22:41.320
คำถามของผมก็คือว่า

00:22:42.720 --> 00:22:44.201
ถ้าท่าปกติที่ผมทำอะนะ

00:22:44.600 --> 00:22:47.160
ผมจะแปลงตัว service เป็น async await ด้วย

00:22:47.840 --> 00:22:50.757
เพื่อที่ว่าเราจะเอา data ที่ได้จาก database เนี่ย

00:22:50.840 --> 00:22:52.840
จากที่ผ่าน repository ขึ้นมาเนี่ย

00:22:53.360 --> 00:22:55.119
เอามารัน logic นู่นนี่นั่น

00:22:55.799 --> 00:22:57.640
แต่ว่ามันมีอีกท่านึง

00:22:57.880 --> 00:23:01.799
ก็คือ repository ไม่ต้อง await โยน promise ขึ้นมาเลย

00:23:02.360 --> 00:23:04.476
แล้ว service อะค่อยไป await

00:23:04.559 --> 00:23:05.800
หรือว่าจะไป then resolve ทีหลัง

00:23:06.039 --> 00:23:08.836
คือผมอยากรู้ว่า 2 ท่าเนี้ย ที่ prefer

00:23:08.919 --> 00:23:13.230
หรือว่ามี insight พอดีขอ share สักหน่อยได้มั้ย

00:23:13.640 --> 00:23:15.076
ถ้าถามผมนะ ก็คือเป็นท่ายากเนาะ

00:23:15.159 --> 00:23:17.519
คือเป็นท่าที่มันยากขึ้นไปอีกหน่อยนึง

00:23:17.880 --> 00:23:19.360
ถ้าถามผมอะ จะเป็นท่าที่ 2

00:23:19.600 --> 00:23:21.200
ก็คือ โยน promise มาเลย

00:23:21.480 --> 00:23:24.120
แล้วเอา promise ไปทำงานต่อในอีกฟังก์ชันนึงก็ได้

00:23:24.520 --> 00:23:28.517
ก็คือไม่ต้องรอให้มันเสร็จใน level เนี้ยก็ได้

00:23:28.600 --> 00:23:30.037
อันเนี้ยที่ผมเคยทำเนาะ

00:23:30.120 --> 00:23:34.320
ก็คือดูดไฟล์จาก FTP อะครับ แล้วก็พุ่งขึ้น S3 เลย

00:23:35.000 --> 00:23:36.357
เคสเนี้ยน่าจะใช้ท่าที่บอก

00:23:36.440 --> 00:23:39.357
ก็คือไม่ต้องรอให้ไฟล์อะโหลดเข้ามาในเครื่องใช่ป่ะ

00:23:39.440 --> 00:23:42.879
เราเหมือนกับจับ promise 2 ตัว ต่อ pipeline

00:23:43.080 --> 00:23:45.919
แล้วก็ให้มัน data stream ขึ้นไปทั้งหมดเลย

00:23:47.360 --> 00:23:48.839
แต่ว่าคือถ้าทำได้ก็โอเคเลยนะ

00:23:48.960 --> 00:23:51.159
เพราะว่ามันก็จะเร็วกว่าตอนที่โหลด data มามารอ

00:23:51.799 --> 00:23:52.799
แล้วเอา data ไปทำต่อ

00:23:53.480 --> 00:23:54.637
แต่ถามว่าแบบลง detail กว่าเนี้ย

00:23:54.720 --> 00:23:55.956
ก็คือมันยิบย่อยละ

00:23:56.039 --> 00:23:58.357
เหมือนกับว่า ผมว่าผมอาจจะตอบไม่ได้เต็มที่เนาะ

00:23:58.440 --> 00:24:01.237
แต่ถ้าแบบเคยทำอยู่แล้วแล้วมันเวิร์กอะ

00:24:01.320 --> 00:24:04.076
ผมคิดว่าแบบที่ 2 ที่พูดเมื่อกี้นะ น่าจะเร็วกว่า

00:24:04.159 --> 00:24:07.759
เร็วกว่าแบบมานั่งรอ data แรกกับ data 2

00:24:08.159 --> 00:24:10.716
ถ้าเป็นอย่างงั้นนะ ท่าที่ 2 อะ ผมอะสงสัย

00:24:10.799 --> 00:24:12.157
อันนี้ขอเพิ่มนิดนึงละกันนะครับผม

00:24:12.240 --> 00:24:15.400
สงสัยแค่ว่า โอเค ตัวฟังก์ชันที่ repository

00:24:15.520 --> 00:24:16.521
ที่ return promise ไปอะ

00:24:17.120 --> 00:24:20.596
ปกติก็จะไม่ใส่ async mark ไว้ที่ฟังก์ชันเนาะ

00:24:20.679 --> 00:24:22.320
เพราะว่าพี่ return promise อยู่แล้ว

00:24:23.440 --> 00:24:25.677
แต่ว่าไอ้ตัวที่เรียกเป็น async อะไรเงี้ย

00:24:25.760 --> 00:24:28.159
มันจะทำให้เกิด อันนี้อาจจะเป็น preference ส่วนตัว

00:24:28.320 --> 00:24:30.959
เรื่อง readability ว่าเวลาอ่านมันจะงงมั้ย

00:24:31.640 --> 00:24:32.960
คือผมกำลังสงสัยอยู่ว่า

00:24:33.960 --> 00:24:36.117
โอเค คือปัญหาเนี่ย ของผมเนี่ย

00:24:36.200 --> 00:24:38.359
คือเรื่องของการ styling ของ code เนาะ

00:24:39.880 --> 00:24:42.476
เรา async await ที่ low level high level

00:24:42.559 --> 00:24:44.159
มา call ฟังก์ชันที่เป็น async await

00:24:44.679 --> 00:24:45.917
ก็ต้องกลายเป็น async await ด้วย

00:24:46.000 --> 00:24:48.117
เพราะว่าจะเอา data ไปทำอย่างอื่นด้วยนู่นนี่นั่น

00:24:48.200 --> 00:24:50.117
แล้วทีเนี้ยผมก็เลยเจอปัญหาที่ว่า

00:24:50.200 --> 00:24:52.279
มันเป็น async await เต็มไปหมดเลย

00:24:52.520 --> 00:24:54.280
ขึ้นไปถึง level สูงสุดอะไรเงี้ย

00:24:54.760 --> 00:24:58.800
แต่ทีเนี้ยพอมาพูดถึงอีกท่านึงที่ผม propose ไป

00:24:59.120 --> 00:25:00.560
ที่ว่า return เป็น promise

00:25:00.679 --> 00:25:02.920
ปัญหาที่เกิดขึ้นก็คือ เวลา track มัน

00:25:03.279 --> 00:25:05.476
ไอ้พวก error เนี่ย มันก็จะ trace ไม่ได้

00:25:05.559 --> 00:25:07.357
เพราะว่ามันไม่อยู่รอสักจุดเลย

00:25:07.440 --> 00:25:08.879
มัน return promise return promise

00:25:09.159 --> 00:25:11.637
เราไม่รู้ว่า data มันไปตายที่ตรงไหน

00:25:11.720 --> 00:25:13.479
เข้าใจครับ

00:25:13.960 --> 00:25:16.437
อันนี้เดี๋ยวน่าจะรบกวน speaker ท่านอื่น

00:25:16.520 --> 00:25:18.120
เดี๋ยวอันเนี้ยเราคุยกันส่วนตัวได้

00:25:18.679 --> 00:25:22.316
code ของ JavaScript จริงๆ มัน simple นะ

00:25:22.399 --> 00:25:23.437
อันนี้ผมก็เถียงกับน้องเหมือนกัน

00:25:23.520 --> 00:25:26.200
คือถ้าเราใส่ await ตรงนี้ปุ๊บใช่ป่ะ ปัญหาคืออะไร

00:25:26.360 --> 00:25:28.480
เราจะต้องใส่ async ที่ฟังก์ชัน

00:25:28.640 --> 00:25:29.557
แล้วมันก็จะเป็นอย่างที่เค้าบอก

00:25:29.640 --> 00:25:31.327
ก็คือ async await async await

00:25:31.448 --> 00:25:32.517
ทีนี้เมื่อกี้ที่เค้าถามก็คือ

00:25:32.600 --> 00:25:33.840
ถ้าเราตัด await ตรงนี้ออกอะ ได้เลย ได้เลย

00:25:34.279 --> 00:25:35.879
เราทำยังไง ใช่มั้ย

00:25:37.399 --> 00:25:39.880
โอเค เดี๋ยวคุยหลังไมค์ได้ครับ

00:25:41.880 --> 00:25:46.357
พี่ครับ อยากแจกตั๋ว JetBrains มั้ย

00:25:46.440 --> 00:25:48.960
คนนี้เค้า meaningful question มั้ย

00:25:52.000 --> 00:25:55.956
เค้า meaningful question แบบคำถามที่ดีสร้างสรรค์

00:25:56.039 --> 00:26:00.120
สร้างสรรค์ครับ แต่ว่าก็ยากอยู่ทั้งหมดเลย

00:26:00.240 --> 00:26:01.359
แต่ให้เป็น senior แล้วเนาะ

00:26:02.399 --> 00:26:04.599
ยังครับ ยังไม่เริ่มงานเลย ฝึกงาน

00:26:05.240 --> 00:26:07.136
อย่างถ้าเป็นผมเนี่ยก็ senior แล้วนะ

00:26:07.219 --> 00:26:09.200
คำถามยากเหลือเกินเนี่ย ผมปวดหัวอะ

00:26:09.320 --> 00:26:10.076
ได้ครับ ครับผม

00:26:10.159 --> 00:26:13.480
เดี๋ยวเชิญรับนะครับ ตั๋ว JetBrains นะครับผม

00:26:20.279 --> 00:26:22.480
ขอขอบคุณพี่พีพีด้วยนะครับผม

00:26:24.960 --> 00:26:25.480
เสียงปรบมือครับ
