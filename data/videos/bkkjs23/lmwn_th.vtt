WEBVTT - Auto-generated by https://github.com/dtinth/autosub

00:00:03.600 --> 00:00:04.320
FC ครับ

00:00:08.639 --> 00:00:12.160
ยังไม่ขึ้นสไลด์ โอเค แป๊บนึงนะครับ

00:00:13.280 --> 00:00:17.800
โอเคครับ อันนี้เนื้อหาเบาๆ เนาะ

00:00:17.960 --> 00:00:21.240
เราฟังเรื่องแบบค่อนข้างมีสาระกันมาเยอะละครับ

00:00:22.880 --> 00:00:25.677
วันนี้เดี๋ยวมาพูดถึง จะเป็นการแชร์ประสบการณ์เนาะ

00:00:25.760 --> 00:00:28.679
การสร้าง library ecosystem ใน LINE MAN Wongnai ครับ

00:00:28.960 --> 00:00:31.436
ก็โอเค ก่อนอื่นแนะนำตัวก่อนเนาะ

00:00:31.519 --> 00:00:34.920
ก็ผมโอ๊ตครับ เป็น Staff Software Engineer

00:00:35.360 --> 00:00:36.640
ที่ LINE MAN Wongnai ครับ

00:00:37.480 --> 00:00:41.397
ครับผม ก็โอเควันนี้เราจะมาคุยอะไรกันบ้างเนาะ

00:00:41.480 --> 00:00:46.440
ก็เรามาคุยเรื่องของอะไรคือ library ecosystem นะ

00:00:46.640 --> 00:00:49.077
บางคนอาจจะไม่เคยได้ยินมาก่อนนะ

00:00:49.160 --> 00:00:51.799
จริงๆ ผมก็อาจจะคิดคำนี้ขึ้นมาเองก็ได้ ไม่รู้เหมือนกัน

00:00:52.280 --> 00:00:54.557
รวมถึง library ecosystem ใน LINE MAN Wongnai

00:00:54.640 --> 00:00:56.080
เนี่ยมันเป็นยังไงบ้างครับ

00:00:56.280 --> 00:00:58.600
เราจะเล่าเรื่องราวว่าทำไมมันถึงเกิดขึ้น

00:00:58.800 --> 00:01:00.920
ทำไมถึงมี แล้วตอนนี้มันมีอะไรบ้าง

00:01:01.359 --> 00:01:05.199
แล้วก็ถ้าเกิดเราอยากมี library ecosystem เนี่ย

00:01:05.360 --> 00:01:10.639
เราจะต้องมีการวาง infra อะไรบ้างในการทำมันขึ้นมาครับผม

00:01:11.200 --> 00:01:14.160
โอเค ก่อนอื่น เรามาเริ่มที่ library กันก่อนนะ

00:01:14.799 --> 00:01:19.957
จริงๆ ทุกคนในที่นี้น่าจะคุ้นเคยกับคำว่า library อยู่แล้วนะ

00:01:20.040 --> 00:01:22.517
เพราะทุกวันเนี้ย โค้ดที่เราเขียนอ่ะ มันมีอยู่แค่นิดเดียว

00:01:22.600 --> 00:01:24.557
ที่เหลือเราลง 𝚗𝚘𝚍𝚎_𝚖𝚘𝚍𝚞𝚕𝚎𝚜 ที่เป็น library

00:01:24.640 --> 00:01:25.600
กันเต็มไปหมดเลย

00:01:27.079 --> 00:01:31.237
แต่วันเนี้ยครับ หลักๆ เราจะไม่ได้มาพูดถึงเรื่องของการใช้

00:01:31.320 --> 00:01:31.877
library นะ

00:01:31.960 --> 00:01:34.200
เราจะมาพูดถึงการสร้าง library ขึ้นมาครับ

00:01:36.320 --> 00:01:38.837
ถ้าเกิดเราเป็นคนที่สร้าง library อย่างผมอ่ะ

00:01:38.920 --> 00:01:40.279
สร้าง library ใช้ในองค์กรเนาะ

00:01:40.720 --> 00:01:43.837
ก็วันแรกๆ ที่สร้างครับ เราก็จะรู้ว่า purpose

00:01:43.920 --> 00:01:44.957
ของมันอ่ะเล็กนิดเดียว

00:01:45.040 --> 00:01:46.399
เรากะจะทำแค่ไม่เยอะ

00:01:46.880 --> 00:01:50.559
แต่พอทำไปเรื่อยๆ อ่ะครับเนาะ แบบมันบวมน้ำขึ้นมา

00:01:50.799 --> 00:01:54.760
แบบ lib เราเนี่ยทำได้แบบแทบจะทุกอย่างเลยทีเนี้ย

00:01:55.159 --> 00:01:56.759
มันก็เลยเกิดปัญหาขึ้นมาครับ

00:01:57.039 --> 00:02:01.840
การที่แบบ library อ่ะ มันทำหน้าที่นึงเยอะเกินไปใช่ป่ะ

00:02:02.240 --> 00:02:05.797
มันก่อให้เกิดการซับซ้อนในการที่เราจะต้อง maintenance

00:02:05.880 --> 00:02:06.439
มันครับ

00:02:06.799 --> 00:02:08.676
มันก็จะแบบเริ่มแก้ยากขึ้นเรื่อยๆ

00:02:08.759 --> 00:02:11.680
เออ คนที่กินพิซซ่าอยู่ตรงนั้นน่ะ แก้ยากใช่ป่ะ

00:02:12.480 --> 00:02:14.000
เค้าร้องไห้ไม่อยากแก้แล้ว

00:02:15.920 --> 00:02:19.600
แล้วก็อีกอย่างนึงคือ library บางตัวเนี่ย เราสร้างมาใช่ป่ะ

00:02:19.760 --> 00:02:23.317
ให้ใช้ได้กับทั้งภาษา JavaScript อ่ะ

00:02:23.400 --> 00:02:25.920
มันทำเป็น server ก็ได้ เป็น node ก็ได้

00:02:26.080 --> 00:02:28.519
เป็นทำ mobile app React Native

00:02:28.680 --> 00:02:30.236
หรือแม้กระทั่งเขียนเว็บอะไรเงี้ย

00:02:30.319 --> 00:02:31.317
มันทำได้หมดทุกอย่างเลย

00:02:31.400 --> 00:02:34.236
บางทีเราอ่ะสร้างเหมือน library มาตัวนึงใช่ป่ะ

00:02:34.319 --> 00:02:35.440
เรากะจะกวาดหมดเลย

00:02:35.680 --> 00:02:37.680
มันใช้ได้หมดทุก environment เลยทีเนี้ย

00:02:37.800 --> 00:02:43.160
ฉิบหายครับ เราเริ่มแก้มันยากขึ้นเรื่อยๆ นะ

00:02:43.599 --> 00:02:47.720
ยากขึ้นแบบ โอ้ เราทำไงมัน ทำไงกับมันดีนะ

00:02:48.760 --> 00:02:50.199
อันนี้คือ library เราครับ

00:02:50.360 --> 00:02:51.557
ถ้าเกิดเราทำไปนานๆ ใช่ป่ะ

00:02:51.640 --> 00:02:54.559
เราก็จะรู้ว่า บึ้ม มันทิ้งดีกว่า

00:02:55.000 --> 00:02:56.516
เราแตก library ครับ

00:02:56.599 --> 00:02:58.557
ให้แต่ละตัวเนี่ยมันมีหน้าที่ของมันเอง

00:02:58.640 --> 00:03:00.597
แล้วโอเค แล้วเราค่อยเอามาใช้

00:03:00.680 --> 00:03:04.160
เอาแต่ละอันอ่ะมาใช้ร่วมกัน กลายเป็น ecosystem ครับ

00:03:05.000 --> 00:03:06.716
ซึ่งอันเนี้ยแหละคือ library ecosystem

00:03:06.799 --> 00:03:08.716
การที่เรามี library หลายๆ ตัวอ่ะ

00:03:08.799 --> 00:03:10.520
เราเอามันมาทำงานร่วมกัน

00:03:11.080 --> 00:03:11.440
ครับผม

00:03:12.400 --> 00:03:15.876
โอเค จริงๆ library ecosystem ไม่ได้เป็นเรื่องใหม่อะไรเลย

00:03:15.959 --> 00:03:17.759
จริงๆ ทุกวันเนี้ยมันอยู่รอบตัวเรา

00:03:18.000 --> 00:03:20.240
ในตลาดอ่ะครับ มี library ecosystem

00:03:20.720 --> 00:03:22.680
ที่แบบเราคุ้นเคยกันอยู่มากมาย

00:03:23.200 --> 00:03:25.277
ไม่ว่าจะเป็นในกลุ่มของ React เนาะ

00:03:25.360 --> 00:03:29.280
เรามี React ที่ทำหน้าที่ในการ render view ขึ้นมา

00:03:29.920 --> 00:03:33.356
ซึ่งแล้วเราก็มี React DOM ในการทำหน้าที่

00:03:33.439 --> 00:03:36.000
แบบแสดงผล view ออกมาเป็น string

00:03:36.360 --> 00:03:38.516
หรือออกมาเป็น DOM ขึ้นมาจริงๆ

00:03:38.599 --> 00:03:40.880
หรือ React Native ที่เป็น mobile ครับผม

00:03:41.319 --> 00:03:45.919
แล้วก็ทุกวันเนี้ย จริงๆ อันนี้ช่วงนี้ก็มาแรงมาก TanStack เนาะ

00:03:46.519 --> 00:03:48.876
ก็ TanStack เนี่ยก็ ecosystem เค้าแบบโครตโหดเลย

00:03:48.959 --> 00:03:50.440
มีตั้งแต่ starter, router, query

00:03:51.280 --> 00:03:55.597
อย่าง query ผมก็ใช้อยู่ก็โอเคนะ ครับผม

00:03:55.680 --> 00:03:58.080
แล้วก็อีกตัวนึงก็คือ Material UI ครับ

00:03:58.200 --> 00:04:02.197
Material UI เนี่ยก็ ecosystem เค้าก็มี library

00:04:02.280 --> 00:04:04.800
ที่หลายๆ ตัวเลยที่สามารถทำงานแยกกันได้ด้วย

00:04:05.280 --> 00:04:07.679
เดี๋ยวจะเอามาใช้ร่วมกันมันก็โอเคเลยครับผม

00:04:08.439 --> 00:04:10.559
ทีเนี้ยมาพูดถึง LINE MAN Wongnai กันบ้างครับ

00:04:10.959 --> 00:04:13.597
ก็โอเค LINE MAN Wongnai ภาพจำของทุกคนเนาะ

00:04:13.680 --> 00:04:15.356
อาจจะคิดว่า LINE MAN Wongnai อ่ะ

00:04:15.439 --> 00:04:17.400
มันมีแค่ LINE MAN มีแค่วงในใช่ป่ะ

00:04:17.600 --> 00:04:20.160
แต่ว่าตอนเนี้ย เรามี LINE Play ด้วย

00:04:20.639 --> 00:04:23.077
ครับ อันนี้อยากให้ทุกคนจำ 3 domain นี้ไว้นะ

00:04:23.160 --> 00:04:25.200
เดี๋ยวเราจะมาเล่าเรื่องกันว่ามันเกิดอะไรขึ้น

00:04:25.639 --> 00:04:28.277
ก่อนอื่นเดี๋ยวผมขอเจาะไปที่ LINE MAN ก่อน

00:04:28.360 --> 00:04:29.920
LINE MAN ภาพจำทุกคนอ่ะ

00:04:31.000 --> 00:04:33.799
ใครๆ ก็รู้ว่า LINE MAN เป็นแอป food delivery นะ

00:04:34.759 --> 00:04:37.197
ทีเนี้ย หลายคนอาจจะสงสัยว่า

00:04:37.280 --> 00:04:39.600
เอ้า มันเป็นแอปแล้วมันมีเว็บตรงไหนอ่ะ

00:04:40.800 --> 00:04:43.159
มีใครเคยรู้ป่ะ เรามีเว็บตรงไหน

00:04:44.000 --> 00:04:45.520
ข้างหลังโดนสปอยอ่ะ ไม่เอา

00:04:47.080 --> 00:04:50.880
โอเค จริงๆ อ่ะ LINE MAN อ่ะมี web view หลายตัวเลยครับ

00:04:51.039 --> 00:04:52.999
อยู่เบื้องหลังใน application

00:04:53.280 --> 00:04:56.836
ซึ่งจริงๆ อ่ะ บางหน้าที่เราใช้อยู่อ่ะ

00:04:56.919 --> 00:04:59.159
มันค่อนข้างเนียนที่จะเป็นแบบ

00:04:59.400 --> 00:05:01.560
มันเป็นเว็บก็จริงอ่ะ แต่มันเนียนเป็นแอปมากเลย

00:05:01.759 --> 00:05:06.013
เพราะการทำเอา web view มาใช้ในการทำ application อ่ะ

00:05:06.479 --> 00:05:09.240
ต้อง มันมีข้อดีคือมันสามารถ release ได้ไว

00:05:09.400 --> 00:05:11.077
แล้วก็ไม่ต้องรอรอบ app version

00:05:11.160 --> 00:05:14.520
ที่แบบรอ App Store, Play Store review ครับผม

00:05:15.840 --> 00:05:17.880
นอกจากเนี้ย เรายังมี lib อีกด้วย

00:05:18.240 --> 00:05:20.719
LINE MAN บน lib ไม่แน่ใจมีใครเคยใช้หรือเปล่า

00:05:21.240 --> 00:05:22.680
เออ เฮ้ย สุดยอด

00:05:24.360 --> 00:05:26.396
เออ เดี๋ยวเอาโค้ดส่วนลด LINE MAN ไป 100 นึงเลย

00:05:26.479 --> 00:05:31.000
เดี๋ยวผมให้ ครับผม โอเค

00:05:34.039 --> 00:05:36.240
ทั้งหมดเนี้ย เราก็จะเห็นว่าแบบเนี่ย

00:05:36.440 --> 00:05:39.120
มันมี web application กระจายอยู่เต็มไปหมดเลยนะ

00:05:39.639 --> 00:05:42.920
ทั้ง web view หลายตัว มีทั้ง lib อะไรอย่างงี้

00:05:44.080 --> 00:05:47.960
ผลปรากฏก็คือ พอเรามี web application กระจายอยู่หลายที่

00:05:48.360 --> 00:05:49.400
สิ่งที่ตามมาก็คือ

00:05:49.600 --> 00:05:51.760
เราอ่ะมีโค้ดที่ค่อนข้างคล้ายกันอ่ะครับ

00:05:52.440 --> 00:05:53.439
อยู่เต็มไปหมดเลย

00:05:54.120 --> 00:05:56.157
แล้วก็อย่างที่ผมเล่าให้ฟังนะว่า

00:05:56.240 --> 00:05:59.520
เราอ่ะมี 3 domain ในเครือบริษัทใช่ป่ะ

00:06:00.600 --> 00:06:03.637
ไอ้เหตุการณ์แบบเนี้ยเกิดขึ้นทั้งวงใน ทั้ง LINE Play

00:06:03.720 --> 00:06:07.480
เรามี web application แบบเต็มมาก เยอะสุดๆ เลยอ่ะ

00:06:08.120 --> 00:06:10.157
มันก็มีโค้ดคล้ายๆ กันเนาะ

00:06:10.240 --> 00:06:11.797
เพราะว่าโค้ด frontend อ่ะ

00:06:11.880 --> 00:06:12.956
ถ้าไม่นับเรื่อง domain อ่ะ

00:06:13.039 --> 00:06:14.717
มันก็จะมีโค้ด setup โค้ดอะไรต่างๆ

00:06:14.800 --> 00:06:16.799
หลายส่วนเลยที่มันคล้ายๆ กันในนั้นหมดครับ

00:06:17.639 --> 00:06:17.959
โอเค

00:06:19.840 --> 00:06:20.797
โค้ดอะไรที่คล้ายกันบ้าง

00:06:20.880 --> 00:06:22.919
component UI นะ

00:06:23.039 --> 00:06:25.903
เพราะว่า web application ออกมาใน domain เดียวกัน

00:06:25.986 --> 00:06:28.037
หลายๆ ตัว ก็ต้องมี design system เดียวกัน

00:06:28.120 --> 00:06:30.879
เราต้องทำ UI หน้าตาเหมือนๆ กันอยู่เต็มไปหมดเลย

00:06:31.560 --> 00:06:35.880
แล้วก็สิ่งถัดมาก็คือเรื่องของ repeat logic นะ

00:06:36.000 --> 00:06:39.720
กับตัว feature บางอย่างที่แบบมันอาจทำงานอยู่บน

00:06:42.720 --> 00:06:46.556
feature มันอาจจะอยู่บน LINE อยู่บน WebView อะไรอย่างเงี้ย

00:06:46.639 --> 00:06:51.160
อาจจะมีฟีเจอร์ซ้ำกันบางอย่างก็ซ้ำกันไปซ้ำกันมาครับ

00:06:53.000 --> 00:06:54.116
เรื่องปัญหาซ้ำๆ กันเนี่ย

00:06:54.199 --> 00:06:57.480
เราก็จะแก้ไขปัญหามันด้วยการสร้าง library ขึ้นมาใช่ไหม

00:06:58.080 --> 00:07:00.519
แต่การสร้าง library ตัวนึงครับ

00:07:01.479 --> 00:07:03.197
มันตอนที่ set up มันขึ้นมา

00:07:03.280 --> 00:07:05.080
จริงๆ ไม่ใช่แค่ library project ทุกอย่าง

00:07:05.240 --> 00:07:07.000
set up ขึ้นมาใครก็ไม่อยาก set นะ

00:07:07.199 --> 00:07:08.279
มันเป็นเรื่องปวดหัว

00:07:08.400 --> 00:07:11.680
เราต้อง set ทั้งเรื่องของ code formatting ครับ

00:07:11.960 --> 00:07:13.597
set environment นะ

00:07:13.680 --> 00:07:15.839
อันนี้ run บน Node ได้ run บน mobile

00:07:16.080 --> 00:07:19.836
run บน browser อะไรอย่างงี้

00:07:19.919 --> 00:07:22.080
browser รุ่นไหน WebView รุ่นไหน

00:07:23.240 --> 00:07:24.317
รวมถึง output ท้าย

00:07:24.400 --> 00:07:29.520
เพราะสมัยนี้ก็มี ESM มี CJS มี UMD type มันเยอะไปหมดเลย

00:07:30.800 --> 00:07:33.836
เรื่องพวกนี้มันตอน set up บ่อยๆ อะ

00:07:33.919 --> 00:07:35.639
มันก็จิตใจเหนื่อยล้านะ

00:07:36.479 --> 00:07:38.877
ไบรอัน โฟลต์ ตัวเทพ

00:07:38.960 --> 00:07:42.480
เราก็คิดค้นสิ่งที่มาเปลี่ยนแปลงโลกไปตลอดกาลครับ

00:07:42.720 --> 00:07:45.079
เขาเอาความซับซ้อนยัดลงกล่องครับ

00:07:45.360 --> 00:07:47.679
สร้างเป็น library ชื่อว่า kleros

00:07:47.879 --> 00:07:52.877
ที่เป็นเหมือนตัวที่มาช่วย set up library ทุกตัวในบริษัทครับ

00:07:52.960 --> 00:07:54.796
หลังจากนี้ library ทุกตัวในบริษัท

00:07:54.879 --> 00:07:58.520
มันก็เลยใช้ kleros เนี่ยแหละ set ขึ้นมา

00:07:59.199 --> 00:08:00.917
ทำให้จากเรื่องยากๆ อะ

00:08:01.000 --> 00:08:05.279
มันก็เขียนโค้ดแค่ 3 บรรทัดเราได้ library ขึ้นมาละ

00:08:07.400 --> 00:08:12.000
ถัดมาก็ด้วยความที่ project เราเยอะมาก เยอะจริงๆ

00:08:12.240 --> 00:08:14.799
เราต้องขึ้น project ขึ้น web app บ่อยครับ

00:08:15.639 --> 00:08:17.836
การขึ้น web app ก็เป็น pain อย่างนึงนะ

00:08:17.919 --> 00:08:20.997
เราต้องขึ้น web app ที่เป็น client-side rendering

00:08:21.080 --> 00:08:22.197
แล้วมัน render บนไหนได้บ้าง

00:08:22.280 --> 00:08:23.840
เป็น LINE หรือเป็นอะไรใช่ไหม

00:08:24.000 --> 00:08:28.956
เราก็คงจะไม่อยากสร้าง web app แบบขึ้นเองใหม่

00:08:29.039 --> 00:08:31.116
อย่างนี้ก็เป็น Vite config นะ

00:08:31.199 --> 00:08:34.237
เมื่อก่อนเป็น Webpack ก็จะทรมานลากไส้เลยครับ

00:08:34.320 --> 00:08:37.237
เราก็เลยสร้าง library ขึ้นมาที่จะช่วยในเรื่องนี้

00:08:37.320 --> 00:08:41.196
เราเปรียบเสมือนการทำ web app มันคือการทำอาหารจานนึง

00:08:41.279 --> 00:08:44.840
ในเคสนี้คือการทำข้าวหน้าหมูทอดวรจักรคลาสสิก

00:08:45.320 --> 00:08:50.478
ที่เราจะปรุงแต่งมันด้วย library มากมาย

00:08:50.880 --> 00:08:54.879
ที่เป็น library ในเรื่องของการ set up build time

00:08:55.000 --> 00:08:58.480
library ที่ช่วยในการ set up เรื่อง runtime hook error

00:08:59.560 --> 00:09:03.117
รวมถึง library ที่ช่วยในการทำตัว formatting นะ

00:09:03.200 --> 00:09:05.840
linting ต่างๆ แล้วก็เขียน test

00:09:06.360 --> 00:09:07.677
ใครๆ ก็อาจจะหยีกับการเขียน test นะ

00:09:07.760 --> 00:09:11.840
แต่ว่าเราทำให้การเขียน test มันง่ายมาก ง่ายนิดเดียวครับผม

00:09:12.360 --> 00:09:14.732
รวมถึงที่เนี่ยเราไม่ใช้ 𝚌𝚛𝚎𝚊𝚝𝚎-𝚟𝚒𝚝𝚎-𝚊𝚙𝚙 หรอก

00:09:14.815 --> 00:09:15.839
เราไม่ทำกันแบบนั้น

00:09:16.000 --> 00:09:17.437
เรามี 𝚌𝚛𝚎𝚊𝚝𝚎-𝚠𝚘𝚛𝚊𝚌𝚑𝚊𝚔-𝚌𝚕𝚊𝚜𝚜𝚒𝚌

00:09:17.520 --> 00:09:21.840
ที่ตึ้งเดียวได้ project สวยๆ ออกมาเลยครับผม

00:09:23.279 --> 00:09:26.360
ด้วยทั้งหมดเนี่ยเราก็สร้าง web application นะ

00:09:26.480 --> 00:09:28.557
แต่ว่าปัญหาที่เราพูดข้างต้นนะ

00:09:28.640 --> 00:09:31.080
ตัว repeat UI มันก็ยังเกิดขึ้นอยู่

00:09:31.519 --> 00:09:33.597
เต็มไปหมดเลยใน web application ของเรา

00:09:33.680 --> 00:09:38.196
เราเลยต้องทำ library ที่มาทำ design system ของ UI

00:09:38.279 --> 00:09:39.200
ในแต่ละ domain นะ

00:09:39.920 --> 00:09:43.240
ก็จะมี LINE MAN UI LINE Pay UI แล้วก็วงใน UI

00:09:43.480 --> 00:09:45.996
แต่การทำ library design system อะ

00:09:46.079 --> 00:09:48.240
ก็จะมีเรื่องคล้ายๆ กันเต็มไปหมดเลยครับ

00:09:49.680 --> 00:09:52.397
เราก็เลยจำเป็นที่จะต้องทำ library ขึ้นมาอีกตัวนึง

00:09:52.480 --> 00:09:54.316
ที่มาจัดการเรื่องที่คล้ายๆ กันเนี่ย

00:09:54.399 --> 00:09:57.560
ก็จะเป็น Core UI ที่มี utility สำหรับการทำ UI

00:09:57.880 --> 00:09:59.477
ที่แบบไม่ specific กับ domain

00:09:59.560 --> 00:10:02.397
ถ้าให้นึกภาพมันอาจจะเป็นพวกแบบ Base Material UI

00:10:02.480 --> 00:10:05.280
หรือว่า Bootstrap อะไรอย่างเงี้ยเมื่อก่อนครับผม

00:10:09.800 --> 00:10:11.637
เราพูดถึงตัว repeat feature นะ

00:10:11.720 --> 00:10:13.040
repeat logic เต็มไปหมดเลย

00:10:14.800 --> 00:10:19.600
เราก็เอาพวก feature พวกนั้นมายัดลงใน LINE MAN SDK

00:10:19.720 --> 00:10:21.639
วงใน SDK เป็น library ที่เราขึ้นมาอีก

00:10:22.079 --> 00:10:26.717
แล้วเราก็ทำตัวในส่วนของ utils library ในบริษัท

00:10:26.800 --> 00:10:29.477
แล้วก็มีในส่วนของตัว hooks นะ

00:10:29.560 --> 00:10:31.436
เพราะที่เนี่ยจะเขียน React กันเป็นหลักเลย

00:10:31.519 --> 00:10:34.840
ก็จะมีตัว hooks ในการมาจัดการพวกนี้

00:10:35.320 --> 00:10:37.637
นอกจากนี้ทุกอย่างที่เราพูดมาครับ

00:10:37.720 --> 00:10:39.800
เราจับมันมารวมกัน มัน reuse กันได้หมดเลย

00:10:40.120 --> 00:10:43.840
กลายเป็น ecosystem ตัวนึงที่แบบค่อนข้างสมบูรณ์เลย

00:10:44.120 --> 00:10:46.063
LINE MAN UI จะใช้ตัว utils ก็ได้

00:10:46.147 --> 00:10:49.200
Core UI ใช้ utils ได้อะไรพวกนี้ครับผม

00:10:51.240 --> 00:10:55.237
อีกสิ่งนึงที่เรามักจะเกิดขึ้นในการทำ software development

00:10:55.320 --> 00:10:56.720
คือเรากะพริบตาไม่กี่ที

00:10:57.480 --> 00:10:58.920
library ข้างนอกที่เราใช้ครับ

00:10:59.120 --> 00:11:05.277
เราใช้ library ข้างในบริษัทอย่างเดียวอะ มันไม่ได้หรอก

00:11:05.360 --> 00:11:06.717
มันต้องใช้ library ข้างนอกมาช่วย

00:11:06.800 --> 00:11:09.316
ในการทำเรื่องที่มันเคยมีคนทำอยู่แล้ว

00:11:09.399 --> 00:11:11.237
ให้ทำได้อย่างง่ายดายครับ

00:11:11.320 --> 00:11:12.797
แต่ว่าเรากะพริบตาแป๊บเดียว

00:11:12.880 --> 00:11:14.840
เอ้า ไม่กี่ปีมัน breaking change ละ

00:11:15.720 --> 00:11:18.477
สักพักนึง เอ้า มัน deprecated ว่ะ อะไรอย่างเงี้ย

00:11:18.560 --> 00:11:22.599
หรือสักพักนึง เอ้า maintainer หายทำไงดีอะครับ

00:11:23.959 --> 00:11:25.996
นั่นแหละ สิ่งที่เราต้องทำในเคสเหล่านี้

00:11:26.079 --> 00:11:28.477
ก็คือการที่เราต้องเปลี่ยน library นะ

00:11:28.560 --> 00:11:32.079
ซึ่งอย่างที่บอกเรามี web application เยอะสุดๆ เลย

00:11:33.000 --> 00:11:35.196
เปลี่ยน library ครั้งนี้ต้องไล่ไปหลายโปรเจคมาก

00:11:35.279 --> 00:11:36.556
แล้วมันค่อนข้างเหนื่อยมาก

00:11:36.639 --> 00:11:38.637
เพราะมันก็ต้องมี migrate breaking change

00:11:38.720 --> 00:11:40.240
ของแต่ละโปรเจคเยอะมาก

00:11:40.920 --> 00:11:44.357
เราก็เลยทำสิ่งที่เรียกว่า library wrapper ครับ

00:11:44.440 --> 00:11:47.077
ในเคสนี้เราจะยกตัวอย่างของ wrapper library

00:11:47.160 --> 00:11:48.200
ตัวนึงในบริษัทนะ

00:11:48.600 --> 00:11:52.196
ก็คือในส่วนของการทำ analytics นะครับ

00:11:52.279 --> 00:11:56.357
ก็ให้เปรียบเหมือนการทำ analytics

00:11:56.440 --> 00:11:58.397
การที่เราแบบ perform analytics

00:11:58.480 --> 00:12:01.677
ตรงไปที่ analytics แต่ละเจ้าอะ เหมือนผักสดครับ

00:12:01.760 --> 00:12:05.160
วันนึงเรากินผักสดแล้วมันก็หอม มันไม่อร่อย

00:12:05.480 --> 00:12:08.120
วันนึง product อาจจะบอกว่าไม่อยากกินผักนี้

00:12:09.040 --> 00:12:10.440
อยากจะเปลี่ยนไปกินผักอื่น

00:12:10.680 --> 00:12:13.080
เราต้องแก้โค้ดทั้งโปรเจคเลยรึเปล่า

00:12:13.680 --> 00:12:15.240
ที่นี่เราไม่ทำแบบนั้นครับ

00:12:15.360 --> 00:12:19.277
เราหาแป้ง burrito มาห่อ analytics

00:12:19.360 --> 00:12:21.316
เป็นหลีบอีกตัวนึง มา wrap ผักสดนี้

00:12:21.399 --> 00:12:23.480
แล้วเค้าก็แค่เลือกเปลี่ยนผักข้างในอะ

00:12:24.399 --> 00:12:26.397
แล้ว dev ก็ไม่ต้องแก้โค้ดอะไรเยอะ

00:12:26.480 --> 00:12:27.880
แก้แค่ wrapper ข้างใน

00:12:28.680 --> 00:12:32.600
แล้วโค้ดที่มัน perform อะ มันก็ perform ไปได้ปกติเลยครับผม

00:12:33.880 --> 00:12:36.996
แล้วทั้งหมดนี้มันก็เอามาใช้ใน ecosystem

00:12:37.079 --> 00:12:38.920
ของเราได้อีกทีนึงเหมือนกัน

00:12:39.600 --> 00:12:42.517
แล้วก็ซึ่งอย่างที่บอกนะ เราใช้ตอนนี้

00:12:42.600 --> 00:12:44.316
เรามี ecosystem ที่ค่อนข้างสมบูรณ์มาก

00:12:44.399 --> 00:12:48.359
เรามี clear roadmap ในการสร้าง library ทั้งหมดออกมา

00:12:48.800 --> 00:12:51.079
แล้วก็เราก็มีตัวของ Wallaby Cluster

00:12:51.399 --> 00:12:53.520
ในการสร้าง web application ออกมา

00:12:53.920 --> 00:12:55.717
ซึ่งทั้งหมดทั้งมวลนี้ก็มาใช้ร่วมกัน

00:12:55.800 --> 00:12:58.880
กลายเป็น library ecosystem ใน LINE MAN Wongnai ครับ

00:12:59.279 --> 00:13:01.436
ก็เหมือนคำกล่าวของซีซาร์ครับ

00:13:01.519 --> 00:13:04.120
แต่ไม่ใช่ซีซาร์นี้ เป็นซีซาร์นี้ครับ

00:13:04.639 --> 00:13:08.440
Library อยู่รวมกันเราแข็งแกร่งครับ

00:13:10.959 --> 00:13:14.199
ต่อให้มีคนมาขอให้เราขึ้นเว็บอีกกี่เว็บใช่ไหม

00:13:14.760 --> 00:13:15.799
เฮ้ย เราไม่กลัวละ

00:13:16.440 --> 00:13:20.279
ขึ้นอีกกี่เว็บทั้งวันก็ทำได้ครับ

00:13:22.920 --> 00:13:24.957
การเรื่องราวของ library ก็จบประมาณนี้

00:13:25.040 --> 00:13:27.480
แต่ว่า session นี้ยังไม่จบเพราะเรามี end credit

00:13:27.839 --> 00:13:31.000
ก็คือถ้าเกิดคุณอยากมี library ecosystem

00:13:31.160 --> 00:13:34.640
ไปใช้เป็นของตัวเองนะ เราจะต้องมีอะไรบ้าง

00:13:35.360 --> 00:13:39.323
คุณต้องมี repository platform ใช่ไหม

00:13:39.839 --> 00:13:42.157
ถ้าเกิดเป็นใครแบบอยาก open source

00:13:42.240 --> 00:13:44.720
ก็ใช้ npm public ก็ได้ หรือ private เค้าก็มีนะ

00:13:45.279 --> 00:13:49.399
แต่ที่นี่เราจะใช้เป็น Sonatype Nexus repository เองครับ

00:13:51.240 --> 00:13:54.756
ถ้า library ทำ library เดียวอะไรใช้ repository เดียวใช่ไหม

00:13:54.839 --> 00:13:57.720
แต่พอมันเยอะๆ แล้วมันต้องแก้บ่อยๆ รวมกันใช่ไหม

00:13:58.160 --> 00:14:00.280
เราอาจจะมาใช้เป็น monorepo ก็ได้

00:14:00.399 --> 00:14:01.717
ก็จะช่วย solve ปัญหานี้ครับ

00:14:01.800 --> 00:14:04.399
ใช้ nx หรือ Turborepo ก็ได้ set ไม่ยากครับ

00:14:04.680 --> 00:14:07.837
ถ้าเกิดไม่เคยมีใครรู้จักตัว monorepo มาก่อน

00:14:07.920 --> 00:14:09.320
ก็เรามีบล็อกครับ

00:14:09.600 --> 00:14:12.825
ที่สรร technical specialist ฝั่ง engineer สุเทพของเรา

00:14:12.909 --> 00:14:17.480
เคยเขียนบล็อกเอาไว้ใน live.lineman.com ครับ

00:14:17.759 --> 00:14:19.676
ก็ไปลองดูกันได้ครับ

00:14:19.759 --> 00:14:22.719
แค่ 3 นาทีคุณก็มี monorepo ของตัวเองได้แล้ว

00:14:23.240 --> 00:14:26.480
ไปกด git clone ก็ได้นะ ได้เลยทันทีครับ

00:14:26.759 --> 00:14:30.357
แล้วก็สุดท้ายนี้ก็คือการทำ library

00:14:30.440 --> 00:14:32.637
นะก็จะมีเรื่องของ package versioning ครับ

00:14:32.720 --> 00:14:34.720
ก็เราต้อง tag version นะ

00:14:36.440 --> 00:14:38.477
อย่าง tool ที่เราแนะนำก็จะมี semantic release

00:14:38.560 --> 00:14:40.120
ที่ช่วยในการ tag version

00:14:40.600 --> 00:14:46.118
สำหรับอันนี้จะเหมาะกับตัว repository ธรรมดามากกว่า

00:14:46.320 --> 00:14:47.477
จะไม่เหมาะกับ monorepo เท่าไหร่

00:14:47.560 --> 00:14:50.840
ถ้า monorepo จะแนะนำ changesets ใช้แล้วโคตรดีครับผม

00:14:51.320 --> 00:14:52.120
อันนี้ก็จะช่วย

00:14:52.519 --> 00:14:54.037
สิ่งที่มันดีกว่า versioning อื่นๆ

00:14:54.120 --> 00:14:56.199
คือมันทำ conventional changelog

00:14:56.360 --> 00:14:57.560
เราแค่ commit git อะ

00:14:58.000 --> 00:14:59.080
มัน gen changelog ออกมา

00:14:59.399 --> 00:15:02.680
gen ตัว version ออกมาตาม git ของเราที่ commit เลยครับ

00:15:03.320 --> 00:15:05.957
สุดท้ายนี้ก็จบ session เพียงเท่านี้ครับ

00:15:06.040 --> 00:15:08.679
ก็ถ้าเกิดทุกคนในเองก็มีได้นะ

00:15:08.880 --> 00:15:12.637
library ecosystem ของตัวเองอะครับผม ง่ายๆ ครับ

00:15:12.720 --> 00:15:13.560
ก็ขอบคุณครับ

00:15:13.800 --> 00:15:16.000
ก็ใครมีคำถามอะไรก็สามารถถามได้เลยครับ

00:15:18.079 --> 00:15:21.200
ก็จบไปแล้วนะครับ สำหรับ session ของพี่โอ๊ตนะครับผม

00:15:21.759 --> 00:15:25.280
กับตัว internal library นะครับใน LINE MAN Wongnai ครับผม

00:15:26.000 --> 00:15:29.320
ต่อไปนะครับก็ตามเคยครับ เข้าสู่ session Q&A ครับ

00:15:29.560 --> 00:15:30.797
มีใครมีคำถามมั้ยครับ

00:15:30.880 --> 00:15:34.597
อาจจะเป็นคำถามเรื่อง engineering practice

00:15:34.680 --> 00:15:37.360
อาจจะเป็นคำถามกับใช้ lib อะไรบ้าง

00:15:37.680 --> 00:15:39.440
ใน LINE MAN Wongnai ได้ครับ

00:15:39.920 --> 00:15:43.157
อย่าลืมนะครับว่าเรามีแจก license JetBrains นะครับ

00:15:43.240 --> 00:15:45.639
แล้วก็เราแจก 2 ครั้ง 2 ใบนะครับ

00:15:45.839 --> 00:15:49.479
เพราะว่ารอบที่แล้วเค้าพบมารอบนี้ด้วยนะครับผม

00:15:50.959 --> 00:15:51.236
มีมั้ยครับ

00:15:51.319 --> 00:16:01.157
โอเคครับ

00:16:01.240 --> 00:16:06.040
ใครอยากถามว่า วิธีการ test lib ที่สร้างขึ้นมา

00:16:06.759 --> 00:16:09.040
เราจะมั่นใจได้ยังไงว่า lib ที่เราทำ

00:16:11.160 --> 00:16:13.556
ไม่ไประเบิดโค้ดที่ import lib อันไปอ่ะครับ

00:16:13.639 --> 00:16:18.679
โอเคครับ ในส่วนของการ ensure ว่า lib ของเราทำงานได้ถูกต้องนะ

00:16:18.959 --> 00:16:24.679
เรามี unit testing ครับ ในตัวของทุกฟังก์ชันที่อยู่ใน library

00:16:25.279 --> 00:16:27.077
แล้วก็มี integration test ครับ

00:16:27.160 --> 00:16:30.480
แล้วก็ในส่วนของตัวปลายทางโปรเจคครับ

00:16:31.079 --> 00:16:34.597
QA ของเรา provide พวก automate testing E2E ครับ

00:16:34.680 --> 00:16:36.797
เราใช้ Playwright ในการ test ครับ

00:16:36.880 --> 00:16:40.037
ก็แบบว่าตอนนี้เรามีการ ensure ตั้งแต่ library

00:16:40.120 --> 00:16:41.037
ตัวโปรเจคเอง

00:16:41.120 --> 00:16:43.077
จริงๆ ในตัวโปรเจคเองตอนที่เอา library ไปใช้

00:16:43.160 --> 00:16:45.639
ก็มีในส่วนของ integration test เหมือนกันครับ

00:16:46.120 --> 00:16:48.917
มันก็จะ ensure ได้ว่า lib เราเอาไปลงที่ไหน

00:16:49.000 --> 00:16:50.436
แล้วมันก็จะไม่แตกครับ

00:16:50.519 --> 00:16:56.439
ครับผม หมายความว่าเราทำ integration test ในตัว lib

00:16:56.799 --> 00:17:01.236
แล้วก็เช็กว่าเวลาเรา lib เนี่ยไป import เราทำได้เลยถูกไหม

00:17:01.319 --> 00:17:01.839
ใช่ครับ

00:17:02.199 --> 00:17:03.236
โอเคครับ แล้ว test ใน lib

00:17:03.319 --> 00:17:05.639
แล้วก็ test โปรเจคปลายทางด้วยครับ

00:17:06.199 --> 00:17:13.279
โอเค ขอบคุณสำหรับคำถามนะครับ

00:17:13.679 --> 00:17:15.756
มีคำถามอีกไหมครับ

00:17:15.839 --> 00:17:18.239
เรายังเหลือ JetBrains อีก 1 ใบนะครับผม

00:17:20.679 --> 00:17:21.037
มีไหมครับ

00:17:21.120 --> 00:17:24.677
พอดีพี่คนเมื่อกี้เขามี JetBrains อยู่แล้ว

00:17:24.760 --> 00:17:26.440
ถ้าผมเอาไปแจกอีกมันจะเป็น 2 ปี

00:17:27.039 --> 00:17:29.680
มีใครมีคำถามอีกไหมครับ

00:17:34.520 --> 00:17:35.956
บังเอิญหรือเปล่านะครับ

00:17:36.039 --> 00:17:37.840
เดี๋ยวๆ เชิญทีละท่านนะครับ

00:17:39.840 --> 00:17:42.040
ครับ มีวิธีการตั้งชื่อ lib ยังไงบ้างครับ

00:17:43.400 --> 00:17:46.000
โอเคครับ ก็วิธีการชื่อ lib ของที่นี่

00:17:46.120 --> 00:17:48.476
จริงๆ เคยมีคนกล่าวไว้ครับ

00:17:48.559 --> 00:17:51.359
เป็น SDE ตัวท็อปของบริษัทเรานะ พี่มนัสวิน

00:17:51.720 --> 00:17:54.877
เขาเคยกล่าวไว้ว่าถ้าเราตั้งชื่อ lib ที่มัน specify เกินไป

00:17:54.960 --> 00:17:57.277
เราจะขยาย scope ของ lib ไม่ได้ครับ

00:17:57.360 --> 00:17:59.397
แล้วมันก็จะเป็นการ fix ตายตัวเกินไปว่า

00:17:59.480 --> 00:18:01.680
lib นั้นมันจะต้องทำหน้านั้นไปตลอดกาล

00:18:02.679 --> 00:18:04.596
แล้วบริษัทเราทำงานเกี่ยวกับอาหารครับ

00:18:04.679 --> 00:18:06.999
เราเลยเอาชื่ออาหารมาตั้งเป็นชื่อ lib ครับ

00:18:11.159 --> 00:18:12.520
เดี๋ยวอีกคำถามนึงนะครับ

00:18:14.720 --> 00:18:17.716
มีโอกาสที่ Waraji Katsu จะ release เป็น public

00:18:17.799 --> 00:18:19.320
ให้คนภายนอกใช้ไหมครับ

00:18:20.159 --> 00:18:24.237
จริงๆ plan การ release Waraji Katsu เป็น public

00:18:24.320 --> 00:18:26.917
ถูกคิดเอาไว้ตั้งแต่ตอนเริ่มสร้าง library แล้วครับ

00:18:27.000 --> 00:18:30.437
จริงๆ ในตัว library มันมีการแบ่งส่วนของ

00:18:30.520 --> 00:18:35.076
ส่วนที่เป็น internal logic กับส่วนที่เป็น logic ที่ public ได้ครับ

00:18:35.159 --> 00:18:37.557
เพียงแต่ตอนนี้เราอยากจะมั่นใจก่อนว่า

00:18:37.640 --> 00:18:41.040
ไอ้ที่เราทำมาเนี่ย ดีจริงหรือเปล่าครับ

00:18:41.159 --> 00:18:43.716
แต่ว่าวันนึงที่มันเรารู้สึกว่ามันค่อนข้าง stable แล้ว

00:18:43.799 --> 00:18:45.440
เรา wrap ทุกอย่างสมบูรณ์แล้ว

00:18:45.559 --> 00:18:49.117
เราจะ release มันออกมาเป็น open source project ครับ

00:18:49.200 --> 00:18:51.560
public logic แน่นอนครับ

00:18:52.000 --> 00:18:54.280
โอเคครับผม

00:18:54.640 --> 00:18:56.079
มีคำถามอีกไหมครับผม

00:18:57.159 --> 00:18:58.040
มีใครอยากถาม

00:18:58.520 --> 00:18:58.880
ครับผม

00:19:04.280 --> 00:19:06.197
เราจะรู้ได้ไงครับว่าเราควรเขียน lib เพิ่ม

00:19:06.280 --> 00:19:07.476
หรือว่าไม่ควรเขียน lib เพิ่ม

00:19:07.559 --> 00:19:12.117
แล้วก็เราจะ maintain ยังไงดี

00:19:12.200 --> 00:19:18.440
สมมุติว่าเราต้องมาแก้ lib ของคนที่ไม่ได้อยู่แล้วครับ

00:19:19.880 --> 00:19:21.437
โอเค เดี๋ยวแบ่งประเด็นก่อนเนาะ

00:19:21.520 --> 00:19:26.760
เรื่องของการรู้ได้ยังไงว่าเราจะต้องเขียนตัว library เพิ่มใช่ป่ะครับ

00:19:26.880 --> 00:19:29.117
ส่วนมากมันอย่างกรณีของผม

00:19:29.200 --> 00:19:31.437
ผมมองว่า logic ที่มันค่อนข้าง common น่ะครับ

00:19:31.520 --> 00:19:34.840
common script อันนี้เราเอาไปทำเป็น library เลย

00:19:35.440 --> 00:19:38.000
รวมถึง logic ที่เราเห็นว่ามันมีการเริ่ม repeat

00:19:38.320 --> 00:19:39.437
repeat ไม่เยอะอาจจะไม่เป็นไร

00:19:39.520 --> 00:19:40.800
แต่พอเริ่ม repeat เยอะละ

00:19:41.120 --> 00:19:45.397
อันนี้ดูเป็น practice หรือดูเป็น repeat feature เยอะๆ

00:19:45.480 --> 00:19:47.920
อันนี้เราจะเอาไปไว้ใน library เหมือนกันครับ

00:19:48.640 --> 00:19:52.437
แล้วก็ในส่วนของเรื่องการ maintain เนาะ

00:19:52.520 --> 00:19:54.640
สมมุติถ้าคนที่ออกไปแล้วจะ maintain ยังไง

00:19:55.280 --> 00:20:00.197
จริงๆ ในแต่ละ library เราครับ

00:20:00.280 --> 00:20:03.080
เราพยายาม set code convention ให้มันมีความใกล้เคียงกัน

00:20:03.280 --> 00:20:06.197
จริงๆ ที่นี่ก็จะมีตัว project convention

00:20:06.280 --> 00:20:09.637
ที่ apply ใช้กับทุก frontend team อ่ะครับ

00:20:09.720 --> 00:20:11.397
ถ้า base เดียวกันเราก็จะแปลว่า

00:20:11.480 --> 00:20:14.836
เราสามารถ transfer คนไปทำแต่ละ project ได้

00:20:14.919 --> 00:20:18.720
โดยที่ไม่ต้องกลัวของมันมี breaking change เยอะอ่ะครับ

00:20:19.120 --> 00:20:20.517
เพราะเราก็จะเข้าใจอยู่ละ

00:20:20.600 --> 00:20:24.557
รวมถึงเรามี automate testing ในการป้องกันปัญหาพวกนี้ด้วย

00:20:24.640 --> 00:20:25.720
แล้วก็ unit test ครับ

00:20:31.159 --> 00:20:33.480
มีใครมีคำถามอีกมั้ยครับผม

00:20:37.720 --> 00:20:40.917
อยากทราบว่าที่ LINE MAN Wongnai มี plan จะใช้ monorepo มั้ยครับ

00:20:41.000 --> 00:20:43.400
หรือถ้าเคยใช้แล้วรู้สึกมี pain point อะไรมั้ย

00:20:43.600 --> 00:20:45.680
กับ scale บริษัทใหญ่ขนาดนี้

00:20:45.880 --> 00:20:50.520
จริงๆ เรามีการ apply monorepo กับในส่วนของตัว

00:20:51.240 --> 00:20:54.437
internal project ที่เป็น web แล้วก็ในส่วนของ library ครับ

00:20:54.520 --> 00:20:59.039
แต่ว่ายังอยู่ในขั้นของการทดลองแล้วกัน

00:20:59.159 --> 00:21:06.677
ในส่วนของ project ที่เป็น web เนาะ

00:21:06.760 --> 00:21:10.716
เราพบว่ามันจะมีสิ่งที่มันจะยากขึ้นน่ะครับ

00:21:10.799 --> 00:21:13.639
คือการ set up pipeline ในการ deploy

00:21:13.960 --> 00:21:16.397
ใน repository มันจะมีความ complex

00:21:16.480 --> 00:21:18.160
มากกว่าเรา set repository เดียว

00:21:18.360 --> 00:21:21.279
แต่ข้อดีของมันก็คือสมมุติถ้า project เหล่านั้น

00:21:21.480 --> 00:21:24.280
มันมี dependency อะไรต่อกันเยอะอ่ะครับ

00:21:24.520 --> 00:21:27.000
เราทำทีเดียวอ่ะมันก็ไปหมดเลย

00:21:29.640 --> 00:21:30.680
อย่างในเคสของเรานะ

00:21:30.799 --> 00:21:33.760
ในสำหรับ project เราเอามาทำกับ micro frontend ครับ

00:21:33.960 --> 00:21:35.596
มันก็เลยค่อนข้างตอบโจทย์ในส่วนนี้

00:21:35.679 --> 00:21:37.279
แต่ในส่วนของ project ที่มันแยกกัน

00:21:38.200 --> 00:21:42.560
ก็ยังคิดว่าเป็น repository ธรรมดาก็อาจจะยังตอบโจทย์กว่าครับ

00:21:42.840 --> 00:21:44.397
ในส่วนของที่เป็น library

00:21:44.480 --> 00:21:47.919
ก็อันนี้เราลองกับตัว Waraji Katsu ตัวแรกเลย

00:21:48.440 --> 00:21:50.637
ก็อันนี้ค่อนข้างดีครับ

00:21:50.720 --> 00:21:55.320
เพราะ Waraji Katsu เป็น library ที่มีการ depend กันค่อนข้างเยอะ

00:21:55.880 --> 00:21:57.840
ตอน release ครับมันจะ release ง่ายมาก

00:21:58.240 --> 00:22:01.400
พอมันเป็นแบบมาอยู่ใน repository เดียวครับ

00:22:01.520 --> 00:22:04.959
ก็จะมีการใช้ตัว monorepo ที่ลอง set up กันขึ้นมาครับผม

00:22:16.559 --> 00:22:21.599
งั้นเดี๋ยวถึงเวลาแจก JetBrains นะครับ

00:22:21.720 --> 00:22:24.280
ต้องถามว่าอยากแจกกี่ใบดีครับผม

00:22:39.159 --> 00:22:42.400
เลือก 2 คน เอ่อ เลือกได้ครับ

00:22:45.600 --> 00:22:46.720
ใครอยากได้ JetBrains บ้าง

00:22:47.240 --> 00:22:51.120
มีใครจากคนที่ถามคำถามเมื่อกี้มีใครอยากได้ JetBrains บ้างครับผม

00:23:03.320 --> 00:23:14.560
เดี๋ยวผมจะสุ่มเลขขึ้นมาตัวนึงนะ แล้วเราก็นับวนไป

00:23:19.039 --> 00:23:21.039
ผมเอาเลข 11 แล้วกัน

00:23:21.320 --> 00:23:39.800
ยินดีด้วยครับผม

00:23:40.600 --> 00:23:52.199
คุณอาจจะไม่ได้ทำอะไรเลยแต่ได้ตั๋ว JetBrains ไปใช้ฟรี 1 ปีครับผม

00:23:55.720 --> 00:23:58.400
ขอให้สนุกกับ session ถัดไปครับ ขอบคุณครับ
